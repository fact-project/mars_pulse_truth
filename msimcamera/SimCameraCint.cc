//
// File generated by rootcint at Mon Nov 28 11:06:47 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SimCameraCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SimCameraCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MSimPSF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimPSF(void *p = 0);
   static void *newArray_MSimPSF(Long_t size, void *p);
   static void delete_MSimPSF(void *p);
   static void deleteArray_MSimPSF(void *p);
   static void destruct_MSimPSF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimPSF*)
   {
      ::MSimPSF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimPSF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimPSF", ::MSimPSF::Class_Version(), "./MSimPSF.h", 12,
                  typeid(::MSimPSF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimPSF::Dictionary, isa_proxy, 4,
                  sizeof(::MSimPSF) );
      instance.SetNew(&new_MSimPSF);
      instance.SetNewArray(&newArray_MSimPSF);
      instance.SetDelete(&delete_MSimPSF);
      instance.SetDeleteArray(&deleteArray_MSimPSF);
      instance.SetDestructor(&destruct_MSimPSF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimPSF*)
   {
      return GenerateInitInstanceLocal((::MSimPSF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimPSF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimGeomCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimGeomCam(void *p = 0);
   static void *newArray_MSimGeomCam(Long_t size, void *p);
   static void delete_MSimGeomCam(void *p);
   static void deleteArray_MSimGeomCam(void *p);
   static void destruct_MSimGeomCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimGeomCam*)
   {
      ::MSimGeomCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimGeomCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimGeomCam", ::MSimGeomCam::Class_Version(), "./MSimGeomCam.h", 18,
                  typeid(::MSimGeomCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimGeomCam::Dictionary, isa_proxy, 4,
                  sizeof(::MSimGeomCam) );
      instance.SetNew(&new_MSimGeomCam);
      instance.SetNewArray(&newArray_MSimGeomCam);
      instance.SetDelete(&delete_MSimGeomCam);
      instance.SetDeleteArray(&deleteArray_MSimGeomCam);
      instance.SetDestructor(&destruct_MSimGeomCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimGeomCam*)
   {
      return GenerateInitInstanceLocal((::MSimGeomCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimGeomCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimRandomPhotons_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimRandomPhotons(void *p = 0);
   static void *newArray_MSimRandomPhotons(Long_t size, void *p);
   static void delete_MSimRandomPhotons(void *p);
   static void deleteArray_MSimRandomPhotons(void *p);
   static void destruct_MSimRandomPhotons(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimRandomPhotons*)
   {
      ::MSimRandomPhotons *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimRandomPhotons >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimRandomPhotons", ::MSimRandomPhotons::Class_Version(), "./MSimRandomPhotons.h", 17,
                  typeid(::MSimRandomPhotons), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimRandomPhotons::Dictionary, isa_proxy, 4,
                  sizeof(::MSimRandomPhotons) );
      instance.SetNew(&new_MSimRandomPhotons);
      instance.SetNewArray(&newArray_MSimRandomPhotons);
      instance.SetDelete(&delete_MSimRandomPhotons);
      instance.SetDeleteArray(&deleteArray_MSimRandomPhotons);
      instance.SetDestructor(&destruct_MSimRandomPhotons);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimRandomPhotons*)
   {
      return GenerateInitInstanceLocal((::MSimRandomPhotons*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimRandomPhotons*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimAPD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimAPD(void *p = 0);
   static void *newArray_MSimAPD(Long_t size, void *p);
   static void delete_MSimAPD(void *p);
   static void deleteArray_MSimAPD(void *p);
   static void destruct_MSimAPD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimAPD*)
   {
      ::MSimAPD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimAPD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimAPD", ::MSimAPD::Class_Version(), "./MSimAPD.h", 20,
                  typeid(::MSimAPD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimAPD::Dictionary, isa_proxy, 4,
                  sizeof(::MSimAPD) );
      instance.SetNew(&new_MSimAPD);
      instance.SetNewArray(&newArray_MSimAPD);
      instance.SetDelete(&delete_MSimAPD);
      instance.SetDeleteArray(&deleteArray_MSimAPD);
      instance.SetDestructor(&destruct_MSimAPD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimAPD*)
   {
      return GenerateInitInstanceLocal((::MSimAPD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimAPD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimBundlePhotons_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimBundlePhotons(void *p = 0);
   static void *newArray_MSimBundlePhotons(Long_t size, void *p);
   static void delete_MSimBundlePhotons(void *p);
   static void deleteArray_MSimBundlePhotons(void *p);
   static void destruct_MSimBundlePhotons(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimBundlePhotons*)
   {
      ::MSimBundlePhotons *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimBundlePhotons >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimBundlePhotons", ::MSimBundlePhotons::Class_Version(), "./MSimBundlePhotons.h", 17,
                  typeid(::MSimBundlePhotons), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimBundlePhotons::Dictionary, isa_proxy, 4,
                  sizeof(::MSimBundlePhotons) );
      instance.SetNew(&new_MSimBundlePhotons);
      instance.SetNewArray(&newArray_MSimBundlePhotons);
      instance.SetDelete(&delete_MSimBundlePhotons);
      instance.SetDeleteArray(&deleteArray_MSimBundlePhotons);
      instance.SetDestructor(&destruct_MSimBundlePhotons);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimBundlePhotons*)
   {
      return GenerateInitInstanceLocal((::MSimBundlePhotons*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimBundlePhotons*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimCalibrationSignal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimCalibrationSignal(void *p = 0);
   static void *newArray_MSimCalibrationSignal(Long_t size, void *p);
   static void delete_MSimCalibrationSignal(void *p);
   static void deleteArray_MSimCalibrationSignal(void *p);
   static void destruct_MSimCalibrationSignal(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimCalibrationSignal*)
   {
      ::MSimCalibrationSignal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimCalibrationSignal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimCalibrationSignal", ::MSimCalibrationSignal::Class_Version(), "./MSimCalibrationSignal.h", 18,
                  typeid(::MSimCalibrationSignal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimCalibrationSignal::Dictionary, isa_proxy, 4,
                  sizeof(::MSimCalibrationSignal) );
      instance.SetNew(&new_MSimCalibrationSignal);
      instance.SetNewArray(&newArray_MSimCalibrationSignal);
      instance.SetDelete(&delete_MSimCalibrationSignal);
      instance.SetDeleteArray(&deleteArray_MSimCalibrationSignal);
      instance.SetDestructor(&destruct_MSimCalibrationSignal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimCalibrationSignal*)
   {
      return GenerateInitInstanceLocal((::MSimCalibrationSignal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimCalibrationSignal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimExcessNoise_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimExcessNoise(void *p = 0);
   static void *newArray_MSimExcessNoise(Long_t size, void *p);
   static void delete_MSimExcessNoise(void *p);
   static void deleteArray_MSimExcessNoise(void *p);
   static void destruct_MSimExcessNoise(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimExcessNoise*)
   {
      ::MSimExcessNoise *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimExcessNoise >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimExcessNoise", ::MSimExcessNoise::Class_Version(), "./MSimExcessNoise.h", 12,
                  typeid(::MSimExcessNoise), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimExcessNoise::Dictionary, isa_proxy, 4,
                  sizeof(::MSimExcessNoise) );
      instance.SetNew(&new_MSimExcessNoise);
      instance.SetNewArray(&newArray_MSimExcessNoise);
      instance.SetDelete(&delete_MSimExcessNoise);
      instance.SetDeleteArray(&deleteArray_MSimExcessNoise);
      instance.SetDestructor(&destruct_MSimExcessNoise);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimExcessNoise*)
   {
      return GenerateInitInstanceLocal((::MSimExcessNoise*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimExcessNoise*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTruePhotonsPerPixelCont_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTruePhotonsPerPixelCont(void *p = 0);
   static void *newArray_MTruePhotonsPerPixelCont(Long_t size, void *p);
   static void delete_MTruePhotonsPerPixelCont(void *p);
   static void deleteArray_MTruePhotonsPerPixelCont(void *p);
   static void destruct_MTruePhotonsPerPixelCont(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTruePhotonsPerPixelCont*)
   {
      ::MTruePhotonsPerPixelCont *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTruePhotonsPerPixelCont >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTruePhotonsPerPixelCont", ::MTruePhotonsPerPixelCont::Class_Version(), "./MTruePhotonsPerPixelCont.h", 22,
                  typeid(::MTruePhotonsPerPixelCont), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTruePhotonsPerPixelCont::Dictionary, isa_proxy, 4,
                  sizeof(::MTruePhotonsPerPixelCont) );
      instance.SetNew(&new_MTruePhotonsPerPixelCont);
      instance.SetNewArray(&newArray_MTruePhotonsPerPixelCont);
      instance.SetDelete(&delete_MTruePhotonsPerPixelCont);
      instance.SetDeleteArray(&deleteArray_MTruePhotonsPerPixelCont);
      instance.SetDestructor(&destruct_MTruePhotonsPerPixelCont);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTruePhotonsPerPixelCont*)
   {
      return GenerateInitInstanceLocal((::MTruePhotonsPerPixelCont*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTruePhotonsPerPixelCont*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimCamera_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimCamera(void *p = 0);
   static void *newArray_MSimCamera(Long_t size, void *p);
   static void delete_MSimCamera(void *p);
   static void deleteArray_MSimCamera(void *p);
   static void destruct_MSimCamera(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimCamera*)
   {
      ::MSimCamera *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimCamera >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimCamera", ::MSimCamera::Class_Version(), "./MSimCamera.h", 25,
                  typeid(::MSimCamera), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimCamera::Dictionary, isa_proxy, 4,
                  sizeof(::MSimCamera) );
      instance.SetNew(&new_MSimCamera);
      instance.SetNewArray(&newArray_MSimCamera);
      instance.SetDelete(&delete_MSimCamera);
      instance.SetDeleteArray(&deleteArray_MSimCamera);
      instance.SetDestructor(&destruct_MSimCamera);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimCamera*)
   {
      return GenerateInitInstanceLocal((::MSimCamera*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimCamera*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimTrigger(void *p = 0);
   static void *newArray_MSimTrigger(Long_t size, void *p);
   static void delete_MSimTrigger(void *p);
   static void deleteArray_MSimTrigger(void *p);
   static void destruct_MSimTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimTrigger*)
   {
      ::MSimTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimTrigger", ::MSimTrigger::Class_Version(), "./MSimTrigger.h", 22,
                  typeid(::MSimTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::MSimTrigger) );
      instance.SetNew(&new_MSimTrigger);
      instance.SetNewArray(&newArray_MSimTrigger);
      instance.SetDelete(&delete_MSimTrigger);
      instance.SetDeleteArray(&deleteArray_MSimTrigger);
      instance.SetDestructor(&destruct_MSimTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimTrigger*)
   {
      return GenerateInitInstanceLocal((::MSimTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimReadout_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimReadout(void *p = 0);
   static void *newArray_MSimReadout(Long_t size, void *p);
   static void delete_MSimReadout(void *p);
   static void deleteArray_MSimReadout(void *p);
   static void destruct_MSimReadout(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimReadout*)
   {
      ::MSimReadout *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimReadout >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimReadout", ::MSimReadout::Class_Version(), "./MSimReadout.h", 16,
                  typeid(::MSimReadout), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimReadout::Dictionary, isa_proxy, 4,
                  sizeof(::MSimReadout) );
      instance.SetNew(&new_MSimReadout);
      instance.SetNewArray(&newArray_MSimReadout);
      instance.SetDelete(&delete_MSimReadout);
      instance.SetDeleteArray(&deleteArray_MSimReadout);
      instance.SetDestructor(&destruct_MSimReadout);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimReadout*)
   {
      return GenerateInitInstanceLocal((::MSimReadout*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimReadout*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimSignalCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimSignalCam(void *p = 0);
   static void *newArray_MSimSignalCam(Long_t size, void *p);
   static void delete_MSimSignalCam(void *p);
   static void deleteArray_MSimSignalCam(void *p);
   static void destruct_MSimSignalCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimSignalCam*)
   {
      ::MSimSignalCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimSignalCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimSignalCam", ::MSimSignalCam::Class_Version(), "./MSimSignalCam.h", 23,
                  typeid(::MSimSignalCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimSignalCam::Dictionary, isa_proxy, 4,
                  sizeof(::MSimSignalCam) );
      instance.SetNew(&new_MSimSignalCam);
      instance.SetNewArray(&newArray_MSimSignalCam);
      instance.SetDelete(&delete_MSimSignalCam);
      instance.SetDeleteArray(&deleteArray_MSimSignalCam);
      instance.SetDestructor(&destruct_MSimSignalCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimSignalCam*)
   {
      return GenerateInitInstanceLocal((::MSimSignalCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimSignalCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MSimPSF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimPSF::Class_Name()
{
   return "MSimPSF";
}

//______________________________________________________________________________
const char *MSimPSF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimPSF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimPSF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimPSF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimPSF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimPSF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimPSF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimPSF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimGeomCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimGeomCam::Class_Name()
{
   return "MSimGeomCam";
}

//______________________________________________________________________________
const char *MSimGeomCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimGeomCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimGeomCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimGeomCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimGeomCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimGeomCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimGeomCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimGeomCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimRandomPhotons::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimRandomPhotons::Class_Name()
{
   return "MSimRandomPhotons";
}

//______________________________________________________________________________
const char *MSimRandomPhotons::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRandomPhotons*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimRandomPhotons::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRandomPhotons*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimRandomPhotons::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRandomPhotons*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimRandomPhotons::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRandomPhotons*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimAPD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimAPD::Class_Name()
{
   return "MSimAPD";
}

//______________________________________________________________________________
const char *MSimAPD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimAPD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimAPD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimAPD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimAPD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimAPD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimAPD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimAPD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimBundlePhotons::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimBundlePhotons::Class_Name()
{
   return "MSimBundlePhotons";
}

//______________________________________________________________________________
const char *MSimBundlePhotons::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimBundlePhotons*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimBundlePhotons::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimBundlePhotons*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimBundlePhotons::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimBundlePhotons*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimBundlePhotons::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimBundlePhotons*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimCalibrationSignal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimCalibrationSignal::Class_Name()
{
   return "MSimCalibrationSignal";
}

//______________________________________________________________________________
const char *MSimCalibrationSignal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCalibrationSignal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimCalibrationSignal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCalibrationSignal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimCalibrationSignal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCalibrationSignal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimCalibrationSignal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCalibrationSignal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimExcessNoise::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimExcessNoise::Class_Name()
{
   return "MSimExcessNoise";
}

//______________________________________________________________________________
const char *MSimExcessNoise::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimExcessNoise*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimExcessNoise::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimExcessNoise*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimExcessNoise::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimExcessNoise*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimExcessNoise::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimExcessNoise*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTruePhotonsPerPixelCont::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTruePhotonsPerPixelCont::Class_Name()
{
   return "MTruePhotonsPerPixelCont";
}

//______________________________________________________________________________
const char *MTruePhotonsPerPixelCont::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTruePhotonsPerPixelCont*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTruePhotonsPerPixelCont::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTruePhotonsPerPixelCont*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTruePhotonsPerPixelCont::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTruePhotonsPerPixelCont*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTruePhotonsPerPixelCont::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTruePhotonsPerPixelCont*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimCamera::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimCamera::Class_Name()
{
   return "MSimCamera";
}

//______________________________________________________________________________
const char *MSimCamera::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCamera*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimCamera::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCamera*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimCamera::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCamera*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimCamera::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimCamera*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimTrigger::Class_Name()
{
   return "MSimTrigger";
}

//______________________________________________________________________________
const char *MSimTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimReadout::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimReadout::Class_Name()
{
   return "MSimReadout";
}

//______________________________________________________________________________
const char *MSimReadout::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReadout*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimReadout::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReadout*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimReadout::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReadout*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimReadout::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReadout*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimSignalCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimSignalCam::Class_Name()
{
   return "MSimSignalCam";
}

//______________________________________________________________________________
const char *MSimSignalCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimSignalCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimSignalCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimSignalCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimSignalCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimSignalCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimSignalCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimSignalCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MSimPSF::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimPSF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimPSF::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimPSF::Class(),this);
   }
}

//______________________________________________________________________________
void MSimPSF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimPSF.
      TClass *R__cl = ::MSimPSF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimPSF(void *p) {
      return  p ? new(p) ::MSimPSF : new ::MSimPSF;
   }
   static void *newArray_MSimPSF(Long_t nElements, void *p) {
      return p ? new(p) ::MSimPSF[nElements] : new ::MSimPSF[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimPSF(void *p) {
      delete ((::MSimPSF*)p);
   }
   static void deleteArray_MSimPSF(void *p) {
      delete [] ((::MSimPSF*)p);
   }
   static void destruct_MSimPSF(void *p) {
      typedef ::MSimPSF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimPSF

//______________________________________________________________________________
void MSimGeomCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimGeomCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimGeomCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimGeomCam::Class(),this);
   }
}

//______________________________________________________________________________
void MSimGeomCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimGeomCam.
      TClass *R__cl = ::MSimGeomCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulsePos", &fPulsePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulse", &fPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimGeomCam(void *p) {
      return  p ? new(p) ::MSimGeomCam : new ::MSimGeomCam;
   }
   static void *newArray_MSimGeomCam(Long_t nElements, void *p) {
      return p ? new(p) ::MSimGeomCam[nElements] : new ::MSimGeomCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimGeomCam(void *p) {
      delete ((::MSimGeomCam*)p);
   }
   static void deleteArray_MSimGeomCam(void *p) {
      delete [] ((::MSimGeomCam*)p);
   }
   static void destruct_MSimGeomCam(void *p) {
      typedef ::MSimGeomCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimGeomCam

//______________________________________________________________________________
void MSimRandomPhotons::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimRandomPhotons.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimRandomPhotons::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimRandomPhotons::Class(),this);
   }
}

//______________________________________________________________________________
void MSimRandomPhotons::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimRandomPhotons.
      TClass *R__cl = ::MSimRandomPhotons::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRates", &fRates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreqFixed", &fFreqFixed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreqNSB", &fFreqNSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale", &fScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimulateWavelength", &fSimulateWavelength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNameNSB", &fFileNameNSB);
      R__insp.InspectMember(fFileNameNSB, "fFileNameNSB.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimRandomPhotons(void *p) {
      return  p ? new(p) ::MSimRandomPhotons : new ::MSimRandomPhotons;
   }
   static void *newArray_MSimRandomPhotons(Long_t nElements, void *p) {
      return p ? new(p) ::MSimRandomPhotons[nElements] : new ::MSimRandomPhotons[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimRandomPhotons(void *p) {
      delete ((::MSimRandomPhotons*)p);
   }
   static void deleteArray_MSimRandomPhotons(void *p) {
      delete [] ((::MSimRandomPhotons*)p);
   }
   static void destruct_MSimRandomPhotons(void *p) {
      typedef ::MSimRandomPhotons current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimRandomPhotons

//______________________________________________________________________________
void MSimAPD::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimAPD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimAPD::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimAPD::Class(),this);
   }
}

//______________________________________________________________________________
void MSimAPD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimAPD.
      TClass *R__cl = ::MSimAPD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRates", &fRates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCrosstalkCoeffParam", &fCrosstalkCoeffParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAPDs", &fAPDs);
      R__insp.InspectMember(fAPDs, "fAPDs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreq", &fFreq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCells", &fNumCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCrosstalkCoeff", &fCrosstalkCoeff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeadTime", &fDeadTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoveryTime", &fRecoveryTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAfterpulseProb1", &fAfterpulseProb1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAfterpulseProb2", &fAfterpulseProb2);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimAPD(void *p) {
      return  p ? new(p) ::MSimAPD : new ::MSimAPD;
   }
   static void *newArray_MSimAPD(Long_t nElements, void *p) {
      return p ? new(p) ::MSimAPD[nElements] : new ::MSimAPD[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimAPD(void *p) {
      delete ((::MSimAPD*)p);
   }
   static void deleteArray_MSimAPD(void *p) {
      delete [] ((::MSimAPD*)p);
   }
   static void destruct_MSimAPD(void *p) {
      typedef ::MSimAPD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimAPD

//______________________________________________________________________________
void MSimExcessNoise::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimExcessNoise.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimExcessNoise::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimExcessNoise::Class(),this);
   }
}

//______________________________________________________________________________
void MSimExcessNoise::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimExcessNoise.
      TClass *R__cl = ::MSimExcessNoise::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExcessNoise", &fExcessNoise);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimExcessNoise(void *p) {
      return  p ? new(p) ::MSimExcessNoise : new ::MSimExcessNoise;
   }
   static void *newArray_MSimExcessNoise(Long_t nElements, void *p) {
      return p ? new(p) ::MSimExcessNoise[nElements] : new ::MSimExcessNoise[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimExcessNoise(void *p) {
      delete ((::MSimExcessNoise*)p);
   }
   static void deleteArray_MSimExcessNoise(void *p) {
      delete [] ((::MSimExcessNoise*)p);
   }
   static void destruct_MSimExcessNoise(void *p) {
      typedef ::MSimExcessNoise current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimExcessNoise

//______________________________________________________________________________
void MSimBundlePhotons::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimBundlePhotons.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimBundlePhotons::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimBundlePhotons::Class(),this);
   }
}

//______________________________________________________________________________
void MSimBundlePhotons::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimBundlePhotons.
      TClass *R__cl = ::MSimBundlePhotons::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLut", &fLut);
      R__insp.InspectMember(fLut, "fLut.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimBundlePhotons(void *p) {
      return  p ? new(p) ::MSimBundlePhotons : new ::MSimBundlePhotons;
   }
   static void *newArray_MSimBundlePhotons(Long_t nElements, void *p) {
      return p ? new(p) ::MSimBundlePhotons[nElements] : new ::MSimBundlePhotons[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimBundlePhotons(void *p) {
      delete ((::MSimBundlePhotons*)p);
   }
   static void deleteArray_MSimBundlePhotons(void *p) {
      delete [] ((::MSimBundlePhotons*)p);
   }
   static void destruct_MSimBundlePhotons(void *p) {
      typedef ::MSimBundlePhotons current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimBundlePhotons

//______________________________________________________________________________
void MSimSignalCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimSignalCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimSignalCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimSignalCam::Class(),this);
   }
}

//______________________________________________________________________________
void MSimSignalCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimSignalCam.
      TClass *R__cl = ::MSimSignalCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCont", &fCont);
      R__insp.InspectMember(fCont, "fCont.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.InspectMember(fTime, "fTime.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimSignalCam(void *p) {
      return  p ? new(p) ::MSimSignalCam : new ::MSimSignalCam;
   }
   static void *newArray_MSimSignalCam(Long_t nElements, void *p) {
      return p ? new(p) ::MSimSignalCam[nElements] : new ::MSimSignalCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimSignalCam(void *p) {
      delete ((::MSimSignalCam*)p);
   }
   static void deleteArray_MSimSignalCam(void *p) {
      delete [] ((::MSimSignalCam*)p);
   }
   static void destruct_MSimSignalCam(void *p) {
      typedef ::MSimSignalCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimSignalCam

//______________________________________________________________________________
void MSimCamera::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimCamera.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimCamera::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimCamera::Class(),this);
   }
}

//______________________________________________________________________________
void MSimCamera::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimCamera.
      TClass *R__cl = ::MSimCamera::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElectronicNoise", &fElectronicNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAccidentalPhotons", &fAccidentalPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCamera", &fCamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCrosstalkCoeffParam", &fCrosstalkCoeffParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResidualTimeSpread", &fResidualTimeSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGapdTimeJitter", &fGapdTimeJitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFixTimeOffsetsBetweenPixelsInNs", &fFixTimeOffsetsBetweenPixelsInNs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTruePhotons", &fTruePhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpline", &fSpline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBaselineGain", &fBaselineGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultOffset", &fDefaultOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultNoise", &fDefaultNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefaultGain", &fDefaultGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACFudgeFactor", &fACFudgeFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACTimeConstant", &fACTimeConstant);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimCamera(void *p) {
      return  p ? new(p) ::MSimCamera : new ::MSimCamera;
   }
   static void *newArray_MSimCamera(Long_t nElements, void *p) {
      return p ? new(p) ::MSimCamera[nElements] : new ::MSimCamera[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimCamera(void *p) {
      delete ((::MSimCamera*)p);
   }
   static void deleteArray_MSimCamera(void *p) {
      delete [] ((::MSimCamera*)p);
   }
   static void destruct_MSimCamera(void *p) {
      typedef ::MSimCamera current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimCamera

//______________________________________________________________________________
void MSimTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void MSimTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimTrigger.
      TClass *R__cl = ::MSimTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCamera", &fCamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulsePos", &fPulsePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElectronicNoise", &fElectronicNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRouteAC", &fRouteAC);
      R__insp.InspectMember(fRouteAC, "fRouteAC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoincidenceMap", &fCoincidenceMap);
      R__insp.InspectMember(fCoincidenceMap, "fCoincidenceMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameRouteAC", &fNameRouteAC);
      R__insp.InspectMember(fNameRouteAC, "fNameRouteAC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameCoincidenceMap", &fNameCoincidenceMap);
      R__insp.InspectMember(fNameCoincidenceMap, "fNameCoincidenceMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDiscriminatorThreshold", &fDiscriminatorThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDigitalSignalLength", &fDigitalSignalLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoincidenceTime", &fCoincidenceTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShiftBaseline", &fShiftBaseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUngainSignal", &fUngainSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimulateElectronics", &fSimulateElectronics);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinMultiplicity", &fMinMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCableDelay", &fCableDelay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCableDamping", &fCableDamping);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "patch_file", (void*)&patch_file);
      R__insp.InspectMember("ofstream", (void*)&patch_file, "patch_file.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clipped_file", (void*)&clipped_file);
      R__insp.InspectMember("ofstream", (void*)&clipped_file, "clipped_file.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "digital_file", (void*)&digital_file);
      R__insp.InspectMember("ofstream", (void*)&digital_file, "digital_file.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ratescan_file", (void*)&ratescan_file);
      R__insp.InspectMember("ofstream", (void*)&ratescan_file, "ratescan_file.", false);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimTrigger(void *p) {
      return  p ? new(p) ::MSimTrigger : new ::MSimTrigger;
   }
   static void *newArray_MSimTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::MSimTrigger[nElements] : new ::MSimTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimTrigger(void *p) {
      delete ((::MSimTrigger*)p);
   }
   static void deleteArray_MSimTrigger(void *p) {
      delete [] ((::MSimTrigger*)p);
   }
   static void destruct_MSimTrigger(void *p) {
      typedef ::MSimTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimTrigger

//______________________________________________________________________________
void MSimReadout::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimReadout.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimReadout::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimReadout::Class(),this);
   }
}

//______________________________________________________________________________
void MSimReadout::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimReadout.
      TClass *R__cl = ::MSimReadout::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCamera", &fCamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulsePos", &fPulsePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConversionFactor", &fConversionFactor);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimReadout(void *p) {
      return  p ? new(p) ::MSimReadout : new ::MSimReadout;
   }
   static void *newArray_MSimReadout(Long_t nElements, void *p) {
      return p ? new(p) ::MSimReadout[nElements] : new ::MSimReadout[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimReadout(void *p) {
      delete ((::MSimReadout*)p);
   }
   static void deleteArray_MSimReadout(void *p) {
      delete [] ((::MSimReadout*)p);
   }
   static void destruct_MSimReadout(void *p) {
      typedef ::MSimReadout current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimReadout

//______________________________________________________________________________
void MSimCalibrationSignal::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimCalibrationSignal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimCalibrationSignal::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimCalibrationSignal::Class(),this);
   }
}

//______________________________________________________________________________
void MSimCalibrationSignal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimCalibrationSignal.
      TClass *R__cl = ::MSimCalibrationSignal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParList", &fParList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulse", &fPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPulsePos", &fPulsePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigger", &fTrigger);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStat", &fStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotons", &fNumPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeJitter", &fTimeJitter);
      MRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimCalibrationSignal(void *p) {
      return  p ? new(p) ::MSimCalibrationSignal : new ::MSimCalibrationSignal;
   }
   static void *newArray_MSimCalibrationSignal(Long_t nElements, void *p) {
      return p ? new(p) ::MSimCalibrationSignal[nElements] : new ::MSimCalibrationSignal[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimCalibrationSignal(void *p) {
      delete ((::MSimCalibrationSignal*)p);
   }
   static void deleteArray_MSimCalibrationSignal(void *p) {
      delete [] ((::MSimCalibrationSignal*)p);
   }
   static void destruct_MSimCalibrationSignal(void *p) {
      typedef ::MSimCalibrationSignal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimCalibrationSignal

//______________________________________________________________________________
void MTruePhotonsPerPixelCont::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTruePhotonsPerPixelCont.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTruePhotonsPerPixelCont::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTruePhotonsPerPixelCont::Class(),this);
   }
}

//______________________________________________________________________________
void MTruePhotonsPerPixelCont::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTruePhotonsPerPixelCont.
      TClass *R__cl = ::MTruePhotonsPerPixelCont::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_photons_weight", &cherenkov_photons_weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_photons_number", &cherenkov_photons_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*muon_cherenkov_photons_weight", &muon_cherenkov_photons_weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*muon_cherenkov_photons_number", &muon_cherenkov_photons_number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*noise_photons_weight", &noise_photons_weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_arrival_time_mean", &cherenkov_arrival_time_mean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_arrival_time_variance", &cherenkov_arrival_time_variance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_arrival_time_min", &cherenkov_arrival_time_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cherenkov_arrival_time_max", &cherenkov_arrival_time_max);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTruePhotonsPerPixelCont(void *p) {
      return  p ? new(p) ::MTruePhotonsPerPixelCont : new ::MTruePhotonsPerPixelCont;
   }
   static void *newArray_MTruePhotonsPerPixelCont(Long_t nElements, void *p) {
      return p ? new(p) ::MTruePhotonsPerPixelCont[nElements] : new ::MTruePhotonsPerPixelCont[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTruePhotonsPerPixelCont(void *p) {
      delete ((::MTruePhotonsPerPixelCont*)p);
   }
   static void deleteArray_MTruePhotonsPerPixelCont(void *p) {
      delete [] ((::MTruePhotonsPerPixelCont*)p);
   }
   static void destruct_MTruePhotonsPerPixelCont(void *p) {
      typedef ::MTruePhotonsPerPixelCont current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTruePhotonsPerPixelCont

/********************************************************
* SimCameraCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSimCameraCint();

extern "C" void G__set_cpp_environmentSimCameraCint() {
  G__cpp_reset_tagtableSimCameraCint();
}
#include <new>
extern "C" int G__cpp_dllrevSimCameraCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MSimPSF */
static int G__SimCameraCint_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimPSF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimPSF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimPSF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimPSF((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimPSF((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimPSF[n];
       } else {
         p = new((void*) gvp) MSimPSF[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimPSF;
       } else {
         p = new((void*) gvp) MSimPSF;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimPSF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimPSF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimPSF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimPSF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimPSF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimPSF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimPSF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimPSF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimPSF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimPSF G__TMSimPSF;
static int G__SimCameraCint_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimPSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimPSF*) (soff+(sizeof(MSimPSF)*i)))->~G__TMSimPSF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimPSF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimPSF*) (soff))->~G__TMSimPSF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimGeomCam */
static int G__SimCameraCint_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimGeomCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimGeomCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimGeomCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimGeomCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimGeomCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimGeomCam[n];
       } else {
         p = new((void*) gvp) MSimGeomCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimGeomCam;
       } else {
         p = new((void*) gvp) MSimGeomCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimGeomCam*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimGeomCam*) G__getstructoffset())->SetNameGeomCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimGeomCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimGeomCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimGeomCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimGeomCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimGeomCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimGeomCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimGeomCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimGeomCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimGeomCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimGeomCam G__TMSimGeomCam;
static int G__SimCameraCint_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimGeomCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimGeomCam*) (soff+(sizeof(MSimGeomCam)*i)))->~G__TMSimGeomCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimGeomCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimGeomCam*) (soff))->~G__TMSimGeomCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimRandomPhotons */
static int G__SimCameraCint_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimRandomPhotons* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimRandomPhotons((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimRandomPhotons((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimRandomPhotons((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimRandomPhotons((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimRandomPhotons[n];
       } else {
         p = new((void*) gvp) MSimRandomPhotons[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimRandomPhotons;
       } else {
         p = new((void*) gvp) MSimRandomPhotons;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimRandomPhotons*) G__getstructoffset())->SetFreq((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimRandomPhotons*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimRandomPhotons*) G__getstructoffset())->SetNameGeomCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimRandomPhotons::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRandomPhotons::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimRandomPhotons::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimRandomPhotons::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimRandomPhotons*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRandomPhotons::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimRandomPhotons::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRandomPhotons::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimRandomPhotons::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimRandomPhotons G__TMSimRandomPhotons;
static int G__SimCameraCint_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimRandomPhotons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimRandomPhotons*) (soff+(sizeof(MSimRandomPhotons)*i)))->~G__TMSimRandomPhotons();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimRandomPhotons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimRandomPhotons*) (soff))->~G__TMSimRandomPhotons();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimAPD */
static int G__SimCameraCint_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimAPD* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimAPD((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimAPD((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimAPD((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimAPD((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimAPD[n];
       } else {
         p = new((void*) gvp) MSimAPD[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimAPD;
       } else {
         p = new((void*) gvp) MSimAPD;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimAPD*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimAPD*) G__getstructoffset())->SetNameGeomCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimAPD*) G__getstructoffset())->SetFreq((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimAPD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimAPD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimAPD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimAPD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimAPD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimAPD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimAPD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimAPD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimAPD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimAPD G__TMSimAPD;
static int G__SimCameraCint_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimAPD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimAPD*) (soff+(sizeof(MSimAPD)*i)))->~G__TMSimAPD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimAPD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimAPD*) (soff))->~G__TMSimAPD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimBundlePhotons */
static int G__SimCameraCint_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimBundlePhotons* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimBundlePhotons((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimBundlePhotons((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimBundlePhotons((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimBundlePhotons((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimBundlePhotons[n];
       } else {
         p = new((void*) gvp) MSimBundlePhotons[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimBundlePhotons;
       } else {
         p = new((void*) gvp) MSimBundlePhotons;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimBundlePhotons*) G__getstructoffset())->SetFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimBundlePhotons::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimBundlePhotons::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimBundlePhotons::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimBundlePhotons::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimBundlePhotons*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimBundlePhotons::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimBundlePhotons::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimBundlePhotons::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimBundlePhotons::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimBundlePhotons G__TMSimBundlePhotons;
static int G__SimCameraCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimBundlePhotons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimBundlePhotons*) (soff+(sizeof(MSimBundlePhotons)*i)))->~G__TMSimBundlePhotons();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimBundlePhotons*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimBundlePhotons*) (soff))->~G__TMSimBundlePhotons();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimCalibrationSignal */
static int G__SimCameraCint_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimCalibrationSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimCalibrationSignal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimCalibrationSignal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimCalibrationSignal((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimCalibrationSignal((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimCalibrationSignal[n];
       } else {
         p = new((void*) gvp) MSimCalibrationSignal[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimCalibrationSignal;
       } else {
         p = new((void*) gvp) MSimCalibrationSignal;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimCalibrationSignal*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimCalibrationSignal*) G__getstructoffset())->SetNameGeomCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimCalibrationSignal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCalibrationSignal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimCalibrationSignal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimCalibrationSignal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimCalibrationSignal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCalibrationSignal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimCalibrationSignal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCalibrationSignal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimCalibrationSignal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimCalibrationSignal G__TMSimCalibrationSignal;
static int G__SimCameraCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimCalibrationSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimCalibrationSignal*) (soff+(sizeof(MSimCalibrationSignal)*i)))->~G__TMSimCalibrationSignal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimCalibrationSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimCalibrationSignal*) (soff))->~G__TMSimCalibrationSignal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimExcessNoise */
static int G__SimCameraCint_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimExcessNoise* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimExcessNoise((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimExcessNoise((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimExcessNoise((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimExcessNoise((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimExcessNoise[n];
       } else {
         p = new((void*) gvp) MSimExcessNoise[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimExcessNoise;
       } else {
         p = new((void*) gvp) MSimExcessNoise;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimExcessNoise::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimExcessNoise::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimExcessNoise::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimExcessNoise::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimExcessNoise*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimExcessNoise::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimExcessNoise::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimExcessNoise::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_198_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimExcessNoise::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimExcessNoise G__TMSimExcessNoise;
static int G__SimCameraCint_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimExcessNoise*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimExcessNoise*) (soff+(sizeof(MSimExcessNoise)*i)))->~G__TMSimExcessNoise();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimExcessNoise*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimExcessNoise*) (soff))->~G__TMSimExcessNoise();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTruePhotonsPerPixelCont */
static int G__SimCameraCint_270_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTruePhotonsPerPixelCont* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTruePhotonsPerPixelCont((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTruePhotonsPerPixelCont((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTruePhotonsPerPixelCont((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTruePhotonsPerPixelCont((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTruePhotonsPerPixelCont[n];
       } else {
         p = new((void*) gvp) MTruePhotonsPerPixelCont[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTruePhotonsPerPixelCont;
       } else {
         p = new((void*) gvp) MTruePhotonsPerPixelCont;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTruePhotonsPerPixelCont::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTruePhotonsPerPixelCont::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTruePhotonsPerPixelCont::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTruePhotonsPerPixelCont::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTruePhotonsPerPixelCont*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTruePhotonsPerPixelCont::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTruePhotonsPerPixelCont::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTruePhotonsPerPixelCont::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_270_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTruePhotonsPerPixelCont::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTruePhotonsPerPixelCont G__TMTruePhotonsPerPixelCont;
static int G__SimCameraCint_270_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTruePhotonsPerPixelCont*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTruePhotonsPerPixelCont*) (soff+(sizeof(MTruePhotonsPerPixelCont)*i)))->~G__TMTruePhotonsPerPixelCont();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTruePhotonsPerPixelCont*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTruePhotonsPerPixelCont*) (soff))->~G__TMTruePhotonsPerPixelCont();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimCamera */
static int G__SimCameraCint_272_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimCamera* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimCamera((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimCamera((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimCamera((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimCamera((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimCamera[n];
       } else {
         p = new((void*) gvp) MSimCamera[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimCamera;
       } else {
         p = new((void*) gvp) MSimCamera;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimCamera::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCamera::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimCamera::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimCamera::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimCamera*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCamera::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimCamera::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimCamera::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimCamera::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimCamera G__TMSimCamera;
static int G__SimCameraCint_272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimCamera*) (soff+(sizeof(MSimCamera)*i)))->~G__TMSimCamera();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimCamera*) (soff))->~G__TMSimCamera();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimTrigger */
static int G__SimCameraCint_273_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimTrigger((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimTrigger((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimTrigger[n];
       } else {
         p = new((void*) gvp) MSimTrigger[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimTrigger;
       } else {
         p = new((void*) gvp) MSimTrigger;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->SetNameRouteAC((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->SetNameCoincidenceMap((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->SetDiscriminatorThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->SetDigitalSignalLength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->SetCoincidenceTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_273_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimTrigger G__TMSimTrigger;
static int G__SimCameraCint_273_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimTrigger*) (soff+(sizeof(MSimTrigger)*i)))->~G__TMSimTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimTrigger*) (soff))->~G__TMSimTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimReadout */
static int G__SimCameraCint_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimReadout* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimReadout((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimReadout((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimReadout((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimReadout((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimReadout[n];
       } else {
         p = new((void*) gvp) MSimReadout[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimReadout;
       } else {
         p = new((void*) gvp) MSimReadout;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimReadout::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReadout::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimReadout::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimReadout::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimReadout*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReadout::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimReadout::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReadout::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_275_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimReadout::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimReadout G__TMSimReadout;
static int G__SimCameraCint_275_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimReadout*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimReadout*) (soff+(sizeof(MSimReadout)*i)))->~G__TMSimReadout();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimReadout*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimReadout*) (soff))->~G__TMSimReadout();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimSignalCam */
static int G__SimCameraCint_277_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimSignalCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimSignalCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimSignalCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimSignalCam[n];
       } else {
         p = new((void*) gvp) MSimSignalCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimSignalCam;
       } else {
         p = new((void*) gvp) MSimSignalCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimSignalCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimSignalCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimSignalCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimSignalCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimSignalCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimSignalCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimSignalCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimSignalCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimCameraCint_277_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimSignalCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimSignalCam G__TMSimSignalCam;
static int G__SimCameraCint_277_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimSignalCam*) (soff+(sizeof(MSimSignalCam)*i)))->~G__TMSimSignalCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimSignalCam*) (soff))->~G__TMSimSignalCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MSimPSF */

/* MSimGeomCam */

/* MSimRandomPhotons */

/* MSimAPD */

/* MSimBundlePhotons */

/* MSimCalibrationSignal */

/* MSimExcessNoise */

/* MTruePhotonsPerPixelCont */

/* MSimCamera */

/* MSimTrigger */

/* MSimReadout */

/* MSimSignalCam */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSimCameraCint {
 public:
  G__Sizep2memfuncSimCameraCint(): p(&G__Sizep2memfuncSimCameraCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSimCameraCint::*p)();
};

size_t G__get_sizep2memfuncSimCameraCint()
{
  G__Sizep2memfuncSimCameraCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSimCameraCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF))) {
     MSimPSF *G__Lderived;
     G__Lderived=(MSimPSF*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam))) {
     MSimGeomCam *G__Lderived;
     G__Lderived=(MSimGeomCam*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons))) {
     MSimRandomPhotons *G__Lderived;
     G__Lderived=(MSimRandomPhotons*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD))) {
     MSimAPD *G__Lderived;
     G__Lderived=(MSimAPD*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons))) {
     MSimBundlePhotons *G__Lderived;
     G__Lderived=(MSimBundlePhotons*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal))) {
     MSimCalibrationSignal *G__Lderived;
     G__Lderived=(MSimCalibrationSignal*)0x1000;
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal),G__get_linked_tagnum(&G__SimCameraCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise))) {
     MSimExcessNoise *G__Lderived;
     G__Lderived=(MSimExcessNoise*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont))) {
     MTruePhotonsPerPixelCont *G__Lderived;
     G__Lderived=(MTruePhotonsPerPixelCont*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera))) {
     MSimCamera *G__Lderived;
     G__Lderived=(MSimCamera*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger))) {
     MSimTrigger *G__Lderived;
     G__Lderived=(MSimTrigger*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout))) {
     MSimReadout *G__Lderived;
     G__Lderived=(MSimReadout*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam))) {
     MSimSignalCam *G__Lderived;
     G__Lderived=(MSimSignalCam*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam),G__get_linked_tagnum(&G__SimCameraCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam),G__get_linked_tagnum(&G__SimCameraCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam),G__get_linked_tagnum(&G__SimCameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam),G__get_linked_tagnum(&G__SimCameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSimCameraCint() {

   /* Setting up typedef entry */
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<double>",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double> >",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimCameraCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MSimPSF */
static void G__setup_memvarMSimPSF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF));
   { MSimPSF *p; p=(MSimPSF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event stroing the photons");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma=",0,"Gaussian sigma of the smearout");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimGeomCam */
static void G__setup_memvarMSimGeomCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam));
   { MSimGeomCam *p; p=(MSimGeomCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event stroing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fPulsePos=",0,"! Intended pulse position in digitization window [ns]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawRunHeader),-1,-1,4,"fHeader=",0,"! Length of digitization window");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParSpline),-1,-1,4,"fPulse=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameGeomCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimRandomPhotons */
static void G__setup_memvarMSimRandomPhotons(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons));
   { MSimRandomPhotons *p; p=(MSimRandomPhotons*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! container with the geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event storing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Container storing evenet statistics");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MCorsikaRunHeader),-1,-1,4,"fRunHeader=",0,"! Header storing run information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fRates=",0,"Random count rate per pixel");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFreqFixed=",0,"[1/ns]      A fixed frequency per pixel");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFreqNSB=",0,"[1/ns/cm^2] A frequency depending on area");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScale=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSimulateWavelength=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameGeomCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fFileNameNSB=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimAPD */
static void G__setup_memvarMSimAPD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD));
   { MSimAPD *p; p=(MSimAPD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! APD geometry (used to know how many pixels we have)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event storing the photon information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Storing event statistics (needed for the start-time)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fRates=",0,"! Accidental Photon Rates for all pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fCrosstalkCoeffParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TObjArray),-1,-1,4,"fAPDs=",0,"! Array keeping the necessary number of APDs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameGeomCam=",0,"Name of the geometry container storing the APD gemeotry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFreq=",0,"Frequency of random phtons which hit the APDs");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumCells=",0,"Number of cells along one side");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCrosstalkCoeff=",0,"Crosstalk coefficient (P form the formula)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDeadTime=",0,"Single cell dead time in nano-seconds");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRecoveryTime=",0,"Single cell recovery time in nano-seconds");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAfterpulseProb1=",0,"Early afterpulse probability");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAfterpulseProb2=",0,"Late afterpulse probability");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimBundlePhotons */
static void G__setup_memvarMSimBundlePhotons(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons));
   { MSimBundlePhotons *p; p=(MSimBundlePhotons*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event storing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Event statistics needed for crosschecks");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fFileName=",0,"File to from which to read the lut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MLut),-1,-1,4,"fLut=",0,"Look-up table");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimCalibrationSignal */
static void G__setup_memvarMSimCalibrationSignal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal));
   { MSimCalibrationSignal *p; p=(MSimCalibrationSignal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParList),-1,-1,4,"fParList=",0,"! Store pointer to MParList for initializing ReInit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geometry to know the number of expected pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParSpline),-1,-1,4,"fPulse=",0,"! Pulse Shape to get pulse width from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fPulsePos=",0,"! Expected position at which the pulse should be");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fTrigger=",0,"! Position in analog channels at which the triggersignal  is raised");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Digitization window and frequency");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawEvtHeader),-1,-1,4,"fEvtHeader=",0,"! Event header which is filled by the trigger pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Photon event into which the new photons are stored");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Photon statistic which is filled");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameGeomCam=",0,"Name of the camera geometry");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"Number of events to produce");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPhotons=",0,"Average number of photons to produce");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeJitter=",0,"Time jitter (sigma)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimExcessNoise */
static void G__setup_memvarMSimExcessNoise(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise));
   { MSimExcessNoise *p; p=(MSimExcessNoise*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event storing the photons");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fExcessNoise=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTruePhotonsPerPixelCont */
static void G__setup_memvarMTruePhotonsPerPixelCont(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont));
   { MTruePhotonsPerPixelCont *p; p=(MTruePhotonsPerPixelCont*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->cherenkov_photons_weight)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_photons_weight=",0,"{fits: name=McCherPhotWeight}");
   G__memvar_setup((void*)((long)(&p->cherenkov_photons_number)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_photons_number=",0,"{fits: name=McCherPhotNumber}");
   G__memvar_setup((void*)((long)(&p->muon_cherenkov_photons_weight)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"muon_cherenkov_photons_weight=",0,"{fits: name=McMuonCherPhotWeight}");
   G__memvar_setup((void*)((long)(&p->muon_cherenkov_photons_number)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"muon_cherenkov_photons_number=",0,"{fits: name=McMuonCherPhotNumber}");
   G__memvar_setup((void*)((long)(&p->noise_photons_weight)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"noise_photons_weight=",0,"{fits: name=McNoisePhotWeight}");
   G__memvar_setup((void*)((long)(&p->cherenkov_arrival_time_mean)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_arrival_time_mean=",0,"{fits: name=McCherArrTimeMean}");
   G__memvar_setup((void*)((long)(&p->cherenkov_arrival_time_variance)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_arrival_time_variance=",0,"{fits: name=McCherArrTimeVar}");
   G__memvar_setup((void*)((long)(&p->cherenkov_arrival_time_min)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_arrival_time_min=",0,"{fits: name=McCherArrTimeMin}");
   G__memvar_setup((void*)((long)(&p->cherenkov_arrival_time_max)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayF),-1,-1,1,"cherenkov_arrival_time_max=",0,"{fits: name=McCherArrTimeMax}");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimCamera */
static void G__setup_memvarMSimCamera(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera));
   { MSimCamera *p; p=(MSimCamera*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event stroing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Valid time range of the phootn event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Sampling frequency");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fElectronicNoise=",0,"! Electronic noise (baseline and rms)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fGain=",0,"! Electronic noise (baseline and rms)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fAccidentalPhotons=",0,"! Accidental photon rates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MAnalogChannels),-1,-1,4,"fCamera=",0,"! Output of the analog signals");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"! For information stored in MMcEvt");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fCrosstalkCoeffParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fResidualTimeSpread=",0,"! Container to store a standard deviation for a residual time spread");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fGapdTimeJitter=",0,"! Container to store a standard deviation for a gapd time jitter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MMatrix),-1,-1,4,"fFixTimeOffsetsBetweenPixelsInNs=",0,"! Container to store the fix temporal offsets for each pixel in ns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont),-1,-1,4,"fTruePhotons=",0,"! Container to store the number of photons per pixel");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__SimCameraCintLN_MSpline3),-1,-1,4,"fSpline=",0,"Pulse Shape    ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fBaselineGain=",0,"Should the gain be applied to baseline and electronic noise?");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDefaultOffset=",0,"Default offset added to all channels");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDefaultNoise=",0,"Default noise (RMS) added to all samples");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDefaultGain=",0,"Default gain (multiplication factor to the given/used pulse shape)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fACFudgeFactor=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fACTimeConstant=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimTrigger */
static void G__setup_memvarMSimTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger));
   { MSimTrigger *p; p=(MSimTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MAnalogChannels),-1,-1,4,"fCamera=",0,"! The analog input channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fPulsePos=",0,"! The intended pulse positon");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fTrigger=",0,"! The trigger position w.r.t. the analog channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! The run header storing infos about the digitization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawEvtHeader),-1,-1,4,"fEvtHeader=",0,"! The event header storing the trigger information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fElectronicNoise=",0,"! Electronic noise (for baseline correction)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPedestalCam),-1,-1,4,"fGain=",0,"! Gain of the pulses");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MLut),-1,-1,4,"fRouteAC=",0,"Combinination map for the AC channels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MLut),-1,-1,4,"fCoincidenceMap=",0,"channels for which digital coincidence is checked");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameRouteAC=",0,"Name for the AC routing");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TString),-1,-1,4,"fNameCoincidenceMap=",0,"Name for the coincidence mape");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDiscriminatorThreshold=",0,"Discriminator threshold");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDigitalSignalLength=",0,"Length of the output of the discriminator");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoincidenceTime=",0,"Minimum coincidence time (gate) [slices]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fShiftBaseline=",0,"Shift the baseline back to 0 for the threshold (needs ElectronicNoise [MPedestalCam])");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUngainSignal=",0,"\"Remove\" the gain from the signal (needs Gain [MPedestalCam])");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSimulateElectronics=",0,"If the electronics is not simulated the trigger is set artificially to the first photon arrived");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinMultiplicity=",0,"N out of M");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCableDelay=",0,"signal runtime on the clipping cable in slices, e.g. 105cm cable = 2*105cm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCableDamping=",0,"the signal is damped a bit when reflecting at the end of the cable and is inverted as well.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"patch_file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"clipped_file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"digital_file=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"ratescan_file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimReadout */
static void G__setup_memvarMSimReadout(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout));
   { MSimReadout *p; p=(MSimReadout*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Digitization window and frequency");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawEvtHeader),-1,-1,4,"fEvtHeader=",0,"! Event header which is filled with the event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MAnalogChannels),-1,-1,4,"fCamera=",0,"! Analog channes to be read out");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fPulsePos=",0,"! Intended pulse position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fTrigger=",0,"! Position of trigger in the analog signal");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MRawEvtData),-1,-1,4,"fData=",0,"! Digitized FADC signal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConversionFactor=",0,"Conversion factor (arbitrary) from analog signal to FADC counts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimSignalCam */
static void G__setup_memvarMSimSignalCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam));
   { MSimSignalCam *p; p=(MSimSignalCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event containing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MPhotonStatistics),-1,-1,4,"fStat=",0,"! Statistics about the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MSignalCam),-1,-1,4,"fSignal=",0,"! Output container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MParameterD),-1,-1,4,"fTrigger=",0,"! Trigger position w.r.t. analog channels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayD),-1,-1,4,"fCont=",0,"! Local buffer for contents");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_MArrayD),-1,-1,4,"fTime=",0,"! local buffer for time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimCameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSimCameraCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMSimPSF(void) {
   /* MSimPSF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimPSF",607,G__SimCameraCint_178_0_4, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimPSF), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_178_0_5, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimPSF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_178_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimPSF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_178_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimPSF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_178_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimPSF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_178_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_178_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimPSF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_178_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimPSF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_178_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimPSF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_178_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimPSF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimPSF", 733, G__SimCameraCint_178_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimGeomCam(void) {
   /* MSimGeomCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimGeomCam",1039,G__SimCameraCint_185_0_4, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimGeomCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__SimCameraCint_185_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MGeomCam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_185_0_6, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimGeomCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_185_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimGeomCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_185_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimGeomCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_185_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimGeomCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_185_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_185_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimGeomCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_185_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimGeomCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_185_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimGeomCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_185_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimGeomCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimGeomCam", 1165, G__SimCameraCint_185_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimRandomPhotons(void) {
   /* MSimRandomPhotons */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimRandomPhotons",1730,G__SimCameraCint_188_0_5, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimRandomPhotons), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFreq",698,G__SimCameraCint_188_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fnsb f - 'Float_t' 0 - fdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__SimCameraCint_188_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MGeomCam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_188_0_8, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimRandomPhotons::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_188_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRandomPhotons::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_188_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimRandomPhotons::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_188_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimRandomPhotons::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_188_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_188_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRandomPhotons::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_188_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimRandomPhotons::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_188_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRandomPhotons::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_188_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimRandomPhotons::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimRandomPhotons", 1856, G__SimCameraCint_188_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimAPD(void) {
   /* MSimAPD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimAPD",587,G__SimCameraCint_190_0_5, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimAPD), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__SimCameraCint_190_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MGeomCam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFreq",698,G__SimCameraCint_190_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_190_0_8, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimAPD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_190_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimAPD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_190_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimAPD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_190_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimAPD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_190_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_190_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimAPD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_190_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimAPD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_190_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimAPD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_190_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimAPD::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimAPD", 713, G__SimCameraCint_190_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimBundlePhotons(void) {
   /* MSimBundlePhotons */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimBundlePhotons",1723,G__SimCameraCint_193_0_4, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimBundlePhotons), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileName",1069,G__SimCameraCint_193_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_193_0_6, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimBundlePhotons::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_193_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimBundlePhotons::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_193_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimBundlePhotons::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_193_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimBundlePhotons::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_193_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_193_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimBundlePhotons::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_193_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimBundlePhotons::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_193_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimBundlePhotons::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_193_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimBundlePhotons::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimBundlePhotons", 1849, G__SimCameraCint_193_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimCalibrationSignal(void) {
   /* MSimCalibrationSignal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CallReInit",967,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSimCalibrationSignal",2108,G__SimCameraCint_197_0_5, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimCalibrationSignal), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__SimCameraCint_197_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MGeomCam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFullFileName",1460,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__SimCameraCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimCameraCint_197_0_9, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimCalibrationSignal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_197_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCalibrationSignal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_197_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimCalibrationSignal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_197_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimCalibrationSignal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_197_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_197_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCalibrationSignal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_197_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimCalibrationSignal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_197_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCalibrationSignal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_197_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimCalibrationSignal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimCalibrationSignal", 2234, G__SimCameraCint_197_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimExcessNoise(void) {
   /* MSimExcessNoise */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimExcessNoise",1503,G__SimCameraCint_198_0_4, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimExcessNoise), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_198_0_5, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimExcessNoise::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_198_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimExcessNoise::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_198_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimExcessNoise::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_198_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimExcessNoise::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_198_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_198_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimExcessNoise::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_198_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimExcessNoise::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_198_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimExcessNoise::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_198_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimExcessNoise::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimExcessNoise", 1629, G__SimCameraCint_198_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTruePhotonsPerPixelCont(void) {
   /* MTruePhotonsPerPixelCont */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont));
   G__memfunc_setup("MTruePhotonsPerPixelCont",2453,G__SimCameraCint_270_0_1, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MTruePhotonsPerPixelCont), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"MTruePhotonsPerPixelCont\"' name C - - 10 '\"MTruePhotonsPerPixelCont\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_270_0_2, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTruePhotonsPerPixelCont::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_270_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTruePhotonsPerPixelCont::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_270_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTruePhotonsPerPixelCont::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_270_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTruePhotonsPerPixelCont::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_270_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_270_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTruePhotonsPerPixelCont::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_270_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTruePhotonsPerPixelCont::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_270_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTruePhotonsPerPixelCont::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_270_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTruePhotonsPerPixelCont::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MTruePhotonsPerPixelCont", 2579, G__SimCameraCint_270_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimCamera(void) {
   /* MSimCamera */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimCamera",959,G__SimCameraCint_272_0_5, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimCamera), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_272_0_6, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimCamera::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_272_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCamera::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_272_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimCamera::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_272_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimCamera::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_272_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_272_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCamera::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_272_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimCamera::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_272_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimCamera::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_272_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimCamera::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimCamera", 1085, G__SimCameraCint_272_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimTrigger(void) {
   /* MSimTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger));
   G__memfunc_setup("CalcCoincidence",1479,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TObjArray), -1, 0, 2, 1, 4, 8, 
"u 'TObjArray' - 11 - arr1 u 'TObjArray' - 11 - arr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMinMultiplicity",1952,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TObjArray), -1, 0, 3, 1, 4, 8, 
"u 'MArrayI' - 11 - idx u 'TObjArray' - 11 - ttls "
"i - 'Int_t' 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCoincidences",1594,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TObjArray), -1, 0, 2, 1, 4, 8, 
"u 'MArrayI' - 11 - idx u 'TObjArray' - 11 - ttls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrigger",1024,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - pos i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimTrigger",1098,G__SimCameraCint_273_0_9, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimTrigger), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameRouteAC",1344,G__SimCameraCint_273_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameCoincidenceMap",2079,G__SimCameraCint_273_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDiscriminatorThreshold",2609,G__SimCameraCint_273_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDigitalSignalLength",2218,G__SimCameraCint_273_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ln", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoincidenceTime",1807,G__SimCameraCint_273_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_273_0_15, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_273_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_273_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_273_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_273_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_273_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_273_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_273_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_273_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimTrigger::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimTrigger", 1224, G__SimCameraCint_273_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimReadout(void) {
   /* MSimReadout */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimReadout",1098,G__SimCameraCint_275_0_5, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimReadout), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_275_0_6, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimReadout::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_275_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReadout::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_275_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimReadout::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_275_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimReadout::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_275_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_275_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReadout::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_275_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimReadout::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_275_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReadout::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_275_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimReadout::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimReadout", 1224, G__SimCameraCint_275_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimSignalCam(void) {
   /* MSimSignalCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimSignalCam",1253,G__SimCameraCint_277_0_4, 105, G__get_linked_tagnum(&G__SimCameraCintLN_MSimSignalCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimCameraCint_277_0_5, 85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimSignalCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimCameraCint_277_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimSignalCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimCameraCint_277_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimSignalCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimCameraCint_277_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimSignalCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimCameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimCameraCint_277_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimCameraCint_277_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimSignalCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimCameraCint_277_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimSignalCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimCameraCint_277_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimSignalCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimCameraCint_277_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimSignalCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimSignalCam", 1379, G__SimCameraCint_277_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSimCameraCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSimCameraCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSimCameraCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SimCameraCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SimCameraCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MPhotonEvent = { "MPhotonEvent" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimPSF = { "MSimPSF" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MPhotonStatistics = { "MPhotonStatistics" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MParSpline = { "MParSpline" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimGeomCam = { "MSimGeomCam" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MCorsikaRunHeader = { "MCorsikaRunHeader" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MPedestalCam = { "MPedestalCam" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimRandomPhotons = { "MSimRandomPhotons" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimAPD = { "MSimAPD" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MLut = { "MLut" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimBundlePhotons = { "MSimBundlePhotons" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimCalibrationSignal = { "MSimCalibrationSignal" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimExcessNoise = { "MSimExcessNoise" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MMatrix = { "MMatrix" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<double,allocator<double> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MAnalogChannels = { "MAnalogChannels" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MTruePhotonsPerPixelCont = { "MTruePhotonsPerPixelCont" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSpline3 = { "MSpline3" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimCamera = { "MSimCamera" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimTrigger = { "MSimTrigger" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimReadout = { "MSimReadout" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MArrayD = { "MArrayD" , 99 , -1 };
G__linked_taginfo G__SimCameraCintLN_MSimSignalCam = { "MSimSignalCam" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSimCameraCint() {
  G__SimCameraCintLN_TClass.tagnum = -1 ;
  G__SimCameraCintLN_TBuffer.tagnum = -1 ;
  G__SimCameraCintLN_TMemberInspector.tagnum = -1 ;
  G__SimCameraCintLN_TObject.tagnum = -1 ;
  G__SimCameraCintLN_TString.tagnum = -1 ;
  G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_TObjArray.tagnum = -1 ;
  G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SimCameraCintLN_TEnv.tagnum = -1 ;
  G__SimCameraCintLN_MParContainer.tagnum = -1 ;
  G__SimCameraCintLN_MInputStreamID.tagnum = -1 ;
  G__SimCameraCintLN_MParList.tagnum = -1 ;
  G__SimCameraCintLN_MTask.tagnum = -1 ;
  G__SimCameraCintLN_MPhotonEvent.tagnum = -1 ;
  G__SimCameraCintLN_MSimPSF.tagnum = -1 ;
  G__SimCameraCintLN_MGeomCam.tagnum = -1 ;
  G__SimCameraCintLN_MPhotonStatistics.tagnum = -1 ;
  G__SimCameraCintLN_MSignalCam.tagnum = -1 ;
  G__SimCameraCintLN_MParameterD.tagnum = -1 ;
  G__SimCameraCintLN_MRawRunHeader.tagnum = -1 ;
  G__SimCameraCintLN_MParSpline.tagnum = -1 ;
  G__SimCameraCintLN_MSimGeomCam.tagnum = -1 ;
  G__SimCameraCintLN_MCorsikaRunHeader.tagnum = -1 ;
  G__SimCameraCintLN_MPedestalCam.tagnum = -1 ;
  G__SimCameraCintLN_MSimRandomPhotons.tagnum = -1 ;
  G__SimCameraCintLN_MSimAPD.tagnum = -1 ;
  G__SimCameraCintLN_MArrayI.tagnum = -1 ;
  G__SimCameraCintLN_MLut.tagnum = -1 ;
  G__SimCameraCintLN_MSimBundlePhotons.tagnum = -1 ;
  G__SimCameraCintLN_MRead.tagnum = -1 ;
  G__SimCameraCintLN_MRawEvtHeader.tagnum = -1 ;
  G__SimCameraCintLN_MSimCalibrationSignal.tagnum = -1 ;
  G__SimCameraCintLN_MSimExcessNoise.tagnum = -1 ;
  G__SimCameraCintLN_MArrayF.tagnum = -1 ;
  G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_MMatrix.tagnum = -1 ;
  G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__SimCameraCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimCameraCintLN_MMcEvt.tagnum = -1 ;
  G__SimCameraCintLN_MAnalogChannels.tagnum = -1 ;
  G__SimCameraCintLN_MTruePhotonsPerPixelCont.tagnum = -1 ;
  G__SimCameraCintLN_MSpline3.tagnum = -1 ;
  G__SimCameraCintLN_MSimCamera.tagnum = -1 ;
  G__SimCameraCintLN_MSimTrigger.tagnum = -1 ;
  G__SimCameraCintLN_MRawEvtData.tagnum = -1 ;
  G__SimCameraCintLN_MSimReadout.tagnum = -1 ;
  G__SimCameraCintLN_MArrayD.tagnum = -1 ;
  G__SimCameraCintLN_MSimSignalCam.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSimCameraCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TString);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MPhotonEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimPSF),sizeof(MSimPSF),-1,323840,"Task to do a naiv simulation of the psf by smearout in the camera plane",G__setup_memvarMSimPSF,G__setup_memfuncMSimPSF);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MPhotonStatistics);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSignalCam);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MParameterD);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MParSpline);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimGeomCam),sizeof(MSimGeomCam),-1,323840,"Task to tag each photon in a MPhotonEvent with a pixel index from a MGeomCam",G__setup_memvarMSimGeomCam,G__setup_memfuncMSimGeomCam);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MCorsikaRunHeader);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MPedestalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimRandomPhotons),sizeof(MSimRandomPhotons),-1,323840,"Simulate possonian photons (like NSB or dark current)",G__setup_memvarMSimRandomPhotons,G__setup_memfuncMSimRandomPhotons);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimAPD),sizeof(MSimAPD),-1,323840,"Task to simulate the detection behaviour of APDs",G__setup_memvarMSimAPD,G__setup_memfuncMSimAPD);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MArrayI);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MLut);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimBundlePhotons),sizeof(MSimBundlePhotons),-1,323840,"Task to bundle (re-index) photons according to a look-up table",G__setup_memvarMSimBundlePhotons,G__setup_memfuncMSimBundlePhotons);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MRead);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MRawEvtHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimCalibrationSignal),sizeof(MSimCalibrationSignal),-1,323840,"Task to create a fake signal (derives from MRead)",G__setup_memvarMSimCalibrationSignal,G__setup_memfuncMSimCalibrationSignal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimExcessNoise),sizeof(MSimExcessNoise),-1,323840,"Task to simulate the excess dependant noise (conversion photon to signal height)",G__setup_memvarMSimExcessNoise,G__setup_memfuncMSimExcessNoise);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MMatrix);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MMcEvt);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MAnalogChannels);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MTruePhotonsPerPixelCont),sizeof(MTruePhotonsPerPixelCont),-1,324864,"MTruePhotonsPerPixelCont",G__setup_memvarMTruePhotonsPerPixelCont,G__setup_memfuncMTruePhotonsPerPixelCont);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSpline3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimCamera),sizeof(MSimCamera),-1,323840,"Task to simulate the electronic noise and to convert photons into pulses",G__setup_memvarMSimCamera,G__setup_memfuncMSimCamera);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimTrigger),sizeof(MSimTrigger),-1,323840,"Task to simulate trigger electronics",G__setup_memvarMSimTrigger,G__setup_memfuncMSimTrigger);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MRawEvtData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimReadout),sizeof(MSimReadout),-1,323840,"Task to simulate the analog readout (FADCs)",G__setup_memvarMSimReadout,G__setup_memfuncMSimReadout);
   G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MArrayD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimCameraCintLN_MSimSignalCam),sizeof(MSimSignalCam),-1,323840,"Task to convert a tagged MPhotonEvent list into MSignalCam",G__setup_memvarMSimSignalCam,G__setup_memfuncMSimSignalCam);
}
extern "C" void G__cpp_setupSimCameraCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupSimCameraCint()");
  G__set_cpp_environmentSimCameraCint();
  G__cpp_setup_tagtableSimCameraCint();

  G__cpp_setup_inheritanceSimCameraCint();

  G__cpp_setup_typetableSimCameraCint();

  G__cpp_setup_memvarSimCameraCint();

  G__cpp_setup_memfuncSimCameraCint();
  G__cpp_setup_globalSimCameraCint();
  G__cpp_setup_funcSimCameraCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSimCameraCint();
  return;
}
class G__cpp_setup_initSimCameraCint {
  public:
    G__cpp_setup_initSimCameraCint() { G__add_setup_func("SimCameraCint",(G__incsetup)(&G__cpp_setupSimCameraCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSimCameraCint() { G__remove_setup_func("SimCameraCint"); }
};
G__cpp_setup_initSimCameraCint G__cpp_setup_initializerSimCameraCint;

