//
// File generated by rootcint at Mon Nov 28 11:07:02 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME CameraCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CameraCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MCameraAUX_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraAUX(void *p = 0);
   static void *newArray_MCameraAUX(Long_t size, void *p);
   static void delete_MCameraAUX(void *p);
   static void deleteArray_MCameraAUX(void *p);
   static void destruct_MCameraAUX(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraAUX*)
   {
      ::MCameraAUX *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraAUX >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraAUX", ::MCameraAUX::Class_Version(), "./MCameraAUX.h", 9,
                  typeid(::MCameraAUX), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraAUX::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraAUX) );
      instance.SetNew(&new_MCameraAUX);
      instance.SetNewArray(&newArray_MCameraAUX);
      instance.SetDelete(&delete_MCameraAUX);
      instance.SetDeleteArray(&deleteArray_MCameraAUX);
      instance.SetDestructor(&destruct_MCameraAUX);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraAUX*)
   {
      return GenerateInitInstanceLocal((::MCameraAUX*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraAUX*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraCalibration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraCalibration(void *p = 0);
   static void *newArray_MCameraCalibration(Long_t size, void *p);
   static void delete_MCameraCalibration(void *p);
   static void deleteArray_MCameraCalibration(void *p);
   static void destruct_MCameraCalibration(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraCalibration*)
   {
      ::MCameraCalibration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraCalibration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraCalibration", ::MCameraCalibration::Class_Version(), "./MCameraCalibration.h", 9,
                  typeid(::MCameraCalibration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraCalibration::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraCalibration) );
      instance.SetNew(&new_MCameraCalibration);
      instance.SetNewArray(&newArray_MCameraCalibration);
      instance.SetDelete(&delete_MCameraCalibration);
      instance.SetDeleteArray(&deleteArray_MCameraCalibration);
      instance.SetDestructor(&destruct_MCameraCalibration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraCalibration*)
   {
      return GenerateInitInstanceLocal((::MCameraCalibration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraCalibration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraCooling_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraCooling(void *p = 0);
   static void *newArray_MCameraCooling(Long_t size, void *p);
   static void delete_MCameraCooling(void *p);
   static void deleteArray_MCameraCooling(void *p);
   static void destruct_MCameraCooling(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraCooling*)
   {
      ::MCameraCooling *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraCooling >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraCooling", ::MCameraCooling::Class_Version(), "./MCameraCooling.h", 9,
                  typeid(::MCameraCooling), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraCooling::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraCooling) );
      instance.SetNew(&new_MCameraCooling);
      instance.SetNewArray(&newArray_MCameraCooling);
      instance.SetDelete(&delete_MCameraCooling);
      instance.SetDeleteArray(&deleteArray_MCameraCooling);
      instance.SetDestructor(&destruct_MCameraCooling);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraCooling*)
   {
      return GenerateInitInstanceLocal((::MCameraCooling*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraCooling*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraHV_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraHV(void *p = 0);
   static void *newArray_MCameraHV(Long_t size, void *p);
   static void delete_MCameraHV(void *p);
   static void deleteArray_MCameraHV(void *p);
   static void destruct_MCameraHV(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraHV*)
   {
      ::MCameraHV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraHV >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraHV", ::MCameraHV::Class_Version(), "./MCameraHV.h", 16,
                  typeid(::MCameraHV), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraHV::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraHV) );
      instance.SetNew(&new_MCameraHV);
      instance.SetNewArray(&newArray_MCameraHV);
      instance.SetDelete(&delete_MCameraHV);
      instance.SetDeleteArray(&deleteArray_MCameraHV);
      instance.SetDestructor(&destruct_MCameraHV);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraHV*)
   {
      return GenerateInitInstanceLocal((::MCameraHV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraHV*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraPowerSupply_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraPowerSupply(void *p = 0);
   static void *newArray_MCameraPowerSupply(Long_t size, void *p);
   static void delete_MCameraPowerSupply(void *p);
   static void deleteArray_MCameraPowerSupply(void *p);
   static void destruct_MCameraPowerSupply(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraPowerSupply*)
   {
      ::MCameraPowerSupply *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraPowerSupply >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraPowerSupply", ::MCameraPowerSupply::Class_Version(), "./MCameraPowerSupply.h", 9,
                  typeid(::MCameraPowerSupply), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraPowerSupply::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraPowerSupply) );
      instance.SetNew(&new_MCameraPowerSupply);
      instance.SetNewArray(&newArray_MCameraPowerSupply);
      instance.SetDelete(&delete_MCameraPowerSupply);
      instance.SetDeleteArray(&deleteArray_MCameraPowerSupply);
      instance.SetDestructor(&destruct_MCameraPowerSupply);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraPowerSupply*)
   {
      return GenerateInitInstanceLocal((::MCameraPowerSupply*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraPowerSupply*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraLV_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraLV(void *p = 0);
   static void *newArray_MCameraLV(Long_t size, void *p);
   static void delete_MCameraLV(void *p);
   static void deleteArray_MCameraLV(void *p);
   static void destruct_MCameraLV(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraLV*)
   {
      ::MCameraLV *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraLV >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraLV", ::MCameraLV::Class_Version(), "./MCameraLV.h", 13,
                  typeid(::MCameraLV), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraLV::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraLV) );
      instance.SetNew(&new_MCameraLV);
      instance.SetNewArray(&newArray_MCameraLV);
      instance.SetDelete(&delete_MCameraLV);
      instance.SetDeleteArray(&deleteArray_MCameraLV);
      instance.SetDestructor(&destruct_MCameraLV);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraLV*)
   {
      return GenerateInitInstanceLocal((::MCameraLV*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraLV*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraTD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraTD(void *p = 0);
   static void *newArray_MCameraTD(Long_t size, void *p);
   static void delete_MCameraTD(void *p);
   static void deleteArray_MCameraTD(void *p);
   static void destruct_MCameraTD(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraTD*)
   {
      ::MCameraTD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraTD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraTD", ::MCameraTD::Class_Version(), "./MCameraTD.h", 16,
                  typeid(::MCameraTD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraTD::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraTD) );
      instance.SetNew(&new_MCameraTD);
      instance.SetNewArray(&newArray_MCameraTD);
      instance.SetDelete(&delete_MCameraTD);
      instance.SetDeleteArray(&deleteArray_MCameraTD);
      instance.SetDestructor(&destruct_MCameraTD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraTD*)
   {
      return GenerateInitInstanceLocal((::MCameraTD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraTD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraTH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraTH(void *p = 0);
   static void *newArray_MCameraTH(Long_t size, void *p);
   static void delete_MCameraTH(void *p);
   static void deleteArray_MCameraTH(void *p);
   static void destruct_MCameraTH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraTH*)
   {
      ::MCameraTH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraTH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraTH", ::MCameraTH::Class_Version(), "./MCameraTH.h", 21,
                  typeid(::MCameraTH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraTH::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraTH) );
      instance.SetNew(&new_MCameraTH);
      instance.SetNewArray(&newArray_MCameraTH);
      instance.SetDelete(&delete_MCameraTH);
      instance.SetDeleteArray(&deleteArray_MCameraTH);
      instance.SetDestructor(&destruct_MCameraTH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraTH*)
   {
      return GenerateInitInstanceLocal((::MCameraTH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraTH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraRecTemp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraRecTemp(void *p = 0);
   static void *newArray_MCameraRecTemp(Long_t size, void *p);
   static void delete_MCameraRecTemp(void *p);
   static void deleteArray_MCameraRecTemp(void *p);
   static void destruct_MCameraRecTemp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraRecTemp*)
   {
      ::MCameraRecTemp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraRecTemp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraRecTemp", ::MCameraRecTemp::Class_Version(), "./MCameraRecTemp.h", 13,
                  typeid(::MCameraRecTemp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraRecTemp::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraRecTemp) );
      instance.SetNew(&new_MCameraRecTemp);
      instance.SetNewArray(&newArray_MCameraRecTemp);
      instance.SetDelete(&delete_MCameraRecTemp);
      instance.SetDeleteArray(&deleteArray_MCameraRecTemp);
      instance.SetDestructor(&destruct_MCameraRecTemp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraRecTemp*)
   {
      return GenerateInitInstanceLocal((::MCameraRecTemp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraRecTemp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraDC(void *p = 0);
   static void *newArray_MCameraDC(Long_t size, void *p);
   static void delete_MCameraDC(void *p);
   static void deleteArray_MCameraDC(void *p);
   static void destruct_MCameraDC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraDC*)
   {
      ::MCameraDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraDC", ::MCameraDC::Class_Version(), "./MCameraDC.h", 16,
                  typeid(::MCameraDC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraDC::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraDC) );
      instance.SetNew(&new_MCameraDC);
      instance.SetNewArray(&newArray_MCameraDC);
      instance.SetDelete(&delete_MCameraDC);
      instance.SetDeleteArray(&deleteArray_MCameraDC);
      instance.SetDestructor(&destruct_MCameraDC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraDC*)
   {
      return GenerateInitInstanceLocal((::MCameraDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraLid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraLid(void *p = 0);
   static void *newArray_MCameraLid(Long_t size, void *p);
   static void delete_MCameraLid(void *p);
   static void deleteArray_MCameraLid(void *p);
   static void destruct_MCameraLid(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraLid*)
   {
      ::MCameraLid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraLid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraLid", ::MCameraLid::Class_Version(), "./MCameraLid.h", 11,
                  typeid(::MCameraLid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraLid::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraLid) );
      instance.SetNew(&new_MCameraLid);
      instance.SetNewArray(&newArray_MCameraLid);
      instance.SetDelete(&delete_MCameraLid);
      instance.SetDeleteArray(&deleteArray_MCameraLid);
      instance.SetDestructor(&destruct_MCameraLid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraLid*)
   {
      return GenerateInitInstanceLocal((::MCameraLid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraLid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraLids_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraLids(void *p = 0);
   static void *newArray_MCameraLids(Long_t size, void *p);
   static void delete_MCameraLids(void *p);
   static void deleteArray_MCameraLids(void *p);
   static void destruct_MCameraLids(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraLids*)
   {
      ::MCameraLids *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraLids >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraLids", ::MCameraLids::Class_Version(), "./MCameraLids.h", 13,
                  typeid(::MCameraLids), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraLids::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraLids) );
      instance.SetNew(&new_MCameraLids);
      instance.SetNewArray(&newArray_MCameraLids);
      instance.SetDelete(&delete_MCameraLids);
      instance.SetDeleteArray(&deleteArray_MCameraLids);
      instance.SetDestructor(&destruct_MCameraLids);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraLids*)
   {
      return GenerateInitInstanceLocal((::MCameraLids*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraLids*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraActiveLoad_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraActiveLoad(void *p = 0);
   static void *newArray_MCameraActiveLoad(Long_t size, void *p);
   static void delete_MCameraActiveLoad(void *p);
   static void deleteArray_MCameraActiveLoad(void *p);
   static void destruct_MCameraActiveLoad(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraActiveLoad*)
   {
      ::MCameraActiveLoad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraActiveLoad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraActiveLoad", ::MCameraActiveLoad::Class_Version(), "./MCameraActiveLoad.h", 9,
                  typeid(::MCameraActiveLoad), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraActiveLoad::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraActiveLoad) );
      instance.SetNew(&new_MCameraActiveLoad);
      instance.SetNewArray(&newArray_MCameraActiveLoad);
      instance.SetDelete(&delete_MCameraActiveLoad);
      instance.SetDeleteArray(&deleteArray_MCameraActiveLoad);
      instance.SetDestructor(&destruct_MCameraActiveLoad);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraActiveLoad*)
   {
      return GenerateInitInstanceLocal((::MCameraActiveLoad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraActiveLoad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraCentralPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraCentralPix(void *p = 0);
   static void *newArray_MCameraCentralPix(Long_t size, void *p);
   static void delete_MCameraCentralPix(void *p);
   static void deleteArray_MCameraCentralPix(void *p);
   static void destruct_MCameraCentralPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraCentralPix*)
   {
      ::MCameraCentralPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraCentralPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraCentralPix", ::MCameraCentralPix::Class_Version(), "./MCameraCentralPix.h", 9,
                  typeid(::MCameraCentralPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraCentralPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraCentralPix) );
      instance.SetNew(&new_MCameraCentralPix);
      instance.SetNewArray(&newArray_MCameraCentralPix);
      instance.SetDelete(&delete_MCameraCentralPix);
      instance.SetDeleteArray(&deleteArray_MCameraCentralPix);
      instance.SetDestructor(&destruct_MCameraCentralPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraCentralPix*)
   {
      return GenerateInitInstanceLocal((::MCameraCentralPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraCentralPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MCameraAUX::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraAUX::Class_Name()
{
   return "MCameraAUX";
}

//______________________________________________________________________________
const char *MCameraAUX::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraAUX*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraAUX::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraAUX*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraAUX::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraAUX*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraAUX::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraAUX*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraCalibration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraCalibration::Class_Name()
{
   return "MCameraCalibration";
}

//______________________________________________________________________________
const char *MCameraCalibration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCalibration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraCalibration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCalibration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraCalibration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCalibration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraCalibration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCalibration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraCooling::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraCooling::Class_Name()
{
   return "MCameraCooling";
}

//______________________________________________________________________________
const char *MCameraCooling::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCooling*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraCooling::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCooling*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraCooling::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCooling*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraCooling::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCooling*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraHV::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraHV::Class_Name()
{
   return "MCameraHV";
}

//______________________________________________________________________________
const char *MCameraHV::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraHV*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraHV::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraHV*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraHV::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraHV*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraHV::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraHV*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraPowerSupply::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraPowerSupply::Class_Name()
{
   return "MCameraPowerSupply";
}

//______________________________________________________________________________
const char *MCameraPowerSupply::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraPowerSupply*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraPowerSupply::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraPowerSupply*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraPowerSupply::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraPowerSupply*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraPowerSupply::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraPowerSupply*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraLV::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraLV::Class_Name()
{
   return "MCameraLV";
}

//______________________________________________________________________________
const char *MCameraLV::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLV*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraLV::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLV*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraLV::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLV*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraLV::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLV*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraTD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraTD::Class_Name()
{
   return "MCameraTD";
}

//______________________________________________________________________________
const char *MCameraTD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraTD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraTD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraTD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraTH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraTH::Class_Name()
{
   return "MCameraTH";
}

//______________________________________________________________________________
const char *MCameraTH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraTH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraTH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraTH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraTH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraRecTemp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraRecTemp::Class_Name()
{
   return "MCameraRecTemp";
}

//______________________________________________________________________________
const char *MCameraRecTemp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraRecTemp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraRecTemp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraRecTemp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraRecTemp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraRecTemp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraRecTemp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraRecTemp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraDC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraDC::Class_Name()
{
   return "MCameraDC";
}

//______________________________________________________________________________
const char *MCameraDC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraDC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraDC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraDC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraDC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraLid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraLid::Class_Name()
{
   return "MCameraLid";
}

//______________________________________________________________________________
const char *MCameraLid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraLid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraLid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraLid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraLids::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraLids::Class_Name()
{
   return "MCameraLids";
}

//______________________________________________________________________________
const char *MCameraLids::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLids*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraLids::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLids*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraLids::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLids*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraLids::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraLids*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraActiveLoad::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraActiveLoad::Class_Name()
{
   return "MCameraActiveLoad";
}

//______________________________________________________________________________
const char *MCameraActiveLoad::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraActiveLoad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraActiveLoad::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraActiveLoad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraActiveLoad::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraActiveLoad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraActiveLoad::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraActiveLoad*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraCentralPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraCentralPix::Class_Name()
{
   return "MCameraCentralPix";
}

//______________________________________________________________________________
const char *MCameraCentralPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCentralPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraCentralPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCentralPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraCentralPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCentralPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraCentralPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraCentralPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MCameraCooling::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraCooling.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraCooling::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraCooling::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraCooling::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraCooling.
      TClass *R__cl = ::MCameraCooling::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusPressureHi", &fStatusPressureHi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusPressureLo", &fStatusPressureLo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusPump", &fStatusPump);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusRefrigrerator", &fStatusRefrigrerator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusValve", &fStatusValve);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusResistor", &fStatusResistor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusFans", &fStatusFans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempCenter", &fTempCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempWall", &fTempWall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempOptLink", &fTempOptLink);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempWater", &fTempWater);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHumWall", &fHumWall);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHumCenter", &fHumCenter);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraCooling(void *p) {
      return  p ? new(p) ::MCameraCooling : new ::MCameraCooling;
   }
   static void *newArray_MCameraCooling(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraCooling[nElements] : new ::MCameraCooling[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraCooling(void *p) {
      delete ((::MCameraCooling*)p);
   }
   static void deleteArray_MCameraCooling(void *p) {
      delete [] ((::MCameraCooling*)p);
   }
   static void destruct_MCameraCooling(void *p) {
      typedef ::MCameraCooling current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraCooling

//______________________________________________________________________________
void MCameraAUX::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraAUX.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraAUX::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraAUX::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraAUX::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraAUX.
      TClass *R__cl = ::MCameraAUX::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestCaosLEDs", &fRequestCaosLEDs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestFansFADC", &fRequestFansFADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusCaosLEDs", &fStatusCaosLEDs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusFansFADC", &fStatusFansFADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempCountingHouse1", &fTempCountingHouse1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempCountingHouse2", &fTempCountingHouse2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempCountingHouse3", &fTempCountingHouse3);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraAUX(void *p) {
      return  p ? new(p) ::MCameraAUX : new ::MCameraAUX;
   }
   static void *newArray_MCameraAUX(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraAUX[nElements] : new ::MCameraAUX[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraAUX(void *p) {
      delete ((::MCameraAUX*)p);
   }
   static void deleteArray_MCameraAUX(void *p) {
      delete [] ((::MCameraAUX*)p);
   }
   static void destruct_MCameraAUX(void *p) {
      typedef ::MCameraAUX current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraAUX

//______________________________________________________________________________
void MCameraLid::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraLid.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraLid::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraLid::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraLid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraLid.
      TClass *R__cl = ::MCameraLid::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLimitOpen", &fLimitOpen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLimitClose", &fLimitClose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSafetyLimitOpen", &fSafetyLimitOpen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSafetyLimitClose", &fSafetyLimitClose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusLid", &fStatusLid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusMotor", &fStatusMotor);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraLid(void *p) {
      return  p ? new(p) ::MCameraLid : new ::MCameraLid;
   }
   static void *newArray_MCameraLid(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraLid[nElements] : new ::MCameraLid[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraLid(void *p) {
      delete ((::MCameraLid*)p);
   }
   static void deleteArray_MCameraLid(void *p) {
      delete [] ((::MCameraLid*)p);
   }
   static void destruct_MCameraLid(void *p) {
      typedef ::MCameraLid current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraLid

//______________________________________________________________________________
void MCameraLids::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraLids.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraLids::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraLids::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraLids::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraLids.
      TClass *R__cl = ::MCameraLids::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLidA", &fLidA);
      R__insp.InspectMember(fLidA, "fLidA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLidB", &fLidB);
      R__insp.InspectMember(fLidB, "fLidB.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraLids(void *p) {
      return  p ? new(p) ::MCameraLids : new ::MCameraLids;
   }
   static void *newArray_MCameraLids(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraLids[nElements] : new ::MCameraLids[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraLids(void *p) {
      delete ((::MCameraLids*)p);
   }
   static void deleteArray_MCameraLids(void *p) {
      delete [] ((::MCameraLids*)p);
   }
   static void destruct_MCameraLids(void *p) {
      typedef ::MCameraLids current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraLids

//______________________________________________________________________________
void MCameraHV::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraHV.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraHV::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraHV::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraHV::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraHV.
      TClass *R__cl = ::MCameraHV::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusRamping", &fStatusRamping);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltageA", &fVoltageA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltageB", &fVoltageB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentA", &fCurrentA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentB", &fCurrentB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHV", &fHV);
      R__insp.InspectMember(fHV, "fHV.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraHV(void *p) {
      return  p ? new(p) ::MCameraHV : new ::MCameraHV;
   }
   static void *newArray_MCameraHV(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraHV[nElements] : new ::MCameraHV[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraHV(void *p) {
      delete ((::MCameraHV*)p);
   }
   static void deleteArray_MCameraHV(void *p) {
      delete [] ((::MCameraHV*)p);
   }
   static void destruct_MCameraHV(void *p) {
      typedef ::MCameraHV current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraHV

//______________________________________________________________________________
void MCameraLV::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraLV.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraLV::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraLV::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraLV::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraLV.
      TClass *R__cl = ::MCameraLV::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestPowerSupply", &fRequestPowerSupply);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTemp", &fTemp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHumidity", &fHumidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPowerSupplyA", &fPowerSupplyA);
      R__insp.InspectMember(fPowerSupplyA, "fPowerSupplyA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPowerSupplyB", &fPowerSupplyB);
      R__insp.InspectMember(fPowerSupplyB, "fPowerSupplyB.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraLV(void *p) {
      return  p ? new(p) ::MCameraLV : new ::MCameraLV;
   }
   static void *newArray_MCameraLV(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraLV[nElements] : new ::MCameraLV[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraLV(void *p) {
      delete ((::MCameraLV*)p);
   }
   static void deleteArray_MCameraLV(void *p) {
      delete [] ((::MCameraLV*)p);
   }
   static void destruct_MCameraLV(void *p) {
      typedef ::MCameraLV current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraLV

//______________________________________________________________________________
void MCameraDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraDC::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraDC.
      TClass *R__cl = ::MCameraDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArray", &fArray);
      R__insp.InspectMember(fArray, "fArray.");
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraDC(void *p) {
      return  p ? new(p) ::MCameraDC : new ::MCameraDC;
   }
   static void *newArray_MCameraDC(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraDC[nElements] : new ::MCameraDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraDC(void *p) {
      delete ((::MCameraDC*)p);
   }
   static void deleteArray_MCameraDC(void *p) {
      delete [] ((::MCameraDC*)p);
   }
   static void destruct_MCameraDC(void *p) {
      typedef ::MCameraDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraDC

//______________________________________________________________________________
void MCameraTH::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraTH.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraTH::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraTH::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraTH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraTH.
      TClass *R__cl = ::MCameraTH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTH", &fTH);
      R__insp.InspectMember(fTH, "fTH.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsValid", &fIsValid);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraTH(void *p) {
      return  p ? new(p) ::MCameraTH : new ::MCameraTH;
   }
   static void *newArray_MCameraTH(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraTH[nElements] : new ::MCameraTH[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraTH(void *p) {
      delete ((::MCameraTH*)p);
   }
   static void deleteArray_MCameraTH(void *p) {
      delete [] ((::MCameraTH*)p);
   }
   static void destruct_MCameraTH(void *p) {
      typedef ::MCameraTH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraTH

//______________________________________________________________________________
void MCameraTD::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraTD.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraTD::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraTD::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraTD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraTD.
      TClass *R__cl = ::MCameraTD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTD", &fTD);
      R__insp.InspectMember(fTD, "fTD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsValid", &fIsValid);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraTD(void *p) {
      return  p ? new(p) ::MCameraTD : new ::MCameraTD;
   }
   static void *newArray_MCameraTD(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraTD[nElements] : new ::MCameraTD[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraTD(void *p) {
      delete ((::MCameraTD*)p);
   }
   static void deleteArray_MCameraTD(void *p) {
      delete [] ((::MCameraTD*)p);
   }
   static void destruct_MCameraTD(void *p) {
      typedef ::MCameraTD current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraTD

//______________________________________________________________________________
void MCameraRecTemp::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraRecTemp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraRecTemp::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraRecTemp::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraRecTemp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraRecTemp.
      TClass *R__cl = ::MCameraRecTemp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecTemp", &fRecTemp);
      R__insp.InspectMember(fRecTemp, "fRecTemp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsValid", &fIsValid);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraRecTemp(void *p) {
      return  p ? new(p) ::MCameraRecTemp : new ::MCameraRecTemp;
   }
   static void *newArray_MCameraRecTemp(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraRecTemp[nElements] : new ::MCameraRecTemp[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraRecTemp(void *p) {
      delete ((::MCameraRecTemp*)p);
   }
   static void deleteArray_MCameraRecTemp(void *p) {
      delete [] ((::MCameraRecTemp*)p);
   }
   static void destruct_MCameraRecTemp(void *p) {
      typedef ::MCameraRecTemp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraRecTemp

//______________________________________________________________________________
void MCameraActiveLoad::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraActiveLoad.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraActiveLoad::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraActiveLoad::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraActiveLoad::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraActiveLoad.
      TClass *R__cl = ::MCameraActiveLoad::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltage360A", &fVoltage360A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntens360A", &fIntens360A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltage360B", &fVoltage360B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntens360B", &fIntens360B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltage175A", &fVoltage175A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntens175A", &fIntens175A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltage175B", &fVoltage175B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntens175B", &fIntens175B);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraActiveLoad(void *p) {
      return  p ? new(p) ::MCameraActiveLoad : new ::MCameraActiveLoad;
   }
   static void *newArray_MCameraActiveLoad(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraActiveLoad[nElements] : new ::MCameraActiveLoad[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraActiveLoad(void *p) {
      delete ((::MCameraActiveLoad*)p);
   }
   static void deleteArray_MCameraActiveLoad(void *p) {
      delete [] ((::MCameraActiveLoad*)p);
   }
   static void destruct_MCameraActiveLoad(void *p) {
      typedef ::MCameraActiveLoad current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraActiveLoad

//______________________________________________________________________________
void MCameraCentralPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraCentralPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraCentralPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraCentralPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraCentralPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraCentralPix.
      TClass *R__cl = ::MCameraCentralPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDC", &fDC);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraCentralPix(void *p) {
      return  p ? new(p) ::MCameraCentralPix : new ::MCameraCentralPix;
   }
   static void *newArray_MCameraCentralPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraCentralPix[nElements] : new ::MCameraCentralPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraCentralPix(void *p) {
      delete ((::MCameraCentralPix*)p);
   }
   static void deleteArray_MCameraCentralPix(void *p) {
      delete [] ((::MCameraCentralPix*)p);
   }
   static void destruct_MCameraCentralPix(void *p) {
      typedef ::MCameraCentralPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraCentralPix

//______________________________________________________________________________
void MCameraCalibration::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraCalibration.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraCalibration::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraCalibration::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraCalibration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraCalibration.
      TClass *R__cl = ::MCameraCalibration::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusCANbus", &fStatusCANbus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusIO", &fStatusIO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatusLoVoltage", &fStatusLoVoltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestHiVoltage", &fRequestHiVoltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestLoVoltage", &fRequestLoVoltage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestContLight", &fRequestContLight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRequestPinDiode", &fRequestPinDiode);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraCalibration(void *p) {
      return  p ? new(p) ::MCameraCalibration : new ::MCameraCalibration;
   }
   static void *newArray_MCameraCalibration(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraCalibration[nElements] : new ::MCameraCalibration[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraCalibration(void *p) {
      delete ((::MCameraCalibration*)p);
   }
   static void deleteArray_MCameraCalibration(void *p) {
      delete [] ((::MCameraCalibration*)p);
   }
   static void destruct_MCameraCalibration(void *p) {
      typedef ::MCameraCalibration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraCalibration

//______________________________________________________________________________
void MCameraPowerSupply::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraPowerSupply.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraPowerSupply::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraPowerSupply::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraPowerSupply::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraPowerSupply.
      TClass *R__cl = ::MCameraPowerSupply::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltagePos5V", &fVoltagePos5V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltagePos12V", &fVoltagePos12V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltageNeg12V", &fVoltageNeg12V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVoltageOptLinkPos12V", &fVoltageOptLinkPos12V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentPos5V", &fCurrentPos5V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentPos12V", &fCurrentPos12V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentNeg12V", &fCurrentNeg12V);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentOptLinkPos12V", &fCurrentOptLinkPos12V);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraPowerSupply(void *p) {
      return  p ? new(p) ::MCameraPowerSupply : new ::MCameraPowerSupply;
   }
   static void *newArray_MCameraPowerSupply(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraPowerSupply[nElements] : new ::MCameraPowerSupply[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraPowerSupply(void *p) {
      delete ((::MCameraPowerSupply*)p);
   }
   static void deleteArray_MCameraPowerSupply(void *p) {
      delete [] ((::MCameraPowerSupply*)p);
   }
   static void destruct_MCameraPowerSupply(void *p) {
      typedef ::MCameraPowerSupply current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraPowerSupply

/********************************************************
* CameraCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCameraCint();

extern "C" void G__set_cpp_environmentCameraCint() {
  G__cpp_reset_tagtableCameraCint();
}
#include <new>
extern "C" int G__cpp_dllrevCameraCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MCameraAUX */
static int G__CameraCint_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraAUX* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraAUX[n];
     } else {
       p = new((void*) gvp) MCameraAUX[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraAUX;
     } else {
       p = new((void*) gvp) MCameraAUX;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraAUX*) G__getstructoffset())->GetRequestCaosLEDs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraAUX*) G__getstructoffset())->GetRequestFansFADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraAUX*) G__getstructoffset())->GetStatusCaosLEDs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraAUX*) G__getstructoffset())->GetStatusFansFADC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraAUX*) G__getstructoffset())->GetTempCountingHouse1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraAUX*) G__getstructoffset())->GetTempCountingHouse2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraAUX*) G__getstructoffset())->GetTempCountingHouse3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraAUX::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraAUX::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraAUX::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraAUX::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraAUX*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraAUX::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraAUX::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraAUX::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_171_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraAUX::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_171_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraAUX* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraAUX(*(MCameraAUX*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraAUX G__TMCameraAUX;
static int G__CameraCint_171_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraAUX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraAUX*) (soff+(sizeof(MCameraAUX)*i)))->~G__TMCameraAUX();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraAUX*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraAUX*) (soff))->~G__TMCameraAUX();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_171_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraAUX* dest = (MCameraAUX*) G__getstructoffset();
   *dest = *(MCameraAUX*) libp->para[0].ref;
   const MCameraAUX& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraCalibration */
static int G__CameraCint_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCalibration* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCalibration[n];
     } else {
       p = new((void*) gvp) MCameraCalibration[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCalibration;
     } else {
       p = new((void*) gvp) MCameraCalibration;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCalibration*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCalibration*) G__getstructoffset())->GetStatusCANbus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCalibration*) G__getstructoffset())->GetStatusIO());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCalibration*) G__getstructoffset())->GetStatusLoVoltage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCalibration*) G__getstructoffset())->GetRequestHiVoltage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCalibration*) G__getstructoffset())->GetRequestLoVoltage());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCalibration*) G__getstructoffset())->GetRequestContLight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCalibration*) G__getstructoffset())->GetRequestPinDiode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraCalibration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCalibration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraCalibration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraCalibration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraCalibration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCalibration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCalibration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCalibration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCalibration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraCalibration* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraCalibration(*(MCameraCalibration*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraCalibration G__TMCameraCalibration;
static int G__CameraCint_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraCalibration*) (soff+(sizeof(MCameraCalibration)*i)))->~G__TMCameraCalibration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraCalibration*) (soff))->~G__TMCameraCalibration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCalibration* dest = (MCameraCalibration*) G__getstructoffset();
   *dest = *(MCameraCalibration*) libp->para[0].ref;
   const MCameraCalibration& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraCooling */
static int G__CameraCint_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCooling* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCooling[n];
     } else {
       p = new((void*) gvp) MCameraCooling[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCooling;
     } else {
       p = new((void*) gvp) MCameraCooling;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusPressureHi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusPressureLo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusPump());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusRefrigrerator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusValve());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusResistor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCooling*) G__getstructoffset())->GetStatusFans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraCooling*) G__getstructoffset())->GetTempCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraCooling*) G__getstructoffset())->GetTempWall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraCooling*) G__getstructoffset())->GetTempOptLink());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraCooling*) G__getstructoffset())->GetTempWater());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCooling*) G__getstructoffset())->GetHumWall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraCooling*) G__getstructoffset())->GetHumCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraCooling::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCooling::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraCooling::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraCooling::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraCooling*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCooling::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCooling::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCooling::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_174_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCooling::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_174_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraCooling* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraCooling(*(MCameraCooling*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraCooling G__TMCameraCooling;
static int G__CameraCint_174_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraCooling*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraCooling*) (soff+(sizeof(MCameraCooling)*i)))->~G__TMCameraCooling();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraCooling*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraCooling*) (soff))->~G__TMCameraCooling();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_174_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCooling* dest = (MCameraCooling*) G__getstructoffset();
   *dest = *(MCameraCooling*) libp->para[0].ref;
   const MCameraCooling& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraHV */
static int G__CameraCint_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraHV* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraHV[n];
     } else {
       p = new((void*) gvp) MCameraHV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraHV;
     } else {
       p = new((void*) gvp) MCameraHV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraHV));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraHV*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraHV*) G__getstructoffset())->GetStatusRamping());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MCameraHV*) G__getstructoffset())->GetVoltageA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MCameraHV*) G__getstructoffset())->GetVoltageB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraHV*) G__getstructoffset())->GetCurrentA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraHV*) G__getstructoffset())->GetCurrentB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraHV*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCameraHV*) G__getstructoffset())->operator[]((const UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraHV::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraHV::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraHV::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraHV::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraHV*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraHV::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraHV::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraHV::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraHV::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraHV* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraHV(*(MCameraHV*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraHV));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraHV G__TMCameraHV;
static int G__CameraCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraHV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraHV*) (soff+(sizeof(MCameraHV)*i)))->~G__TMCameraHV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraHV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraHV*) (soff))->~G__TMCameraHV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraHV* dest = (MCameraHV*) G__getstructoffset();
   *dest = *(MCameraHV*) libp->para[0].ref;
   const MCameraHV& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraPowerSupply */
static int G__CameraCint_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraPowerSupply* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraPowerSupply[n];
     } else {
       p = new((void*) gvp) MCameraPowerSupply[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraPowerSupply;
     } else {
       p = new((void*) gvp) MCameraPowerSupply;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetVoltagePos5V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetVoltagePos12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetVoltageNeg12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetVoltageOptLinkPos12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetCurrentPos5V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetCurrentPos12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetCurrentNeg12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraPowerSupply*) G__getstructoffset())->GetCurrentOptLinkPos12V());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraPowerSupply::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraPowerSupply::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraPowerSupply::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraPowerSupply::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraPowerSupply*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraPowerSupply::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraPowerSupply::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraPowerSupply::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_180_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraPowerSupply::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_180_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraPowerSupply* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraPowerSupply(*(MCameraPowerSupply*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraPowerSupply G__TMCameraPowerSupply;
static int G__CameraCint_180_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraPowerSupply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraPowerSupply*) (soff+(sizeof(MCameraPowerSupply)*i)))->~G__TMCameraPowerSupply();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraPowerSupply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraPowerSupply*) (soff))->~G__TMCameraPowerSupply();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_180_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraPowerSupply* dest = (MCameraPowerSupply*) G__getstructoffset();
   *dest = *(MCameraPowerSupply*) libp->para[0].ref;
   const MCameraPowerSupply& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraLV */
static int G__CameraCint_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLV* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLV[n];
     } else {
       p = new((void*) gvp) MCameraLV[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLV;
     } else {
       p = new((void*) gvp) MCameraLV;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLV));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraLV*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraLV*) G__getstructoffset())->GetRequestPowerSupply());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraLV*) G__getstructoffset())->GetTemp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraLV*) G__getstructoffset())->GetHumidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCameraPowerSupply& obj = ((const MCameraLV*) G__getstructoffset())->GetPowerSupplyA();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCameraPowerSupply& obj = ((const MCameraLV*) G__getstructoffset())->GetPowerSupplyB();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraLV::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLV::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraLV::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraLV::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraLV*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLV::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLV::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLV::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLV::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraLV* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraLV(*(MCameraLV*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLV));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraLV G__TMCameraLV;
static int G__CameraCint_181_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraLV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraLV*) (soff+(sizeof(MCameraLV)*i)))->~G__TMCameraLV();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraLV*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraLV*) (soff))->~G__TMCameraLV();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_181_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLV* dest = (MCameraLV*) G__getstructoffset();
   *dest = *(MCameraLV*) libp->para[0].ref;
   const MCameraLV& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraTD */
static int G__CameraCint_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraTD* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTD(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCameraTD(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTD((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCameraTD((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTD((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCameraTD((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraTD[n];
       } else {
         p = new((void*) gvp) MCameraTD[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraTD;
       } else {
         p = new((void*) gvp) MCameraTD;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraTD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((MCameraTD*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraTD*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraTD*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraTD*) G__getstructoffset())->Invalidate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCameraTD*) G__getstructoffset())->SetValid((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCameraTD*) G__getstructoffset())->SetValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraTD*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraTD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraTD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraTD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraTD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraTD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_183_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraTD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_183_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraTD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraTD(*(MCameraTD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraTD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraTD G__TMCameraTD;
static int G__CameraCint_183_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraTD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraTD*) (soff+(sizeof(MCameraTD)*i)))->~G__TMCameraTD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraTD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraTD*) (soff))->~G__TMCameraTD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_183_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraTD* dest = (MCameraTD*) G__getstructoffset();
   *dest = *(MCameraTD*) libp->para[0].ref;
   const MCameraTD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraTH */
static int G__CameraCint_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraTH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTH(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCameraTH(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTH((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCameraTH((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraTH((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCameraTH((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraTH[n];
       } else {
         p = new((void*) gvp) MCameraTH[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraTH;
       } else {
         p = new((void*) gvp) MCameraTH;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraTH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((MCameraTH*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraTH*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraTH*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraTH*) G__getstructoffset())->Invalidate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCameraTH*) G__getstructoffset())->SetValid((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCameraTH*) G__getstructoffset())->SetValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraTH*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraTH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraTH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraTH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraTH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraTH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraTH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraTH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraTH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraTH(*(MCameraTH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraTH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraTH G__TMCameraTH;
static int G__CameraCint_184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraTH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraTH*) (soff+(sizeof(MCameraTH)*i)))->~G__TMCameraTH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraTH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraTH*) (soff))->~G__TMCameraTH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraTH* dest = (MCameraTH*) G__getstructoffset();
   *dest = *(MCameraTH*) libp->para[0].ref;
   const MCameraTH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraRecTemp */
static int G__CameraCint_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraRecTemp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraRecTemp(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCameraRecTemp(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraRecTemp((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCameraRecTemp((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraRecTemp((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCameraRecTemp((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraRecTemp[n];
       } else {
         p = new((void*) gvp) MCameraRecTemp[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraRecTemp;
       } else {
         p = new((void*) gvp) MCameraRecTemp;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraRecTemp*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraRecTemp*) G__getstructoffset())->Invalidate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCameraRecTemp*) G__getstructoffset())->SetValid((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCameraRecTemp*) G__getstructoffset())->SetValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraRecTemp*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraRecTemp*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraRecTemp*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraRecTemp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraRecTemp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraRecTemp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraRecTemp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraRecTemp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraRecTemp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraRecTemp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraRecTemp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraRecTemp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraRecTemp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraRecTemp(*(MCameraRecTemp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraRecTemp G__TMCameraRecTemp;
static int G__CameraCint_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraRecTemp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraRecTemp*) (soff+(sizeof(MCameraRecTemp)*i)))->~G__TMCameraRecTemp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraRecTemp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraRecTemp*) (soff))->~G__TMCameraRecTemp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraRecTemp* dest = (MCameraRecTemp*) G__getstructoffset();
   *dest = *(MCameraRecTemp*) libp->para[0].ref;
   const MCameraRecTemp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraDC */
static int G__CameraCint_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraDC(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCameraDC(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraDC((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCameraDC((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraDC((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCameraDC((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraDC[n];
       } else {
         p = new((void*) gvp) MCameraDC[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraDC;
       } else {
         p = new((void*) gvp) MCameraDC;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraDC*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraDC*) G__getstructoffset())->SetCurrent((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraDC*) G__getstructoffset())->GetCurrent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((MCameraDC*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((const MCameraDC*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraDC*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraDC*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_189_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_189_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraDC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraDC(*(MCameraDC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraDC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraDC G__TMCameraDC;
static int G__CameraCint_189_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraDC*) (soff+(sizeof(MCameraDC)*i)))->~G__TMCameraDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraDC*) (soff))->~G__TMCameraDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_189_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraDC* dest = (MCameraDC*) G__getstructoffset();
   *dest = *(MCameraDC*) libp->para[0].ref;
   const MCameraDC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraLid */
static int G__CameraCint_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLid* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLid[n];
     } else {
       p = new((void*) gvp) MCameraLid[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLid;
     } else {
       p = new((void*) gvp) MCameraLid;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraLid*) G__getstructoffset())->GetLimitOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraLid*) G__getstructoffset())->GetLimitClose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraLid*) G__getstructoffset())->GetSafetyLimitOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraLid*) G__getstructoffset())->GetSafetyLimitClose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraLid*) G__getstructoffset())->GetStatusLid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraLid*) G__getstructoffset())->GetStatusMotor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraLid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraLid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraLid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraLid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraLid* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraLid(*(MCameraLid*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLid));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraLid G__TMCameraLid;
static int G__CameraCint_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraLid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraLid*) (soff+(sizeof(MCameraLid)*i)))->~G__TMCameraLid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraLid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraLid*) (soff))->~G__TMCameraLid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLid* dest = (MCameraLid*) G__getstructoffset();
   *dest = *(MCameraLid*) libp->para[0].ref;
   const MCameraLid& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraLids */
static int G__CameraCint_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLids* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLids[n];
     } else {
       p = new((void*) gvp) MCameraLids[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraLids;
     } else {
       p = new((void*) gvp) MCameraLids;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLids));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MCameraLids*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCameraLid& obj = ((const MCameraLids*) G__getstructoffset())->GetLidA();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCameraLid& obj = ((const MCameraLids*) G__getstructoffset())->GetLidB();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraLids::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLids::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraLids::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraLids::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraLids*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLids::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLids::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraLids::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraLids::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraLids* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraLids(*(MCameraLids*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraLids));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraLids G__TMCameraLids;
static int G__CameraCint_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraLids*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraLids*) (soff+(sizeof(MCameraLids)*i)))->~G__TMCameraLids();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraLids*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraLids*) (soff))->~G__TMCameraLids();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraLids* dest = (MCameraLids*) G__getstructoffset();
   *dest = *(MCameraLids*) libp->para[0].ref;
   const MCameraLids& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraActiveLoad */
static int G__CameraCint_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraActiveLoad* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraActiveLoad[n];
     } else {
       p = new((void*) gvp) MCameraActiveLoad[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraActiveLoad;
     } else {
       p = new((void*) gvp) MCameraActiveLoad;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraActiveLoad*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetVoltage360A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetIntens360A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetVoltage360B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetIntens360B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetVoltage175A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetIntens175A());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetVoltage175B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCameraActiveLoad*) G__getstructoffset())->GetIntens175B());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraActiveLoad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraActiveLoad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraActiveLoad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraActiveLoad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraActiveLoad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraActiveLoad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraActiveLoad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraActiveLoad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraActiveLoad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_193_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraActiveLoad* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraActiveLoad(*(MCameraActiveLoad*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraActiveLoad G__TMCameraActiveLoad;
static int G__CameraCint_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraActiveLoad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraActiveLoad*) (soff+(sizeof(MCameraActiveLoad)*i)))->~G__TMCameraActiveLoad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraActiveLoad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraActiveLoad*) (soff))->~G__TMCameraActiveLoad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraActiveLoad* dest = (MCameraActiveLoad*) G__getstructoffset();
   *dest = *(MCameraActiveLoad*) libp->para[0].ref;
   const MCameraActiveLoad& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraCentralPix */
static int G__CameraCint_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCentralPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCentralPix[n];
     } else {
       p = new((void*) gvp) MCameraCentralPix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraCentralPix;
     } else {
       p = new((void*) gvp) MCameraCentralPix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCentralPix*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCameraCentralPix*) G__getstructoffset())->GetStatusCPix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCameraCentralPix*) G__getstructoffset())->GetDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraCentralPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCentralPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraCentralPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraCentralPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraCentralPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCentralPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCentralPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraCentralPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CameraCint_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraCentralPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__CameraCint_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraCentralPix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraCentralPix(*(MCameraCentralPix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraCentralPix G__TMCameraCentralPix;
static int G__CameraCint_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraCentralPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraCentralPix*) (soff+(sizeof(MCameraCentralPix)*i)))->~G__TMCameraCentralPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraCentralPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraCentralPix*) (soff))->~G__TMCameraCentralPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__CameraCint_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraCentralPix* dest = (MCameraCentralPix*) G__getstructoffset();
   *dest = *(MCameraCentralPix*) libp->para[0].ref;
   const MCameraCentralPix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MCameraAUX */

/* MCameraCalibration */

/* MCameraCooling */

/* MCameraHV */

/* MCameraPowerSupply */

/* MCameraLV */

/* MCameraTD */

/* MCameraTH */

/* MCameraRecTemp */

/* MCameraDC */

/* MCameraLid */

/* MCameraLids */

/* MCameraActiveLoad */

/* MCameraCentralPix */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCameraCint {
 public:
  G__Sizep2memfuncCameraCint(): p(&G__Sizep2memfuncCameraCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCameraCint::*p)();
};

size_t G__get_sizep2memfuncCameraCint()
{
  G__Sizep2memfuncCameraCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCameraCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX))) {
     MCameraAUX *G__Lderived;
     G__Lderived=(MCameraAUX*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration))) {
     MCameraCalibration *G__Lderived;
     G__Lderived=(MCameraCalibration*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling))) {
     MCameraCooling *G__Lderived;
     G__Lderived=(MCameraCooling*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV))) {
     MCameraHV *G__Lderived;
     G__Lderived=(MCameraHV*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV),G__get_linked_tagnum(&G__CameraCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply))) {
     MCameraPowerSupply *G__Lderived;
     G__Lderived=(MCameraPowerSupply*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraLV))) {
     MCameraLV *G__Lderived;
     G__Lderived=(MCameraLV*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLV),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLV),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD))) {
     MCameraTD *G__Lderived;
     G__Lderived=(MCameraTD*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD),G__get_linked_tagnum(&G__CameraCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH))) {
     MCameraTH *G__Lderived;
     G__Lderived=(MCameraTH*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH),G__get_linked_tagnum(&G__CameraCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp))) {
     MCameraRecTemp *G__Lderived;
     G__Lderived=(MCameraRecTemp*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC))) {
     MCameraDC *G__Lderived;
     G__Lderived=(MCameraDC*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC),G__get_linked_tagnum(&G__CameraCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraLid))) {
     MCameraLid *G__Lderived;
     G__Lderived=(MCameraLid*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLid),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLid),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraLids))) {
     MCameraLids *G__Lderived;
     G__Lderived=(MCameraLids*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLids),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLids),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad))) {
     MCameraActiveLoad *G__Lderived;
     G__Lderived=(MCameraActiveLoad*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix))) {
     MCameraCentralPix *G__Lderived;
     G__Lderived=(MCameraCentralPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix),G__get_linked_tagnum(&G__CameraCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix),G__get_linked_tagnum(&G__CameraCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCameraCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MCameraAUX */
static void G__setup_memvarMCameraAUX(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX));
   { MCameraAUX *p; p=(MCameraAUX*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestCaosLEDs=",0,"Requested status: o=off, 1=on, bAux_CaOsLEDs_Off/On");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestFansFADC=",0,"Requested status: o=off, 1=on, bAux_FADC_FANs_Off/On");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusCaosLEDs=",0,"Monitored status: o=off, 1=on, Cam.CaOs.LED_state");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusFansFADC=",0,"Monitored status: o=off, 1=on, Cam.FADC.Fans_state");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempCountingHouse1=",0,"[deg C] Temperature sensor in the counting house 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempCountingHouse2=",0,"[deg C] Temperature sensor in the counting house 2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempCountingHouse3=",0,"[deg C] Temperature sensor in the counting house 3");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraCalibration */
static void G__setup_memvarMCameraCalibration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration));
   { MCameraCalibration *p; p=(MCameraCalibration*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored calibration state: o=off, 1=on, CamCalib_state");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatusCANbus=",0,"CaCo monitored CANbus state: o=off, 1=on, Cal.CanBus_state");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatusIO=",0,"CaCo monitored I/O state: o=off, 1=on, Cal.IO_state");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatusLoVoltage=",0,"CaCo monitored LV PS state: o=off, 1=on, Cal.LV_state");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestHiVoltage=",0,"Requested status: o=off, 1=on, bcalib_HV_Off/On");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestLoVoltage=",0,"Requested status: o=off, 1=on, bcalib_LV_Off/On");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestContLight=",0,"Requested status: o=off, 1=on, bcalib_ContinuousLight_Off/On");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestPinDiode=",0,"Requested status: o=off, 1=on, bcalib_PinDiode_Off/On");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraCooling */
static void G__setup_memvarMCameraCooling(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling));
   { MCameraCooling *p; p=(MCameraCooling*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo Monitored cooling status: 0-9, Cam.COOLING_state");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusPressureHi=",0,"0=ok,  1=Obstruct");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusPressureLo=",0,"0=ok,  1=leakage");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusPump=",0,"0=off, 1=on");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusRefrigrerator=",0,"0=off, 1=on");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusValve=",0,"0=recirculate, 1=new");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusResistor=",0,"0=off, 1=on");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusFans=",0,"0=off, 1=on");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempCenter=",0,"[deg C] Temperature at the camera center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempWall=",0,"[deg C] Temperature at the camera wall");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempOptLink=",0,"[deg C] Temperature at the optical link");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempWater=",0,"[deg C] Temperature of the water in the water tank");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fHumWall=",0,"[%] Relative humidity at camera wall");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fHumCenter=",0,"[%] Relative humidity camera center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraHV */
static void G__setup_memvarMCameraHV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV));
   { MCameraHV *p; p=(MCameraHV*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored status of the High Voltage [0-9], Cam.HV.PS_state");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatusRamping=",0,"CaCo monitored status of ramping the HV, Cam.HV_state");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fVoltageA=",0,"[V] Measured voltage of power supply A, hvps1");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fVoltageB=",0,"[V] Measured voltage of power supply B, hvps2");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCurrentA=",0,"[mA] Measured current of power supply A, curr1");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCurrentB=",0,"[mA] Measured current of power supply B, curr2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TArrayS),-1,-1,4,"fHV=",0,"[V] Measured high Voltages for all PMTs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TString),-1,-1,4,"fFileName=",0,"Filename for the HV settings");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraPowerSupply */
static void G__setup_memvarMCameraPowerSupply(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply));
   { MCameraPowerSupply *p; p=(MCameraPowerSupply*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltagePos5V=",0,"[V] voltage_pos5  (+5V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltagePos12V=",0,"[V] voltage_pos12 (+12V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltageNeg12V=",0,"[V] voltage_neg12 (-12V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltageOptLinkPos12V=",0,"[V] volatge_opt_link_pos12 (+12V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentPos5V=",0,"[A] current_pos5  (+5V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentPos12V=",0,"[A] current_pos12 (+12V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentNeg12V=",0,"[A] current_neg12 (-12V)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCurrentOptLinkPos12V=",0,"[A] current_opt_link_pos12 (+12V)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraLV */
static void G__setup_memvarMCameraLV(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLV));
   { MCameraLV *p; p=(MCameraLV*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored LV PS status:  , Cam.LV_state");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fRequestPowerSupply=",0,"Requested status: o=off, 1=on, blv_ps_status");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTemp=",0,"Measured status: o=off, 1=on, blv_temp");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fHumidity=",0,"Measured status: o=off, 1=on, blv_RelativeHumidity");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply),-1,-1,4,"fPowerSupplyA=",0,"power supply camera part A");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply),-1,-1,4,"fPowerSupplyB=",0,"power supply camera part B");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraTD */
static void G__setup_memvarMCameraTD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD));
   { MCameraTD *p; p=(MCameraTD*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TArrayC),-1,-1,4,"fTD=",0,"[au] discriminator delays");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,"fTD contains valid information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraTH */
static void G__setup_memvarMCameraTH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH));
   { MCameraTH *p; p=(MCameraTH*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TArrayC),-1,-1,4,"fTH=",0,"[au] discriminator thresholds");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,"fTH contains valid information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraRecTemp */
static void G__setup_memvarMCameraRecTemp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp));
   { MCameraRecTemp *p; p=(MCameraRecTemp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TArrayF),-1,-1,4,"fRecTemp=",0,"[deg C] receiver board temperatures");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,"fRecTemp contains valid information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraDC */
static void G__setup_memvarMCameraDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC));
   { MCameraDC *p; p=(MCameraDC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored status of the High Voltage [0-9], Cam.HV.PS_state");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_TArrayF),-1,-1,4,"fArray=",0,"[nA] Unsigned Int!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraLid */
static void G__setup_memvarMCameraLid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLid));
   { MCameraLid *p; p=(MCameraLid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLimitOpen=",0,"0=not active, 1= active");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLimitClose=",0,"0=not active, 1= active");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSafetyLimitOpen=",0,"0=not active, 1= active");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSafetyLimitClose=",0,"0=not active, 1= active");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatusLid=",0,"0=positioning, 1=open, 2=closed");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatusMotor=",0,"0=stopped, 1=opening, 2=closing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraLids */
static void G__setup_memvarMCameraLids(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLids));
   { MCameraLids *p; p=(MCameraLids*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_MCameraLid),-1,-1,4,"fLidA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CameraCintLN_MCameraLid),-1,-1,4,"fLidB=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored lid status, Cam.LID_state [0-9]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraActiveLoad */
static void G__setup_memvarMCameraActiveLoad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad));
   { MCameraActiveLoad *p; p=(MCameraActiveLoad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatus=",0,"Status of active loads (0xff means: n/a)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltage360A=",0,"[V] Voltage of 360V power supply A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fIntens360A=",0,"[mA] Intensity of 360V power supply A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltage360B=",0,"[V] Voltage of 360V power supply B");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fIntens360B=",0,"[mA] Intensity of 360V power supply B");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltage175A=",0,"[V] Voltage of 175V power supply A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fIntens175A=",0,"[mA] Intensity of 175V power supply A");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fVoltage175B=",0,"[V] Voltage of 175V power supply B");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fIntens175B=",0,"[mA] Intensity of 175V power supply B");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraCentralPix */
static void G__setup_memvarMCameraCentralPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix));
   { MCameraCentralPix *p; p=(MCameraCentralPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStatus=",0,"Status of central pixel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDC=",0,"DC current in ADC counts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CameraCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCameraCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMCameraAUX(void) {
   /* MCameraAUX */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX));
   G__memfunc_setup("MCameraAUX",900,G__CameraCint_171_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestCaosLEDs",1751,G__CameraCint_171_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestFansFADC",1695,G__CameraCint_171_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusCaosLEDs",1650,G__CameraCint_171_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusFansFADC",1594,G__CameraCint_171_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempCountingHouse1",2098,G__CameraCint_171_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempCountingHouse2",2099,G__CameraCint_171_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempCountingHouse3",2100,G__CameraCint_171_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_171_0_9, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraAUX::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_171_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraAUX::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_171_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraAUX::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_171_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraAUX::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_171_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_171_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraAUX::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_171_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraAUX::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_171_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraAUX::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_171_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraAUX::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraAUX", 900, G__CameraCint_171_0_21, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX), -1, 0, 1, 1, 1, 0, "u 'MCameraAUX' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraAUX", 1026, G__CameraCint_171_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_171_0_23, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraAUX), -1, 1, 1, 1, 1, 0, "u 'MCameraAUX' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraCalibration(void) {
   /* MCameraCalibration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration));
   G__memfunc_setup("MCameraCalibration",1790,G__CameraCint_173_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_173_0_2, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusCANbus",1472,G__CameraCint_173_0_3, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusIO",1084,G__CameraCint_173_0_4, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusLoVoltage",1841,G__CameraCint_173_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestHiVoltage",1932,G__CameraCint_173_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestLoVoltage",1942,G__CameraCint_173_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestContLight",1941,G__CameraCint_173_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestPinDiode",1813,G__CameraCint_173_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_173_0_10, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraCalibration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_173_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCalibration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_173_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraCalibration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_173_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraCalibration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_173_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_173_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCalibration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_173_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCalibration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_173_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCalibration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_173_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCalibration::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraCalibration", 1790, G__CameraCint_173_0_22, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration), -1, 0, 1, 1, 1, 0, "u 'MCameraCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraCalibration", 1916, G__CameraCint_173_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_173_0_24, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCalibration), -1, 1, 1, 1, 1, 0, "u 'MCameraCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraCooling(void) {
   /* MCameraCooling */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling));
   G__memfunc_setup("MCameraCooling",1377,G__CameraCint_174_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_174_0_2, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusPressureHi",1966,G__CameraCint_174_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusPressureLo",1976,G__CameraCint_174_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusPump",1350,G__CameraCint_174_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusRefrigrerator",2306,G__CameraCint_174_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusValve",1442,G__CameraCint_174_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusResistor",1791,G__CameraCint_174_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusFans",1324,G__CameraCint_174_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempCenter",1303,G__CameraCint_174_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempWall",1094,G__CameraCint_174_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempOptLink",1399,G__CameraCint_174_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempWater",1209,G__CameraCint_174_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHumWall",986,G__CameraCint_174_0_14, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHumCenter",1195,G__CameraCint_174_0_15, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_174_0_16, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraCooling::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_174_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCooling::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_174_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraCooling::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_174_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraCooling::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_174_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_174_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCooling::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_174_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCooling::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_174_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCooling::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_174_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCooling::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraCooling", 1377, G__CameraCint_174_0_28, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling), -1, 0, 1, 1, 1, 0, "u 'MCameraCooling' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraCooling", 1503, G__CameraCint_174_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_174_0_30, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCooling), -1, 1, 1, 1, 1, 0, "u 'MCameraCooling' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraHV(void) {
   /* MCameraHV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraHV));
   G__memfunc_setup("MCameraHV",820,G__CameraCint_179_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraHV), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_179_0_2, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusRamping",1650,G__CameraCint_179_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltageA",1075,G__CameraCint_179_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltageB",1076,G__CameraCint_179_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentA",1092,G__CameraCint_179_0_6, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentB",1093,G__CameraCint_179_0_7, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__CameraCint_179_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_179_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CameraCint_179_0_12, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraHV::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_179_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraHV::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_179_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraHV::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_179_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraHV::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_179_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_179_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraHV::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_179_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraHV::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_179_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraHV::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_179_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraHV::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraHV", 820, G__CameraCint_179_0_24, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraHV), -1, 0, 1, 1, 1, 0, "u 'MCameraHV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraHV", 946, G__CameraCint_179_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_179_0_26, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraHV), -1, 1, 1, 1, 1, 0, "u 'MCameraHV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraPowerSupply(void) {
   /* MCameraPowerSupply */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply));
   G__memfunc_setup("MCameraPowerSupply",1840,G__CameraCint_180_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltagePos5V",1455,G__CameraCint_180_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltagePos12V",1501,G__CameraCint_180_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltageNeg12V",1477,G__CameraCint_180_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltageOptLinkPos12V",2206,G__CameraCint_180_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPos5V",1472,G__CameraCint_180_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPos12V",1518,G__CameraCint_180_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentNeg12V",1494,G__CameraCint_180_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentOptLinkPos12V",2223,G__CameraCint_180_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_180_0_10, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraPowerSupply::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_180_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraPowerSupply::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_180_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraPowerSupply::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_180_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraPowerSupply::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_180_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_180_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraPowerSupply::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_180_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraPowerSupply::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_180_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraPowerSupply::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_180_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraPowerSupply::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraPowerSupply", 1840, G__CameraCint_180_0_22, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply), -1, 0, 1, 1, 1, 0, "u 'MCameraPowerSupply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraPowerSupply", 1966, G__CameraCint_180_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_180_0_24, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply), -1, 1, 1, 1, 1, 0, "u 'MCameraPowerSupply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraLV(void) {
   /* MCameraLV */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLV));
   G__memfunc_setup("MCameraLV",824,G__CameraCint_181_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraLV), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_181_0_2, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRequestPowerSupply",2211,G__CameraCint_181_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTemp",694,G__CameraCint_181_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHumidity",1133,G__CameraCint_181_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerSupplyA",1531,G__CameraCint_181_0_6, 117, G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerSupplyB",1532,G__CameraCint_181_0_7, 117, G__get_linked_tagnum(&G__CameraCintLN_MCameraPowerSupply), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_181_0_8, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraLV::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_181_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLV::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_181_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraLV::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_181_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraLV::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_181_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_181_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLV::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_181_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLV::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_181_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLV::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_181_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLV::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraLV", 824, G__CameraCint_181_0_20, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLV), -1, 0, 1, 1, 1, 0, "u 'MCameraLV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraLV", 950, G__CameraCint_181_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_181_0_22, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLV), -1, 1, 1, 1, 1, 0, "u 'MCameraLV' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraTD(void) {
   /* MCameraTD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTD));
   G__memfunc_setup("InterpreteTD",1210,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCameraTD",814,G__CameraCint_183_0_2, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraTD), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '577' size C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_183_0_3, 98, -1, G__defined_typename("Byte_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__CameraCint_183_0_4, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__CameraCint_183_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invalidate",1025,G__CameraCint_183_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValid",796,G__CameraCint_183_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__CameraCint_183_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CameraCint_183_0_12, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraTD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_183_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_183_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraTD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_183_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraTD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_183_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_183_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_183_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraTD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_183_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_183_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraTD::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraTD", 814, G__CameraCint_183_0_24, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraTD), -1, 0, 1, 1, 1, 0, "u 'MCameraTD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraTD", 940, G__CameraCint_183_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_183_0_26, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraTD), -1, 1, 1, 1, 1, 0, "u 'MCameraTD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraTH(void) {
   /* MCameraTH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraTH));
   G__memfunc_setup("InterpreteTH",1214,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver "
"u 'MCameraTD' - 1 - td", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCameraTH",818,G__CameraCint_184_0_2, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraTH), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '577' size C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_184_0_3, 98, -1, G__defined_typename("Byte_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__CameraCint_184_0_4, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__CameraCint_184_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invalidate",1025,G__CameraCint_184_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValid",796,G__CameraCint_184_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__CameraCint_184_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CameraCint_184_0_12, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraTH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_184_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_184_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraTH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_184_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraTH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_184_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_184_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_184_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraTH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_184_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraTH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_184_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraTH::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraTH", 818, G__CameraCint_184_0_24, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraTH), -1, 0, 1, 1, 1, 0, "u 'MCameraTH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraTH", 944, G__CameraCint_184_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_184_0_26, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraTH), -1, 1, 1, 1, 1, 0, "u 'MCameraTH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraRecTemp(void) {
   /* MCameraRecTemp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp));
   G__memfunc_setup("InterpreteRecTemp",1746,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCameraRecTemp",1350,G__CameraCint_188_0_2, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '76' size C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_188_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Invalidate",1025,G__CameraCint_188_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValid",796,G__CameraCint_188_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__CameraCint_188_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__CameraCint_188_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__CameraCint_188_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CameraCint_188_0_10, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraRecTemp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_188_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraRecTemp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_188_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraRecTemp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_188_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraRecTemp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_188_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_188_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraRecTemp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_188_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraRecTemp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_188_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraRecTemp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_188_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraRecTemp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraRecTemp", 1350, G__CameraCint_188_0_22, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp), -1, 0, 1, 1, 1, 0, "u 'MCameraRecTemp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraRecTemp", 1476, G__CameraCint_188_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_188_0_24, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraRecTemp), -1, 1, 1, 1, 1, 0, "u 'MCameraRecTemp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraDC(void) {
   /* MCameraDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraDC));
   G__memfunc_setup("Interprete",1058,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 '0' len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCameraDC",797,G__CameraCint_189_0_2, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraDC), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '577' size C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_189_0_3, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurrent",1039,G__CameraCint_189_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrent",1027,G__CameraCint_189_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_189_0_6, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CameraCint_189_0_7, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__CameraCint_189_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__CameraCint_189_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CameraCint_189_0_13, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_189_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_189_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_189_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_189_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_189_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_189_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_189_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_189_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraDC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraDC", 797, G__CameraCint_189_0_25, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraDC), -1, 0, 1, 1, 1, 0, "u 'MCameraDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraDC", 923, G__CameraCint_189_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_189_0_27, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraDC), -1, 1, 1, 1, 1, 0, "u 'MCameraDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraLid(void) {
   /* MCameraLid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLid));
   G__memfunc_setup("MCameraLid",943,G__CameraCint_191_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraLid), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLimitOpen",1201,G__CameraCint_191_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLimitClose",1301,G__CameraCint_191_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSafetyLimitOpen",1821,G__CameraCint_191_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSafetyLimitClose",1921,G__CameraCint_191_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusLid",1213,G__CameraCint_191_0_6, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusMotor",1461,G__CameraCint_191_0_7, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_191_0_8, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraLid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_191_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_191_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraLid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_191_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraLid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_191_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_191_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_191_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_191_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_191_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLid::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraLid", 943, G__CameraCint_191_0_20, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLid), -1, 0, 1, 1, 1, 0, "u 'MCameraLid' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraLid", 1069, G__CameraCint_191_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_191_0_22, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLid), -1, 1, 1, 1, 1, 0, "u 'MCameraLid' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraLids(void) {
   /* MCameraLids */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraLids));
   G__memfunc_setup("MCameraLids",1058,G__CameraCint_192_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraLids), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_192_0_2, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLidA",634,G__CameraCint_192_0_3, 117, G__get_linked_tagnum(&G__CameraCintLN_MCameraLid), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLidB",635,G__CameraCint_192_0_4, 117, G__get_linked_tagnum(&G__CameraCintLN_MCameraLid), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_192_0_5, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraLids::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_192_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLids::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_192_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraLids::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_192_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraLids::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_192_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_192_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLids::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_192_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLids::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_192_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraLids::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_192_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraLids::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraLids", 1058, G__CameraCint_192_0_17, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLids), -1, 0, 1, 1, 1, 0, "u 'MCameraLids' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraLids", 1184, G__CameraCint_192_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_192_0_19, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraLids), -1, 1, 1, 1, 1, 0, "u 'MCameraLids' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraActiveLoad(void) {
   /* MCameraActiveLoad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad));
   G__memfunc_setup("MCameraActiveLoad",1650,G__CameraCint_193_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_193_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltage360A",1228,G__CameraCint_193_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntens360A",1131,G__CameraCint_193_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltage360B",1229,G__CameraCint_193_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntens360B",1132,G__CameraCint_193_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltage175A",1232,G__CameraCint_193_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntens175A",1135,G__CameraCint_193_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVoltage175B",1233,G__CameraCint_193_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntens175B",1136,G__CameraCint_193_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_193_0_11, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraActiveLoad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_193_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraActiveLoad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_193_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraActiveLoad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_193_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraActiveLoad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_193_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_193_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraActiveLoad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_193_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraActiveLoad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_193_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraActiveLoad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_193_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraActiveLoad::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraActiveLoad", 1650, G__CameraCint_193_0_23, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad), -1, 0, 1, 1, 1, 0, "u 'MCameraActiveLoad' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraActiveLoad", 1776, G__CameraCint_193_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_193_0_25, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraActiveLoad), -1, 1, 1, 1, 1, 0, "u 'MCameraActiveLoad' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraCentralPix(void) {
   /* MCameraCentralPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix));
   G__memfunc_setup("MCameraCentralPix",1680,G__CameraCint_194_0_1, 105, G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__CameraCint_194_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusCPix",1304,G__CameraCint_194_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "deprecated - for compatibility only", (void*) NULL, 0);
   G__memfunc_setup("GetDC",423,G__CameraCint_194_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CameraCint_194_0_5, 85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraCentralPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CameraCint_194_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCentralPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CameraCint_194_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraCentralPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CameraCint_194_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraCentralPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CameraCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CameraCint_194_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CameraCint_194_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCentralPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CameraCint_194_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCentralPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CameraCint_194_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraCentralPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CameraCint_194_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraCentralPix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraCentralPix", 1680, G__CameraCint_194_0_17, (int) ('i'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix), -1, 0, 1, 1, 1, 0, "u 'MCameraCentralPix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraCentralPix", 1806, G__CameraCint_194_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__CameraCint_194_0_19, (int) ('u'), G__get_linked_tagnum(&G__CameraCintLN_MCameraCentralPix), -1, 1, 1, 1, 1, 0, "u 'MCameraCentralPix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCameraCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCameraCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCameraCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CameraCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__CameraCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraAUX = { "MCameraAUX" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraCalibration = { "MCameraCalibration" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraCooling = { "MCameraCooling" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TArrayS = { "TArrayS" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraHV = { "MCameraHV" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraPowerSupply = { "MCameraPowerSupply" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraLV = { "MCameraLV" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraTD = { "MCameraTD" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraTH = { "MCameraTH" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraRecTemp = { "MCameraRecTemp" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraDC = { "MCameraDC" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraLid = { "MCameraLid" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraLids = { "MCameraLids" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraActiveLoad = { "MCameraActiveLoad" , 99 , -1 };
G__linked_taginfo G__CameraCintLN_MCameraCentralPix = { "MCameraCentralPix" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCameraCint() {
  G__CameraCintLN_TClass.tagnum = -1 ;
  G__CameraCintLN_TBuffer.tagnum = -1 ;
  G__CameraCintLN_TMemberInspector.tagnum = -1 ;
  G__CameraCintLN_TObject.tagnum = -1 ;
  G__CameraCintLN_TString.tagnum = -1 ;
  G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__CameraCintLN_MParContainer.tagnum = -1 ;
  G__CameraCintLN_MCameraAUX.tagnum = -1 ;
  G__CameraCintLN_MCameraCalibration.tagnum = -1 ;
  G__CameraCintLN_MCameraCooling.tagnum = -1 ;
  G__CameraCintLN_MGeomCam.tagnum = -1 ;
  G__CameraCintLN_MCamEvent.tagnum = -1 ;
  G__CameraCintLN_TArrayS.tagnum = -1 ;
  G__CameraCintLN_MCameraHV.tagnum = -1 ;
  G__CameraCintLN_MCameraPowerSupply.tagnum = -1 ;
  G__CameraCintLN_MCameraLV.tagnum = -1 ;
  G__CameraCintLN_TArrayC.tagnum = -1 ;
  G__CameraCintLN_MCameraTD.tagnum = -1 ;
  G__CameraCintLN_MCameraTH.tagnum = -1 ;
  G__CameraCintLN_TArrayF.tagnum = -1 ;
  G__CameraCintLN_MCameraRecTemp.tagnum = -1 ;
  G__CameraCintLN_MCameraDC.tagnum = -1 ;
  G__CameraCintLN_MCameraLid.tagnum = -1 ;
  G__CameraCintLN_MCameraLids.tagnum = -1 ;
  G__CameraCintLN_MCameraActiveLoad.tagnum = -1 ;
  G__CameraCintLN_MCameraCentralPix.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCameraCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TString);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_MParContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraAUX),sizeof(MCameraAUX),-1,323840,"Container storing information about the Camera auxiliary system",G__setup_memvarMCameraAUX,G__setup_memfuncMCameraAUX);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraCalibration),sizeof(MCameraCalibration),-1,323840,"Container storing information about the Camera calibration system",G__setup_memvarMCameraCalibration,G__setup_memfuncMCameraCalibration);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraCooling),sizeof(MCameraCooling),-1,323840,"Container storing information about the Camera cooling",G__setup_memvarMCameraCooling,G__setup_memfuncMCameraCooling);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TArrayS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraHV),sizeof(MCameraHV),-1,323840,"Container storing information about the Camera HV",G__setup_memvarMCameraHV,G__setup_memfuncMCameraHV);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraPowerSupply),sizeof(MCameraPowerSupply),-1,323840,"Container storing information about the Camera power supply",G__setup_memvarMCameraPowerSupply,G__setup_memfuncMCameraPowerSupply);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraLV),sizeof(MCameraLV),-1,323840,"Container storing information about the Camera LV",G__setup_memvarMCameraLV,G__setup_memfuncMCameraLV);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TArrayC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraTD),sizeof(MCameraTD),-1,323840,"Storage Container for Discriminator Delays",G__setup_memvarMCameraTD,G__setup_memfuncMCameraTD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraTH),sizeof(MCameraTH),-1,323840,"Storage Container for the discriminator thresholds",G__setup_memvarMCameraTH,G__setup_memfuncMCameraTH);
   G__get_linked_tagnum_fwd(&G__CameraCintLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraRecTemp),sizeof(MCameraRecTemp),-1,323840,"Storage Container for Receiver Board Temperature",G__setup_memvarMCameraRecTemp,G__setup_memfuncMCameraRecTemp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraDC),sizeof(MCameraDC),-1,323840,"Storage Container for the Currents (PRELIMINARY)",G__setup_memvarMCameraDC,G__setup_memfuncMCameraDC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraLid),sizeof(MCameraLid),-1,323840,"Container storing information about a Camera lid",G__setup_memvarMCameraLid,G__setup_memfuncMCameraLid);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraLids),sizeof(MCameraLids),-1,323840,"Container storing information about the Camera lids",G__setup_memvarMCameraLids,G__setup_memfuncMCameraLids);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraActiveLoad),sizeof(MCameraActiveLoad),-1,323840,"Container storing information about the Active Loads of the Camera",G__setup_memvarMCameraActiveLoad,G__setup_memfuncMCameraActiveLoad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CameraCintLN_MCameraCentralPix),sizeof(MCameraCentralPix),-1,323840,"Container storing information about the Central Pixel status",G__setup_memvarMCameraCentralPix,G__setup_memfuncMCameraCentralPix);
}
extern "C" void G__cpp_setupCameraCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupCameraCint()");
  G__set_cpp_environmentCameraCint();
  G__cpp_setup_tagtableCameraCint();

  G__cpp_setup_inheritanceCameraCint();

  G__cpp_setup_typetableCameraCint();

  G__cpp_setup_memvarCameraCint();

  G__cpp_setup_memfuncCameraCint();
  G__cpp_setup_globalCameraCint();
  G__cpp_setup_funcCameraCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCameraCint();
  return;
}
class G__cpp_setup_initCameraCint {
  public:
    G__cpp_setup_initCameraCint() { G__add_setup_func("CameraCint",(G__incsetup)(&G__cpp_setupCameraCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCameraCint() { G__remove_setup_func("CameraCint"); }
};
G__cpp_setup_initCameraCint G__cpp_setup_initializerCameraCint;

