//
// File generated by rootcint at Mon Nov 28 11:07:18 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME RanForestCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RanForestCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MRanTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRanTree(void *p = 0);
   static void *newArray_MRanTree(Long_t size, void *p);
   static void delete_MRanTree(void *p);
   static void deleteArray_MRanTree(void *p);
   static void destruct_MRanTree(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRanTree*)
   {
      ::MRanTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRanTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRanTree", ::MRanTree::Class_Version(), "./MRanTree.h", 31,
                  typeid(::MRanTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRanTree::Dictionary, isa_proxy, 4,
                  sizeof(::MRanTree) );
      instance.SetNew(&new_MRanTree);
      instance.SetNewArray(&newArray_MRanTree);
      instance.SetDelete(&delete_MRanTree);
      instance.SetDeleteArray(&deleteArray_MRanTree);
      instance.SetDestructor(&destruct_MRanTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRanTree*)
   {
      return GenerateInitInstanceLocal((::MRanTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRanTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRanForest_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRanForest(void *p = 0);
   static void *newArray_MRanForest(Long_t size, void *p);
   static void delete_MRanForest(void *p);
   static void deleteArray_MRanForest(void *p);
   static void destruct_MRanForest(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRanForest*)
   {
      ::MRanForest *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRanForest >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRanForest", ::MRanForest::Class_Version(), "./MRanForest.h", 39,
                  typeid(::MRanForest), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRanForest::Dictionary, isa_proxy, 4,
                  sizeof(::MRanForest) );
      instance.SetNew(&new_MRanForest);
      instance.SetNewArray(&newArray_MRanForest);
      instance.SetDelete(&delete_MRanForest);
      instance.SetDeleteArray(&deleteArray_MRanForest);
      instance.SetDestructor(&destruct_MRanForest);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRanForest*)
   {
      return GenerateInitInstanceLocal((::MRanForest*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRanForest*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRanForestGrow_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRanForestGrow(void *p = 0);
   static void *newArray_MRanForestGrow(Long_t size, void *p);
   static void delete_MRanForestGrow(void *p);
   static void deleteArray_MRanForestGrow(void *p);
   static void destruct_MRanForestGrow(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRanForestGrow*)
   {
      ::MRanForestGrow *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRanForestGrow >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRanForestGrow", ::MRanForestGrow::Class_Version(), "./MRanForestGrow.h", 13,
                  typeid(::MRanForestGrow), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRanForestGrow::Dictionary, isa_proxy, 4,
                  sizeof(::MRanForestGrow) );
      instance.SetNew(&new_MRanForestGrow);
      instance.SetNewArray(&newArray_MRanForestGrow);
      instance.SetDelete(&delete_MRanForestGrow);
      instance.SetDeleteArray(&deleteArray_MRanForestGrow);
      instance.SetDestructor(&destruct_MRanForestGrow);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRanForestGrow*)
   {
      return GenerateInitInstanceLocal((::MRanForestGrow*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRanForestGrow*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRanForestCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRanForestCalc(void *p = 0);
   static void *newArray_MRanForestCalc(Long_t size, void *p);
   static void delete_MRanForestCalc(void *p);
   static void deleteArray_MRanForestCalc(void *p);
   static void destruct_MRanForestCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRanForestCalc*)
   {
      ::MRanForestCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRanForestCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRanForestCalc", ::MRanForestCalc::Class_Version(), "./MRanForestCalc.h", 25,
                  typeid(::MRanForestCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRanForestCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MRanForestCalc) );
      instance.SetNew(&new_MRanForestCalc);
      instance.SetNewArray(&newArray_MRanForestCalc);
      instance.SetDelete(&delete_MRanForestCalc);
      instance.SetDeleteArray(&deleteArray_MRanForestCalc);
      instance.SetDestructor(&destruct_MRanForestCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRanForestCalc*)
   {
      return GenerateInitInstanceLocal((::MRanForestCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRanForestCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHRanForest_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHRanForest(void *p = 0);
   static void *newArray_MHRanForest(Long_t size, void *p);
   static void delete_MHRanForest(void *p);
   static void deleteArray_MHRanForest(void *p);
   static void destruct_MHRanForest(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHRanForest*)
   {
      ::MHRanForest *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHRanForest >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHRanForest", ::MHRanForest::Class_Version(), "./MHRanForest.h", 19,
                  typeid(::MHRanForest), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHRanForest::Dictionary, isa_proxy, 4,
                  sizeof(::MHRanForest) );
      instance.SetNew(&new_MHRanForest);
      instance.SetNewArray(&newArray_MHRanForest);
      instance.SetDelete(&delete_MHRanForest);
      instance.SetDeleteArray(&deleteArray_MHRanForest);
      instance.SetDestructor(&destruct_MHRanForest);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHRanForest*)
   {
      return GenerateInitInstanceLocal((::MHRanForest*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHRanForest*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHRanForestGini_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHRanForestGini(void *p = 0);
   static void *newArray_MHRanForestGini(Long_t size, void *p);
   static void delete_MHRanForestGini(void *p);
   static void deleteArray_MHRanForestGini(void *p);
   static void destruct_MHRanForestGini(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHRanForestGini*)
   {
      ::MHRanForestGini *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHRanForestGini >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHRanForestGini", ::MHRanForestGini::Class_Version(), "./MHRanForestGini.h", 23,
                  typeid(::MHRanForestGini), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHRanForestGini::Dictionary, isa_proxy, 4,
                  sizeof(::MHRanForestGini) );
      instance.SetNew(&new_MHRanForestGini);
      instance.SetNewArray(&newArray_MHRanForestGini);
      instance.SetDelete(&delete_MHRanForestGini);
      instance.SetDeleteArray(&deleteArray_MHRanForestGini);
      instance.SetDestructor(&destruct_MHRanForestGini);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHRanForestGini*)
   {
      return GenerateInitInstanceLocal((::MHRanForestGini*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHRanForestGini*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MRanTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRanTree::Class_Name()
{
   return "MRanTree";
}

//______________________________________________________________________________
const char *MRanTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRanTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRanTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRanTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanTree*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRanForest::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRanForest::Class_Name()
{
   return "MRanForest";
}

//______________________________________________________________________________
const char *MRanForest::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForest*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRanForest::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForest*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRanForest::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForest*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRanForest::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForest*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRanForestGrow::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRanForestGrow::Class_Name()
{
   return "MRanForestGrow";
}

//______________________________________________________________________________
const char *MRanForestGrow::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestGrow*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRanForestGrow::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestGrow*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRanForestGrow::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestGrow*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRanForestGrow::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestGrow*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRanForestCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRanForestCalc::Class_Name()
{
   return "MRanForestCalc";
}

//______________________________________________________________________________
const char *MRanForestCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRanForestCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRanForestCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRanForestCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRanForestCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHRanForest::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHRanForest::Class_Name()
{
   return "MHRanForest";
}

//______________________________________________________________________________
const char *MHRanForest::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForest*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHRanForest::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForest*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHRanForest::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForest*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHRanForest::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForest*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHRanForestGini::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHRanForestGini::Class_Name()
{
   return "MHRanForestGini";
}

//______________________________________________________________________________
const char *MHRanForestGini::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForestGini*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHRanForestGini::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForestGini*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHRanForestGini::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForestGini*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHRanForestGini::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHRanForestGini*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MRanTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRanTree.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRanTree::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRanTree::Class(),this);
   }
}

//______________________________________________________________________________
void MRanTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRanTree.
      TClass *R__cl = ::MRanTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassify", &fClassify);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdSize", &fNdSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTry", &fNumTry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumNodes", &fNumNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEndNodes", &fNumEndNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fError", &fError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBestVar", &fBestVar);
      R__insp.InspectMember(fBestVar, "fBestVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeMap1", &fTreeMap1);
      R__insp.InspectMember(fTreeMap1, "fTreeMap1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeMap2", &fTreeMap2);
      R__insp.InspectMember(fTreeMap2, "fTreeMap2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBestSplit", &fBestSplit);
      R__insp.InspectMember(fBestSplit, "fBestSplit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGiniDec", &fGiniDec);
      R__insp.InspectMember(fGiniDec, "fGiniDec.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FindBestSplit", &FindBestSplit);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRanTree(void *p) {
      return  p ? new(p) ::MRanTree : new ::MRanTree;
   }
   static void *newArray_MRanTree(Long_t nElements, void *p) {
      return p ? new(p) ::MRanTree[nElements] : new ::MRanTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRanTree(void *p) {
      delete ((::MRanTree*)p);
   }
   static void deleteArray_MRanTree(void *p) {
      delete [] ((::MRanTree*)p);
   }
   static void destruct_MRanTree(void *p) {
      typedef ::MRanTree current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRanTree

//______________________________________________________________________________
void MRanForest::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRanForest.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRanForest::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRanForest::Class(),this);
   }
}

//______________________________________________________________________________
void MRanForest::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRanForest.
      TClass *R__cl = ::MRanForest::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassify", &fClassify);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTrees", &fNumTrees);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTry", &fNumTry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdSize", &fNdSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeNo", &fTreeNo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRanTree", &fRanTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRules", &fRules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fForest", &fForest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClass", &fClass);
      R__insp.InspectMember(fClass, "fClass.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGrid", &fGrid);
      R__insp.InspectMember(fGrid, "fGrid.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHadTrue", &fHadTrue);
      R__insp.InspectMember(fHadTrue, "fHadTrue.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHadEst", &fHadEst);
      R__insp.InspectMember(fHadEst, "fHadEst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataSort", &fDataSort);
      R__insp.InspectMember(fDataSort, "fDataSort.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataRang", &fDataRang);
      R__insp.InspectMember(fDataRang, "fDataRang.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClassPop", &fClassPop);
      R__insp.InspectMember(fClassPop, "fClassPop.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeight", &fWeight);
      R__insp.InspectMember(fWeight, "fWeight.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNTimesOutBag", &fNTimesOutBag);
      R__insp.InspectMember(fNTimesOutBag, "fNTimesOutBag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeHad", &fTreeHad);
      R__insp.InspectMember(fTreeHad, "fTreeHad.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserVal", &fUserVal);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRanForest(void *p) {
      return  p ? new(p) ::MRanForest : new ::MRanForest;
   }
   static void *newArray_MRanForest(Long_t nElements, void *p) {
      return p ? new(p) ::MRanForest[nElements] : new ::MRanForest[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRanForest(void *p) {
      delete ((::MRanForest*)p);
   }
   static void deleteArray_MRanForest(void *p) {
      delete [] ((::MRanForest*)p);
   }
   static void destruct_MRanForest(void *p) {
      typedef ::MRanForest current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRanForest

//______________________________________________________________________________
void MRanForestGrow::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRanForestGrow.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRanForestGrow::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRanForestGrow::Class(),this);
   }
}

//______________________________________________________________________________
void MRanForestGrow::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRanForestGrow.
      TClass *R__cl = ::MRanForestGrow::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRanForest", &fRanForest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      MRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRanForestGrow(void *p) {
      return  p ? new(p) ::MRanForestGrow : new ::MRanForestGrow;
   }
   static void *newArray_MRanForestGrow(Long_t nElements, void *p) {
      return p ? new(p) ::MRanForestGrow[nElements] : new ::MRanForestGrow[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRanForestGrow(void *p) {
      delete ((::MRanForestGrow*)p);
   }
   static void deleteArray_MRanForestGrow(void *p) {
      delete [] ((::MRanForestGrow*)p);
   }
   static void destruct_MRanForestGrow(void *p) {
      typedef ::MRanForestGrow current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRanForestGrow

//______________________________________________________________________________
void MRanForestCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRanForestCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRanForestCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRanForestCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MRanForestCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRanForestCalc.
      TClass *R__cl = ::MRanForestCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRFOut", &fRFOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTestMatrix", &fTestMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFunc", &fFunc);
      R__insp.InspectMember(fFunc, "fFunc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEForests", &fEForests);
      R__insp.InspectMember(fEForests, "fEForests.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTrees", &fNumTrees);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTry", &fNumTry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdSize", &fNdSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumObsoleteVariables", &fNumObsoleteVariables);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastDataColumnHasWeights", &fLastDataColumnHasWeights);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameOutput", &fNameOutput);
      R__insp.InspectMember(fNameOutput, "fNameOutput.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEstimationMode", &fEstimationMode);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRanForestCalc(void *p) {
      return  p ? new(p) ::MRanForestCalc : new ::MRanForestCalc;
   }
   static void *newArray_MRanForestCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MRanForestCalc[nElements] : new ::MRanForestCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRanForestCalc(void *p) {
      delete ((::MRanForestCalc*)p);
   }
   static void deleteArray_MRanForestCalc(void *p) {
      delete [] ((::MRanForestCalc*)p);
   }
   static void destruct_MRanForestCalc(void *p) {
      typedef ::MRanForestCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRanForestCalc

//______________________________________________________________________________
void MHRanForest::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHRanForest.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHRanForest::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHRanForest::Class(),this);
   }
}

//______________________________________________________________________________
void MHRanForest::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHRanForest.
      TClass *R__cl = ::MHRanForest::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRanForest", &fRanForest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      R__insp.InspectMember(fSigma, "fSigma.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvent", &fNumEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraphSigma", &fGraphSigma);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHRanForest(void *p) {
      return  p ? new(p) ::MHRanForest : new ::MHRanForest;
   }
   static void *newArray_MHRanForest(Long_t nElements, void *p) {
      return p ? new(p) ::MHRanForest[nElements] : new ::MHRanForest[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHRanForest(void *p) {
      delete ((::MHRanForest*)p);
   }
   static void deleteArray_MHRanForest(void *p) {
      delete [] ((::MHRanForest*)p);
   }
   static void destruct_MHRanForest(void *p) {
      typedef ::MHRanForest current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHRanForest

//______________________________________________________________________________
void MHRanForestGini::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHRanForestGini.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHRanForestGini::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHRanForestGini::Class(),this);
   }
}

//______________________________________________________________________________
void MHRanForestGini::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHRanForestGini.
      TClass *R__cl = ::MHRanForestGini::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRanForest", &fRanForest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGini", &fGini);
      R__insp.InspectMember(fGini, "fGini.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGraphGini", &fGraphGini);
      R__insp.InspectMember(fGraphGini, "fGraphGini.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGraphError", &fGraphError);
      R__insp.InspectMember(fGraphError, "fGraphError.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGraphNodes", &fGraphNodes);
      R__insp.InspectMember(fGraphNodes, "fGraphNodes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRules", &fRules);
      R__insp.InspectMember(fRules, "fRules.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHRanForestGini(void *p) {
      return  p ? new(p) ::MHRanForestGini : new ::MHRanForestGini;
   }
   static void *newArray_MHRanForestGini(Long_t nElements, void *p) {
      return p ? new(p) ::MHRanForestGini[nElements] : new ::MHRanForestGini[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHRanForestGini(void *p) {
      delete ((::MHRanForestGini*)p);
   }
   static void deleteArray_MHRanForestGini(void *p) {
      delete [] ((::MHRanForestGini*)p);
   }
   static void destruct_MHRanForestGini(void *p) {
      typedef ::MHRanForestGini current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHRanForestGini

/********************************************************
* RanForestCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRanForestCint();

extern "C" void G__set_cpp_environmentRanForestCint() {
  G__cpp_reset_tagtableRanForestCint();
}
#include <new>
extern "C" int G__cpp_dllrevRanForestCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MRanTree */
static int G__RanForestCint_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRanTree((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanTree((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRanTree((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanTree[n];
       } else {
         p = new((void*) gvp) MRanTree[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanTree;
       } else {
         p = new((void*) gvp) MRanTree;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MRanTree(*(MRanTree*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MRanTree(*(MRanTree*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->SetNdSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->SetNumTry((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->SetError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNdSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNumTry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNumNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNumEndNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->IsClassify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MRanTree*) G__getstructoffset())->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetBestVar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetTreeMap1((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetTreeMap2((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNodeClass((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanTree*) G__getstructoffset())->GetNodeStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MRanTree*) G__getstructoffset())->GetBestSplit((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MRanTree*) G__getstructoffset())->GetGiniDec((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->SetClassify((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->GrowTree(
(TMatrix*) G__int(libp->para[0]), *(MArrayF*) libp->para[1].ref
, *(MArrayI*) libp->para[2].ref, *(MArrayI*) libp->para[3].ref
, *(MArrayI*) libp->para[4].ref, *(MArrayF*) libp->para[5].ref
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(MArrayI*) libp->para[8].ref, *(MArrayF*) libp->para[9].ref
, (const int) G__int(libp->para[10]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRanTree*) G__getstructoffset())->TreeHad(*(TVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRanTree*) G__getstructoffset())->TreeHad(*(TMatrixFRow_const*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRanTree*) G__getstructoffset())->TreeHad(*(TMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRanTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRanTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRanTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_242_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRanTree G__TMRanTree;
static int G__RanForestCint_242_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRanTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRanTree*) (soff+(sizeof(MRanTree)*i)))->~G__TMRanTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRanTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRanTree*) (soff))->~G__TMRanTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRanForest */
static int G__RanForestCint_246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanForest* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForest((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRanForest((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForest((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRanForest((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForest[n];
       } else {
         p = new((void*) gvp) MRanForest[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForest;
       } else {
         p = new((void*) gvp) MRanForest;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanForest));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanForest* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MRanForest(*(MRanForest*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MRanForest(*(MRanForest*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanForest));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetGrid(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetWeights(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetNumTrees((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetNumTry((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetNdSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetClassify((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->PrepareClasses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRanForest*) G__getstructoffset())->SetupGrow((MHMatrix*) G__int(libp->para[0]), (MParList*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRanForest*) G__getstructoffset())->GrowForest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetCurTree((MRanTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRanForest*) G__getstructoffset())->AddTree((MRanTree*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->SetUserVal((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRanForest*) G__getstructoffset())->GetForest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRanForest*) G__getstructoffset())->GetCurTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRanForest*) G__getstructoffset())->GetTree((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRanForest*) G__getstructoffset())->GetRules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanForest*) G__getstructoffset())->GetNumTrees());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanForest*) G__getstructoffset())->GetNumData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanForest*) G__getstructoffset())->GetNumDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanForest*) G__getstructoffset())->GetNdSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRanForest*) G__getstructoffset())->GetNclass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRanForest*) G__getstructoffset())->GetTreeHad((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRanForest*) G__getstructoffset())->GetUserVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRanForest*) G__getstructoffset())->IsClassify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRanForest*) G__getstructoffset())->CalcHadroness(*(TVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRanForest*) G__getstructoffset())->CalcHadroness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRanForest::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForest::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRanForest::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRanForest::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForest*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForest::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForest::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForest::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_246_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForest::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRanForest G__TMRanForest;
static int G__RanForestCint_246_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRanForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRanForest*) (soff+(sizeof(MRanForest)*i)))->~G__TMRanForest();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRanForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRanForest*) (soff))->~G__TMRanForest();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRanForestGrow */
static int G__RanForestCint_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanForestGrow* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForestGrow((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRanForestGrow((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForestGrow((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRanForestGrow((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForestGrow[n];
       } else {
         p = new((void*) gvp) MRanForestGrow[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForestGrow;
       } else {
         p = new((void*) gvp) MRanForestGrow;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRanForestGrow*) G__getstructoffset())->GetForest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRanForestGrow::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestGrow::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRanForestGrow::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRanForestGrow::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForestGrow*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestGrow::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForestGrow::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestGrow::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_254_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForestGrow::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRanForestGrow G__TMRanForestGrow;
static int G__RanForestCint_254_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRanForestGrow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRanForestGrow*) (soff+(sizeof(MRanForestGrow)*i)))->~G__TMRanForestGrow();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRanForestGrow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRanForestGrow*) (soff))->~G__TMRanForestGrow();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRanForestCalc */
static int G__RanForestCint_262_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRanForestCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForestCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRanForestCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRanForestCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRanForestCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForestCalc[n];
       } else {
         p = new((void*) gvp) MRanForestCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRanForestCalc;
       } else {
         p = new((void*) gvp) MRanForestCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForestCalc*) G__getstructoffset())->SetFileName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForestCalc*) G__getstructoffset())->SetEstimationMode((MRanForestCalc::EstimationMode_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetNameOutput(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetNameOutput();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetNumTrees((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetNumTrees();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetNdSize((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetNdSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetNumTry((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetNumTry();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetDebug((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MRanForestCalc*) G__getstructoffset())->SetFunction((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MRanForestCalc*) G__getstructoffset())->SetFunction());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetNumObsoleteVariables((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetNumObsoleteVariables();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetLastDataColumnHasWeights((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetLastDataColumnHasWeights();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRanForestCalc*) G__getstructoffset())->TrainMultiRF(*(MHMatrix*) libp->para[0].ref, *(TArrayD*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((MRanForestCalc*) G__getstructoffset())->TrainSingleRF(*(MHMatrix*) libp->para[0].ref, *(TArrayD*) libp->para[1].ref));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MRanForestCalc*) G__getstructoffset())->TrainSingleRF(*(MHMatrix*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRanForestCalc*) G__getstructoffset())->TrainRegression(*(MHMatrix*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRanForestCalc*) G__getstructoffset())->Train(*(MHMatrix*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->SetTestMatrix((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->SetTestMatrix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRanForestCalc*) G__getstructoffset())->InitMapping((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRanForestCalc*) G__getstructoffset())->InitMapping();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRanForestCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRanForestCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRanForestCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRanForestCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForestCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRanForestCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_262_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRanForestCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRanForestCalc G__TMRanForestCalc;
static int G__RanForestCint_262_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRanForestCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRanForestCalc*) (soff+(sizeof(MRanForestCalc)*i)))->~G__TMRanForestCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRanForestCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRanForestCalc*) (soff))->~G__TMRanForestCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHRanForest */
static int G__RanForestCint_309_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHRanForest* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForest(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHRanForest(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForest((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHRanForest((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForest((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHRanForest((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHRanForest[n];
       } else {
         p = new((void*) gvp) MHRanForest[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHRanForest;
       } else {
         p = new((void*) gvp) MHRanForest;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHRanForest*) G__getstructoffset())->GetGraphSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHRanForest::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForest::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHRanForest::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHRanForest::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHRanForest*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForest::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHRanForest::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForest::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_309_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHRanForest::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHRanForest G__TMHRanForest;
static int G__RanForestCint_309_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHRanForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHRanForest*) (soff+(sizeof(MHRanForest)*i)))->~G__TMHRanForest();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHRanForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHRanForest*) (soff))->~G__TMHRanForest();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHRanForestGini */
static int G__RanForestCint_341_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHRanForestGini* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForestGini(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHRanForestGini(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForestGini((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHRanForestGini((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHRanForestGini((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHRanForestGini((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHRanForestGini[n];
       } else {
         p = new((void*) gvp) MHRanForestGini[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHRanForestGini;
       } else {
         p = new((void*) gvp) MHRanForestGini;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHRanForestGini::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForestGini::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHRanForestGini::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHRanForestGini::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHRanForestGini*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForestGini::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHRanForestGini::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHRanForestGini::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RanForestCint_341_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHRanForestGini::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHRanForestGini G__TMHRanForestGini;
static int G__RanForestCint_341_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHRanForestGini*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHRanForestGini*) (soff+(sizeof(MHRanForestGini)*i)))->~G__TMHRanForestGini();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHRanForestGini*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHRanForestGini*) (soff))->~G__TMHRanForestGini();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MRanTree */

/* MRanForest */

/* MRanForestGrow */

/* MRanForestCalc */

/* MHRanForest */

/* MHRanForestGini */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRanForestCint {
 public:
  G__Sizep2memfuncRanForestCint(): p(&G__Sizep2memfuncRanForestCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRanForestCint::*p)();
};

size_t G__get_sizep2memfuncRanForestCint()
{
  G__Sizep2memfuncRanForestCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRanForestCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MRanTree))) {
     MRanTree *G__Lderived;
     G__Lderived=(MRanTree*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanTree),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanTree),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MRanForest))) {
     MRanForest *G__Lderived;
     G__Lderived=(MRanForest*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForest),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForest),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow))) {
     MRanForestGrow *G__Lderived;
     G__Lderived=(MRanForestGrow*)0x1000;
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow),G__get_linked_tagnum(&G__RanForestCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow),G__get_linked_tagnum(&G__RanForestCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow),G__get_linked_tagnum(&G__RanForestCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc))) {
     MRanForestCalc *G__Lderived;
     G__Lderived=(MRanForestCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc),G__get_linked_tagnum(&G__RanForestCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc),G__get_linked_tagnum(&G__RanForestCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest))) {
     MHRanForest *G__Lderived;
     G__Lderived=(MHRanForest*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest),G__get_linked_tagnum(&G__RanForestCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini))) {
     MHRanForestGini *G__Lderived;
     G__Lderived=(MHRanForestGini*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini),G__get_linked_tagnum(&G__RanForestCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini),G__get_linked_tagnum(&G__RanForestCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini),G__get_linked_tagnum(&G__RanForestCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRanForestCint() {

   /* Setting up typedef entry */
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RanForestCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RanForestCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RanForestCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RanForestCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVector",117,G__get_linked_tagnum(&G__RanForestCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixFRow_const",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__RanForestCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrix",117,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MRanTree */
static void G__setup_memvarMRanTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanTree));
   { MRanTree *p; p=(MRanTree*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fClassify=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTry=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumNodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumEndNodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fError=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fBestVar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fTreeMap1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fTreeMap2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fBestSplit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fGiniDec=",0,(char*)NULL);
   G__memvar_setup((void*)0,97,0,0,-1,G__defined_typename("G__p2mf301"),-1,4,"FindBestSplit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRanForest */
static void G__setup_memvarMRanForest(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForest));
   { MRanForest *p; p=(MRanForest*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fClassify=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTrees=",0,"Number of trees");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTry=",0,"Number of tries");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdSize=",0,"Size of node");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTreeNo=",0,"! Number of tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MRanTree),-1,-1,4,"fRanTree=",0,"! Pointer to some tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MDataArray),-1,-1,4,"fRules=",0,"! Pointer to corresponding rules");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TObjArray),-1,-1,4,"fForest=",0,"Array containing forest");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,4,"fMatrix=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fClass=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayD),-1,-1,4,"fGrid=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fHadTrue=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fHadEst=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fDataSort=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fDataRang=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fClassPop=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fWeight=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayI),-1,-1,4,"fNTimesOutBag=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayD),-1,-1,4,"fTreeHad=",0,"! Hadronness values (buffer for MHRanForest)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fUserVal=",0,"A user value describing this tree (eg E-mc)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRanForestGrow */
static void G__setup_memvarMRanForestGrow(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow));
   { MRanForestGrow *p; p=(MRanForestGrow*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MRanForest),-1,-1,4,"fRanForest=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MHMatrix),-1,-1,4,"fMatrix=",0,"! matrix with events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRanForestCalc */
static void G__setup_memvarMRanForestCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc));
   { MRanForestCalc *p; p=(MRanForestCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kMean=%lldLL",(long long)MRanForestCalc::kMean).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kMaximum=%lldLL",(long long)MRanForestCalc::kMaximum).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kFit=%lldLL",(long long)MRanForestCalc::kFit).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsDefName=",0,"! Default Name");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsDefTitle=",0,"! Default Title");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsNameOutput=",0,"! Default Output name");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-2,4,"gsNameEvalFunc=",0,"! Evaluation function name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MDataArray),-1,-1,4,"fData=",0,"! Used to store the MDataChains to get the event values");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MParameterD),-1,-1,4,"fRFOut=",0,"! Used to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MHMatrix),-1,-1,4,"fTestMatrix=",0,"! Test Matrix used in Process (together with MMatrixLoop)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MDataPhrase),-1,-1,4,"fFunc=",0,"! Function to apply to the result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TObjArray),-1,-1,4,"fEForests=",0,"! List of forests read or to be written");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTrees=",0,"! Training parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTry=",0,"! Training parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNdSize=",0,"! Training parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumObsoleteVariables=",0,"! Training parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLastDataColumnHasWeights=",0,"! Training parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-1,4,"fFileName=",0,"File name to forest");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TString),-1,-1,4,"fNameOutput=",0,"Name of output container");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDebug=",0,"Debugging of eventloop while training on/off");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t),-1,-1,4,"fEstimationMode=",0,"Mode of estimation in case of multi random forest regression");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHRanForest */
static void G__setup_memvarMHRanForest(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest));
   { MHRanForest *p; p=(MHRanForest*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__RanForestCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__RanForestCintLN_MRanForest),-1,-1,4,"fRanForest=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fSigma=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumEvent=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TGraph),-1,-1,4,"fGraphSigma=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHRanForestGini */
static void G__setup_memvarMHRanForestGini(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini));
   { MHRanForestGini *p; p=(MHRanForestGini*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_MRanForest),-1,-1,4,"fRanForest=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TArrayF),-1,-1,4,"fGini=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TGraph),-1,-1,4,"fGraphGini=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TGraph),-1,-1,4,"fGraphError=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TGraph),-1,-1,4,"fGraphNodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TPaveText),-1,-1,4,"fRules=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RanForestCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRanForestCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMRanTree(void) {
   /* MRanTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanTree));
   G__memfunc_setup("TreeHad",669,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 0, "F - 'Float_t' 10 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBestSplitGini",1698,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 14, 1, 4, 0, 
"u 'MArrayI' - 11 - datasort u 'MArrayI' - 11 - datarang "
"u 'MArrayF' - 11 - hadtrue u 'MArrayI' - 11 - idclass "
"i - 'Int_t' 0 - ndstart i - 'Int_t' 0 - ndend "
"u 'MArrayF' - 11 - tclasspop f - 'Float_t' 11 - mean "
"f - 'Float_t' 11 - square i - 'Int_t' 1 - msplit "
"f - 'Float_t' 1 - decsplit i - 'Int_t' 1 - nbest "
"u 'MArrayF' - 11 - winbag i - - 10 - nclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBestSplitSigma",1804,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 14, 1, 4, 0, 
"u 'MArrayI' - 11 - datasort u 'MArrayI' - 11 - datarang "
"u 'MArrayF' - 11 - hadtrue u 'MArrayI' - 11 - idclass "
"i - 'Int_t' 0 - ndstart i - 'Int_t' 0 - ndend "
"u 'MArrayF' - 11 - tclasspop f - 'Float_t' 11 - mean "
"f - 'Float_t' 11 - square i - 'Int_t' 1 - msplit "
"f - 'Float_t' 1 - decsplit i - 'Int_t' 1 - nbest "
"u 'MArrayF' - 11 - winbag i - - 10 - nclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveData",785,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 4, 0, 
"u 'MArrayI' - 1 - datasort i - 'Int_t' 0 - ndstart "
"i - 'Int_t' 0 - ndend u 'MArrayI' - 1 - idmove "
"u 'MArrayI' - 1 - ncase i - 'Int_t' 0 - msplit "
"i - 'Int_t' 0 - nbest i - 'Int_t' 1 - ndendl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildTree",896,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 12, 1, 4, 0, 
"u 'MArrayI' - 1 - datasort u 'MArrayI' - 11 - datarang "
"u 'MArrayF' - 11 - hadtrue u 'MArrayI' - 11 - idclass "
"u 'MArrayI' - 1 - bestsplit u 'MArrayI' - 1 - bestsplitnext "
"u 'MArrayF' - 11 - tclasspop f - 'Float_t' 11 - tmean "
"f - 'Float_t' 11 - tsquare u 'MArrayF' - 11 - winbag "
"i - 'Int_t' 0 - ninbag i - - 10 - nclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRanTree",766,G__RanForestCint_242_0_6, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanTree), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRanTree",766,G__RanForestCint_242_0_7, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanTree), -1, 0, 1, 1, 1, 0, "u 'MRanTree' - 11 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNdSize",889,G__RanForestCint_242_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTry",923,G__RanForestCint_242_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetError",822,G__RanForestCint_242_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNdSize",877,G__RanForestCint_242_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTry",911,G__RanForestCint_242_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumNodes",1097,G__RanForestCint_242_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEndNodes",1376,G__RanForestCint_242_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsClassify",1018,G__RanForestCint_242_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__RanForestCint_242_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBestVar",983,G__RanForestCint_242_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeMap1",1023,G__RanForestCint_242_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeMap2",1024,G__RanForestCint_242_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeClass",1180,G__RanForestCint_242_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNodeStatus",1322,G__RanForestCint_242_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBestSplit",1210,G__RanForestCint_242_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGiniDec",947,G__RanForestCint_242_0_23, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClassify",1130,G__RanForestCint_242_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrowTree",815,G__RanForestCint_242_0_25, 121, -1, -1, 0, 11, 1, 1, 0, 
"U 'TMatrixT<float>' 'TMatrix' 0 - mat u 'MArrayF' - 11 - hadtrue "
"u 'MArrayI' - 11 - idclass u 'MArrayI' - 1 - datasort "
"u 'MArrayI' - 11 - datarang u 'MArrayF' - 11 - tclasspop "
"f - 'Float_t' 11 - mean f - 'Float_t' 11 - square "
"u 'MArrayI' - 11 - jinbag u 'MArrayF' - 11 - winbag "
"i - - 10 - nclass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeHad",669,G__RanForestCint_242_0_26, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'TVectorT<float>' 'TVector' 11 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeHad",669,G__RanForestCint_242_0_27, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'TMatrixTRow_const<float>' 'TMatrixFRow_const' 11 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreeHad",669,G__RanForestCint_242_0_28, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 11 - m i - 'Int_t' 0 - ievt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsciiWrite",1012,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RanForestCint_242_0_30, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRanTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_242_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_242_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRanTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_242_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRanTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_242_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_242_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_242_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_242_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_242_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanTree::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRanTree", 892, G__RanForestCint_242_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRanForest(void) {
   /* MRanForest */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForest));
   G__memfunc_setup("EstimateError",1350,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"u 'MArrayI' - 11 - jinbag g - 'Bool_t' 0 - calcResolution", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateDataSort",1398,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ModifyDataSort",1418,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'MArrayI' - 1 - datsortinbag u 'MArrayI' - 11 - jinbag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRanForest",993,G__RanForestCint_246_0_4, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanForest), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRanForest",993,G__RanForestCint_246_0_5, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanForest), -1, 0, 1, 1, 1, 0, "u 'MRanForest' - 11 - rf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetGrid",690,G__RanForestCint_246_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - grid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeights",1031,G__RanForestCint_246_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 11 - weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTrees",1119,G__RanForestCint_246_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTry",923,G__RanForestCint_246_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNdSize",889,G__RanForestCint_246_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetClassify",1130,G__RanForestCint_246_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareClasses",1437,G__RanForestCint_246_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupGrow",944,G__RanForestCint_246_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - mat U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GrowForest",1042,G__RanForestCint_246_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCurTree",998,G__RanForestCint_246_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MRanTree' - 0 - rantree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTree",665,G__RanForestCint_246_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MRanTree' - 0 - rantree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserVal",1006,G__RanForestCint_246_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetForest",915,G__RanForestCint_246_0_19, 85, G__get_linked_tagnum(&G__RanForestCintLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurTree",986,G__RanForestCint_246_0_20, 85, G__get_linked_tagnum(&G__RanForestCintLN_MRanTree), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G__RanForestCint_246_0_21, 85, G__get_linked_tagnum(&G__RanForestCintLN_MRanTree), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRules",811,G__RanForestCint_246_0_22, 85, G__get_linked_tagnum(&G__RanForestCintLN_MDataArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTrees",1107,G__RanForestCint_246_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumData",970,G__RanForestCint_246_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumDim",874,G__RanForestCint_246_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNdSize",877,G__RanForestCint_246_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNclass",900,G__RanForestCint_246_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeHad",957,G__RanForestCint_246_0_28, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUserVal",994,G__RanForestCint_246_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsClassify",1018,G__RanForestCint_246_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcHadroness",1306,G__RanForestCint_246_0_31, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'TVectorT<float>' 'TVector' 11 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcHadroness",1306,G__RanForestCint_246_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AsciiWrite",1012,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RanForestCint_246_0_34, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRanForest::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_246_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForest::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_246_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRanForest::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_246_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRanForest::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_246_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_246_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForest::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_246_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForest::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_246_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForest::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_246_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForest::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRanForest", 1119, G__RanForestCint_246_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRanForestGrow(void) {
   /* MRanForestGrow */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 4, 0, "", "fNumTrees; }", (void*) NULL, 1);
   G__memfunc_setup("GetFileName",1057,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RanForestCintLN_TString), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFullFileName",1460,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RanForestCintLN_TString), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MRanForestGrow",1408,G__RanForestCint_254_0_7, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanForestGrow), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetForest",915,G__RanForestCint_254_0_8, 85, G__get_linked_tagnum(&G__RanForestCintLN_MRanForest), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RanForestCint_254_0_9, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRanForestGrow::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_254_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestGrow::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_254_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRanForestGrow::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_254_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRanForestGrow::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_254_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_254_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestGrow::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_254_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForestGrow::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_254_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestGrow::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_254_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForestGrow::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRanForestGrow", 1534, G__RanForestCint_254_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRanForestCalc(void) {
   /* MRanForestCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadForests",1122,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Train",510,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'MHMatrix' - 11 - n u 'TArrayD' - 11 - grid "
"i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRanForestCalc",1364,G__RanForestCint_262_0_7, 105, G__get_linked_tagnum(&G__RanForestCintLN_MRanForestCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetFileName",1069,G__RanForestCint_262_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEstimationMode",1742,G__RanForestCint_262_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MRanForestCalc::EstimationMode_t' - 0 - op", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameOutput",1342,G__RanForestCint_262_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 'gsNameOutput' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTrees",1119,G__RanForestCint_262_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 '100' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNdSize",889,G__RanForestCint_262_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 '5' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTry",923,G__RanForestCint_262_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__RanForestCint_262_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFunction",1138,G__RanForestCint_262_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 '\"x\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumObsoleteVariables",2354,G__RanForestCint_262_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLastDataColumnHasWeights",2719,G__RanForestCint_262_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrainMultiRF",1185,G__RanForestCint_262_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'MHMatrix' - 11 - n u 'TArrayD' - 11 - grid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrainSingleRF",1272,G__RanForestCint_262_0_20, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'MHMatrix' - 11 - n u 'TArrayD' - 11 'TArrayD()' grid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrainRegression",1567,G__RanForestCint_262_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'MHMatrix' - 11 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Train",510,G__RanForestCint_262_0_22, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'MHMatrix' - 11 - m g - 'Bool_t' 0 - regression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTestMatrix",1345,G__RanForestCint_262_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MHMatrix' - 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,G__RanForestCint_262_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MHMatrix' - 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RanForestCint_262_0_25, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRanForestCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_262_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_262_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRanForestCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_262_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRanForestCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_262_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_262_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_262_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForestCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_262_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRanForestCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_262_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRanForestCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRanForestCalc", 1490, G__RanForestCint_262_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHRanForest(void) {
   /* MHRanForest */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest));
   G__memfunc_setup("MHRanForest",1065,G__RanForestCint_309_0_1, 105, G__get_linked_tagnum(&G__RanForestCintLN_MHRanForest), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '100' nbins C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphSigma",1283,G__RanForestCint_309_0_2, 85, G__get_linked_tagnum(&G__RanForestCintLN_TGraph), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RanForestCint_309_0_7, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHRanForest::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_309_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForest::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_309_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHRanForest::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_309_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHRanForest::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_309_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_309_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForest::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_309_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHRanForest::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_309_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForest::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_309_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHRanForest::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHRanForest", 1191, G__RanForestCint_309_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHRanForestGini(void) {
   /* MHRanForestGini */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini));
   G__memfunc_setup("MHRanForestGini",1456,G__RanForestCint_341_0_1, 105, G__get_linked_tagnum(&G__RanForestCintLN_MHRanForestGini), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '100' nbins C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RanForestCint_341_0_6, 85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHRanForestGini::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RanForestCint_341_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForestGini::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RanForestCint_341_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHRanForestGini::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RanForestCint_341_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHRanForestGini::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RanForestCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RanForestCint_341_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RanForestCint_341_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForestGini::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RanForestCint_341_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHRanForestGini::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RanForestCint_341_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHRanForestGini::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RanForestCint_341_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHRanForestGini::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHRanForestGini", 1582, G__RanForestCint_341_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRanForestCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRanForestCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRanForestCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RanForestCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RanForestCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRanTree = { "MRanTree" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MDataArray = { "MDataArray" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRanForest = { "MRanForest" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRanForestGrow = { "MRanForestGrow" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MDataPhrase = { "MDataPhrase" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRanForestCalc = { "MRanForestCalc" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t = { "MRanForestCalc::EstimationMode_t" , 101 , -1 };
G__linked_taginfo G__RanForestCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MHRanForest = { "MHRanForest" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_TPaveText = { "TPaveText" , 99 , -1 };
G__linked_taginfo G__RanForestCintLN_MHRanForestGini = { "MHRanForestGini" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRanForestCint() {
  G__RanForestCintLN_TClass.tagnum = -1 ;
  G__RanForestCintLN_TBuffer.tagnum = -1 ;
  G__RanForestCintLN_TMemberInspector.tagnum = -1 ;
  G__RanForestCintLN_TObject.tagnum = -1 ;
  G__RanForestCintLN_TString.tagnum = -1 ;
  G__RanForestCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RanForestCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RanForestCintLN_TObjArray.tagnum = -1 ;
  G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RanForestCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RanForestCintLN_TEnv.tagnum = -1 ;
  G__RanForestCintLN_TArrayD.tagnum = -1 ;
  G__RanForestCintLN_MParContainer.tagnum = -1 ;
  G__RanForestCintLN_TArrayI.tagnum = -1 ;
  G__RanForestCintLN_TArrayF.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__RanForestCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__RanForestCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__RanForestCintLN_MArrayI.tagnum = -1 ;
  G__RanForestCintLN_MArrayF.tagnum = -1 ;
  G__RanForestCintLN_MRanTree.tagnum = -1 ;
  G__RanForestCintLN_MDataArray.tagnum = -1 ;
  G__RanForestCintLN_MHMatrix.tagnum = -1 ;
  G__RanForestCintLN_MParList.tagnum = -1 ;
  G__RanForestCintLN_MRanForest.tagnum = -1 ;
  G__RanForestCintLN_MInputStreamID.tagnum = -1 ;
  G__RanForestCintLN_MTask.tagnum = -1 ;
  G__RanForestCintLN_MRead.tagnum = -1 ;
  G__RanForestCintLN_MRanForestGrow.tagnum = -1 ;
  G__RanForestCintLN_MDataPhrase.tagnum = -1 ;
  G__RanForestCintLN_MParameterD.tagnum = -1 ;
  G__RanForestCintLN_MRanForestCalc.tagnum = -1 ;
  G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t.tagnum = -1 ;
  G__RanForestCintLN_MH.tagnum = -1 ;
  G__RanForestCintLN_TGraph.tagnum = -1 ;
  G__RanForestCintLN_MMcEvt.tagnum = -1 ;
  G__RanForestCintLN_MHRanForest.tagnum = -1 ;
  G__RanForestCintLN_TPaveText.tagnum = -1 ;
  G__RanForestCintLN_MHRanForestGini.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRanForestCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TString);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MArrayI);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRanTree),sizeof(MRanTree),-1,324352,"Storage container for tree structure",G__setup_memvarMRanTree,G__setup_memfuncMRanTree);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MDataArray);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MHMatrix);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MParList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRanForest),sizeof(MRanForest),-1,325376,"Storage container for tree structure",G__setup_memvarMRanForest,G__setup_memfuncMRanForest);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRead);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRanForestGrow),sizeof(MRanForestGrow),-1,323840,"Task to grow a random forest",G__setup_memvarMRanForestGrow,G__setup_memfuncMRanForestGrow);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MDataPhrase);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MParameterD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRanForestCalc),sizeof(MRanForestCalc),-1,324864,"Task to calculate RF output and for RF training",G__setup_memvarMRanForestCalc,G__setup_memfuncMRanForestCalc);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MRanForestCalccLcLEstimationMode_t);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MH);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TGraph);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_MMcEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MHRanForest),sizeof(MHRanForest),-1,324864,"Histogram showing variance of estimated Hadronness",G__setup_memvarMHRanForest,G__setup_memfuncMHRanForest);
   G__get_linked_tagnum_fwd(&G__RanForestCintLN_TPaveText);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RanForestCintLN_MHRanForestGini),sizeof(MHRanForestGini),-1,323840,(char*)NULL,G__setup_memvarMHRanForestGini,G__setup_memfuncMHRanForestGini);
}
extern "C" void G__cpp_setupRanForestCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupRanForestCint()");
  G__set_cpp_environmentRanForestCint();
  G__cpp_setup_tagtableRanForestCint();

  G__cpp_setup_inheritanceRanForestCint();

  G__cpp_setup_typetableRanForestCint();

  G__cpp_setup_memvarRanForestCint();

  G__cpp_setup_memfuncRanForestCint();
  G__cpp_setup_globalRanForestCint();
  G__cpp_setup_funcRanForestCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRanForestCint();
  return;
}
class G__cpp_setup_initRanForestCint {
  public:
    G__cpp_setup_initRanForestCint() { G__add_setup_func("RanForestCint",(G__incsetup)(&G__cpp_setupRanForestCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRanForestCint() { G__remove_setup_func("RanForestCint"); }
};
G__cpp_setup_initRanForestCint G__cpp_setup_initializerRanForestCint;

