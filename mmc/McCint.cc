//
// File generated by rootcint at Mon Nov 28 11:06:58 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME McCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "McCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MMcTrigHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcTrigHeader(void *p = 0);
   static void *newArray_MMcTrigHeader(Long_t size, void *p);
   static void delete_MMcTrigHeader(void *p);
   static void deleteArray_MMcTrigHeader(void *p);
   static void destruct_MMcTrigHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcTrigHeader*)
   {
      ::MMcTrigHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcTrigHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcTrigHeader", ::MMcTrigHeader::Class_Version(), "./MMcTrigHeader.hxx", 14,
                  typeid(::MMcTrigHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcTrigHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MMcTrigHeader) );
      instance.SetNew(&new_MMcTrigHeader);
      instance.SetNewArray(&newArray_MMcTrigHeader);
      instance.SetDelete(&delete_MMcTrigHeader);
      instance.SetDeleteArray(&deleteArray_MMcTrigHeader);
      instance.SetDestructor(&destruct_MMcTrigHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcTrigHeader*)
   {
      return GenerateInitInstanceLocal((::MMcTrigHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcTrigHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcFadcHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcFadcHeader(void *p = 0);
   static void *newArray_MMcFadcHeader(Long_t size, void *p);
   static void delete_MMcFadcHeader(void *p);
   static void deleteArray_MMcFadcHeader(void *p);
   static void destruct_MMcFadcHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcFadcHeader*)
   {
      ::MMcFadcHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcFadcHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcFadcHeader", ::MMcFadcHeader::Class_Version(), "./MMcFadcHeader.hxx", 13,
                  typeid(::MMcFadcHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcFadcHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MMcFadcHeader) );
      instance.SetNew(&new_MMcFadcHeader);
      instance.SetNewArray(&newArray_MMcFadcHeader);
      instance.SetDelete(&delete_MMcFadcHeader);
      instance.SetDeleteArray(&deleteArray_MMcFadcHeader);
      instance.SetDestructor(&destruct_MMcFadcHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcFadcHeader*)
   {
      return GenerateInitInstanceLocal((::MMcFadcHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcFadcHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcRunHeader(void *p = 0);
   static void *newArray_MMcRunHeader(Long_t size, void *p);
   static void delete_MMcRunHeader(void *p);
   static void deleteArray_MMcRunHeader(void *p);
   static void destruct_MMcRunHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcRunHeader*)
   {
      ::MMcRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcRunHeader", ::MMcRunHeader::Class_Version(), "./MMcRunHeader.hxx", 25,
                  typeid(::MMcRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcRunHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MMcRunHeader) );
      instance.SetNew(&new_MMcRunHeader);
      instance.SetNewArray(&newArray_MMcRunHeader);
      instance.SetDelete(&delete_MMcRunHeader);
      instance.SetDeleteArray(&deleteArray_MMcRunHeader);
      instance.SetDestructor(&destruct_MMcRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcRunHeader*)
   {
      return GenerateInitInstanceLocal((::MMcRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcEvtBasic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcEvtBasic(void *p = 0);
   static void *newArray_MMcEvtBasic(Long_t size, void *p);
   static void delete_MMcEvtBasic(void *p);
   static void deleteArray_MMcEvtBasic(void *p);
   static void destruct_MMcEvtBasic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcEvtBasic*)
   {
      ::MMcEvtBasic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcEvtBasic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcEvtBasic", ::MMcEvtBasic::Class_Version(), "./MMcEvtBasic.h", 9,
                  typeid(::MMcEvtBasic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcEvtBasic::Dictionary, isa_proxy, 4,
                  sizeof(::MMcEvtBasic) );
      instance.SetNew(&new_MMcEvtBasic);
      instance.SetNewArray(&newArray_MMcEvtBasic);
      instance.SetDelete(&delete_MMcEvtBasic);
      instance.SetDeleteArray(&deleteArray_MMcEvtBasic);
      instance.SetDestructor(&destruct_MMcEvtBasic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcEvtBasic*)
   {
      return GenerateInitInstanceLocal((::MMcEvtBasic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcEvtBasic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcEvt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcEvt(void *p = 0);
   static void *newArray_MMcEvt(Long_t size, void *p);
   static void delete_MMcEvt(void *p);
   static void deleteArray_MMcEvt(void *p);
   static void destruct_MMcEvt(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcEvt*)
   {
      ::MMcEvt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcEvt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcEvt", ::MMcEvt::Class_Version(), "./MMcEvt.hxx", 10,
                  typeid(::MMcEvt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcEvt::Dictionary, isa_proxy, 4,
                  sizeof(::MMcEvt) );
      instance.SetNew(&new_MMcEvt);
      instance.SetNewArray(&newArray_MMcEvt);
      instance.SetDelete(&delete_MMcEvt);
      instance.SetDeleteArray(&deleteArray_MMcEvt);
      instance.SetDestructor(&destruct_MMcEvt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcEvt*)
   {
      return GenerateInitInstanceLocal((::MMcEvt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcEvt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcTrig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcTrig(void *p = 0);
   static void *newArray_MMcTrig(Long_t size, void *p);
   static void delete_MMcTrig(void *p);
   static void deleteArray_MMcTrig(void *p);
   static void destruct_MMcTrig(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcTrig*)
   {
      ::MMcTrig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcTrig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcTrig", ::MMcTrig::Class_Version(), "./MMcTrig.hxx", 14,
                  typeid(::MMcTrig), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcTrig::Dictionary, isa_proxy, 4,
                  sizeof(::MMcTrig) );
      instance.SetNew(&new_MMcTrig);
      instance.SetNewArray(&newArray_MMcTrig);
      instance.SetDelete(&delete_MMcTrig);
      instance.SetDeleteArray(&deleteArray_MMcTrig);
      instance.SetDestructor(&destruct_MMcTrig);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcTrig*)
   {
      return GenerateInitInstanceLocal((::MMcTrig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcTrig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcConfigRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcConfigRunHeader(void *p = 0);
   static void *newArray_MMcConfigRunHeader(Long_t size, void *p);
   static void delete_MMcConfigRunHeader(void *p);
   static void deleteArray_MMcConfigRunHeader(void *p);
   static void destruct_MMcConfigRunHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcConfigRunHeader*)
   {
      ::MMcConfigRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcConfigRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcConfigRunHeader", ::MMcConfigRunHeader::Class_Version(), "./MMcConfigRunHeader.h", 19,
                  typeid(::MMcConfigRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcConfigRunHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MMcConfigRunHeader) );
      instance.SetNew(&new_MMcConfigRunHeader);
      instance.SetNewArray(&newArray_MMcConfigRunHeader);
      instance.SetDelete(&delete_MMcConfigRunHeader);
      instance.SetDeleteArray(&deleteArray_MMcConfigRunHeader);
      instance.SetDestructor(&destruct_MMcConfigRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcConfigRunHeader*)
   {
      return GenerateInitInstanceLocal((::MMcConfigRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcConfigRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcCorsikaRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcCorsikaRunHeader(void *p = 0);
   static void *newArray_MMcCorsikaRunHeader(Long_t size, void *p);
   static void delete_MMcCorsikaRunHeader(void *p);
   static void deleteArray_MMcCorsikaRunHeader(void *p);
   static void destruct_MMcCorsikaRunHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcCorsikaRunHeader*)
   {
      ::MMcCorsikaRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcCorsikaRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcCorsikaRunHeader", ::MMcCorsikaRunHeader::Class_Version(), "./MMcCorsikaRunHeader.h", 19,
                  typeid(::MMcCorsikaRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcCorsikaRunHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MMcCorsikaRunHeader) );
      instance.SetNew(&new_MMcCorsikaRunHeader);
      instance.SetNewArray(&newArray_MMcCorsikaRunHeader);
      instance.SetDelete(&delete_MMcCorsikaRunHeader);
      instance.SetDeleteArray(&deleteArray_MMcCorsikaRunHeader);
      instance.SetDestructor(&destruct_MMcCorsikaRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcCorsikaRunHeader*)
   {
      return GenerateInitInstanceLocal((::MMcCorsikaRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcCorsikaRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MMcTrigHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcTrigHeader::Class_Name()
{
   return "MMcTrigHeader";
}

//______________________________________________________________________________
const char *MMcTrigHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrigHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcTrigHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrigHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcTrigHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrigHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcTrigHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrigHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcFadcHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcFadcHeader::Class_Name()
{
   return "MMcFadcHeader";
}

//______________________________________________________________________________
const char *MMcFadcHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcFadcHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcFadcHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcFadcHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcFadcHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcFadcHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcFadcHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcFadcHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcRunHeader::Class_Name()
{
   return "MMcRunHeader";
}

//______________________________________________________________________________
const char *MMcRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcEvtBasic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcEvtBasic::Class_Name()
{
   return "MMcEvtBasic";
}

//______________________________________________________________________________
const char *MMcEvtBasic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvtBasic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcEvtBasic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvtBasic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcEvtBasic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvtBasic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcEvtBasic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvtBasic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcEvt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcEvt::Class_Name()
{
   return "MMcEvt";
}

//______________________________________________________________________________
const char *MMcEvt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcEvt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcEvt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcEvt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcEvt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcTrig::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcTrig::Class_Name()
{
   return "MMcTrig";
}

//______________________________________________________________________________
const char *MMcTrig::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcTrig::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcTrig::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcTrig::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcTrig*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcConfigRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcConfigRunHeader::Class_Name()
{
   return "MMcConfigRunHeader";
}

//______________________________________________________________________________
const char *MMcConfigRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcConfigRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcConfigRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcConfigRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcConfigRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcConfigRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcConfigRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcConfigRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcCorsikaRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcCorsikaRunHeader::Class_Name()
{
   return "MMcCorsikaRunHeader";
}

//______________________________________________________________________________
const char *MMcCorsikaRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCorsikaRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcCorsikaRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCorsikaRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcCorsikaRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCorsikaRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcCorsikaRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCorsikaRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MMcEvt::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcEvt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcEvt::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcEvt::Class(),this);
   }
}

//______________________________________________________________________________
void MMcEvt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcEvt.
      TClass *R__cl = ::MMcEvt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvtNumber", &fEvtNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThick0", &fThick0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstTarget", &fFirstTarget);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZFirstInteraction", &fZFirstInteraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreD", &fCoreD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreX", &fCoreX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreY", &fCoreY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeFirst", &fTimeFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLast", &fTimeLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongiNmax", &fLongiNmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongit0", &fLongit0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongitmax", &fLongitmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongia", &fLongia);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongib", &fLongib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongic", &fLongic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLongichi2", &fLongichi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotIni", &fPhotIni);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassPhotAtm", &fPassPhotAtm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassPhotRef", &fPassPhotRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPassPhotCone", &fPassPhotCone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotElfromShower", &fPhotElfromShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotElinCamera", &fPhotElinCamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElecCphFraction", &fElecCphFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonCphFraction", &fMuonCphFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOtherCphFraction", &fOtherCphFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadcTimeJitter", &fFadcTimeJitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventReuse", &fEventReuse);
      MMcEvtBasic::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcEvt(void *p) {
      return  p ? new(p) ::MMcEvt : new ::MMcEvt;
   }
   static void *newArray_MMcEvt(Long_t nElements, void *p) {
      return p ? new(p) ::MMcEvt[nElements] : new ::MMcEvt[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcEvt(void *p) {
      delete ((::MMcEvt*)p);
   }
   static void deleteArray_MMcEvt(void *p) {
      delete [] ((::MMcEvt*)p);
   }
   static void destruct_MMcEvt(void *p) {
      typedef ::MMcEvt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcEvt

//______________________________________________________________________________
void MMcEvtBasic::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcEvtBasic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcEvtBasic::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcEvtBasic::Class(),this);
   }
}

//______________________________________________________________________________
void MMcEvtBasic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcEvtBasic.
      TClass *R__cl = ::MMcEvtBasic::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPartId", &fPartId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpact", &fImpact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopePhi", &fTelescopePhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopeTheta", &fTelescopeTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcEvtBasic(void *p) {
      return  p ? new(p) ::MMcEvtBasic : new ::MMcEvtBasic;
   }
   static void *newArray_MMcEvtBasic(Long_t nElements, void *p) {
      return p ? new(p) ::MMcEvtBasic[nElements] : new ::MMcEvtBasic[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcEvtBasic(void *p) {
      delete ((::MMcEvtBasic*)p);
   }
   static void deleteArray_MMcEvtBasic(void *p) {
      delete [] ((::MMcEvtBasic*)p);
   }
   static void destruct_MMcEvtBasic(void *p) {
      typedef ::MMcEvtBasic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcEvtBasic

//______________________________________________________________________________
void MMcTrig::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcTrig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcTrig::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcTrig::Class(),this);
   }
}

//______________________________________________________________________________
void MMcTrig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcTrig.
      TClass *R__cl = ::MMcTrig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFirstLevel", &fNumFirstLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSecondLevel", &fNumSecondLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeFirst[4]", fTimeFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixelsFirst[476][4]", fPixelsFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstToSecond[1]", fFirstToSecond);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcTrig(void *p) {
      return  p ? new(p) ::MMcTrig : new ::MMcTrig;
   }
   static void *newArray_MMcTrig(Long_t nElements, void *p) {
      return p ? new(p) ::MMcTrig[nElements] : new ::MMcTrig[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcTrig(void *p) {
      delete ((::MMcTrig*)p);
   }
   static void deleteArray_MMcTrig(void *p) {
      delete [] ((::MMcTrig*)p);
   }
   static void destruct_MMcTrig(void *p) {
      typedef ::MMcTrig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcTrig

//______________________________________________________________________________
void MMcRunHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcRunHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcRunHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcRunHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MMcRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcRunHeader.
      TClass *R__cl = ::MMcRunHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTrigCond", &fNumTrigCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllEvtsTriggered", &fAllEvtsTriggered);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcTrig", &fMcTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcFadc", &fMcFadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumAnalisedPixels", &fNumAnalisedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSimulatedShowers", &fNumSimulatedShowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumStoredShowers", &fNumStoredShowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldRaH", &fStarFieldRaH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldRaM", &fStarFieldRaM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldRaS", &fStarFieldRaS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldDeD", &fStarFieldDeD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldDeM", &fStarFieldDeM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldDeS", &fStarFieldDeS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPheFromDNSB", &fNumPheFromDNSB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerThetaMax", &fShowerThetaMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerThetaMin", &fShowerThetaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerPhiMax", &fShowerPhiMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShowerPhiMin", &fShowerPhiMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fImpactMax", &fImpactMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorsikaVersion", &fCorsikaVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReflVersion", &fReflVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCamVersion", &fCamVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcRunNumber", &fMcRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProductionSite", &fProductionSite);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDateRunMMCs", &fDateRunMMCs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDateRunCamera", &fDateRunCamera);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElecNoise", &fElecNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStarFieldRotate", &fStarFieldRotate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCWaveLower", &fCWaveLower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCWaveUpper", &fCWaveUpper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumObsLev", &fNumObsLev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeightLev[10]", fHeightLev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeSpec", &fSlopeSpec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOpticLinksNoise", &fOpticLinksNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRandomPointingConeSemiAngle", &fRandomPointingConeSemiAngle);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcRunHeader(void *p) {
      return  p ? new(p) ::MMcRunHeader : new ::MMcRunHeader;
   }
   static void *newArray_MMcRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MMcRunHeader[nElements] : new ::MMcRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcRunHeader(void *p) {
      delete ((::MMcRunHeader*)p);
   }
   static void deleteArray_MMcRunHeader(void *p) {
      delete [] ((::MMcRunHeader*)p);
   }
   static void destruct_MMcRunHeader(void *p) {
      typedef ::MMcRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcRunHeader

//______________________________________________________________________________
void MMcTrigHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcTrigHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcTrigHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcTrigHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MMcTrigHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcTrigHeader.
      TClass *R__cl = ::MMcTrigHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTopology", &fTopology);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiplicity", &fMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThreshold[3800]", fThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigPattern[2]", fTrigPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigShape", &fTrigShape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplTrig", &fAmplTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFwhmTrig", &fFwhmTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOverlapingTime", &fOverlapingTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGateLeng", &fGateLeng);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElecNoiseTrig", &fElecNoiseTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGainFluctuations", &fGainFluctuations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoiseGainFluctuations", &fNoiseGainFluctuations);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcTrigHeader(void *p) {
      return  p ? new(p) ::MMcTrigHeader : new ::MMcTrigHeader;
   }
   static void *newArray_MMcTrigHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MMcTrigHeader[nElements] : new ::MMcTrigHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcTrigHeader(void *p) {
      delete ((::MMcTrigHeader*)p);
   }
   static void deleteArray_MMcTrigHeader(void *p) {
      delete [] ((::MMcTrigHeader*)p);
   }
   static void destruct_MMcTrigHeader(void *p) {
      typedef ::MMcTrigHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcTrigHeader

//______________________________________________________________________________
void MMcFadcHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcFadcHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcFadcHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcFadcHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MMcFadcHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcFadcHeader.
      TClass *R__cl = ::MMcFadcHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadcShape", &fFadcShape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadcShapeOuter", &fFadcShapeOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplFadc", &fAmplFadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFwhmFadc", &fFwhmFadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplFadcOuter", &fAmplFadcOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFwhmFadcOuter", &fFwhmFadcOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedesMean[3800]", fPedesMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedesSigmaHigh[3800]", fPedesSigmaHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedesSigmaLow[3800]", fPedesSigmaLow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElecNoise[3800]", fElecNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDigitalNoise[3800]", fDigitalNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLow2HighGain", &fLow2HighGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElecNoiseFileName", &fElecNoiseFileName);
      R__insp.InspectMember(fElecNoiseFileName, "fElecNoiseFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGainFluctuations", &fGainFluctuations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoiseGainFluctuations", &fNoiseGainFluctuations);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcFadcHeader(void *p) {
      return  p ? new(p) ::MMcFadcHeader : new ::MMcFadcHeader;
   }
   static void *newArray_MMcFadcHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MMcFadcHeader[nElements] : new ::MMcFadcHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcFadcHeader(void *p) {
      delete ((::MMcFadcHeader*)p);
   }
   static void deleteArray_MMcFadcHeader(void *p) {
      delete [] ((::MMcFadcHeader*)p);
   }
   static void destruct_MMcFadcHeader(void *p) {
      typedef ::MMcFadcHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcFadcHeader

//______________________________________________________________________________
void MMcConfigRunHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcConfigRunHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcConfigRunHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcConfigRunHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MMcConfigRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcConfigRunHeader.
      TClass *R__cl = ::MMcConfigRunHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumMirrors", &fNumMirrors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadiusMirror", &fRadiusMirror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirrors", &fMirrors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMirrorFraction", &fMirrorFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFocalDist", &fFocalDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParaboloidFocal", &fParaboloidFocal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointSpread", &fPointSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointSpreadX", &fPointSpreadX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointSpreadY", &fPointSpreadY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlackSpot", &fBlackSpot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCameraWidth", &fCameraWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMissPointingX", &fMissPointingX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMissPointingY", &fMissPointingY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmtTimeJitter", &fPmtTimeJitter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPMTs", &fNumPMTs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPMTs", &fPMTs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIncidentTheta", &fIncidentTheta);
      R__insp.InspectMember(fIncidentTheta, "fIncidentTheta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLightCollectionFactor", &fLightCollectionFactor);
      R__insp.InspectMember(fLightCollectionFactor, "fLightCollectionFactor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLightCollectionFactorOuter", &fLightCollectionFactorOuter);
      R__insp.InspectMember(fLightCollectionFactorOuter, "fLightCollectionFactorOuter.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcConfigRunHeader(void *p) {
      return  p ? new(p) ::MMcConfigRunHeader : new ::MMcConfigRunHeader;
   }
   static void *newArray_MMcConfigRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MMcConfigRunHeader[nElements] : new ::MMcConfigRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcConfigRunHeader(void *p) {
      delete ((::MMcConfigRunHeader*)p);
   }
   static void deleteArray_MMcConfigRunHeader(void *p) {
      delete [] ((::MMcConfigRunHeader*)p);
   }
   static void destruct_MMcConfigRunHeader(void *p) {
      typedef ::MMcConfigRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcConfigRunHeader

//______________________________________________________________________________
void MMcCorsikaRunHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcCorsikaRunHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcCorsikaRunHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcCorsikaRunHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MMcCorsikaRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcCorsikaRunHeader.
      TClass *R__cl = ::MMcCorsikaRunHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDate", &fDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorsikaVersion", &fCorsikaVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumObsLev", &fNumObsLev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeightLev[10]", fHeightLev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeSpec", &fSlopeSpec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fELowLim", &fELowLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEUppLim", &fEUppLim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEGS4flag", &fEGS4flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNKGflag", &fNKGflag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcutoffh", &fEcutoffh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcutoffm", &fEcutoffm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcutoffe", &fEcutoffe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcutoffg", &fEcutoffg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC[50]", fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCKA[40]", fCKA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCETA[5]", fCETA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCSTRBA[11]", fCSTRBA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAATM[5]", fAATM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBATM[5]", fBATM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCATM[5]", fCATM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNFL[4]", fNFL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fViewconeAngles[2]", fViewconeAngles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWobbleMode", &fWobbleMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAtmosphericModel", &fAtmosphericModel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCT", &fNumCT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopes", &fTelescopes);
      R__insp.InspectMember(fTelescopes, "fTelescopes.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcCorsikaRunHeader(void *p) {
      return  p ? new(p) ::MMcCorsikaRunHeader : new ::MMcCorsikaRunHeader;
   }
   static void *newArray_MMcCorsikaRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MMcCorsikaRunHeader[nElements] : new ::MMcCorsikaRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcCorsikaRunHeader(void *p) {
      delete ((::MMcCorsikaRunHeader*)p);
   }
   static void deleteArray_MMcCorsikaRunHeader(void *p) {
      delete [] ((::MMcCorsikaRunHeader*)p);
   }
   static void destruct_MMcCorsikaRunHeader(void *p) {
      typedef ::MMcCorsikaRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcCorsikaRunHeader

/********************************************************
* McCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMcCint();

extern "C" void G__set_cpp_environmentMcCint() {
  G__cpp_reset_tagtableMcCint();
}
#include <new>
extern "C" int G__cpp_dllrevMcCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MMcTrigHeader */
static int G__McCint_171_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcTrigHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcTrigHeader[n];
     } else {
       p = new((void*) gvp) MMcTrigHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcTrigHeader;
     } else {
       p = new((void*) gvp) MMcTrigHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetTopology((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetMultiplicity((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetThreshold((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetTrigPattern((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetShape((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetAmplitud((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetFwhm((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetOverlap((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetGate((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetElecNoise((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetGainFluctuations((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->SetNoiseGainFluctuations((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((MMcTrigHeader*) G__getstructoffset())->GetMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MMcTrigHeader*) G__getstructoffset())->GetMeanThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcTrigHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrigHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcTrigHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcTrigHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrigHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrigHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcTrigHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrigHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_171_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcTrigHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcTrigHeader G__TMMcTrigHeader;
static int G__McCint_171_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcTrigHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcTrigHeader*) (soff+(sizeof(MMcTrigHeader)*i)))->~G__TMMcTrigHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcTrigHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcTrigHeader*) (soff))->~G__TMMcTrigHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcFadcHeader */
static int G__McCint_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcFadcHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcFadcHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcFadcHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcFadcHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcFadcHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcFadcHeader[n];
       } else {
         p = new((void*) gvp) MMcFadcHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcFadcHeader;
       } else {
         p = new((void*) gvp) MMcFadcHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetShape((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetShapeOuter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetLow2High((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MMcFadcHeader*) G__getstructoffset())->SetAmplitud((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MMcFadcHeader*) G__getstructoffset())->SetAmplitud((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MMcFadcHeader*) G__getstructoffset())->SetFwhm((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MMcFadcHeader*) G__getstructoffset())->SetFwhm((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetPedestal((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetPedestalSigma((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetElecNoise((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetGainFluctuations((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->SetNoiseGainFluctuations((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetPedestal((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetPedestalRmsHigh((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetPedestalRmsLow((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetElecNoise((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetDigitalNoise((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetAmplitud());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetAmplitudOuter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcFadcHeader*) G__getstructoffset())->GetLow2HighGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcFadcHeader*) G__getstructoffset())->GetNumPixel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcFadcHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcFadcHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcFadcHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcFadcHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcFadcHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcFadcHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcFadcHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcFadcHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_175_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcFadcHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcFadcHeader G__TMMcFadcHeader;
static int G__McCint_175_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcFadcHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcFadcHeader*) (soff+(sizeof(MMcFadcHeader)*i)))->~G__TMMcFadcHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcFadcHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcFadcHeader*) (soff))->~G__TMMcFadcHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcRunHeader */
static int G__McCint_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcRunHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcRunHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcRunHeader[n];
       } else {
         p = new((void*) gvp) MMcRunHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcRunHeader;
       } else {
         p = new((void*) gvp) MMcRunHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 37:
      ((MMcRunHeader*) G__getstructoffset())->Fill(
(const Float_t) G__double(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const UInt_t) G__int(libp->para[4]), (const Byte_t) G__int(libp->para[5])
, (const Byte_t) G__int(libp->para[6]), (const Byte_t) G__int(libp->para[7])
, (const Byte_t) G__int(libp->para[8]), (const Byte_t) G__int(libp->para[9])
, (const Byte_t) G__int(libp->para[10]), (const Int_t) G__int(libp->para[11])
, (const UInt_t) G__int(libp->para[12]), (const UInt_t) G__int(libp->para[13])
, (const Byte_t) G__int(libp->para[14]), (const Int_t) G__int(libp->para[15])
, (const Int_t) G__int(libp->para[16]), (const Int_t) G__int(libp->para[17])
, (const Int_t) G__int(libp->para[18]), (const Int_t) G__int(libp->para[19])
, (const Int_t) G__int(libp->para[20]), (const Float_t) G__double(libp->para[21])
, (const Float_t) G__double(libp->para[22]), (const Float_t) G__double(libp->para[23])
, (const Float_t) G__double(libp->para[24]), (const Float_t) G__double(libp->para[25])
, (const Float_t) G__double(libp->para[26]), (const Float_t) G__double(libp->para[27])
, (const Float_t) G__double(libp->para[28]), (const Float_t) G__double(libp->para[29])
, (const UInt_t) G__int(libp->para[30]), (Float_t*) G__int(libp->para[31])
, (const UInt_t) G__int(libp->para[32]), (const UInt_t) G__int(libp->para[33])
, (const UInt_t) G__int(libp->para[34]), (const Byte_t) G__int(libp->para[35])
, (const Float_t) G__double(libp->para[36]));
      G__setnull(result7);
      break;
   case 36:
      ((MMcRunHeader*) G__getstructoffset())->Fill(
(const Float_t) G__double(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const UInt_t) G__int(libp->para[4]), (const Byte_t) G__int(libp->para[5])
, (const Byte_t) G__int(libp->para[6]), (const Byte_t) G__int(libp->para[7])
, (const Byte_t) G__int(libp->para[8]), (const Byte_t) G__int(libp->para[9])
, (const Byte_t) G__int(libp->para[10]), (const Int_t) G__int(libp->para[11])
, (const UInt_t) G__int(libp->para[12]), (const UInt_t) G__int(libp->para[13])
, (const Byte_t) G__int(libp->para[14]), (const Int_t) G__int(libp->para[15])
, (const Int_t) G__int(libp->para[16]), (const Int_t) G__int(libp->para[17])
, (const Int_t) G__int(libp->para[18]), (const Int_t) G__int(libp->para[19])
, (const Int_t) G__int(libp->para[20]), (const Float_t) G__double(libp->para[21])
, (const Float_t) G__double(libp->para[22]), (const Float_t) G__double(libp->para[23])
, (const Float_t) G__double(libp->para[24]), (const Float_t) G__double(libp->para[25])
, (const Float_t) G__double(libp->para[26]), (const Float_t) G__double(libp->para[27])
, (const Float_t) G__double(libp->para[28]), (const Float_t) G__double(libp->para[29])
, (const UInt_t) G__int(libp->para[30]), (Float_t*) G__int(libp->para[31])
, (const UInt_t) G__int(libp->para[32]), (const UInt_t) G__int(libp->para[33])
, (const UInt_t) G__int(libp->para[34]), (const Byte_t) G__int(libp->para[35]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MMcRunHeader*) G__getstructoffset())->GetStarFieldRa((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MMcRunHeader*) G__getstructoffset())->GetStarFieldDec((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetNumPheFromDNSB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MMcRunHeader*) G__getstructoffset())->GetCamVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MMcRunHeader*) G__getstructoffset())->GetReflVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcRunHeader*) G__getstructoffset())->GetNumSimulatedShowers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcRunHeader*) G__getstructoffset())->GetCorsikaVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMcRunHeader*) G__getstructoffset())->GetAllEvtsTriggered());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetShowerThetaMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetShowerThetaMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetShowerPhiMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetShowerPhiMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcRunHeader*) G__getstructoffset())->GetImpactMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMcRunHeader*) G__getstructoffset())->IsCeres());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcRunHeader*) G__getstructoffset())->SetNumSimulatedShowers((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcRunHeader*) G__getstructoffset())->SetImpactMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcRunHeader*) G__getstructoffset())->SetCorsikaVersion((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_176_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcRunHeader G__TMMcRunHeader;
static int G__McCint_176_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcRunHeader*) (soff+(sizeof(MMcRunHeader)*i)))->~G__TMMcRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcRunHeader*) (soff))->~G__TMMcRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcEvtBasic */
static int G__McCint_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcEvtBasic* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvtBasic[n];
     } else {
       p = new((void*) gvp) MMcEvtBasic[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvtBasic;
     } else {
       p = new((void*) gvp) MMcEvtBasic;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcEvtBasic* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MMcEvtBasic(
(MMcEvtBasic::ParticleId_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   } else {
     p = new((void*) gvp) MMcEvtBasic(
(MMcEvtBasic::ParticleId_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->operator=(*(MMcEvtBasic*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMcEvtBasic*) G__getstructoffset())->GetPartId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetImpact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetTelescopePhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetTelescopeTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetParticlePhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvtBasic*) G__getstructoffset())->GetParticleTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = MMcEvtBasic::GetParticleName((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = MMcEvtBasic::GetParticleSymbol((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = MMcEvtBasic::GetEnergyStr((Float_t) G__double(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcEvtBasic*) G__getstructoffset())->GetParticleSymbol();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcEvtBasic*) G__getstructoffset())->GetParticleName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcEvtBasic*) G__getstructoffset())->GetEnergyStr();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetPartId((MMcEvtBasic::ParticleId_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetImpact((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetTelescopeTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetTelescopePhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetParticleTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->SetParticlePhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->Fill((MMcEvtBasic::ParticleId_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcEvtBasic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvtBasic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcEvtBasic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcEvtBasic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvtBasic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvtBasic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcEvtBasic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvtBasic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_177_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcEvtBasic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcEvtBasic G__TMMcEvtBasic;
static int G__McCint_177_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcEvtBasic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcEvtBasic*) (soff+(sizeof(MMcEvtBasic)*i)))->~G__TMMcEvtBasic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcEvtBasic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcEvtBasic*) (soff))->~G__TMMcEvtBasic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcEvt */
static int G__McCint_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcEvt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvt[n];
     } else {
       p = new((void*) gvp) MMcEvt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvt;
     } else {
       p = new((void*) gvp) MMcEvt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcEvt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcEvt* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 34:
     //m: 34
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvt(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]), (Int_t) G__int(libp->para[33]));
     } else {
       p = new((void*) gvp) MMcEvt(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]), (Int_t) G__int(libp->para[33]));
     }
     break;
   case 33:
     //m: 33
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcEvt(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]));
     } else {
       p = new((void*) gvp) MMcEvt(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcEvt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetEvtNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetCoreX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetCoreY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPhotIni());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPassPhotAtm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPassPhotRef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPassPhotCone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPhotElfromShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcEvt*) G__getstructoffset())->GetPhotElinCamera());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetZFirstInteraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetOtherCphFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongiNmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongib());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongichi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongit0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetLongitmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetFadcTimeJitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcEvt*) G__getstructoffset())->GetMuonCphFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const TString* pobj;
         const TString xobj = ((const MMcEvt*) G__getstructoffset())->GetDescription(*(TString*) libp->para[0].ref);
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const TString* pobj;
         const TString xobj = ((const MMcEvt*) G__getstructoffset())->GetDescription();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetCoreD((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetCoreX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetCoreY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetEvtNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetEventReuse((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->SetPhotElfromShower((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 34:
      ((MMcEvt*) G__getstructoffset())->Fill(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]), (Int_t) G__int(libp->para[33]));
      G__setnull(result7);
      break;
   case 33:
      ((MMcEvt*) G__getstructoffset())->Fill(
(UInt_t) G__int(libp->para[0]), (MMcEvtBasic::ParticleId_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (UInt_t) G__int(libp->para[23])
, (UInt_t) G__int(libp->para[24]), (UInt_t) G__int(libp->para[25])
, (UInt_t) G__int(libp->para[26]), (UInt_t) G__int(libp->para[27])
, (UInt_t) G__int(libp->para[28]), (Float_t) G__double(libp->para[29])
, (Float_t) G__double(libp->para[30]), (Float_t) G__double(libp->para[31])
, (Float_t) G__double(libp->para[32]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcEvt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcEvt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcEvt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcEvt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcEvt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcEvt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_179_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcEvt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcEvt G__TMMcEvt;
static int G__McCint_179_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcEvt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcEvt*) (soff+(sizeof(MMcEvt)*i)))->~G__TMMcEvt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcEvt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcEvt*) (soff))->~G__TMMcEvt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcTrig */
static int G__McCint_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcTrig* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcTrig((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcTrig((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcTrig((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcTrig((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcTrig[n];
       } else {
         p = new((void*) gvp) MMcTrig[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcTrig;
       } else {
         p = new((void*) gvp) MMcTrig;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcTrig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrig*) G__getstructoffset())->SetFirstLevel((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrig*) G__getstructoffset())->SetSecondLevel((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrig*) G__getstructoffset())->SetTime((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrig*) G__getstructoffset())->SetMapPixels((Byte_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMcTrig*) G__getstructoffset())->GetFirstLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMcTrig*) G__getstructoffset())->GetNumFirstLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((MMcTrig*) G__getstructoffset())->IsPixelFired((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcTrig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcTrig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcTrig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcTrig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcTrig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcTrig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_180_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcTrig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcTrig G__TMMcTrig;
static int G__McCint_180_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcTrig*) (soff+(sizeof(MMcTrig)*i)))->~G__TMMcTrig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcTrig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcTrig*) (soff))->~G__TMMcTrig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcConfigRunHeader */
static int G__McCint_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcConfigRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcConfigRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcConfigRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcConfigRunHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcConfigRunHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcConfigRunHeader[n];
       } else {
         p = new((void*) gvp) MMcConfigRunHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcConfigRunHeader;
       } else {
         p = new((void*) gvp) MMcConfigRunHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetMagicDef((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetLightCollection(*(TArrayF*) libp->para[0].ref, *(TArrayF*) libp->para[1].ref
, *(TArrayF*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcConfigRunHeader*) G__getstructoffset())->GetNumMirror());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->InitSizeMirror((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetMirrorFraction((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMcConfigRunHeader*) G__getstructoffset())->GetNumPMTs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->InitSizePMTs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetPointSpread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetPointSpread((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetPointSpreadX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetPointSpreadX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetPointSpreadY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetPointSpreadY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetMissPointingX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetMissPointingX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetMissPointingY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetMissPointingY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((const MMcConfigRunHeader*) G__getstructoffset())->GetLightCollectionFactor();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((const MMcConfigRunHeader*) G__getstructoffset())->GetLightCollectionFactorOuter();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetMirrorFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((const MMcConfigRunHeader*) G__getstructoffset())->GetIncidentTheta();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->AddMirror((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->AddPMT((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeomMirror& obj = ((MMcConfigRunHeader*) G__getstructoffset())->GetMirror((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeomMirror& obj = ((const MMcConfigRunHeader*) G__getstructoffset())->GetMirror((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MMcConfigRunHeader*) G__getstructoffset())->GetMirrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeomPMT& obj = ((MMcConfigRunHeader*) G__getstructoffset())->GetPMT((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeomPMT& obj = ((const MMcConfigRunHeader*) G__getstructoffset())->GetPMT((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->SetPmtTimeJitter((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcConfigRunHeader*) G__getstructoffset())->GetPmtTimeJitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcConfigRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcConfigRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcConfigRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcConfigRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcConfigRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcConfigRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcConfigRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcConfigRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_223_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcConfigRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcConfigRunHeader G__TMMcConfigRunHeader;
static int G__McCint_223_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcConfigRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcConfigRunHeader*) (soff+(sizeof(MMcConfigRunHeader)*i)))->~G__TMMcConfigRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcConfigRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcConfigRunHeader*) (soff))->~G__TMMcConfigRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcCorsikaRunHeader */
static int G__McCint_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcCorsikaRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcCorsikaRunHeader(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MMcCorsikaRunHeader(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcCorsikaRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcCorsikaRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcCorsikaRunHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcCorsikaRunHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcCorsikaRunHeader[n];
       } else {
         p = new((void*) gvp) MMcCorsikaRunHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcCorsikaRunHeader;
       } else {
         p = new((void*) gvp) MMcCorsikaRunHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCorsikaRunHeader*) G__getstructoffset())->Fill(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (Float_t*) G__int(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]), (const Float_t) G__double(libp->para[7])
, (const Float_t) G__double(libp->para[8]), (const Float_t) G__double(libp->para[9])
, (const Float_t) G__double(libp->para[10]), (const Float_t) G__double(libp->para[11])
, (const Float_t) G__double(libp->para[12]), (const Float_t) G__double(libp->para[13])
, (Float_t*) G__int(libp->para[14]), (Float_t*) G__int(libp->para[15])
, (Float_t*) G__int(libp->para[16]), (Float_t*) G__int(libp->para[17])
, (Float_t*) G__int(libp->para[18]), (Float_t*) G__int(libp->para[19])
, (Float_t*) G__int(libp->para[20]), (Float_t*) G__int(libp->para[21])
, (Float_t*) G__int(libp->para[22]), (const Float_t) G__double(libp->para[23])
, (const Float_t) G__double(libp->para[24]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetELowLim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetEUppLim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetSlopeSpec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetWobbleMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetCorsikaVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetViewconeAngleInner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetViewconeAngleOuter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetAtmosphericModel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMcCorsikaRunHeader*) G__getstructoffset())->HasViewCone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMcCorsikaRunHeader*) G__getstructoffset())->GetNumCT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCorsikaRunHeader*) G__getstructoffset())->FillCT(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCorsikaRunHeader*) G__getstructoffset())->SetSpectrum((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCorsikaRunHeader*) G__getstructoffset())->SetViewCone((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeomCorsikaCT& obj = ((const MMcCorsikaRunHeader*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcCorsikaRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCorsikaRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcCorsikaRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcCorsikaRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCorsikaRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCorsikaRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcCorsikaRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCorsikaRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__McCint_225_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcCorsikaRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcCorsikaRunHeader G__TMMcCorsikaRunHeader;
static int G__McCint_225_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcCorsikaRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcCorsikaRunHeader*) (soff+(sizeof(MMcCorsikaRunHeader)*i)))->~G__TMMcCorsikaRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcCorsikaRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcCorsikaRunHeader*) (soff))->~G__TMMcCorsikaRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MMcTrigHeader */

/* MMcFadcHeader */

/* MMcRunHeader */

/* MMcEvtBasic */

/* MMcEvt */

/* MMcTrig */

/* MMcConfigRunHeader */

/* MMcCorsikaRunHeader */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMcCint {
 public:
  G__Sizep2memfuncMcCint(): p(&G__Sizep2memfuncMcCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMcCint::*p)();
};

size_t G__get_sizep2memfuncMcCint()
{
  G__Sizep2memfuncMcCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMcCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader))) {
     MMcTrigHeader *G__Lderived;
     G__Lderived=(MMcTrigHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader))) {
     MMcFadcHeader *G__Lderived;
     G__Lderived=(MMcFadcHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader),G__get_linked_tagnum(&G__McCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcRunHeader))) {
     MMcRunHeader *G__Lderived;
     G__Lderived=(MMcRunHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcRunHeader),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcRunHeader),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic))) {
     MMcEvtBasic *G__Lderived;
     G__Lderived=(MMcEvtBasic*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcEvt))) {
     MMcEvt *G__Lderived;
     G__Lderived=(MMcEvt*)0x1000;
     {
       MMcEvtBasic *G__Lpbase=(MMcEvtBasic*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvt),G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvt),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvt),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcTrig))) {
     MMcTrig *G__Lderived;
     G__Lderived=(MMcTrig*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrig),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrig),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader))) {
     MMcConfigRunHeader *G__Lderived;
     G__Lderived=(MMcConfigRunHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader))) {
     MMcCorsikaRunHeader *G__Lderived;
     G__Lderived=(MMcCorsikaRunHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader),G__get_linked_tagnum(&G__McCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader),G__get_linked_tagnum(&G__McCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMcCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__McCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__McCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__McCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__McCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__McCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__McCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MMcTrigHeader */
static void G__setup_memvarMMcTrigHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader));
   { MMcTrigHeader *p; p=(MMcTrigHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fTopology=",0,"Topology of the trigger");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fMultiplicity=",0,"Pixel multiplicity of trigger configuration");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThreshold[3800]=",0,"Threshold for trigger");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTrigPattern[2]=",0,"Used to inddentify with ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTrigShape=",0,"a number that indicate the shape type of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplTrig=",0,"the amplitude of the trigger in mV");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFwhmTrig=",0,"the width of the signal in nsec");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOverlapingTime=",0,"Minimum coincidence time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGateLeng=",0,"the length of the digital signal if analog ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElecNoiseTrig=",0,"The width of the gaussian noise is that times");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGainFluctuations=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoiseGainFluctuations=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcFadcHeader */
static void G__setup_memvarMMcFadcHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader));
   { MMcFadcHeader *p; p=(MMcFadcHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFadcShape=",0,"a number that indicate the shape type of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFadcShapeOuter=",0,"a number that indicate the shape type of ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplFadc=",0,"the integral of single phe response [counts]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFwhmFadc=",0,"the width of the signal in nsec");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplFadcOuter=",0,"the integral of single phe response [counts], ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFwhmFadcOuter=",0,"the width of the signal in nsec, outer");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedesMean[3800]=",0,"The mean value for the pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedesSigmaHigh[3800]=",0,"The sigma for the pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedesSigmaLow[3800]=",0,"The sigma for the pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElecNoise[3800]=",0,"The rms value in the pedestal ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDigitalNoise[3800]=",0,"The rms value in the pedestal ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLow2HighGain=",0,"low gain factor ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__McCintLN_TString),-1,-1,4,"fElecNoiseFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGainFluctuations=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoiseGainFluctuations=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcRunHeader */
static void G__setup_memvarMMcRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcRunHeader));
   { MMcRunHeader *p; p=(MMcRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumTrigCond=",0,"Number of trigger conditions in this file,");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fAllEvtsTriggered=",0,"boolean that indicates is all images are ");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMcEvt=",0,"McEvt stored or not");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMcTrig=",0,"McTrig stored or not");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMcFadc=",0,"McFadc stored or not");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumAnalisedPixels=",0,"Number of analised pixels");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumSimulatedShowers=",0,"Number of showers that were simualted");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumStoredShowers=",0,"Number of store showers in this run");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"Number of events in this root file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldRaH=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldRaM=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldRaS=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldDeD=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldDeM=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fStarFieldDeS=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPheFromDNSB=",0,"Number of phe/ns from diffuse NSB");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fShowerThetaMax=",0,"[deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fShowerThetaMin=",0,"[deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fShowerPhiMax=",0,"[deg] See note in class description.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fShowerPhiMin=",0,"[deg] See note in class description.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fImpactMax=",0,"[cm] ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCorsikaVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fReflVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCamVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMcRunNumber=",0,"Run Number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fProductionSite=",0,"code to know where the run was generated");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDateRunMMCs=",0,"Date of the MMCs production");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDateRunCamera=",0,"Date, when the Camera program is run.");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fRawEvt=",0,"RawEvt[Data,Hedaer] stored or not");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fElecNoise=",0,"Electronic Noise simulated or not");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStarFieldRotate=",0,"Is the starfield rotation ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCWaveLower=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCWaveUpper=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumObsLev=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHeightLev[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeSpec=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fOpticLinksNoise=",0,"Noise from Optic Links simualted or not.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRandomPointingConeSemiAngle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcEvtBasic */
static void G__setup_memvarMMcEvtBasic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic));
   { MMcEvtBasic *p; p=(MMcEvtBasic*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kUNDEFINED=%lldLL",(long long)MMcEvtBasic::kUNDEFINED).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kGAMMA=%lldLL",(long long)MMcEvtBasic::kGAMMA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kPOSITRON=%lldLL",(long long)MMcEvtBasic::kPOSITRON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kELECTRON=%lldLL",(long long)MMcEvtBasic::kELECTRON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kANTIMUON=%lldLL",(long long)MMcEvtBasic::kANTIMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kMUON=%lldLL",(long long)MMcEvtBasic::kMUON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kPI0=%lldLL",(long long)MMcEvtBasic::kPI0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kNEUTRON=%lldLL",(long long)MMcEvtBasic::kNEUTRON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kPROTON=%lldLL",(long long)MMcEvtBasic::kPROTON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kHELIUM=%lldLL",(long long)MMcEvtBasic::kHELIUM).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kOXYGEN=%lldLL",(long long)MMcEvtBasic::kOXYGEN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kIRON=%lldLL",(long long)MMcEvtBasic::kIRON).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kArtificial=%lldLL",(long long)MMcEvtBasic::kArtificial).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-2,1,G__FastAllocString(2048).Format("kNightSky=%lldLL",(long long)MMcEvtBasic::kNightSky).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t),-1,-1,2,"fPartId=",0,"Type of particle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEnergy=",0,"[GeV] Energy");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fImpact=",0,"[cm] impact parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTelescopePhi=",0,"[rad]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTelescopeTheta=",0,"[rad]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTheta=",0,"[rad] Theta angle of event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"[rad] Phi angle of event (see class description)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcEvt */
static void G__setup_memvarMMcEvt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvt));
   { MMcEvt *p; p=(MMcEvt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEvtNumber=",0,"[fits: name=EventNum ; unit=uint32]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThick0=",0,"[g/cm2]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFirstTarget=",0,"[]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZFirstInteraction=",0,"[cm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreD=",0,"[cm] Core d pos");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreX=",0,"[cm] Core x pos");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreY=",0,"[cm] Core y pos");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeFirst=",0,"[ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLast=",0,"[ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongiNmax=",0,"[particles]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongit0=",0,"[g/cm2]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongitmax=",0,"[g/cm2]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongia=",0,"[g/cm2]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongib=",0,"[]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongic=",0,"[cm2/g]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLongichi2=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPhotIni=",0,"[ph] Initial number of photons");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPassPhotAtm=",0,"[ph] Passed atmosphere");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPassPhotRef=",0,"[ph] Passed reflector(reflectivity + effective area)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPassPhotCone=",0,"[ph]  Within any valid pixel, before plexiglas");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPhotElfromShower=",0,"[phe] Passed qe, coming from the shower");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPhotElinCamera=",0,"[phe] usPhotElfromShower + mean of phe from NSB");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElecCphFraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMuonCphFraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOtherCphFraction=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFadcTimeJitter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventReuse=",0,"Number running from 0 to N-1, being N the number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcTrig */
static void G__setup_memvarMMcTrig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrig));
   { MMcTrig *p; p=(MMcTrig*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumFirstLevel=",0,"Number of First Level Trigger in this Event");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSecondLevel=",0,"Number of Second Level Trigger in this Event");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeFirst[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fPixelsFirst[476][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fFirstToSecond[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcConfigRunHeader */
static void G__setup_memvarMMcConfigRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader));
   { MMcConfigRunHeader *p; p=(MMcConfigRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumMirrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRadiusMirror=",0,"[cm] Radius of a single mirror");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClonesArray),-1,-1,4,"fMirrors=",0,"FIXME: Change TClonesArray away from a pointer?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMirrorFraction=",0,"(adimensional, between 0 and 1) Fraction of mirror dish");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFocalDist=",0,"[cm] Focal distance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fParaboloidFocal=",0,"[cm] True focal of the paraboloid on which the mirror centers are placed");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPointSpread=",0,"[cm] Point spread function, sigma in x and y on the camera as simualted in the Reflector");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPointSpreadX=",0,"[cm] Point spread function, sigma in x on the camera adding gaussian in the Camera");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPointSpreadY=",0,"[cm] Point spread function, sigma in y on the camera adding gaussian in the Camera");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBlackSpot=",0,"[cm] Radius of black spot in the mirror center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCameraWidth=",0,"[cm] Radius on the camera plain ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMissPointingX=",0,"[deg] Misspointing in deg added in he Camera ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMissPointingY=",0,"[deg] simulation at rho (rotation FoV) = 0. ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPmtTimeJitter=",0,"[ns] PMT time jitter (sigma of gaussian), per phe-");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPMTs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClonesArray),-1,-1,4,"fPMTs=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__McCintLN_TArrayF),-1,-1,4,"fIncidentTheta=",0,"[deg] Angle (0-180 deg) between light ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__McCintLN_TArrayF),-1,-1,4,"fLightCollectionFactor=",0,"Inner pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__McCintLN_TArrayF),-1,-1,4,"fLightCollectionFactorOuter=",0,"Outer pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcCorsikaRunHeader */
static void G__setup_memvarMMcCorsikaRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader));
   { MMcCorsikaRunHeader *p; p=(MMcCorsikaRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRunNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCorsikaVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumObsLev=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHeightLev[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeSpec=",0,"Slope of primaries' energy spectrum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fELowLim=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEUppLim=",0,"Limits of energy range for generation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEGS4flag=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNKGflag=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEcutoffh=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEcutoffm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEcutoffe=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEcutoffg=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fC[50]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCKA[40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCETA[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCSTRBA[11]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAATM[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBATM[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCATM[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNFL[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fViewconeAngles[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWobbleMode=",0,"Indicates wobble mode with which");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAtmosphericModel=",0,"Indicates atmospheric model used in");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumCT=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__McCintLN_TObjArray),-1,-1,4,"fTelescopes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__McCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMcCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMMcTrigHeader(void) {
   /* MMcTrigHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader));
   G__memfunc_setup("MMcTrigHeader",1244,G__McCint_171_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcTrigHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTopology",1161,G__McCint_171_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nTop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMultiplicity",1589,G__McCint_171_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nMul", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThreshold",1241,G__McCint_171_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - fthr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTrigPattern",1440,G__McCint_171_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - upi h - 'UInt_t' 0 - loi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShape",797,G__McCint_171_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAmplitud",1132,G__McCint_171_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - amp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFwhm",702,G__McCint_171_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fwhm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOverlap",1029,G__McCint_171_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - overlap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGate",685,G__McCint_171_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - gate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetElecNoise",1187,G__McCint_171_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - elecnoise", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainFluctuations",1964,G__McCint_171_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoiseGainFluctuations",2474,G__McCint_171_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMultiplicity",1577,G__McCint_171_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanThreshold",1614,G__McCint_171_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__McCint_171_0_17, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcTrigHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_171_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrigHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_171_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcTrigHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_171_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcTrigHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_171_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_171_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrigHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_171_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcTrigHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_171_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrigHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_171_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcTrigHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcTrigHeader", 1370, G__McCint_171_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcFadcHeader(void) {
   /* MMcFadcHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader));
   G__memfunc_setup("MMcFadcHeader",1204,G__McCint_175_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcFadcHeader), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetShape",797,G__McCint_175_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShapeOuter",1324,G__McCint_175_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLow2High",1040,G__McCint_175_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - l2h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAmplitud",1132,G__McCint_175_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - amp f - 'Float_t' 0 '0.0' ampout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFwhm",702,G__McCint_175_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fwhm f - 'Float_t' 0 '0.0' fwhmout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__McCint_175_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - mean i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestalSigma",1615,G__McCint_175_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - sigmalo F - 'Float_t' 0 - sigmahi "
"i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetElecNoise",1187,G__McCint_175_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - sigmae F - 'Float_t' 0 - sigmad "
"i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainFluctuations",1964,G__McCint_175_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoiseGainFluctuations",2474,G__McCint_175_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__McCint_175_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestalRmsHigh",1796,G__McCint_175_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestalRmsLow",1718,G__McCint_175_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElecNoise",1175,G__McCint_175_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDigitalNoise",1500,G__McCint_175_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitud",1120,G__McCint_175_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAmplitudOuter",1647,G__McCint_175_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLow2HighGain",1411,G__McCint_175_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixel",1106,G__McCint_175_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__McCint_175_0_24, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcFadcHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_175_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcFadcHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_175_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcFadcHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_175_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcFadcHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_175_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_175_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcFadcHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_175_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcFadcHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_175_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcFadcHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_175_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcFadcHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcFadcHeader", 1330, G__McCint_175_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcRunHeader(void) {
   /* MMcRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcRunHeader));
   G__memfunc_setup("MMcRunHeader",1147,G__McCint_176_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcRunHeader), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__McCint_176_0_2, 121, -1, -1, 0, 37, 1, 1, 0, 
"f - 'Float_t' 10 - runnumber h - 'UInt_t' 10 - productionsite "
"f - 'Float_t' 10 - daterunMMCs f - 'Float_t' 10 - daterunCamera "
"h - 'UInt_t' 10 - numtrigcond b - 'Byte_t' 10 - allevts "
"b - 'Byte_t' 10 - mcevt b - 'Byte_t' 10 - mctrig "
"b - 'Byte_t' 10 - mcfadc b - 'Byte_t' 10 - rawevt "
"b - 'Byte_t' 10 - elecnoise i - 'Int_t' 10 - numanalpixels "
"h - 'UInt_t' 10 - numsim h - 'UInt_t' 10 - numsto "
"b - 'Byte_t' 10 - starfieldrotate i - 'Int_t' 10 - sfRaH "
"i - 'Int_t' 10 - sfRaM i - 'Int_t' 10 - sfRaS "
"i - 'Int_t' 10 - sfDeD i - 'Int_t' 10 - sfDeM "
"i - 'Int_t' 10 - sfDeS f - 'Float_t' 10 - numdnsb "
"f - 'Float_t' 10 - shthetamax f - 'Float_t' 10 - shthetamin "
"f - 'Float_t' 10 - shphimax f - 'Float_t' 10 - shphimin "
"f - 'Float_t' 10 - impactmax f - 'Float_t' 10 - cwavelower "
"f - 'Float_t' 10 - cwaveupper f - 'Float_t' 10 - slopespec "
"h - 'UInt_t' 10 - num0bslev F - 'Float_t' 10 - heightlev "
"h - 'UInt_t' 10 - corsika h - 'UInt_t' 10 - refl "
"h - 'UInt_t' 10 - cam b - 'Byte_t' 10 - opticnoise "
"f - 'Float_t' 10 '0' conesmiangle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStarFieldRa",1361,G__McCint_176_0_3, 121, -1, -1, 0, 3, 1, 1, 8, 
"I - 'Int_t' 0 - hour I - 'Int_t' 0 - minute "
"I - 'Int_t' 0 - second", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStarFieldDec",1450,G__McCint_176_0_4, 121, -1, -1, 0, 3, 1, 1, 8, 
"I - 'Int_t' 0 - degree I - 'Int_t' 0 - minute "
"I - 'Int_t' 0 - second", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPheFromDNSB",1576,G__McCint_176_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCamVersion",1303,G__McCint_176_0_6, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReflVersion",1423,G__McCint_176_0_7, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSimulatedShowers",2275,G__McCint_176_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorsikaVersion",1746,G__McCint_176_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAllEvtsTriggered",1912,G__McCint_176_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShowerThetaMin",1714,G__McCint_176_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShowerThetaMax",1716,G__McCint_176_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShowerPhiMin",1501,G__McCint_176_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShowerPhiMax",1503,G__McCint_176_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpactMax",1188,G__McCint_176_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCeres",686,G__McCint_176_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSimulatedShowers",2287,G__McCint_176_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetImpactMax",1200,G__McCint_176_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - im", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCorsikaVersion",1758,G__McCint_176_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__McCint_176_0_20, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_176_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_176_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_176_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_176_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_176_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_176_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_176_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_176_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcRunHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcRunHeader", 1273, G__McCint_176_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcEvtBasic(void) {
   /* MMcEvtBasic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic));
   G__memfunc_setup("MMcEvtBasic",1038,G__McCint_177_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMcEvtBasic",1038,G__McCint_177_0_2, 105, G__get_linked_tagnum(&G__McCintLN_MMcEvtBasic), -1, 0, 5, 1, 1, 0, 
"i 'MMcEvtBasic::ParticleId_t' - 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__McCint_177_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MMcEvtBasic' - 11 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartId",868,G__McCint_177_0_4, 105, G__get_linked_tagnum(&G__McCintLN_MMcEvtBasiccLcLParticleId_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__McCint_177_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetImpact",894,G__McCint_177_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopePhi",1509,G__McCint_177_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopeTheta",1722,G__McCint_177_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticlePhi",1397,G__McCint_177_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleTheta",1610,G__McCint_177_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleName",1493,G__McCint_177_0_11, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) G__func2void( (TString (*)(Int_t))(&MMcEvtBasic::GetParticleName) ), 0);
   G__memfunc_setup("GetParticleSymbol",1738,G__McCint_177_0_12, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) G__func2void( (TString (*)(Int_t))(&MMcEvtBasic::GetParticleSymbol) ), 0);
   G__memfunc_setup("GetEnergyStr",1219,G__McCint_177_0_13, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) G__func2void( (TString (*)(Float_t))(&MMcEvtBasic::GetEnergyStr) ), 0);
   G__memfunc_setup("GetParticleSymbol",1738,G__McCint_177_0_14, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleName",1493,G__McCint_177_0_15, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyStr",1219,G__McCint_177_0_16, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPartId",880,G__McCint_177_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MMcEvtBasic::ParticleId_t' - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy",918,G__McCint_177_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Energy", "Set Energy", (void*) NULL, 0);
   G__memfunc_setup("SetImpact",906,G__McCint_177_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Impact", "Set impact parameter", (void*) NULL, 0);
   G__memfunc_setup("SetTelescopeTheta",1734,G__McCint_177_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTelescopePhi",1521,G__McCint_177_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParticleTheta",1622,G__McCint_177_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParticlePhi",1409,G__McCint_177_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__McCint_177_0_24, 121, -1, -1, 0, 5, 1, 1, 0, 
"i 'MMcEvtBasic::ParticleId_t' - 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFits",935,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'fits' - 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__McCint_177_0_28, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcEvtBasic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_177_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvtBasic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_177_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcEvtBasic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_177_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcEvtBasic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_177_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_177_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvtBasic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_177_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcEvtBasic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_177_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvtBasic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_177_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcEvtBasic::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcEvtBasic", 1164, G__McCint_177_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcEvt(void) {
   /* MMcEvt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcEvt));
   G__memfunc_setup("MMcEvt",556,G__McCint_179_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcEvt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMcEvt",556,G__McCint_179_0_2, 105, G__get_linked_tagnum(&G__McCintLN_MMcEvt), -1, 0, 34, 1, 1, 0, 
"h - 'UInt_t' 0 - - i 'MMcEvtBasic::ParticleId_t' - 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 '0' ireuse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtNumber",1208,G__McCint_179_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Event Number", (void*) NULL, 0);
   G__memfunc_setup("GetCoreX",769,G__McCint_179_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Get Core x pos", (void*) NULL, 0);
   G__memfunc_setup("GetCoreY",770,G__McCint_179_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Get Core y pos", (void*) NULL, 0);
   G__memfunc_setup("GetPhotIni",987,G__McCint_179_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Initial photons", (void*) NULL, 0);
   G__memfunc_setup("GetPassPhotAtm",1396,G__McCint_179_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Passed atmosphere", (void*) NULL, 0);
   G__memfunc_setup("GetPassPhotRef",1391,G__McCint_179_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Passed reflector", (void*) NULL, 0);
   G__memfunc_setup("GetPassPhotCone",1495,G__McCint_179_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Passed glas", (void*) NULL, 0);
   G__memfunc_setup("GetPhotElfromShower",1944,G__McCint_179_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Passed qe from shower", (void*) NULL, 0);
   G__memfunc_setup("GetPhotElinCamera",1676,G__McCint_179_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Get Passed qe total", (void*) NULL, 0);
   G__memfunc_setup("GetZFirstInteraction",2050,G__McCint_179_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOtherCphFraction",1907,G__McCint_179_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongiNmax",1197,G__McCint_179_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongia",890,G__McCint_179_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongib",891,G__McCint_179_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongic",892,G__McCint_179_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongichi2",1151,G__McCint_179_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongit0",957,G__McCint_179_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLongitmax",1235,G__McCint_179_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFadcTimeJitter",1679,G__McCint_179_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonCphFraction",1808,G__McCint_179_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDescription",1444,G__McCint_179_0_23, 117, G__get_linked_tagnum(&G__McCintLN_TString), -1, 0, 1, 1, 1, 8, "u 'TString' - 11 '\"\"' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCoreD",761,G__McCint_179_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - CoreD", "Set Core d pos", (void*) NULL, 0);
   G__memfunc_setup("SetCoreX",781,G__McCint_179_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - CoreX", "Set Core x pos", (void*) NULL, 0);
   G__memfunc_setup("SetCoreY",782,G__McCint_179_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - CoreY", "Set Core y pos", (void*) NULL, 0);
   G__memfunc_setup("SetEvtNumber",1220,G__McCint_179_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventReuse",1330,G__McCint_179_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhotElfromShower",1956,G__McCint_179_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__McCint_179_0_30, 121, -1, -1, 0, 34, 1, 1, 0, 
"h - 'UInt_t' 0 - - i 'MMcEvtBasic::ParticleId_t' - 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - - "
"h - 'UInt_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - i - 'Int_t' 0 '0' ireuse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFits",935,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'fits' - 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__McCint_179_0_34, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcEvt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_179_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_179_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcEvt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_179_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcEvt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_179_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_179_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_179_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcEvt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_179_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcEvt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_179_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcEvt::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcEvt", 682, G__McCint_179_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcTrig(void) {
   /* MMcTrig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcTrig));
   G__memfunc_setup("MMcTrig",659,G__McCint_180_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcTrig), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFirstLevel",1324,G__McCint_180_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nTr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSecondLevel",1408,G__McCint_180_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nTr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__McCint_180_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - t i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMapPixels",1215,G__McCint_180_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"B - 'Byte_t' 0 - map i - 'Int_t' 0 - nfirst", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstLevel",1312,G__McCint_180_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFirstLevel",1616,G__McCint_180_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPixelFired",1192,G__McCint_180_0_10, 98, -1, G__defined_typename("Byte_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - npix i - 'Int_t' 0 - nfirstlevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__McCint_180_0_11, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcTrig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_180_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_180_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcTrig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_180_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcTrig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_180_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_180_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_180_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcTrig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_180_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcTrig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_180_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcTrig::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcTrig", 785, G__McCint_180_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcConfigRunHeader(void) {
   /* MMcConfigRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader));
   G__memfunc_setup("MMcConfigRunHeader",1745,G__McCint_223_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcConfigRunHeader), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMagicDef",1052,G__McCint_223_0_2, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - radius f - 'Float_t' 0 - focal "
"f - 'Float_t' 0 - point f - 'Float_t' 0 - spot "
"f - 'Float_t' 0 - camwidth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLightCollection",1840,G__McCint_223_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TArrayF' - 11 - theta u 'TArrayF' - 11 - factor "
"u 'TArrayF' - 11 - factor_outer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumMirror",1227,G__McCint_223_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSizeMirror",1450,G__McCint_223_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMirrorFraction",1757,G__McCint_223_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPMTs",948,G__McCint_223_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSizePMTs",1171,G__McCint_223_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointSpread",1417,G__McCint_223_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointSpread",1429,G__McCint_223_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointSpreadX",1505,G__McCint_223_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointSpreadX",1517,G__McCint_223_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointSpreadY",1506,G__McCint_223_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointSpreadY",1518,G__McCint_223_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMissPointingX",1628,G__McCint_223_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMissPointingX",1640,G__McCint_223_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMissPointingY",1629,G__McCint_223_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMissPointingY",1641,G__McCint_223_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCollectionFactor",2435,G__McCint_223_0_19, 117, G__get_linked_tagnum(&G__McCintLN_TArrayF), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightCollectionFactorOuter",2962,G__McCint_223_0_20, 117, G__get_linked_tagnum(&G__McCintLN_TArrayF), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirrorFraction",1745,G__McCint_223_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIncidentTheta",1604,G__McCint_223_0_22, 117, G__get_linked_tagnum(&G__McCintLN_TArrayF), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMirror",900,G__McCint_223_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPMT",506,G__McCint_223_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirror",923,G__McCint_223_0_25, 117, G__get_linked_tagnum(&G__McCintLN_MGeomMirror), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirror",923,G__McCint_223_0_26, 117, G__get_linked_tagnum(&G__McCintLN_MGeomMirror), -1, 1, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirrors",1038,G__McCint_223_0_27, 85, G__get_linked_tagnum(&G__McCintLN_TClonesArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMT",529,G__McCint_223_0_28, 117, G__get_linked_tagnum(&G__McCintLN_MGeomPMT), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMT",529,G__McCint_223_0_29, 117, G__get_linked_tagnum(&G__McCintLN_MGeomPMT), -1, 1, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPmtTimeJitter",1630,G__McCint_223_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPmtTimeJitter",1618,G__McCint_223_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__McCint_223_0_32, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcConfigRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_223_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcConfigRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_223_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcConfigRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_223_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcConfigRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_223_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_223_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcConfigRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_223_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcConfigRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_223_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcConfigRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_223_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcConfigRunHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcConfigRunHeader", 1871, G__McCint_223_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcCorsikaRunHeader(void) {
   /* MMcCorsikaRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader));
   G__memfunc_setup("MMcCorsikaRunHeader",1863,G__McCint_225_0_1, 105, G__get_linked_tagnum(&G__McCintLN_MMcCorsikaRunHeader), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title "
"i - - 0 '1' NumCT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__McCint_225_0_2, 121, -1, -1, 0, 25, 1, 1, 0, 
"f - 'Float_t' 10 - runnumber f - 'Float_t' 10 - date "
"f - 'Float_t' 10 - vers f - 'Float_t' 10 - fNumObsLev "
"F - 'Float_t' 10 - height f - 'Float_t' 10 - slope "
"f - 'Float_t' 10 - elow f - 'Float_t' 10 - eupp "
"f - 'Float_t' 10 - egs4 f - 'Float_t' 10 - nkg "
"f - 'Float_t' 10 - eh f - 'Float_t' 10 - em "
"f - 'Float_t' 10 - ee f - 'Float_t' 10 - eg "
"F - 'Float_t' 10 - c F - 'Float_t' 10 - cka "
"F - 'Float_t' 10 - ceta F - 'Float_t' 10 - cstrba "
"F - 'Float_t' 10 - aatm F - 'Float_t' 10 - batm "
"F - 'Float_t' 10 - catm F - 'Float_t' 10 - nfl "
"F - 'Float_t' 10 - viewcone f - 'Float_t' 10 - wobble "
"f - 'Float_t' 10 - atmospher", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetELowLim",953,G__McCint_225_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEUppLim",956,G__McCint_225_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeSpec",1198,G__McCint_225_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWobbleMode",1280,G__McCint_225_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorsikaVersion",1746,G__McCint_225_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewconeAngleInner",2115,G__McCint_225_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetViewconeAngleOuter",2134,G__McCint_225_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAtmosphericModel",1936,G__McCint_225_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasViewCone",1084,G__McCint_225_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumCT",743,G__McCint_225_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillCT",542,G__McCint_225_0_13, 121, -1, -1, 0, 8, 1, 1, 0, 
"f - 'Float_t' 0 - ctx f - 'Float_t' 0 - cty "
"f - 'Float_t' 0 - ctz f - 'Float_t' 0 - cttheta "
"f - 'Float_t' 0 - ctphi f - 'Float_t' 0 - ctdiam "
"f - 'Float_t' 0 - ctfocal i - 'Int_t' 0 - CTnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpectrum",1151,G__McCint_225_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - slope f - 'Float_t' 0 - emin "
"f - 'Float_t' 0 - emax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetViewCone",1100,G__McCint_225_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - inner f - 'Float_t' 0 - outer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__McCint_225_0_16, 117, G__get_linked_tagnum(&G__McCintLN_MGeomCorsikaCT), -1, 1, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__McCint_225_0_18, 85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcCorsikaRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__McCint_225_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCorsikaRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__McCint_225_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcCorsikaRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__McCint_225_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcCorsikaRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__McCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__McCint_225_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__McCint_225_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCorsikaRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__McCint_225_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcCorsikaRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__McCint_225_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCorsikaRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__McCint_225_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcCorsikaRunHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcCorsikaRunHeader", 1989, G__McCint_225_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMcCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMcCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMcCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__McCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__McCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__McCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__McCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__McCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__McCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__McCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__McCintLN_fits = { "fits" , 99 , -1 };
G__linked_taginfo G__McCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcTrigHeader = { "MMcTrigHeader" , 99 , -1 };
G__linked_taginfo G__McCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__McCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcFadcHeader = { "MMcFadcHeader" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcRunHeader = { "MMcRunHeader" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcEvtBasic = { "MMcEvtBasic" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcEvtBasiccLcLParticleId_t = { "MMcEvtBasic::ParticleId_t" , 101 , -1 };
G__linked_taginfo G__McCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcTrig = { "MMcTrig" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__McCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__McCintLN_MGeomMirror = { "MGeomMirror" , 99 , -1 };
G__linked_taginfo G__McCintLN_MGeomPMT = { "MGeomPMT" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcConfigRunHeader = { "MMcConfigRunHeader" , 99 , -1 };
G__linked_taginfo G__McCintLN_MGeomCorsikaCT = { "MGeomCorsikaCT" , 99 , -1 };
G__linked_taginfo G__McCintLN_MMcCorsikaRunHeader = { "MMcCorsikaRunHeader" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMcCint() {
  G__McCintLN_TClass.tagnum = -1 ;
  G__McCintLN_TBuffer.tagnum = -1 ;
  G__McCintLN_TMemberInspector.tagnum = -1 ;
  G__McCintLN_TObject.tagnum = -1 ;
  G__McCintLN_TString.tagnum = -1 ;
  G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__McCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__McCintLN_TObjArray.tagnum = -1 ;
  G__McCintLN_TClonesArray.tagnum = -1 ;
  G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__McCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__McCintLN_fits.tagnum = -1 ;
  G__McCintLN_MParContainer.tagnum = -1 ;
  G__McCintLN_MMcTrigHeader.tagnum = -1 ;
  G__McCintLN_MGeomCam.tagnum = -1 ;
  G__McCintLN_MCamEvent.tagnum = -1 ;
  G__McCintLN_MMcFadcHeader.tagnum = -1 ;
  G__McCintLN_MMcRunHeader.tagnum = -1 ;
  G__McCintLN_MMcEvtBasic.tagnum = -1 ;
  G__McCintLN_MMcEvtBasiccLcLParticleId_t.tagnum = -1 ;
  G__McCintLN_MMcEvt.tagnum = -1 ;
  G__McCintLN_MMcTrig.tagnum = -1 ;
  G__McCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__McCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__McCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__McCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__McCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__McCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__McCintLN_TArrayF.tagnum = -1 ;
  G__McCintLN_MGeomMirror.tagnum = -1 ;
  G__McCintLN_MGeomPMT.tagnum = -1 ;
  G__McCintLN_MMcConfigRunHeader.tagnum = -1 ;
  G__McCintLN_MGeomCorsikaCT.tagnum = -1 ;
  G__McCintLN_MMcCorsikaRunHeader.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMcCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__McCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__McCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__McCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__McCintLN_TString);
   G__get_linked_tagnum_fwd(&G__McCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__McCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__McCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_fits);
   G__get_linked_tagnum_fwd(&G__McCintLN_MParContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcTrigHeader),sizeof(MMcTrigHeader),-1,323840,"Stores Montecarlo Information which describes the used trigger",G__setup_memvarMMcTrigHeader,G__setup_memfuncMMcTrigHeader);
   G__get_linked_tagnum_fwd(&G__McCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__McCintLN_MCamEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcFadcHeader),sizeof(MMcFadcHeader),-1,323840,"Stores Montecarlo Information describing the FADC behaviour",G__setup_memvarMMcFadcHeader,G__setup_memfuncMMcFadcHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcRunHeader),sizeof(MMcRunHeader),-1,323840,"storage container for general run info",G__setup_memvarMMcRunHeader,G__setup_memfuncMMcRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcEvtBasic),sizeof(MMcEvtBasic),-1,325888,"Stores Basic Montecarlo Information of one event",G__setup_memvarMMcEvtBasic,G__setup_memfuncMMcEvtBasic);
   G__get_linked_tagnum_fwd(&G__McCintLN_MMcEvtBasiccLcLParticleId_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcEvt),sizeof(MMcEvt),-1,323840,"Stores Montecarlo Information of one event (eg. the energy)",G__setup_memvarMMcEvt,G__setup_memfuncMMcEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcTrig),sizeof(MMcTrig),-1,324864,"Stores Montecarlo Information (number of 1st, 2nd level triggers)",G__setup_memvarMMcTrig,G__setup_memfuncMMcTrig);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__McCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__McCintLN_MGeomMirror);
   G__get_linked_tagnum_fwd(&G__McCintLN_MGeomPMT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcConfigRunHeader),sizeof(MMcConfigRunHeader),-1,324864,"class for monte carlo configuration information",G__setup_memvarMMcConfigRunHeader,G__setup_memfuncMMcConfigRunHeader);
   G__get_linked_tagnum_fwd(&G__McCintLN_MGeomCorsikaCT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__McCintLN_MMcCorsikaRunHeader),sizeof(MMcCorsikaRunHeader),-1,323840,"storage container for corsika setup information",G__setup_memvarMMcCorsikaRunHeader,G__setup_memfuncMMcCorsikaRunHeader);
}
extern "C" void G__cpp_setupMcCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMcCint()");
  G__set_cpp_environmentMcCint();
  G__cpp_setup_tagtableMcCint();

  G__cpp_setup_inheritanceMcCint();

  G__cpp_setup_typetableMcCint();

  G__cpp_setup_memvarMcCint();

  G__cpp_setup_memfuncMcCint();
  G__cpp_setup_globalMcCint();
  G__cpp_setup_funcMcCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMcCint();
  return;
}
class G__cpp_setup_initMcCint {
  public:
    G__cpp_setup_initMcCint() { G__add_setup_func("McCint",(G__incsetup)(&G__cpp_setupMcCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMcCint() { G__remove_setup_func("McCint"); }
};
G__cpp_setup_initMcCint G__cpp_setup_initializerMcCint;

