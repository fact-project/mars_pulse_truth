//
// File generated by rootcint at Mon Nov 28 11:07:20 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME PointingCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "PointingCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void AltAz_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AltAz(void *p = 0);
   static void *newArray_AltAz(Long_t size, void *p);
   static void delete_AltAz(void *p);
   static void deleteArray_AltAz(void *p);
   static void destruct_AltAz(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::AltAz*)
   {
      ::AltAz *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AltAz >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AltAz", ::AltAz::Class_Version(), "./MPointing.h", 36,
                  typeid(::AltAz), ::ROOT::DefineBehavior(ptr, ptr),
                  &::AltAz::Dictionary, isa_proxy, 4,
                  sizeof(::AltAz) );
      instance.SetNew(&new_AltAz);
      instance.SetNewArray(&newArray_AltAz);
      instance.SetDelete(&delete_AltAz);
      instance.SetDeleteArray(&deleteArray_AltAz);
      instance.SetDestructor(&destruct_AltAz);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::AltAz*)
   {
      return GenerateInitInstanceLocal((::AltAz*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AltAz*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void ZdAz_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ZdAz(void *p = 0);
   static void *newArray_ZdAz(Long_t size, void *p);
   static void delete_ZdAz(void *p);
   static void deleteArray_ZdAz(void *p);
   static void destruct_ZdAz(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::ZdAz*)
   {
      ::ZdAz *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ZdAz >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ZdAz", ::ZdAz::Class_Version(), "./MPointing.h", 65,
                  typeid(::ZdAz), ::ROOT::DefineBehavior(ptr, ptr),
                  &::ZdAz::Dictionary, isa_proxy, 4,
                  sizeof(::ZdAz) );
      instance.SetNew(&new_ZdAz);
      instance.SetNewArray(&newArray_ZdAz);
      instance.SetDelete(&delete_ZdAz);
      instance.SetDeleteArray(&deleteArray_ZdAz);
      instance.SetDestructor(&destruct_ZdAz);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::ZdAz*)
   {
      return GenerateInitInstanceLocal((::ZdAz*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ZdAz*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void RaDec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RaDec(void *p = 0);
   static void *newArray_RaDec(Long_t size, void *p);
   static void delete_RaDec(void *p);
   static void deleteArray_RaDec(void *p);
   static void destruct_RaDec(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RaDec*)
   {
      ::RaDec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RaDec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RaDec", ::RaDec::Class_Version(), "./MPointing.h", 100,
                  typeid(::RaDec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::RaDec::Dictionary, isa_proxy, 4,
                  sizeof(::RaDec) );
      instance.SetNew(&new_RaDec);
      instance.SetNewArray(&newArray_RaDec);
      instance.SetDelete(&delete_RaDec);
      instance.SetDeleteArray(&deleteArray_RaDec);
      instance.SetDestructor(&destruct_RaDec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RaDec*)
   {
      return GenerateInitInstanceLocal((::RaDec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RaDec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointing(void *p = 0);
   static void *newArray_MPointing(Long_t size, void *p);
   static void delete_MPointing(void *p);
   static void deleteArray_MPointing(void *p);
   static void destruct_MPointing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointing*)
   {
      ::MPointing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointing", ::MPointing::Class_Version(), "./MPointing.h", 128,
                  typeid(::MPointing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointing::Dictionary, isa_proxy, 4,
                  sizeof(::MPointing) );
      instance.SetNew(&new_MPointing);
      instance.SetNewArray(&newArray_MPointing);
      instance.SetDelete(&delete_MPointing);
      instance.SetDeleteArray(&deleteArray_MPointing);
      instance.SetDestructor(&destruct_MPointing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointing*)
   {
      return GenerateInitInstanceLocal((::MPointing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointingDev_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointingDev(void *p = 0);
   static void *newArray_MPointingDev(Long_t size, void *p);
   static void delete_MPointingDev(void *p);
   static void deleteArray_MPointingDev(void *p);
   static void destruct_MPointingDev(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointingDev*)
   {
      ::MPointingDev *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointingDev >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointingDev", ::MPointingDev::Class_Version(), "./MPointingDev.h", 12,
                  typeid(::MPointingDev), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointingDev::Dictionary, isa_proxy, 4,
                  sizeof(::MPointingDev) );
      instance.SetNew(&new_MPointingDev);
      instance.SetNewArray(&newArray_MPointingDev);
      instance.SetDelete(&delete_MPointingDev);
      instance.SetDeleteArray(&deleteArray_MPointingDev);
      instance.SetDestructor(&destruct_MPointingDev);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointingDev*)
   {
      return GenerateInitInstanceLocal((::MPointingDev*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointingDev*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointingDevCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointingDevCalc(void *p = 0);
   static void *newArray_MPointingDevCalc(Long_t size, void *p);
   static void delete_MPointingDevCalc(void *p);
   static void deleteArray_MPointingDevCalc(void *p);
   static void destruct_MPointingDevCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointingDevCalc*)
   {
      ::MPointingDevCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointingDevCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointingDevCalc", ::MPointingDevCalc::Class_Version(), "./MPointingDevCalc.h", 18,
                  typeid(::MPointingDevCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointingDevCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MPointingDevCalc) );
      instance.SetNew(&new_MPointingDevCalc);
      instance.SetNewArray(&newArray_MPointingDevCalc);
      instance.SetDelete(&delete_MPointingDevCalc);
      instance.SetDeleteArray(&deleteArray_MPointingDevCalc);
      instance.SetDestructor(&destruct_MPointingDevCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointingDevCalc*)
   {
      return GenerateInitInstanceLocal((::MPointingDevCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointingDevCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointingPos_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointingPos(void *p = 0);
   static void *newArray_MPointingPos(Long_t size, void *p);
   static void delete_MPointingPos(void *p);
   static void deleteArray_MPointingPos(void *p);
   static void destruct_MPointingPos(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointingPos*)
   {
      ::MPointingPos *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointingPos >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointingPos", ::MPointingPos::Class_Version(), "./MPointingPos.h", 19,
                  typeid(::MPointingPos), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointingPos::Dictionary, isa_proxy, 4,
                  sizeof(::MPointingPos) );
      instance.SetNew(&new_MPointingPos);
      instance.SetNewArray(&newArray_MPointingPos);
      instance.SetDelete(&delete_MPointingPos);
      instance.SetDeleteArray(&deleteArray_MPointingPos);
      instance.SetDestructor(&destruct_MPointingPos);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointingPos*)
   {
      return GenerateInitInstanceLocal((::MPointingPos*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointingPos*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointingPosCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointingPosCalc(void *p = 0);
   static void *newArray_MPointingPosCalc(Long_t size, void *p);
   static void delete_MPointingPosCalc(void *p);
   static void deleteArray_MPointingPosCalc(void *p);
   static void destruct_MPointingPosCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointingPosCalc*)
   {
      ::MPointingPosCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointingPosCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointingPosCalc", ::MPointingPosCalc::Class_Version(), "./MPointingPosCalc.h", 13,
                  typeid(::MPointingPosCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointingPosCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MPointingPosCalc) );
      instance.SetNew(&new_MPointingPosCalc);
      instance.SetNewArray(&newArray_MPointingPosCalc);
      instance.SetDelete(&delete_MPointingPosCalc);
      instance.SetDeleteArray(&deleteArray_MPointingPosCalc);
      instance.SetDestructor(&destruct_MPointingPosCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointingPosCalc*)
   {
      return GenerateInitInstanceLocal((::MPointingPosCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointingPosCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MPointingPosInterpolate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MPointingPosInterpolate(void *p = 0);
   static void *newArray_MPointingPosInterpolate(Long_t size, void *p);
   static void delete_MPointingPosInterpolate(void *p);
   static void deleteArray_MPointingPosInterpolate(void *p);
   static void destruct_MPointingPosInterpolate(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MPointingPosInterpolate*)
   {
      ::MPointingPosInterpolate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MPointingPosInterpolate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MPointingPosInterpolate", ::MPointingPosInterpolate::Class_Version(), "./MPointingPosInterpolate.h", 22,
                  typeid(::MPointingPosInterpolate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MPointingPosInterpolate::Dictionary, isa_proxy, 4,
                  sizeof(::MPointingPosInterpolate) );
      instance.SetNew(&new_MPointingPosInterpolate);
      instance.SetNewArray(&newArray_MPointingPosInterpolate);
      instance.SetDelete(&delete_MPointingPosInterpolate);
      instance.SetDeleteArray(&deleteArray_MPointingPosInterpolate);
      instance.SetDestructor(&destruct_MPointingPosInterpolate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MPointingPosInterpolate*)
   {
      return GenerateInitInstanceLocal((::MPointingPosInterpolate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MPointingPosInterpolate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHPointing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHPointing(void *p = 0);
   static void *newArray_MHPointing(Long_t size, void *p);
   static void delete_MHPointing(void *p);
   static void deleteArray_MHPointing(void *p);
   static void destruct_MHPointing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHPointing*)
   {
      ::MHPointing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHPointing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHPointing", ::MHPointing::Class_Version(), "./MHPointing.h", 16,
                  typeid(::MHPointing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHPointing::Dictionary, isa_proxy, 4,
                  sizeof(::MHPointing) );
      instance.SetNew(&new_MHPointing);
      instance.SetNewArray(&newArray_MHPointing);
      instance.SetDelete(&delete_MHPointing);
      instance.SetDeleteArray(&deleteArray_MHPointing);
      instance.SetDestructor(&destruct_MHPointing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHPointing*)
   {
      return GenerateInitInstanceLocal((::MHPointing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHPointing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHSrcPosCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHSrcPosCam(void *p = 0);
   static void *newArray_MHSrcPosCam(Long_t size, void *p);
   static void delete_MHSrcPosCam(void *p);
   static void deleteArray_MHSrcPosCam(void *p);
   static void destruct_MHSrcPosCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHSrcPosCam*)
   {
      ::MHSrcPosCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHSrcPosCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHSrcPosCam", ::MHSrcPosCam::Class_Version(), "./MHSrcPosCam.h", 26,
                  typeid(::MHSrcPosCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHSrcPosCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHSrcPosCam) );
      instance.SetNew(&new_MHSrcPosCam);
      instance.SetNewArray(&newArray_MHSrcPosCam);
      instance.SetDelete(&delete_MHSrcPosCam);
      instance.SetDeleteArray(&deleteArray_MHSrcPosCam);
      instance.SetDestructor(&destruct_MHSrcPosCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHSrcPosCam*)
   {
      return GenerateInitInstanceLocal((::MHSrcPosCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHSrcPosCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSrcPosCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSrcPosCam(void *p = 0);
   static void *newArray_MSrcPosCam(Long_t size, void *p);
   static void delete_MSrcPosCam(void *p);
   static void deleteArray_MSrcPosCam(void *p);
   static void destruct_MSrcPosCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSrcPosCam*)
   {
      ::MSrcPosCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSrcPosCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSrcPosCam", ::MSrcPosCam::Class_Version(), "./MSrcPosCam.h", 14,
                  typeid(::MSrcPosCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSrcPosCam::Dictionary, isa_proxy, 4,
                  sizeof(::MSrcPosCam) );
      instance.SetNew(&new_MSrcPosCam);
      instance.SetNewArray(&newArray_MSrcPosCam);
      instance.SetDelete(&delete_MSrcPosCam);
      instance.SetDeleteArray(&deleteArray_MSrcPosCam);
      instance.SetDestructor(&destruct_MSrcPosCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSrcPosCam*)
   {
      return GenerateInitInstanceLocal((::MSrcPosCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSrcPosCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSrcPosCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSrcPosCalc(void *p = 0);
   static void *newArray_MSrcPosCalc(Long_t size, void *p);
   static void delete_MSrcPosCalc(void *p);
   static void deleteArray_MSrcPosCalc(void *p);
   static void destruct_MSrcPosCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSrcPosCalc*)
   {
      ::MSrcPosCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSrcPosCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSrcPosCalc", ::MSrcPosCalc::Class_Version(), "./MSrcPosCalc.h", 25,
                  typeid(::MSrcPosCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSrcPosCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MSrcPosCalc) );
      instance.SetNew(&new_MSrcPosCalc);
      instance.SetNewArray(&newArray_MSrcPosCalc);
      instance.SetDelete(&delete_MSrcPosCalc);
      instance.SetDeleteArray(&deleteArray_MSrcPosCalc);
      instance.SetDestructor(&destruct_MSrcPosCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSrcPosCalc*)
   {
      return GenerateInitInstanceLocal((::MSrcPosCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSrcPosCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSrcPosRndm_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSrcPosRndm(void *p = 0);
   static void *newArray_MSrcPosRndm(Long_t size, void *p);
   static void delete_MSrcPosRndm(void *p);
   static void deleteArray_MSrcPosRndm(void *p);
   static void destruct_MSrcPosRndm(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSrcPosRndm*)
   {
      ::MSrcPosRndm *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSrcPosRndm >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSrcPosRndm", ::MSrcPosRndm::Class_Version(), "./MSrcPosRndm.h", 13,
                  typeid(::MSrcPosRndm), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSrcPosRndm::Dictionary, isa_proxy, 4,
                  sizeof(::MSrcPosRndm) );
      instance.SetNew(&new_MSrcPosRndm);
      instance.SetNewArray(&newArray_MSrcPosRndm);
      instance.SetDelete(&delete_MSrcPosRndm);
      instance.SetDeleteArray(&deleteArray_MSrcPosRndm);
      instance.SetDestructor(&destruct_MSrcPosRndm);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSrcPosRndm*)
   {
      return GenerateInitInstanceLocal((::MSrcPosRndm*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSrcPosRndm*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSrcPosCorrect_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSrcPosCorrect(void *p = 0);
   static void *newArray_MSrcPosCorrect(Long_t size, void *p);
   static void delete_MSrcPosCorrect(void *p);
   static void deleteArray_MSrcPosCorrect(void *p);
   static void destruct_MSrcPosCorrect(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSrcPosCorrect*)
   {
      ::MSrcPosCorrect *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSrcPosCorrect >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSrcPosCorrect", ::MSrcPosCorrect::Class_Version(), "./MSrcPosCorrect.h", 14,
                  typeid(::MSrcPosCorrect), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSrcPosCorrect::Dictionary, isa_proxy, 4,
                  sizeof(::MSrcPosCorrect) );
      instance.SetNew(&new_MSrcPosCorrect);
      instance.SetNewArray(&newArray_MSrcPosCorrect);
      instance.SetDelete(&delete_MSrcPosCorrect);
      instance.SetDeleteArray(&deleteArray_MSrcPosCorrect);
      instance.SetDestructor(&destruct_MSrcPosCorrect);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSrcPosCorrect*)
   {
      return GenerateInitInstanceLocal((::MSrcPosCorrect*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSrcPosCorrect*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSrcPosFromModel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSrcPosFromModel(void *p = 0);
   static void *newArray_MSrcPosFromModel(Long_t size, void *p);
   static void delete_MSrcPosFromModel(void *p);
   static void deleteArray_MSrcPosFromModel(void *p);
   static void destruct_MSrcPosFromModel(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSrcPosFromModel*)
   {
      ::MSrcPosFromModel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSrcPosFromModel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSrcPosFromModel", ::MSrcPosFromModel::Class_Version(), "./MSrcPosFromModel.h", 21,
                  typeid(::MSrcPosFromModel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSrcPosFromModel::Dictionary, isa_proxy, 4,
                  sizeof(::MSrcPosFromModel) );
      instance.SetNew(&new_MSrcPosFromModel);
      instance.SetNewArray(&newArray_MSrcPosFromModel);
      instance.SetDelete(&delete_MSrcPosFromModel);
      instance.SetDeleteArray(&deleteArray_MSrcPosFromModel);
      instance.SetDestructor(&destruct_MSrcPosFromModel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSrcPosFromModel*)
   {
      return GenerateInitInstanceLocal((::MSrcPosFromModel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSrcPosFromModel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr AltAz::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *AltAz::Class_Name()
{
   return "AltAz";
}

//______________________________________________________________________________
const char *AltAz::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AltAz*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AltAz::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::AltAz*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AltAz::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AltAz*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AltAz::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::AltAz*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr ZdAz::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *ZdAz::Class_Name()
{
   return "ZdAz";
}

//______________________________________________________________________________
const char *ZdAz::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ZdAz*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ZdAz::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::ZdAz*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ZdAz::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ZdAz*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ZdAz::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::ZdAz*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr RaDec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *RaDec::Class_Name()
{
   return "RaDec";
}

//______________________________________________________________________________
const char *RaDec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RaDec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RaDec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::RaDec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RaDec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RaDec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RaDec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::RaDec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointing::Class_Name()
{
   return "MPointing";
}

//______________________________________________________________________________
const char *MPointing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointingDev::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointingDev::Class_Name()
{
   return "MPointingDev";
}

//______________________________________________________________________________
const char *MPointingDev::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDev*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointingDev::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDev*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointingDev::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDev*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointingDev::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDev*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointingDevCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointingDevCalc::Class_Name()
{
   return "MPointingDevCalc";
}

//______________________________________________________________________________
const char *MPointingDevCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDevCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointingDevCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDevCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointingDevCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDevCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointingDevCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingDevCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointingPos::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointingPos::Class_Name()
{
   return "MPointingPos";
}

//______________________________________________________________________________
const char *MPointingPos::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPos*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointingPos::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPos*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointingPos::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPos*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointingPos::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPos*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointingPosCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointingPosCalc::Class_Name()
{
   return "MPointingPosCalc";
}

//______________________________________________________________________________
const char *MPointingPosCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointingPosCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointingPosCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointingPosCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MPointingPosInterpolate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MPointingPosInterpolate::Class_Name()
{
   return "MPointingPosInterpolate";
}

//______________________________________________________________________________
const char *MPointingPosInterpolate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosInterpolate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MPointingPosInterpolate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosInterpolate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MPointingPosInterpolate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosInterpolate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MPointingPosInterpolate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MPointingPosInterpolate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHPointing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHPointing::Class_Name()
{
   return "MHPointing";
}

//______________________________________________________________________________
const char *MHPointing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPointing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHPointing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPointing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHPointing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPointing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHPointing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPointing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHSrcPosCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHSrcPosCam::Class_Name()
{
   return "MHSrcPosCam";
}

//______________________________________________________________________________
const char *MHSrcPosCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSrcPosCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHSrcPosCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSrcPosCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHSrcPosCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSrcPosCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHSrcPosCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSrcPosCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSrcPosCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSrcPosCam::Class_Name()
{
   return "MSrcPosCam";
}

//______________________________________________________________________________
const char *MSrcPosCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSrcPosCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSrcPosCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSrcPosCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSrcPosCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSrcPosCalc::Class_Name()
{
   return "MSrcPosCalc";
}

//______________________________________________________________________________
const char *MSrcPosCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSrcPosCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSrcPosCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSrcPosCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSrcPosRndm::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSrcPosRndm::Class_Name()
{
   return "MSrcPosRndm";
}

//______________________________________________________________________________
const char *MSrcPosRndm::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosRndm*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSrcPosRndm::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosRndm*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSrcPosRndm::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosRndm*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSrcPosRndm::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosRndm*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSrcPosCorrect::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSrcPosCorrect::Class_Name()
{
   return "MSrcPosCorrect";
}

//______________________________________________________________________________
const char *MSrcPosCorrect::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCorrect*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSrcPosCorrect::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCorrect*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSrcPosCorrect::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCorrect*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSrcPosCorrect::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosCorrect*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSrcPosFromModel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSrcPosFromModel::Class_Name()
{
   return "MSrcPosFromModel";
}

//______________________________________________________________________________
const char *MSrcPosFromModel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosFromModel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSrcPosFromModel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosFromModel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSrcPosFromModel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosFromModel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSrcPosFromModel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSrcPosFromModel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MPointing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointing::Class(),this);
   }
}

//______________________________________________________________________________
void MPointing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointing.
      TClass *R__cl = ::MPointing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIe", &fIe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIa", &fIa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlop", &fFlop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNpae", &fNpae);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCa", &fCa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAn", &fAn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAw", &fAw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTf", &fTf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTx", &fTx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrx", &fNrx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNry", &fNry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCrx", &fCrx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCry", &fCry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEces", &fEces);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAces", &fAces);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEcec", &fEcec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAcec", &fAcec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagic1", &fMagic1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagic2", &fMagic2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoeff", &fCoeff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNames", &fNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDescr", &fDescr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fError", &fError);
      R__insp.InspectMember(fError, "fError.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointing(void *p) {
      return  p ? new(p) ::MPointing : new ::MPointing;
   }
   static void *newArray_MPointing(Long_t nElements, void *p) {
      return p ? new(p) ::MPointing[nElements] : new ::MPointing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointing(void *p) {
      delete ((::MPointing*)p);
   }
   static void deleteArray_MPointing(void *p) {
      delete [] ((::MPointing*)p);
   }
   static void destruct_MPointing(void *p) {
      typedef ::MPointing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointing

//______________________________________________________________________________
void MPointingDev::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointingDev.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointingDev::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointingDev::Class(),this);
   }
}

//______________________________________________________________________________
void MPointingDev::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointingDev.
      TClass *R__cl = ::MPointingDev::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevZd", &fDevZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevAz", &fDevAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevX", &fDevX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevY", &fDevY);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointingDev(void *p) {
      return  p ? new(p) ::MPointingDev : new ::MPointingDev;
   }
   static void *newArray_MPointingDev(Long_t nElements, void *p) {
      return p ? new(p) ::MPointingDev[nElements] : new ::MPointingDev[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointingDev(void *p) {
      delete ((::MPointingDev*)p);
   }
   static void deleteArray_MPointingDev(void *p) {
      delete [] ((::MPointingDev*)p);
   }
   static void destruct_MPointingDev(void *p) {
      typedef ::MPointingDev current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointingDev

//______________________________________________________________________________
void MPointingDevCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointingDevCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointingDevCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointingDevCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MPointingDevCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointingDevCalc.
      TClass *R__cl = ::MPointingDevCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReport", &fReport);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeviation", &fDeviation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointing", &fPointing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunType", &fRunType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbSum", &fNsbSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbSq", &fNsbSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbCount", &fNsbCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkip", &fSkip);
      R__insp.InspectMember(fSkip, "fSkip.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastMjd", &fLastMjd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilePrefix", &fFilePrefix);
      R__insp.InspectMember(fFilePrefix, "fFilePrefix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPointingModels", &fPointingModels);
      R__insp.InspectMember(fPointingModels, "fPointingModels.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumMinStars", &fNumMinStars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbLevel", &fNsbLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbMin", &fNsbMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsbMax", &fNsbMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxAbsDev", &fMaxAbsDev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxAge", &fMaxAge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointingDevCalc(void *p) {
      return  p ? new(p) ::MPointingDevCalc : new ::MPointingDevCalc;
   }
   static void *newArray_MPointingDevCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MPointingDevCalc[nElements] : new ::MPointingDevCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointingDevCalc(void *p) {
      delete ((::MPointingDevCalc*)p);
   }
   static void deleteArray_MPointingDevCalc(void *p) {
      delete [] ((::MPointingDevCalc*)p);
   }
   static void destruct_MPointingDevCalc(void *p) {
      typedef ::MPointingDevCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointingDevCalc

//______________________________________________________________________________
void MPointingPos::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointingPos.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointingPos::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointingPos::Class(),this);
   }
}

//______________________________________________________________________________
void MPointingPos::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointingPos.
      TClass *R__cl = ::MPointingPos::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZd", &fZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAz", &fAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa", &fRa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHa", &fHa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDec", &fDec);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointingPos(void *p) {
      return  p ? new(p) ::MPointingPos : new ::MPointingPos;
   }
   static void *newArray_MPointingPos(Long_t nElements, void *p) {
      return p ? new(p) ::MPointingPos[nElements] : new ::MPointingPos[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointingPos(void *p) {
      delete ((::MPointingPos*)p);
   }
   static void deleteArray_MPointingPos(void *p) {
      delete [] ((::MPointingPos*)p);
   }
   static void destruct_MPointingPos(void *p) {
      typedef ::MPointingPos current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointingPos

//______________________________________________________________________________
void MPointingPosCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointingPosCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointingPosCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointingPosCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MPointingPosCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointingPosCalc.
      TClass *R__cl = ::MPointingPosCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReport", &fReport);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunType", &fRunType);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointingPosCalc(void *p) {
      return  p ? new(p) ::MPointingPosCalc : new ::MPointingPosCalc;
   }
   static void *newArray_MPointingPosCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MPointingPosCalc[nElements] : new ::MPointingPosCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointingPosCalc(void *p) {
      delete ((::MPointingPosCalc*)p);
   }
   static void deleteArray_MPointingPosCalc(void *p) {
      delete [] ((::MPointingPosCalc*)p);
   }
   static void destruct_MPointingPosCalc(void *p) {
      typedef ::MPointingPosCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointingPosCalc

//______________________________________________________________________________
void MPointingPosInterpolate::Streamer(TBuffer &R__b)
{
   // Stream an object of class MPointingPosInterpolate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MPointingPosInterpolate::Class(),this);
   } else {
      R__b.WriteClassBuffer(MPointingPosInterpolate::Class(),this);
   }
}

//______________________________________________________________________________
void MPointingPosInterpolate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MPointingPosInterpolate.
      TClass *R__cl = ::MPointingPosInterpolate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumStartEvents", &fNumStartEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilename", &fFilename);
      R__insp.InspectMember(fFilename, "fFilename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstDriveTime", &fFirstDriveTime);
      R__insp.InspectMember(fFirstDriveTime, "fFirstDriveTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastDriveTime", &fLastDriveTime);
      R__insp.InspectMember(fLastDriveTime, "fLastDriveTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtTime", &fEvtTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointingPos", &fPointingPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDirIter", &fDirIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSplineZd", &fSplineZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSplineAz", &fSplineAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa", &fRa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDec", &fDec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeMode", &fTimeMode);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MPointingPosInterpolate(void *p) {
      return  p ? new(p) ::MPointingPosInterpolate : new ::MPointingPosInterpolate;
   }
   static void *newArray_MPointingPosInterpolate(Long_t nElements, void *p) {
      return p ? new(p) ::MPointingPosInterpolate[nElements] : new ::MPointingPosInterpolate[nElements];
   }
   // Wrapper around operator delete
   static void delete_MPointingPosInterpolate(void *p) {
      delete ((::MPointingPosInterpolate*)p);
   }
   static void deleteArray_MPointingPosInterpolate(void *p) {
      delete [] ((::MPointingPosInterpolate*)p);
   }
   static void destruct_MPointingPosInterpolate(void *p) {
      typedef ::MPointingPosInterpolate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MPointingPosInterpolate

//______________________________________________________________________________
void MHPointing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHPointing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHPointing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHPointing::Class(),this);
   }
}

//______________________________________________________________________________
void MHPointing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHPointing.
      TClass *R__cl = ::MHPointing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReportCosy", &fReportCosy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReportSG", &fReportSG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevTimeSG", &fDevTimeSG);
      R__insp.InspectMember(fDevTimeSG, "fDevTimeSG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevTimeCosy", &fDevTimeCosy);
      R__insp.InspectMember(fDevTimeCosy, "fDevTimeCosy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBrightness", &fBrightness);
      R__insp.InspectMember(fBrightness, "fBrightness.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumStars", &fNumStars);
      R__insp.InspectMember(fNumStars, "fNumStars.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumStarsCor", &fNumStarsCor);
      R__insp.InspectMember(fNumStarsCor, "fNumStarsCor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevZd", &fDevZd);
      R__insp.InspectMember(fDevZd, "fDevZd.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevAz", &fDevAz);
      R__insp.InspectMember(fDevAz, "fDevAz.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosZd", &fPosZd);
      R__insp.InspectMember(fPosZd, "fPosZd.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHPointing(void *p) {
      return  p ? new(p) ::MHPointing : new ::MHPointing;
   }
   static void *newArray_MHPointing(Long_t nElements, void *p) {
      return p ? new(p) ::MHPointing[nElements] : new ::MHPointing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHPointing(void *p) {
      delete ((::MHPointing*)p);
   }
   static void deleteArray_MHPointing(void *p) {
      delete [] ((::MHPointing*)p);
   }
   static void destruct_MHPointing(void *p) {
      typedef ::MHPointing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHPointing

//______________________________________________________________________________
void MHSrcPosCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHSrcPosCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHSrcPosCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHSrcPosCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHSrcPosCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHSrcPosCam.
      TClass *R__cl = ::MHSrcPosCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist", &fHist);
      R__insp.InspectMember(fHist, "fHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLastEffOn", &fTimeLastEffOn);
      R__insp.InspectMember(fTimeLastEffOn, "fTimeLastEffOn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeEffOn", &fTimeEffOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEffOnTime", &fEffOnTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSourcePos", &fSourcePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPositions", &fPositions);
      R__insp.InspectMember(fPositions, "fPositions.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWobbleOffset", &fWobbleOffset);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHSrcPosCam(void *p) {
      return  p ? new(p) ::MHSrcPosCam : new ::MHSrcPosCam;
   }
   static void *newArray_MHSrcPosCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHSrcPosCam[nElements] : new ::MHSrcPosCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHSrcPosCam(void *p) {
      delete ((::MHSrcPosCam*)p);
   }
   static void deleteArray_MHSrcPosCam(void *p) {
      delete [] ((::MHSrcPosCam*)p);
   }
   static void destruct_MHSrcPosCam(void *p) {
      typedef ::MHSrcPosCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHSrcPosCam

//______________________________________________________________________________
void MSrcPosCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSrcPosCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSrcPosCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSrcPosCam::Class(),this);
   }
}

//______________________________________________________________________________
void MSrcPosCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSrcPosCam.
      TClass *R__cl = ::MSrcPosCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSrcPosCam(void *p) {
      return  p ? new(p) ::MSrcPosCam : new ::MSrcPosCam;
   }
   static void *newArray_MSrcPosCam(Long_t nElements, void *p) {
      return p ? new(p) ::MSrcPosCam[nElements] : new ::MSrcPosCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSrcPosCam(void *p) {
      delete ((::MSrcPosCam*)p);
   }
   static void deleteArray_MSrcPosCam(void *p) {
      delete [] ((::MSrcPosCam*)p);
   }
   static void destruct_MSrcPosCam(void *p) {
      typedef ::MSrcPosCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSrcPosCam

//______________________________________________________________________________
void MSrcPosCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSrcPosCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSrcPosCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSrcPosCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MSrcPosCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSrcPosCalc.
      TClass *R__cl = ::MSrcPosCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObservatory", &fObservatory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeviation", &fDeviation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcHeader", &fMcHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcCorsika", &fMcCorsika);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCallback", &fCallback);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSourcePos", &fSourcePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosCam", &fSrcPosCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosAnti", &fSrcPosAnti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunType", &fRunType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFixedPos", &fFixedPos);
      R__insp.InspectMember(fFixedPos, "fFixedPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMode", &fMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumRandomOffPositions", &fNumRandomOffPositions);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSrcPosCalc(void *p) {
      return  p ? new(p) ::MSrcPosCalc : new ::MSrcPosCalc;
   }
   static void *newArray_MSrcPosCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MSrcPosCalc[nElements] : new ::MSrcPosCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSrcPosCalc(void *p) {
      delete ((::MSrcPosCalc*)p);
   }
   static void deleteArray_MSrcPosCalc(void *p) {
      delete [] ((::MSrcPosCalc*)p);
   }
   static void destruct_MSrcPosCalc(void *p) {
      typedef ::MSrcPosCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSrcPosCalc

//______________________________________________________________________________
void MSrcPosRndm::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSrcPosRndm.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSrcPosRndm::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSrcPosRndm::Class(),this);
   }
}

//______________________________________________________________________________
void MSrcPosRndm::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSrcPosRndm.
      TClass *R__cl = ::MSrcPosRndm::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPos", &fSrcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosAnti", &fSrcPosAnti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHist", &fHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistOfSource", &fDistOfSource);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSrcPosRndm(void *p) {
      return  p ? new(p) ::MSrcPosRndm : new ::MSrcPosRndm;
   }
   static void *newArray_MSrcPosRndm(Long_t nElements, void *p) {
      return p ? new(p) ::MSrcPosRndm[nElements] : new ::MSrcPosRndm[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSrcPosRndm(void *p) {
      delete ((::MSrcPosRndm*)p);
   }
   static void deleteArray_MSrcPosRndm(void *p) {
      delete [] ((::MSrcPosRndm*)p);
   }
   static void destruct_MSrcPosRndm(void *p) {
      typedef ::MSrcPosRndm current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSrcPosRndm

//______________________________________________________________________________
void MSrcPosCorrect::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSrcPosCorrect.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSrcPosCorrect::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSrcPosCorrect::Class(),this);
   }
}

//______________________________________________________________________________
void MSrcPosCorrect::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSrcPosCorrect.
      TClass *R__cl = ::MSrcPosCorrect::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosCam", &fSrcPosCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosAnti", &fSrcPosAnti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAxis", &fAxis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunType", &fRunType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSrcPosCorrect(void *p) {
      return  p ? new(p) ::MSrcPosCorrect : new ::MSrcPosCorrect;
   }
   static void *newArray_MSrcPosCorrect(Long_t nElements, void *p) {
      return p ? new(p) ::MSrcPosCorrect[nElements] : new ::MSrcPosCorrect[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSrcPosCorrect(void *p) {
      delete ((::MSrcPosCorrect*)p);
   }
   static void deleteArray_MSrcPosCorrect(void *p) {
      delete [] ((::MSrcPosCorrect*)p);
   }
   static void destruct_MSrcPosCorrect(void *p) {
      typedef ::MSrcPosCorrect current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSrcPosCorrect

//______________________________________________________________________________
void MSrcPosFromModel::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSrcPosFromModel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSrcPosFromModel::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSrcPosFromModel::Class(),this);
   }
}

//______________________________________________________________________________
void MSrcPosFromModel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSrcPosFromModel.
      TClass *R__cl = ::MSrcPosFromModel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPos", &fSrcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObservatory", &fObservatory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPoint0401", &fPoint0401);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPoint0405", &fPoint0405);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSrcPosFromModel(void *p) {
      return  p ? new(p) ::MSrcPosFromModel : new ::MSrcPosFromModel;
   }
   static void *newArray_MSrcPosFromModel(Long_t nElements, void *p) {
      return p ? new(p) ::MSrcPosFromModel[nElements] : new ::MSrcPosFromModel[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSrcPosFromModel(void *p) {
      delete ((::MSrcPosFromModel*)p);
   }
   static void deleteArray_MSrcPosFromModel(void *p) {
      delete [] ((::MSrcPosFromModel*)p);
   }
   static void destruct_MSrcPosFromModel(void *p) {
      typedef ::MSrcPosFromModel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSrcPosFromModel

//______________________________________________________________________________
void AltAz::Streamer(TBuffer &R__b)
{
   // Stream an object of class AltAz.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AltAz::Class(),this);
   } else {
      R__b.WriteClassBuffer(AltAz::Class(),this);
   }
}

//______________________________________________________________________________
void AltAz::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AltAz.
      TClass *R__cl = ::AltAz::IsA();
      if (R__cl || R__insp.IsA()) { }
      TVector2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_AltAz(void *p) {
      return  p ? new(p) ::AltAz : new ::AltAz;
   }
   static void *newArray_AltAz(Long_t nElements, void *p) {
      return p ? new(p) ::AltAz[nElements] : new ::AltAz[nElements];
   }
   // Wrapper around operator delete
   static void delete_AltAz(void *p) {
      delete ((::AltAz*)p);
   }
   static void deleteArray_AltAz(void *p) {
      delete [] ((::AltAz*)p);
   }
   static void destruct_AltAz(void *p) {
      typedef ::AltAz current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::AltAz

//______________________________________________________________________________
void ZdAz::Streamer(TBuffer &R__b)
{
   // Stream an object of class ZdAz.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ZdAz::Class(),this);
   } else {
      R__b.WriteClassBuffer(ZdAz::Class(),this);
   }
}

//______________________________________________________________________________
void ZdAz::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ZdAz.
      TClass *R__cl = ::ZdAz::IsA();
      if (R__cl || R__insp.IsA()) { }
      TVector2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_ZdAz(void *p) {
      return  p ? new(p) ::ZdAz : new ::ZdAz;
   }
   static void *newArray_ZdAz(Long_t nElements, void *p) {
      return p ? new(p) ::ZdAz[nElements] : new ::ZdAz[nElements];
   }
   // Wrapper around operator delete
   static void delete_ZdAz(void *p) {
      delete ((::ZdAz*)p);
   }
   static void deleteArray_ZdAz(void *p) {
      delete [] ((::ZdAz*)p);
   }
   static void destruct_ZdAz(void *p) {
      typedef ::ZdAz current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::ZdAz

//______________________________________________________________________________
void RaDec::Streamer(TBuffer &R__b)
{
   // Stream an object of class RaDec.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(RaDec::Class(),this);
   } else {
      R__b.WriteClassBuffer(RaDec::Class(),this);
   }
}

//______________________________________________________________________________
void RaDec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RaDec.
      TClass *R__cl = ::RaDec::IsA();
      if (R__cl || R__insp.IsA()) { }
      TVector2::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RaDec(void *p) {
      return  p ? new(p) ::RaDec : new ::RaDec;
   }
   static void *newArray_RaDec(Long_t nElements, void *p) {
      return p ? new(p) ::RaDec[nElements] : new ::RaDec[nElements];
   }
   // Wrapper around operator delete
   static void delete_RaDec(void *p) {
      delete ((::RaDec*)p);
   }
   static void deleteArray_RaDec(void *p) {
      delete [] ((::RaDec*)p);
   }
   static void destruct_RaDec(void *p) {
      typedef ::RaDec current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RaDec

/********************************************************
* PointingCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePointingCint();

extern "C" void G__set_cpp_environmentPointingCint() {
  G__cpp_reset_tagtablePointingCint();
}
#include <new>
extern "C" int G__cpp_dllrevPointingCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* AltAz */
static int G__PointingCint_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AltAz* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AltAz((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) AltAz((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AltAz((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) AltAz((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AltAz[n];
       } else {
         p = new((void*) gvp) AltAz[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new AltAz;
       } else {
         p = new((void*) gvp) AltAz;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_AltAz));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AltAz*) G__getstructoffset())->Alt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const AltAz*) G__getstructoffset())->Az());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->Alt((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->Az((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator*=(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator/=(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator-=(*(AltAz*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->operator+=(*(AltAz*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator/((double) G__double(libp->para[0]));
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator*((double) G__double(libp->para[0]));
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator*(*(TVector2*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator/(*(TVector2*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator+(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator-(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const AltAz*) G__getstructoffset())->operator-();
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AltAz::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AltAz::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AltAz::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AltAz::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AltAz*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AltAz::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AltAz::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AltAz::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AltAz::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PointingCint_209_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AltAz* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AltAz(*(AltAz*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_AltAz));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AltAz G__TAltAz;
static int G__PointingCint_209_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AltAz*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AltAz*) (soff+(sizeof(AltAz)*i)))->~G__TAltAz();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AltAz*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AltAz*) (soff))->~G__TAltAz();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PointingCint_209_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AltAz* dest = (AltAz*) G__getstructoffset();
   *dest = *(AltAz*) libp->para[0].ref;
   const AltAz& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ZdAz */
static int G__PointingCint_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ZdAz* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ZdAz((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) ZdAz((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ZdAz((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) ZdAz((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ZdAz[n];
       } else {
         p = new((void*) gvp) ZdAz[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ZdAz;
       } else {
         p = new((void*) gvp) ZdAz;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_ZdAz));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ZdAz* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ZdAz(*(ZdAz*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ZdAz(*(ZdAz*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_ZdAz));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ZdAz*) G__getstructoffset())->Zd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ZdAz*) G__getstructoffset())->Az());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->Zd((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->Az((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator*=(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator/=(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator-=(*(ZdAz*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->operator+=(*(ZdAz*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator/((double) G__double(libp->para[0]));
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator*((double) G__double(libp->para[0]));
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator*(*(TVector2*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator/(*(TVector2*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator+(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator-(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const ZdAz*) G__getstructoffset())->operator-();
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ZdAz*) G__getstructoffset())->Ratio());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->Round();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->Abs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ZdAz::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZdAz::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ZdAz::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ZdAz::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ZdAz*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZdAz::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ZdAz::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ZdAz::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_210_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ZdAz::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ZdAz G__TZdAz;
static int G__PointingCint_210_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ZdAz*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ZdAz*) (soff+(sizeof(ZdAz)*i)))->~G__TZdAz();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ZdAz*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ZdAz*) (soff))->~G__TZdAz();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PointingCint_210_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ZdAz* dest = (ZdAz*) G__getstructoffset();
   *dest = *(ZdAz*) libp->para[0].ref;
   const ZdAz& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RaDec */
static int G__PointingCint_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RaDec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RaDec((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) RaDec((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RaDec((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) RaDec((double) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RaDec[n];
       } else {
         p = new((void*) gvp) RaDec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new RaDec;
       } else {
         p = new((void*) gvp) RaDec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_RaDec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RaDec*) G__getstructoffset())->Ra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const RaDec*) G__getstructoffset())->Dec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RaDec*) G__getstructoffset())->operator*=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RaDec*) G__getstructoffset())->operator/=((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RaDec*) G__getstructoffset())->Ra((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RaDec*) G__getstructoffset())->Dec((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator/((double) G__double(libp->para[0]));
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator*((double) G__double(libp->para[0]));
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator*(*(TVector2*) libp->para[0].ref);
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator+(*(RaDec*) libp->para[0].ref);
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator-(*(RaDec*) libp->para[0].ref);
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RaDec* pobj;
         const RaDec xobj = ((const RaDec*) G__getstructoffset())->operator-();
         pobj = new RaDec(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RaDec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RaDec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RaDec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RaDec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RaDec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RaDec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RaDec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RaDec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_211_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RaDec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PointingCint_211_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RaDec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RaDec(*(RaDec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_RaDec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RaDec G__TRaDec;
static int G__PointingCint_211_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RaDec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RaDec*) (soff+(sizeof(RaDec)*i)))->~G__TRaDec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RaDec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RaDec*) (soff))->~G__TRaDec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PointingCint_211_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RaDec* dest = (RaDec*) G__getstructoffset();
   *dest = *(RaDec*) libp->para[0].ref;
   const RaDec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointing */
static int G__PointingCint_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointing[n];
     } else {
       p = new((void*) gvp) MPointing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointing;
     } else {
       p = new((void*) gvp) MPointing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointing* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MPointing((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MPointing((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MPointing*) G__getstructoffset())->Load((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MPointing*) G__getstructoffset())->Save((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->Correct(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->Correct(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->Correct(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->CorrectBack(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->CorrectBack(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->CorrectBack(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->operator()(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->operator()(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->operator()(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->operator()(*(ZdAz*) libp->para[0].ref, (void (*)(ZdAz&zdaz, Double_t*par)) G__int(libp->para[1]));
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->operator()(*(AltAz*) libp->para[0].ref, (void (*)(AltAz&aaz, Double_t*par)) G__int(libp->para[1]));
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->operator()(*(TVector3*) libp->para[0].ref, (void (*)(TVector3&aaz, Double_t*par)) G__int(libp->para[1]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->AddOffsets(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->AddOffsets(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->AddOffsets(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AltAz* pobj;
         const AltAz xobj = ((const MPointing*) G__getstructoffset())->SubtractOffsets(*(AltAz*) libp->para[0].ref);
         pobj = new AltAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointing*) G__getstructoffset())->SubtractOffsets(*(ZdAz*) libp->para[0].ref);
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MPointing*) G__getstructoffset())->SubtractOffsets(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MPointing*) G__getstructoffset())->SetParameters((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MPointing*) G__getstructoffset())->SetParameters((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const MPointing*) G__getstructoffset())->GetParameters((Double_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MPointing*) G__getstructoffset())->GetParameters((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointing*) G__getstructoffset())->SetParameters(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MPointing*) G__getstructoffset())->GetParameters(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MPointing*) G__getstructoffset())->GetError(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((MPointing*) G__getstructoffset())->operator[]((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const MPointing*) G__getstructoffset())->SetMinuitParameters(*(TMinuit*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MPointing*) G__getstructoffset())->SetMinuitParameters(*(TMinuit*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MPointing*) G__getstructoffset())->GetMinuitParameters(*(TMinuit*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MPointing*) G__getstructoffset())->GetMinuitParameters(*(TMinuit*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const MPointing*) G__getstructoffset())->PrintMinuitParameters(*(TMinuit*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MPointing*) G__getstructoffset())->PrintMinuitParameters(*(TMinuit*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const MPointing*) G__getstructoffset())->GetVarName((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const MPointing*) G__getstructoffset())->GetDescription((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MPointing*) G__getstructoffset())->GetDxy();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointing*) G__getstructoffset())->GetPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointing*) G__getstructoffset())->GetPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MPointing*) G__getstructoffset())->IsPxValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MPointing*) G__getstructoffset())->IsPyValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointing::GetNumPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_213_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointing G__TMPointing;
static int G__PointingCint_213_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointing*) (soff+(sizeof(MPointing)*i)))->~G__TMPointing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointing*) (soff))->~G__TMPointing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointingDev */
static int G__PointingCint_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingDev* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingDev((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MPointingDev((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingDev((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MPointingDev((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingDev[n];
       } else {
         p = new((void*) gvp) MPointingDev[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingDev;
       } else {
         p = new((void*) gvp) MPointingDev;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingDev));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDev*) G__getstructoffset())->SetDevZdAz((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDev*) G__getstructoffset())->SetDevXY((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDev*) G__getstructoffset())->SetDevXY(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MPointingDev*) G__getstructoffset())->GetDevXY();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevZdRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingDev*) G__getstructoffset())->GetDevAzRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointingDev::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDev::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointingDev::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointingDev::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDev*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDev::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingDev::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDev::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_215_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingDev::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointingDev G__TMPointingDev;
static int G__PointingCint_215_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointingDev*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointingDev*) (soff+(sizeof(MPointingDev)*i)))->~G__TMPointingDev();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointingDev*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointingDev*) (soff))->~G__TMPointingDev();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointingDevCalc */
static int G__PointingCint_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingDevCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingDevCalc[n];
     } else {
       p = new((void*) gvp) MPointingDevCalc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingDevCalc;
     } else {
       p = new((void*) gvp) MPointingDevCalc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetNumMinStars((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetNsbLevel((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetNsbMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetNsbMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetMaxAbsDev((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetDx((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetDy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetMaxAge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetFilePrefix((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->SetPointingModels(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->AddPointingModel((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MPointingDevCalc*) G__getstructoffset())->GetPointingModels();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointingDevCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDevCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointingDevCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointingDevCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingDevCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDevCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingDevCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingDevCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_225_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingDevCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointingDevCalc G__TMPointingDevCalc;
static int G__PointingCint_225_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointingDevCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointingDevCalc*) (soff+(sizeof(MPointingDevCalc)*i)))->~G__TMPointingDevCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointingDevCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointingDevCalc*) (soff))->~G__TMPointingDevCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointingPos */
static int G__PointingCint_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingPos* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPos((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MPointingPos((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPos((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MPointingPos((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingPos[n];
       } else {
         p = new((void*) gvp) MPointingPos[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingPos;
       } else {
         p = new((void*) gvp) MPointingPos;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingPos* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MPointingPos(*(MPointingPos*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MPointingPos(*(MPointingPos*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MPointingPos*) G__getstructoffset())->IsInitialized());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const TString* pobj;
         const TString xobj = ((const MPointingPos*) G__getstructoffset())->GetString((Option_t*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const TString* pobj;
         const TString xobj = ((const MPointingPos*) G__getstructoffset())->GetString();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPos*) G__getstructoffset())->SetLocalPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MPointingPos*) G__getstructoffset())->SetSkyPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MPointingPos*) G__getstructoffset())->SetSkyPosition((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetZdRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetAzRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ZdAz* pobj;
         const ZdAz xobj = ((const MPointingPos*) G__getstructoffset())->GetZdAz();
         pobj = new ZdAz(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetRa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetHa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetDec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetRaRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->GetDecRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->RotationAngle(*(MObservatory*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->RotationAngle(*(MObservatory*) libp->para[0].ref, *(MTime*) libp->para[1].ref
, (MPointingDev*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->RotationAngle(*(MObservatory*) libp->para[0].ref, *(MTime*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MPointingPos*) G__getstructoffset())->RotationAngle(*(MObservatory*) libp->para[0].ref, (MTime*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointingPos::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPos::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointingPos::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointingPos::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPos*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPos::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPos::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPos::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_228_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPos::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointingPos G__TMPointingPos;
static int G__PointingCint_228_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointingPos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointingPos*) (soff+(sizeof(MPointingPos)*i)))->~G__TMPointingPos();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointingPos*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointingPos*) (soff))->~G__TMPointingPos();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointingPosCalc */
static int G__PointingCint_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingPosCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPosCalc[n];
     } else {
       p = new((void*) gvp) MPointingPosCalc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPosCalc;
     } else {
       p = new((void*) gvp) MPointingPosCalc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointingPosCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointingPosCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointingPosCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPosCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPosCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPosCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointingPosCalc G__TMPointingPosCalc;
static int G__PointingCint_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointingPosCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointingPosCalc*) (soff+(sizeof(MPointingPosCalc)*i)))->~G__TMPointingPosCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointingPosCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointingPosCalc*) (soff))->~G__TMPointingPosCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MPointingPosInterpolate */
static int G__PointingCint_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MPointingPosInterpolate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPosInterpolate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MPointingPosInterpolate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MPointingPosInterpolate((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MPointingPosInterpolate((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingPosInterpolate[n];
       } else {
         p = new((void*) gvp) MPointingPosInterpolate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MPointingPosInterpolate;
       } else {
         p = new((void*) gvp) MPointingPosInterpolate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPosInterpolate*) G__getstructoffset())->AddFiles((MDirIter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPosInterpolate*) G__getstructoffset())->AddFile((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPosInterpolate*) G__getstructoffset())->SetTimeMode((MPointingPosInterpolate::TimeMode_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MPointingPosInterpolate*) G__getstructoffset())->SetDebug((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MPointingPosInterpolate*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MPointingPosInterpolate*) G__getstructoffset())->GetNumStartEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MPointingPosInterpolate*) G__getstructoffset())->SetNumStartEvents((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MPointingPosInterpolate*) G__getstructoffset())->SetNumStartEvents();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MPointingPosInterpolate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosInterpolate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MPointingPosInterpolate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MPointingPosInterpolate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MPointingPosInterpolate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosInterpolate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPosInterpolate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MPointingPosInterpolate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_256_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MPointingPosInterpolate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MPointingPosInterpolate G__TMPointingPosInterpolate;
static int G__PointingCint_256_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MPointingPosInterpolate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MPointingPosInterpolate*) (soff+(sizeof(MPointingPosInterpolate)*i)))->~G__TMPointingPosInterpolate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MPointingPosInterpolate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MPointingPosInterpolate*) (soff))->~G__TMPointingPosInterpolate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHPointing */
static int G__PointingCint_292_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHPointing* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPointing((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHPointing((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPointing((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHPointing((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPointing[n];
       } else {
         p = new((void*) gvp) MHPointing[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPointing;
       } else {
         p = new((void*) gvp) MHPointing;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MHPointing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHPointing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPointing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHPointing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHPointing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPointing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPointing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPointing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPointing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_292_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPointing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHPointing G__TMHPointing;
static int G__PointingCint_292_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHPointing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHPointing*) (soff+(sizeof(MHPointing)*i)))->~G__TMHPointing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHPointing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHPointing*) (soff))->~G__TMHPointing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHSrcPosCam */
static int G__PointingCint_297_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHSrcPosCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSrcPosCam(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHSrcPosCam(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSrcPosCam((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHSrcPosCam((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSrcPosCam((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MHSrcPosCam((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSrcPosCam[n];
       } else {
         p = new((void*) gvp) MHSrcPosCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSrcPosCam;
       } else {
         p = new((void*) gvp) MHSrcPosCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((const MHSrcPosCam*) G__getstructoffset())->GetHist();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((MHSrcPosCam*) G__getstructoffset())->GetHist();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHSrcPosCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSrcPosCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHSrcPosCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHSrcPosCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSrcPosCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSrcPosCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSrcPosCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSrcPosCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_297_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSrcPosCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHSrcPosCam G__TMHSrcPosCam;
static int G__PointingCint_297_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHSrcPosCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHSrcPosCam*) (soff+(sizeof(MHSrcPosCam)*i)))->~G__TMHSrcPosCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHSrcPosCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHSrcPosCam*) (soff))->~G__TMHSrcPosCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSrcPosCam */
static int G__PointingCint_298_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSrcPosCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSrcPosCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCam[n];
       } else {
         p = new((void*) gvp) MSrcPosCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCam;
       } else {
         p = new((void*) gvp) MSrcPosCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSrcPosCam(*(MSrcPosCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MSrcPosCam(*(MSrcPosCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->SetX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->SetY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->SetXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->SetXY(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->Add(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSrcPosCam*) G__getstructoffset())->GetDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSrcPosCam*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSrcPosCam*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MSrcPosCam*) G__getstructoffset())->GetXY();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSrcPosCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSrcPosCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSrcPosCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_298_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSrcPosCam G__TMSrcPosCam;
static int G__PointingCint_298_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSrcPosCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSrcPosCam*) (soff+(sizeof(MSrcPosCam)*i)))->~G__TMSrcPosCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSrcPosCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSrcPosCam*) (soff))->~G__TMSrcPosCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSrcPosCalc */
static int G__PointingCint_303_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSrcPosCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSrcPosCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCalc[n];
       } else {
         p = new((void*) gvp) MSrcPosCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCalc;
       } else {
         p = new((void*) gvp) MSrcPosCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCalc*) G__getstructoffset())->SetSourcePos((MPointingPos*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCalc*) G__getstructoffset())->SetSourcePos((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSrcPosCalc*) G__getstructoffset())->SetOwner((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSrcPosCalc*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSrcPosCalc*) G__getstructoffset())->SetMode((MSrcPosCalc::Mode_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSrcPosCalc*) G__getstructoffset())->SetMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCalc*) G__getstructoffset())->SetCallback((MTaskList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSrcPosCalc*) G__getstructoffset())->SetNumRandomOffPositions((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSrcPosCalc*) G__getstructoffset())->SetNumRandomOffPositions();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSrcPosCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSrcPosCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSrcPosCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_303_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSrcPosCalc G__TMSrcPosCalc;
static int G__PointingCint_303_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSrcPosCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSrcPosCalc*) (soff+(sizeof(MSrcPosCalc)*i)))->~G__TMSrcPosCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSrcPosCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSrcPosCalc*) (soff))->~G__TMSrcPosCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSrcPosRndm */
static int G__PointingCint_306_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosRndm* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosRndm[n];
     } else {
       p = new((void*) gvp) MSrcPosRndm[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosRndm;
     } else {
       p = new((void*) gvp) MSrcPosRndm;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSrcPosRndm*) G__getstructoffset())->SetDistOfSource((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSrcPosRndm*) G__getstructoffset())->SetDistOfSource();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSrcPosRndm::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosRndm::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSrcPosRndm::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSrcPosRndm::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosRndm*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosRndm::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosRndm::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosRndm::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_306_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosRndm::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSrcPosRndm G__TMSrcPosRndm;
static int G__PointingCint_306_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSrcPosRndm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSrcPosRndm*) (soff+(sizeof(MSrcPosRndm)*i)))->~G__TMSrcPosRndm();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSrcPosRndm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSrcPosRndm*) (soff))->~G__TMSrcPosRndm();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSrcPosCorrect */
static int G__PointingCint_307_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosCorrect* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCorrect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSrcPosCorrect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosCorrect((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSrcPosCorrect((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCorrect[n];
       } else {
         p = new((void*) gvp) MSrcPosCorrect[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosCorrect;
       } else {
         p = new((void*) gvp) MSrcPosCorrect;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSrcPosCorrect::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCorrect::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSrcPosCorrect::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSrcPosCorrect::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosCorrect*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCorrect::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCorrect::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosCorrect::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_307_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosCorrect::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSrcPosCorrect G__TMSrcPosCorrect;
static int G__PointingCint_307_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSrcPosCorrect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSrcPosCorrect*) (soff+(sizeof(MSrcPosCorrect)*i)))->~G__TMSrcPosCorrect();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSrcPosCorrect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSrcPosCorrect*) (soff))->~G__TMSrcPosCorrect();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSrcPosFromModel */
static int G__PointingCint_308_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSrcPosFromModel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosFromModel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSrcPosFromModel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSrcPosFromModel((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSrcPosFromModel((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosFromModel[n];
       } else {
         p = new((void*) gvp) MSrcPosFromModel[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSrcPosFromModel;
       } else {
         p = new((void*) gvp) MSrcPosFromModel;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSrcPosFromModel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosFromModel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSrcPosFromModel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSrcPosFromModel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSrcPosFromModel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosFromModel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosFromModel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSrcPosFromModel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PointingCint_308_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSrcPosFromModel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSrcPosFromModel G__TMSrcPosFromModel;
static int G__PointingCint_308_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSrcPosFromModel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSrcPosFromModel*) (soff+(sizeof(MSrcPosFromModel)*i)))->~G__TMSrcPosFromModel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSrcPosFromModel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSrcPosFromModel*) (soff))->~G__TMSrcPosFromModel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* AltAz */

/* ZdAz */

/* RaDec */

/* MPointing */

/* MPointingDev */

/* MPointingDevCalc */

/* MPointingPos */

/* MPointingPosCalc */

/* MPointingPosInterpolate */

/* MHPointing */

/* MHSrcPosCam */

/* MSrcPosCam */

/* MSrcPosCalc */

/* MSrcPosRndm */

/* MSrcPosCorrect */

/* MSrcPosFromModel */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPointingCint {
 public:
  G__Sizep2memfuncPointingCint(): p(&G__Sizep2memfuncPointingCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPointingCint::*p)();
};

size_t G__get_sizep2memfuncPointingCint()
{
  G__Sizep2memfuncPointingCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePointingCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_AltAz))) {
     AltAz *G__Lderived;
     G__Lderived=(AltAz*)0x1000;
     {
       TVector2 *G__Lpbase=(TVector2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_AltAz),G__get_linked_tagnum(&G__PointingCintLN_TVector2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_AltAz),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_ZdAz))) {
     ZdAz *G__Lderived;
     G__Lderived=(ZdAz*)0x1000;
     {
       TVector2 *G__Lpbase=(TVector2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_ZdAz),G__get_linked_tagnum(&G__PointingCintLN_TVector2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_ZdAz),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_RaDec))) {
     RaDec *G__Lderived;
     G__Lderived=(RaDec*)0x1000;
     {
       TVector2 *G__Lpbase=(TVector2*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_RaDec),G__get_linked_tagnum(&G__PointingCintLN_TVector2),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_RaDec),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointing))) {
     MPointing *G__Lderived;
     G__Lderived=(MPointing*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointing),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointing),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointingDev))) {
     MPointingDev *G__Lderived;
     G__Lderived=(MPointingDev*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDev),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDev),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc))) {
     MPointingDevCalc *G__Lderived;
     G__Lderived=(MPointingDevCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointingPos))) {
     MPointingPos *G__Lderived;
     G__Lderived=(MPointingPos*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc))) {
     MPointingPosCalc *G__Lderived;
     G__Lderived=(MPointingPosCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate))) {
     MPointingPosInterpolate *G__Lderived;
     G__Lderived=(MPointingPosInterpolate*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MHPointing))) {
     MHPointing *G__Lderived;
     G__Lderived=(MHPointing*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHPointing),G__get_linked_tagnum(&G__PointingCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHPointing),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHPointing),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam))) {
     MHSrcPosCam *G__Lderived;
     G__Lderived=(MHSrcPosCam*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam),G__get_linked_tagnum(&G__PointingCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam))) {
     MSrcPosCam *G__Lderived;
     G__Lderived=(MSrcPosCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc))) {
     MSrcPosCalc *G__Lderived;
     G__Lderived=(MSrcPosCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm))) {
     MSrcPosRndm *G__Lderived;
     G__Lderived=(MSrcPosRndm*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect))) {
     MSrcPosCorrect *G__Lderived;
     G__Lderived=(MSrcPosCorrect*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel))) {
     MSrcPosFromModel *G__Lderived;
     G__Lderived=(MSrcPosFromModel*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel),G__get_linked_tagnum(&G__PointingCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel),G__get_linked_tagnum(&G__PointingCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel),G__get_linked_tagnum(&G__PointingCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel),G__get_linked_tagnum(&G__PointingCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePointingCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PointingCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PointingCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PointingCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PointingCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__PointingCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(ZdAz&zdaz, Double_t*par)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(AltAz&aaz, Double_t*par)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("void (*)(TVector3&aaz, Double_t*par)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* AltAz */
static void G__setup_memvarAltAz(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_AltAz));
   { AltAz *p; p=(AltAz*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ZdAz */
static void G__setup_memvarZdAz(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_ZdAz));
   { ZdAz *p; p=(ZdAz*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RaDec */
static void G__setup_memvarRaDec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_RaDec));
   { RaDec *p; p=(RaDec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointing */
static void G__setup_memvarMPointing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointing));
   { MPointing *p; p=(MPointing*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kIA=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kIE=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kFLOP=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kAN=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kAW=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kNPAE=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kCA=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kTF=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kTX=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kECES=9LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kACES=10LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kECEC=11LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kACEC=12LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kNRX=13LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kNRY=14LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kCRX=15LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kCRY=16LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kMAGIC1=17LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kMAGIC2=18LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kPX=19LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kPY=20LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kDX=21LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kDY=22LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingcLcLdA),-1,-2,4,"kNumPar=23LL",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIe=",0,"[rad] Index Error in Elevation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIa=",0,"[rad] Index Error in Azimuth");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFlop=",0,"[rad] Vertical Sag");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNpae=",0,"[rad] Az-El Nonperpendicularity");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCa=",0,"[rad] Left-Right Collimation Error");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAn=",0,"[rad] Azimuth Axis Misalignment (N-S)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAw=",0,"[rad] Azimuth Axis Misalignment (E-W)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTf=",0,"[rad] Tube fluxture (sin)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTx=",0,"[rad] Tube fluxture (tan)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNrx=",0,"[rad] Nasmyth rotator displacement, horizontal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNry=",0,"[rad] Nasmyth rotator displacement, vertical");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCrx=",0,"[rad] Alt/Az Coude Displacement (N-S)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCry=",0,"[rad] Alt/Az Coude Displacement (E-W)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEces=",0,"[rad] Elevation Centering Error (sin)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAces=",0,"[rad] Azimuth Centering Error (sin)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEcec=",0,"[rad] Elevation Centering Error (cos)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAcec=",0,"[rad] Azimuth Centering Error (cos)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMagic1=",0,"[rad] Magic Term (what is it?)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMagic2=",0,"[rad] Magic Term (what is it?)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPx=",0,"[rad] Starguider calibration fixed offset x");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPy=",0,"[rad] Starguider calibration fixed offset y");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDx=",0,"[rad] Starguider calibration additional offset dx");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDy=",0,"[rad] Starguider calibration additional offset dy");
   G__memvar_setup((void*)0,68,2,0,-1,G__defined_typename("Double_t"),-1,4,"fCoeff=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-1,4,"fNames=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-1,4,"fDescr=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TArrayD),-1,-1,4,"fError=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointingDev */
static void G__setup_memvarMPointingDev(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDev));
   { MPointingDev *p; p=(MPointingDev*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevZd=",0,"[deg] Pointing offset zenith distance as calculated from starguider data");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevAz=",0,"[deg] Pointing offset azimuth as calculated from starguider dat");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevX=",0,"[deg] Pointing offset in x");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevY=",0,"[deg] Pointing offset in y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointingDevCalc */
static void G__setup_memvarMPointingDevCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc));
   { MPointingDevCalc *p; p=(MPointingDevCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-2,4,"fgFilePrefix=",0,"! default file name of pointing model");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MReportStarguider),-1,-1,4,"fReport=",0,"! MReportStarguider to get mispointing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingDev),-1,-1,4,"fDeviation=",0,"! Output container to store pointing deviation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointing),-1,-1,4,"fPointing=",0,"! MPointing, pointing model for the calibration");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRunType=",0,"! Run Type to decide where to get pointing position from");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNsbSum=",0,"! Sum of Nsb from Starguider");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNsbSq=",0,"! Sum of Sq of Nsb from Starguider");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNsbCount=",0,"! Counter of Nsb entries from Starguider");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TArrayI),-1,-1,4,"fSkip=",0,"! Counter for execution statistics");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLastMjd=",0,"! Time of last processed report");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-1,4,"fFilePrefix=",0,"File name of pointing model");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TArrayI),-1,-1,4,"fPointingModels=",0,"List with pointing models");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumMinStars=",0,"[num] Minimum number of identified stars");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNsbLevel=",0,"Minimum deviation from mean in sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNsbMin=",0,"[au] Minimum NSB to calc mean and rms");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNsbMax=",0,"[au] Maximum NSB to calc mean and rms");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxAbsDev=",0,"[arcmin] Maximum considered absolute deviation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxAge=",0,"[min] Maximum age of reports to be used without an update");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDx=",0,"[deg] Starguider calibration dx");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDy=",0,"[deg] Starguider calibration dy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointingPos */
static void G__setup_memvarMPointingPos(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPos));
   { MPointingPos *p; p=(MPointingPos*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZd=",0,"[deg] Zenith distance (ZA) {fits: unit=deg}");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAz=",0,"[deg] Azimuth              {fits: unit=deg}");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRa=",0,"[h]   Right ascension      {fits: unit=h}");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHa=",0,"[h]   Hour angle           {fits: unit=h}");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDec=",0,"[deg] Declination          {fits: unit=deg}");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointingPosCalc */
static void G__setup_memvarMPointingPosCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc));
   { MPointingPosCalc *p; p=(MPointingPosCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"! MMcEvt to get simulated poiting position from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MReportDrive),-1,-1,4,"fReport=",0,"! MReportDrive to get real poiting position from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fPosition=",0,"! Output container to store pointing position");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRunType=",0,"! Run Type to decide where to get pointing position from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MPointingPosInterpolate */
static void G__setup_memvarMPointingPosInterpolate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate));
   { MPointingPosInterpolate *p; p=(MPointingPosInterpolate*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t),-1,-2,1,G__FastAllocString(2048).Format("kRunTime=%lldLL",(long long)MPointingPosInterpolate::kRunTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t),-1,-2,1,G__FastAllocString(2048).Format("kEventTime=%lldLL",(long long)MPointingPosInterpolate::kEventTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNumStartEvents=0LL",0,"! Default for fNumStartEvents (now set to: 10000)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumStartEvents=",0,"Start number of allowed events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDebug=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TString),-1,-1,4,"fFilename=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fFirstDriveTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fLastDriveTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fEvtTime=",0,"! Raw event time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fPointingPos=",0,"! Telescope pointing postion");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Run Header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MDirIter),-1,-1,4,"fDirIter=",0,"! Dir Iter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TSpline3),-1,-1,4,"fSplineZd=",0,"! Zd vs. time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TSpline3),-1,-1,4,"fSplineAz=",0,"! Az vs. time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRa=",0,"RA of source");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDec=",0,"Dec of source");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t),-1,-1,4,"fTimeMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHPointing */
static void G__setup_memvarMHPointing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MHPointing));
   { MHPointing *p; p=(MHPointing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MReportDrive),-1,-1,4,"fReportCosy=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MReportStarguider),-1,-1,4,"fReportSG=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fDevTimeSG=",0,"Starguider deviation versus time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fDevTimeCosy=",0,"Drive deviation versus time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fBrightness=",0,"Arbitrary sky brightness");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fNumStars=",0,"Number of stars identified by starguider");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fNumStarsCor=",0,"Number of correlated stars identified by starguider");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fDevZd=",0,"Starguider deviation Zd");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fDevAz=",0,"Starguider deviation Az");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TGraph),-1,-1,4,"fPosZd=",0,"Position Zd");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHSrcPosCam */
static void G__setup_memvarMHSrcPosCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam));
   { MHSrcPosCam *p; p=(MHSrcPosCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TH2D),-1,-1,4,"fHist=",0,"Histogram of observation time vs source position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fTimeLastEffOn=",0,"! Last time stamp of effective on time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fTimeEffOn=",0,"! Current effective on time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MParameterD),-1,-1,4,"fEffOnTime=",0,"! Effective on time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fSourcePos=",0,"! Pointing position of the telescope");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion from mm to deg");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClonesArray),-1,-1,4,"fPositions=",0,"! Buffer to store source positions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNum=",0,"! Position in array");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWobbleOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSrcPosCam */
static void G__setup_memvarMSrcPosCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam));
   { MSrcPosCam *p; p=(MSrcPosCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"[mm] x position of source in camera");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"[mm] y position of source in camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSrcPosCalc */
static void G__setup_memvarMSrcPosCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc));
   { MSrcPosCalc *p; p=(MSrcPosCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalccLcLMode_t),-1,-2,1,G__FastAllocString(2048).Format("kDefault=%lldLL",(long long)MSrcPosCalc::kDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalccLcLMode_t),-1,-2,1,G__FastAllocString(2048).Format("kOffData=%lldLL",(long long)MSrcPosCalc::kOffData).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalccLcLMode_t),-1,-2,1,G__FastAllocString(2048).Format("kWobble=%lldLL",(long long)MSrcPosCalc::kWobble).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalccLcLMode_t),-1,-2,1,G__FastAllocString(2048).Format("kFixed=%lldLL",(long long)MSrcPosCalc::kFixed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalccLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MObservatory),-1,-1,4,"fObservatory=",0,"! Observatory location");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fPointPos=",0,"! Present pointing position of the telescope in Zd/Az");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MPointingDev),-1,-1,4,"fDeviation=",0,"! Deviation calculated from starguider data");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"! Possible input of shower position from MC");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MMcRunHeader),-1,-1,4,"fMcHeader=",0,"! Monte Carlo run header needed for correct wobble position");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MMcCorsikaRunHeader),-1,-1,4,"fMcCorsika=",0,"! Monte Carlo run header needed to determine view cone option");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geomety");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fTime=",0,"! Time of the current event");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__PointingCintLN_MTaskList),-1,-1,4,"fCallback=",0,"! Callback function to get the number of the cycle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fSourcePos=",0,"! Source Postion in sky coordinates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPosCam=",0,"! Output: Source position in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPosAnti=",0,"! Output: Anti Source position in the camera");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRunType=",0,"! Run Type to decide where to get pointing position from");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PointingCintLN_TVector2),-1,-1,4,"fFixedPos=",0,"! [deg] Fixed source position");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMode=",0,"Mode how the source position is calculated");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumRandomOffPositions=",0,"Number of possible random off-sourcr position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSrcPosRndm */
static void G__setup_memvarMSrcPosRndm(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm));
   { MSrcPosRndm *p; p=(MSrcPosRndm*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPos=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPosAnti=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam),-1,-1,4,"fHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion factor from mm to deg");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDistOfSource=",0,"[deg] Distance of the source from the camera center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSrcPosCorrect */
static void G__setup_memvarMSrcPosCorrect(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect));
   { MSrcPosCorrect *p; p=(MSrcPosCorrect*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPosCam=",0,"! Source position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPosAnti=",0,"! Anti source position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fAxis=",0,"! New \"center of camera\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geometry");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRunType=",0,"! Run Type to decide where to get pointing position from");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunNumber=",0,"! Current run number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDx=",0,"[mm] Correction in x");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDy=",0,"[mm] Correction in y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSrcPosFromModel */
static void G__setup_memvarMSrcPosFromModel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel));
   { MSrcPosFromModel *p; p=(MSrcPosFromModel*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointingPos),-1,-1,4,"fPointPos=",0,"! Poiting position as recorded by the drive system");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam),-1,-1,4,"fSrcPos=",0,"! Source position in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MRawRunHeader),-1,-1,4,"fRun=",0,"! Run Header storing the run-number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MTime),-1,-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MObservatory),-1,-1,4,"fObservatory=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointing),-1,-1,4,"fPoint0401=",0,"! Pointing Model used since 1/2004");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_MPointing),-1,-1,4,"fPoint0405=",0,"! Pointing Model used since 5/2004");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PointingCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPointingCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncAltAz(void) {
   /* AltAz */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_AltAz));
   G__memfunc_setup("AltAz",476,G__PointingCint_209_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 2, 1, 1, 0, 
"d - - 0 '0' alt d - - 0 '0' az", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Alt",289,G__PointingCint_209_0_2, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Az",187,G__PointingCint_209_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__PointingCint_209_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__PointingCint_209_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Alt",289,G__PointingCint_209_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Az",187,G__PointingCint_209_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__PointingCint_209_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__PointingCint_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__PointingCint_209_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AltAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__PointingCint_209_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'AltAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__PointingCint_209_0_12, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_209_0_13, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_209_0_14, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__PointingCint_209_0_15, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__PointingCint_209_0_16, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_209_0_17, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_209_0_18, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_209_0_19, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AltAz::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_209_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AltAz::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_209_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AltAz::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_209_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AltAz::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_209_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_209_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AltAz::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_209_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AltAz::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_209_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AltAz::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_209_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AltAz::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AltAz", 476, G__PointingCint_209_0_31, (int) ('i'), G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 0, "u 'AltAz' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AltAz", 602, G__PointingCint_209_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PointingCint_209_0_33, (int) ('u'), G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 1, 1, 1, 1, 0, "u 'AltAz' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncZdAz(void) {
   /* ZdAz */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_ZdAz));
   G__memfunc_setup("ZdAz",377,G__PointingCint_210_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 2, 1, 1, 0, 
"d - - 0 '0' zd d - - 0 '0' az", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZdAz",377,G__PointingCint_210_0_2, 105, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 0, "u 'ZdAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__PointingCint_210_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__PointingCint_210_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zd",190,G__PointingCint_210_0_5, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Az",187,G__PointingCint_210_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zd",190,G__PointingCint_210_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Az",187,G__PointingCint_210_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__PointingCint_210_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__PointingCint_210_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__PointingCint_210_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ZdAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__PointingCint_210_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'ZdAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__PointingCint_210_0_13, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_210_0_14, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_210_0_15, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__PointingCint_210_0_16, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__PointingCint_210_0_17, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_210_0_18, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_210_0_19, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ratio",511,G__PointingCint_210_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Round",520,G__PointingCint_210_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Abs",278,G__PointingCint_210_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_210_0_23, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ZdAz::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_210_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZdAz::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_210_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ZdAz::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_210_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ZdAz::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_210_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_210_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZdAz::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_210_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ZdAz::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_210_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ZdAz::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_210_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ZdAz::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ZdAz", 503, G__PointingCint_210_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PointingCint_210_0_36, (int) ('u'), G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 1, 1, 1, 1, 0, "u 'ZdAz' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRaDec(void) {
   /* RaDec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_RaDec));
   G__memfunc_setup("RaDec",447,G__PointingCint_211_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 2, 1, 1, 0, 
"d - - 0 '0' ra d - - 0 '0' dec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ra",179,G__PointingCint_211_0_2, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dec",268,G__PointingCint_211_0_3, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__PointingCint_211_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__PointingCint_211_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ra",179,G__PointingCint_211_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dec",268,G__PointingCint_211_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__PointingCint_211_0_8, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_211_0_9, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 8, "d - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__PointingCint_211_0_10, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 8, "u 'TVector2' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__PointingCint_211_0_11, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 8, "u 'RaDec' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_211_0_12, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 8, "u 'RaDec' - 11 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__PointingCint_211_0_13, 117, G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_211_0_14, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RaDec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_211_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RaDec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_211_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RaDec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_211_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RaDec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_211_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_211_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RaDec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_211_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RaDec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_211_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RaDec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_211_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RaDec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RaDec", 447, G__PointingCint_211_0_26, (int) ('i'), G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 0, 1, 1, 1, 0, "u 'RaDec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RaDec", 573, G__PointingCint_211_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PointingCint_211_0_28, (int) ('u'), G__get_linked_tagnum(&G__PointingCintLN_RaDec), -1, 1, 1, 1, 1, 0, "u 'RaDec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointing(void) {
   /* MPointing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointing));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Sign",401,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"d - 'Double_t' 0 - val d - 'Double_t' 0 - alt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcAnAw",730,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 2, 1, 4, 8, 
"u 'AltAz' - 11 - p i - 'Int_t' 0 - sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MPointing",917,G__PointingCint_213_0_5, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MPointing",917,G__PointingCint_213_0_6, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointing), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Load",384,G__PointingCint_213_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Save",399,G__PointingCint_213_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Correct",722,G__PointingCint_213_0_10, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - zdaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Correct",722,G__PointingCint_213_0_11, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - aaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Correct",722,G__PointingCint_213_0_12, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectBack",1091,G__PointingCint_213_0_13, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - zdaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectBack",1091,G__PointingCint_213_0_14, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - aaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CorrectBack",1091,G__PointingCint_213_0_15, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_16, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - zdaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_17, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - aaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_18, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_19, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 2, 1, 1, 8, 
"u 'ZdAz' - 11 - zdaz 1 - 'void (*)(ZdAz&zdaz, Double_t*par)' 0 - fcn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_20, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 2, 1, 1, 8, 
"u 'AltAz' - 11 - aaz 1 - 'void (*)(AltAz&aaz, Double_t*par)' 0 - fcn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__PointingCint_213_0_21, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - aaz 1 - 'void (*)(TVector3&aaz, Double_t*par)' 0 - fcn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddOffsets",995,G__PointingCint_213_0_22, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - aa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddOffsets",995,G__PointingCint_213_0_23, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - zdaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddOffsets",995,G__PointingCint_213_0_24, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubtractOffsets",1570,G__PointingCint_213_0_25, 117, G__get_linked_tagnum(&G__PointingCintLN_AltAz), -1, 0, 1, 1, 1, 8, "u 'AltAz' - 11 - aa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubtractOffsets",1570,G__PointingCint_213_0_26, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 1, 1, 1, 8, "u 'ZdAz' - 11 - zdaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubtractOffsets",1570,G__PointingCint_213_0_27, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__PointingCint_213_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - par i - 'Int_t' 0 'kNumPar' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__PointingCint_213_0_29, 121, -1, -1, 0, 2, 1, 1, 8, 
"D - 'Double_t' 0 - par i - 'Int_t' 0 'kNumPar' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__PointingCint_213_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__PointingCint_213_0_31, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TArrayD' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__PointingCint_213_0_32, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TArrayD' - 1 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__PointingCint_213_0_33, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinuitParameters",1974,G__PointingCint_213_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TMinuit' - 1 - m i - 'Int_t' 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinuitParameters",1962,G__PointingCint_213_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMinuit' - 1 - m i - 'Int_t' 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintMinuitParameters",2199,G__PointingCint_213_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TMinuit' - 1 - m i - 'Int_t' 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVarName",970,G__PointingCint_213_0_37, 117, G__get_linked_tagnum(&G__PointingCintLN_TString), -1, 1, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDescription",1444,G__PointingCint_213_0_38, 117, G__get_linked_tagnum(&G__PointingCintLN_TString), -1, 1, 1, 1, 1, 9, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDxy",597,G__PointingCint_213_0_39, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", "{ return TVector2(fDx, fDy)*TMath::RadToDeg(); }", (void*) NULL, 0);
   G__memfunc_setup("GetPx",488,G__PointingCint_213_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fPx*TMath::RadToDeg(); }", (void*) NULL, 0);
   G__memfunc_setup("GetPy",489,G__PointingCint_213_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fPy*TMath::RadToDeg(); }", (void*) NULL, 0);
   G__memfunc_setup("IsPxValid",884,G__PointingCint_213_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPyValid",885,G__PointingCint_213_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPar",883,G__PointingCint_213_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const Int_t (*)())(&MPointing::GetNumPar) ), 0);
   G__memfunc_setup("Class",502,G__PointingCint_213_0_45, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_213_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_213_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_213_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_213_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_213_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_213_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_213_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_213_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointing::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointing", 1043, G__PointingCint_213_0_57, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointingDev(void) {
   /* MPointingDev */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDev));
   G__memfunc_setup("MPointingDev",1204,G__PointingCint_215_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingDev), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDevZdAz",964,G__PointingCint_215_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - devzd d - 'Double_t' 0 - devaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDevXY",764,G__PointingCint_215_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dx d - 'Double_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDevXY",764,G__PointingCint_215_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevZd",765,G__PointingCint_215_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevAz",762,G__PointingCint_215_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevX",663,G__PointingCint_215_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevY",664,G__PointingCint_215_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevXY",752,G__PointingCint_215_0_9, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevZdRad",1044,G__PointingCint_215_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fDevZd*TMath::DegToRad(); }", (void*) NULL, 0);
   G__memfunc_setup("GetDevAzRad",1041,G__PointingCint_215_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fDevAz*TMath::DegToRad(); }", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_215_0_12, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointingDev::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_215_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDev::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_215_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointingDev::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_215_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointingDev::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_215_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_215_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDev::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_215_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingDev::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_215_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDev::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_215_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingDev::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointingDev", 1330, G__PointingCint_215_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointingDevCalc(void) {
   /* MPointingDevCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc));
   G__memfunc_setup("DoCalibration",1307,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - devzd d - 'Double_t' 0 - devaz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPointingModel",1717,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MRawRunHeader' - 11 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindPointingModel",1722,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortPointingModels",1876,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessStarguiderReport",2421,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Skip",407,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MPointingDevCalc",1575,G__PointingCint_225_0_12, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingDevCalc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumMinStars",1421,G__PointingCint_225_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNsbLevel",1095,G__PointingCint_225_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNsbMin",883,G__PointingCint_225_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nsb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNsbMax",885,G__PointingCint_225_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - nsb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAbsDev",1159,G__PointingCint_225_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDx",488,G__PointingCint_225_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDy",489,G__PointingCint_225_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAge",863,G__PointingCint_225_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - age", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilePrefix",1306,G__PointingCint_225_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPointingModels",1752,G__PointingCint_225_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - models", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPointingModel",1602,G__PointingCint_225_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - runnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPointingModels",1740,G__PointingCint_225_0_25, 117, G__get_linked_tagnum(&G__PointingCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_225_0_26, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointingDevCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_225_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDevCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_225_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointingDevCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_225_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointingDevCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_225_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_225_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDevCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_225_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingDevCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_225_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingDevCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_225_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingDevCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointingDevCalc", 1701, G__PointingCint_225_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointingPos(void) {
   /* MPointingPos */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPos));
   G__memfunc_setup("MPointingPos",1223,G__PointingCint_228_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingPos), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MPointingPos",1223,G__PointingCint_228_0_2, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingPos), -1, 0, 1, 1, 1, 0, "u 'MPointingPos' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInitialized",1330,G__PointingCint_228_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetString",919,G__PointingCint_228_0_5, 117, G__get_linked_tagnum(&G__PointingCintLN_TString), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLocalPosition",1644,G__PointingCint_228_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - zd d - 'Double_t' 0 - az", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkyPosition",1464,G__PointingCint_228_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - ra d - 'Double_t' 0 - dec "
"d - 'Double_t' 0 '0' ha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZd",478,G__PointingCint_228_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAz",475,G__PointingCint_228_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZdRad",757,G__PointingCint_228_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fZd*TMath::DegToRad(); }", (void*) NULL, 0);
   G__memfunc_setup("GetAzRad",754,G__PointingCint_228_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fAz*TMath::DegToRad(); }", (void*) NULL, 0);
   G__memfunc_setup("GetZdAz",665,G__PointingCint_228_0_12, 117, G__get_linked_tagnum(&G__PointingCintLN_ZdAz), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRa",467,G__PointingCint_228_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHa",457,G__PointingCint_228_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDec",556,G__PointingCint_228_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaRad",746,G__PointingCint_228_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fRa*TMath::DegToRad()*15; }", (void*) NULL, 0);
   G__memfunc_setup("GetDecRad",835,G__PointingCint_228_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return fDec*TMath::DegToRad(); }", (void*) NULL, 0);
   G__memfunc_setup("RotationAngle",1335,G__PointingCint_228_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'MObservatory' - 11 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotationAngle",1335,G__PointingCint_228_0_19, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'MObservatory' - 11 - o u 'MTime' - 11 - t "
"U 'MPointingDev' - 10 '0' dev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotationAngle",1335,G__PointingCint_228_0_20, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'MObservatory' - 11 - o U 'MTime' - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFits",935,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'fits' - 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PointingCint_228_0_22, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointingPos::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_228_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPos::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_228_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointingPos::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_228_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointingPos::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_228_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_228_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPos::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_228_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPos::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_228_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPos::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_228_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPos::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointingPos", 1349, G__PointingCint_228_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointingPosCalc(void) {
   /* MPointingPosCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc));
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MPointingPosCalc",1594,G__PointingCint_231_0_4, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingPosCalc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_231_0_5, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointingPosCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_231_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_231_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointingPosCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_231_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointingPosCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_231_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_231_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_231_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPosCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_231_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_231_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPosCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointingPosCalc", 1720, G__PointingCint_231_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMPointingPosInterpolate(void) {
   /* MPointingPosInterpolate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDriveReport",1522,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MPointingPosInterpolate",2382,G__PointingCint_256_0_5, 105, G__get_linked_tagnum(&G__PointingCintLN_MPointingPosInterpolate), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFiles",764,G__PointingCint_256_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MDirIter' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,G__PointingCint_256_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMode",1088,G__PointingCint_256_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MPointingPosInterpolate::TimeMode_t' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__PointingCint_256_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumStartEvents",1747,G__PointingCint_256_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumStartEvents",1759,G__PointingCint_256_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 'fgNumStartEvents' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_256_0_13, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MPointingPosInterpolate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_256_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosInterpolate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_256_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MPointingPosInterpolate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_256_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MPointingPosInterpolate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_256_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_256_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosInterpolate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_256_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPosInterpolate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_256_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MPointingPosInterpolate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_256_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MPointingPosInterpolate::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MPointingPosInterpolate", 2508, G__PointingCint_256_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHPointing(void) {
   /* MHPointing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MHPointing));
   G__memfunc_setup("ResetGraph",1013,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TGraph' - 1 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGraph",902,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TGraph' - 1 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"u 'TGraph' - 1 - g d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawGraph",896,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'TGraph' - 1 - g C - - 10 '0' y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateRightAxis",1526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'TGraph' - 1 - g1 u 'TGraph' - 1 - g2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawRightAxis",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHPointing",989,G__PointingCint_292_0_7, 105, G__get_linked_tagnum(&G__PointingCintLN_MHPointing), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PointingCint_292_0_12, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHPointing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_292_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPointing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_292_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHPointing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_292_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHPointing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_292_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_292_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPointing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_292_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPointing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_292_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPointing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_292_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPointing::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHPointing", 1115, G__PointingCint_292_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHSrcPosCam(void) {
   /* MHSrcPosCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam));
   G__memfunc_setup("MHSrcPosCam",1024,G__PointingCint_297_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_MHSrcPosCam), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 '0.4' wobble C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHist",696,G__PointingCint_297_0_4, 117, G__get_linked_tagnum(&G__PointingCintLN_TH2D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist",696,G__PointingCint_297_0_5, 117, G__get_linked_tagnum(&G__PointingCintLN_TH2D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PointingCint_297_0_8, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHSrcPosCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_297_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSrcPosCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_297_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHSrcPosCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_297_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHSrcPosCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_297_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_297_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSrcPosCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_297_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSrcPosCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_297_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSrcPosCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_297_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSrcPosCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHSrcPosCam", 1150, G__PointingCint_297_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSrcPosCam(void) {
   /* MSrcPosCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam));
   G__memfunc_setup("MSrcPosCam",952,G__PointingCint_298_0_1, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSrcPosCam",952,G__PointingCint_298_0_2, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCam), -1, 0, 1, 1, 1, 0, "u 'MSrcPosCam' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetX",388,G__PointingCint_298_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY",389,G__PointingCint_298_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXY",477,G__PointingCint_298_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXY",477,G__PointingCint_298_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__PointingCint_298_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__PointingCint_298_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__PointingCint_298_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__PointingCint_298_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXY",465,G__PointingCint_298_0_12, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFits",935,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'fits' - 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PointingCint_298_0_17, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSrcPosCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_298_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_298_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSrcPosCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_298_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSrcPosCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_298_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_298_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_298_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_298_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_298_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSrcPosCam", 1078, G__PointingCint_298_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSrcPosCalc(void) {
   /* MSrcPosCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc));
   G__memfunc_setup("SetSrcPos",902,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TVector2' - 0 'TVector2()' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PointingCintLN_TVector2), -1, 0, 3, 1, 4, 8, 
"u 'TVector2' - 0 - v i - 'Int_t' 0 - pass "
"i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRaDec",735,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PointingCintLN_TString), -1, 0, 1, 1, 4, 8, "u 'MPointingPos' - 11 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoordinate",1320,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"u 'TString' - 0 - str d - 'Double_t' 1 - ret", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FreeSourcePos",1317,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcResult",1010,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'MVector3' - 11 - pos0 u 'MVector3' - 11 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFixedPos",1206,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSrcPosCalc",1050,G__PointingCint_303_0_12, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSourcePos",1231,G__PointingCint_303_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MPointingPos' - 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSourcePos",1231,G__PointingCint_303_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - ra d - 'Double_t' 0 - dec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__PointingCint_303_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", "Make MSrcPosCalc owner of fSourcePos", (void*) NULL, 0);
   G__memfunc_setup("SetMode",689,G__PointingCint_303_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MSrcPosCalc::Mode_t' - 0 'kDefault' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCallback",1081,G__PointingCint_303_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTaskList' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumRandomOffPositions",2464,G__PointingCint_303_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_303_0_19, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSrcPosCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_303_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_303_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSrcPosCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_303_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSrcPosCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_303_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_303_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_303_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_303_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_303_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSrcPosCalc", 1176, G__PointingCint_303_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSrcPosRndm(void) {
   /* MSrcPosRndm */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSrcPosRndm",1080,G__PointingCint_306_0_3, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosRndm), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDistOfSource",1510,G__PointingCint_306_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_306_0_5, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSrcPosRndm::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_306_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosRndm::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_306_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSrcPosRndm::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_306_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSrcPosRndm::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_306_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_306_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosRndm::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_306_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosRndm::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_306_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosRndm::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_306_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosRndm::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSrcPosRndm", 1206, G__PointingCint_306_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSrcPosCorrect(void) {
   /* MSrcPosCorrect */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect));
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSrcPosCorrect",1401,G__PointingCint_307_0_5, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosCorrect), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_307_0_6, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSrcPosCorrect::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_307_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCorrect::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_307_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSrcPosCorrect::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_307_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSrcPosCorrect::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_307_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_307_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCorrect::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_307_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCorrect::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_307_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosCorrect::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_307_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosCorrect::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSrcPosCorrect", 1527, G__PointingCint_307_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSrcPosFromModel(void) {
   /* MSrcPosFromModel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSrcPosFromModel",1580,G__PointingCint_308_0_3, 105, G__get_linked_tagnum(&G__PointingCintLN_MSrcPosFromModel), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PointingCint_308_0_4, 85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSrcPosFromModel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PointingCint_308_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosFromModel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PointingCint_308_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSrcPosFromModel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PointingCint_308_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSrcPosFromModel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PointingCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PointingCint_308_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PointingCint_308_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosFromModel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PointingCint_308_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosFromModel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PointingCint_308_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSrcPosFromModel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PointingCint_308_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSrcPosFromModel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSrcPosFromModel", 1706, G__PointingCint_308_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPointingCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPointingCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPointingCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__PointingCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__PointingCintLN_fits = { "fits" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_AltAz = { "AltAz" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_ZdAz = { "ZdAz" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_RaDec = { "RaDec" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TMinuit = { "TMinuit" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointing = { "MPointing" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingcLcLdA = { "MPointing::$" , 101 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingDev = { "MPointingDev" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MReportStarguider = { "MReportStarguider" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingDevCalc = { "MPointingDevCalc" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MObservatory = { "MObservatory" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingPos = { "MPointingPos" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MReportDrive = { "MReportDrive" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingPosCalc = { "MPointingPosCalc" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_TSpline3 = { "TSpline3" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MDirIter = { "MDirIter" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingPosInterpolate = { "MPointingPosInterpolate" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t = { "MPointingPosInterpolate::TimeMode_t" , 101 , -1 };
G__linked_taginfo G__PointingCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MHPointing = { "MHPointing" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MHSrcPosCam = { "MHSrcPosCam" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosCam = { "MSrcPosCam" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MVector3 = { "MVector3" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MTaskList = { "MTaskList" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MMcRunHeader = { "MMcRunHeader" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MMcCorsikaRunHeader = { "MMcCorsikaRunHeader" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosCalc = { "MSrcPosCalc" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosCalccLcLMode_t = { "MSrcPosCalc::Mode_t" , 101 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosCalccLcLdA = { "MSrcPosCalc::$" , 101 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosRndm = { "MSrcPosRndm" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosCorrect = { "MSrcPosCorrect" , 99 , -1 };
G__linked_taginfo G__PointingCintLN_MSrcPosFromModel = { "MSrcPosFromModel" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePointingCint() {
  G__PointingCintLN_TClass.tagnum = -1 ;
  G__PointingCintLN_TBuffer.tagnum = -1 ;
  G__PointingCintLN_TMemberInspector.tagnum = -1 ;
  G__PointingCintLN_TObject.tagnum = -1 ;
  G__PointingCintLN_TString.tagnum = -1 ;
  G__PointingCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__PointingCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PointingCintLN_TClonesArray.tagnum = -1 ;
  G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__PointingCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PointingCintLN_TArrayD.tagnum = -1 ;
  G__PointingCintLN_TVector2.tagnum = -1 ;
  G__PointingCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__PointingCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__PointingCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__PointingCintLN_TVector3.tagnum = -1 ;
  G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__PointingCintLN_fits.tagnum = -1 ;
  G__PointingCintLN_TEnv.tagnum = -1 ;
  G__PointingCintLN_MParContainer.tagnum = -1 ;
  G__PointingCintLN_AltAz.tagnum = -1 ;
  G__PointingCintLN_ZdAz.tagnum = -1 ;
  G__PointingCintLN_RaDec.tagnum = -1 ;
  G__PointingCintLN_TMinuit.tagnum = -1 ;
  G__PointingCintLN_MPointing.tagnum = -1 ;
  G__PointingCintLN_MPointingcLcLdA.tagnum = -1 ;
  G__PointingCintLN_MPointingDev.tagnum = -1 ;
  G__PointingCintLN_MInputStreamID.tagnum = -1 ;
  G__PointingCintLN_MParList.tagnum = -1 ;
  G__PointingCintLN_MTask.tagnum = -1 ;
  G__PointingCintLN_TArrayI.tagnum = -1 ;
  G__PointingCintLN_MRawRunHeader.tagnum = -1 ;
  G__PointingCintLN_MReportStarguider.tagnum = -1 ;
  G__PointingCintLN_MPointingDevCalc.tagnum = -1 ;
  G__PointingCintLN_MTime.tagnum = -1 ;
  G__PointingCintLN_MObservatory.tagnum = -1 ;
  G__PointingCintLN_MPointingPos.tagnum = -1 ;
  G__PointingCintLN_MMcEvt.tagnum = -1 ;
  G__PointingCintLN_MReportDrive.tagnum = -1 ;
  G__PointingCintLN_MPointingPosCalc.tagnum = -1 ;
  G__PointingCintLN_TGraph.tagnum = -1 ;
  G__PointingCintLN_TSpline3.tagnum = -1 ;
  G__PointingCintLN_MDirIter.tagnum = -1 ;
  G__PointingCintLN_MPointingPosInterpolate.tagnum = -1 ;
  G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t.tagnum = -1 ;
  G__PointingCintLN_TH2D.tagnum = -1 ;
  G__PointingCintLN_MH.tagnum = -1 ;
  G__PointingCintLN_MHPointing.tagnum = -1 ;
  G__PointingCintLN_MGeomCam.tagnum = -1 ;
  G__PointingCintLN_MParameterD.tagnum = -1 ;
  G__PointingCintLN_MHSrcPosCam.tagnum = -1 ;
  G__PointingCintLN_MSrcPosCam.tagnum = -1 ;
  G__PointingCintLN_MVector3.tagnum = -1 ;
  G__PointingCintLN_MTaskList.tagnum = -1 ;
  G__PointingCintLN_MMcRunHeader.tagnum = -1 ;
  G__PointingCintLN_MMcCorsikaRunHeader.tagnum = -1 ;
  G__PointingCintLN_MSrcPosCalc.tagnum = -1 ;
  G__PointingCintLN_MSrcPosCalccLcLMode_t.tagnum = -1 ;
  G__PointingCintLN_MSrcPosCalccLcLdA.tagnum = -1 ;
  G__PointingCintLN_MSrcPosRndm.tagnum = -1 ;
  G__PointingCintLN_MSrcPosCorrect.tagnum = -1 ;
  G__PointingCintLN_MSrcPosFromModel.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePointingCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TString);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TVector2);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TVector3);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_fits);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MParContainer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_AltAz),sizeof(AltAz),-1,323840,(char*)NULL,G__setup_memvarAltAz,G__setup_memfuncAltAz);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_ZdAz),sizeof(ZdAz),-1,324352,(char*)NULL,G__setup_memvarZdAz,G__setup_memfuncZdAz);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_RaDec),sizeof(RaDec),-1,323840,(char*)NULL,G__setup_memvarRaDec,G__setup_memfuncRaDec);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TMinuit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointing),sizeof(MPointing),-1,324864,"Pointing Model for MAGIC",G__setup_memvarMPointing,G__setup_memfuncMPointing);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingDev),sizeof(MPointingDev),-1,323840,"Container storing the telescope mispointing",G__setup_memvarMPointingDev,G__setup_memfuncMPointingDev);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MReportStarguider);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingDevCalc),sizeof(MPointingDevCalc),-1,324864,"Task calculating the starguider correction",G__setup_memvarMPointingDevCalc,G__setup_memfuncMPointingDevCalc);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MTime);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MObservatory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingPos),sizeof(MPointingPos),-1,324352,"Container storing the (corrected) telescope pointing position",G__setup_memvarMPointingPos,G__setup_memfuncMPointingPos);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MMcEvt);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MReportDrive);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingPosCalc),sizeof(MPointingPosCalc),-1,323840,"Task calculating the pointing position",G__setup_memvarMPointingPosCalc,G__setup_memfuncMPointingPosCalc);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TGraph);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TSpline3);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MDirIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingPosInterpolate),sizeof(MPointingPosInterpolate),-1,324864,"Interpolate the drive pointing positions",G__setup_memvarMPointingPosInterpolate,G__setup_memfuncMPointingPosInterpolate);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MPointingPosInterpolatecLcLTimeMode_t);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_TH2D);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MHPointing),sizeof(MHPointing),-1,323840,"Histogram to display tracking/pointing information",G__setup_memvarMHPointing,G__setup_memfuncMHPointing);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MParameterD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MHSrcPosCam),sizeof(MHSrcPosCam),-1,323840,"Histogram for source position distribution",G__setup_memvarMHSrcPosCam,G__setup_memfuncMHSrcPosCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosCam),sizeof(MSrcPosCam),-1,324352,"container to store source position in the camera plain",G__setup_memvarMSrcPosCam,G__setup_memfuncMSrcPosCam);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MVector3);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MTaskList);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MMcRunHeader);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MMcCorsikaRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosCalc),sizeof(MSrcPosCalc),-1,324864,"Calculates the source position in the camera",G__setup_memvarMSrcPosCalc,G__setup_memfuncMSrcPosCalc);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosCalccLcLMode_t);
   G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosCalccLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosRndm),sizeof(MSrcPosRndm),-1,323840,"Overwrite the source position with a random one from MHSrcPosCam",G__setup_memvarMSrcPosRndm,G__setup_memfuncMSrcPosRndm);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosCorrect),sizeof(MSrcPosCorrect),-1,323840,"Corrects MSrcPosCam for missfocussing",G__setup_memvarMSrcPosCorrect,G__setup_memfuncMSrcPosCorrect);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PointingCintLN_MSrcPosFromModel),sizeof(MSrcPosFromModel),-1,324864,"Calculates the source position from a corrected pointing model",G__setup_memvarMSrcPosFromModel,G__setup_memfuncMSrcPosFromModel);
}
extern "C" void G__cpp_setupPointingCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupPointingCint()");
  G__set_cpp_environmentPointingCint();
  G__cpp_setup_tagtablePointingCint();

  G__cpp_setup_inheritancePointingCint();

  G__cpp_setup_typetablePointingCint();

  G__cpp_setup_memvarPointingCint();

  G__cpp_setup_memfuncPointingCint();
  G__cpp_setup_globalPointingCint();
  G__cpp_setup_funcPointingCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPointingCint();
  return;
}
class G__cpp_setup_initPointingCint {
  public:
    G__cpp_setup_initPointingCint() { G__add_setup_func("PointingCint",(G__incsetup)(&G__cpp_setupPointingCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPointingCint() { G__remove_setup_func("PointingCint"); }
};
G__cpp_setup_initPointingCint G__cpp_setup_initializerPointingCint;

