//
// File generated by rootcint at Mon Nov 28 11:07:27 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME OptimCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "OptimCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MJOptimizeBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MJOptimizeBase(void *p = 0);
   static void *newArray_MJOptimizeBase(Long_t size, void *p);
   static void delete_MJOptimizeBase(void *p);
   static void deleteArray_MJOptimizeBase(void *p);
   static void destruct_MJOptimizeBase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MJOptimizeBase*)
   {
      ::MJOptimizeBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MJOptimizeBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MJOptimizeBase", ::MJOptimizeBase::Class_Version(), "./MJOptimizeBase.h", 12,
                  typeid(::MJOptimizeBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MJOptimizeBase::Dictionary, isa_proxy, 4,
                  sizeof(::MJOptimizeBase) );
      instance.SetNew(&new_MJOptimizeBase);
      instance.SetNewArray(&newArray_MJOptimizeBase);
      instance.SetDelete(&delete_MJOptimizeBase);
      instance.SetDeleteArray(&deleteArray_MJOptimizeBase);
      instance.SetDestructor(&destruct_MJOptimizeBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MJOptimizeBase*)
   {
      return GenerateInitInstanceLocal((::MJOptimizeBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MJOptimizeBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MJOptimize_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MJOptimize(void *p = 0);
   static void *newArray_MJOptimize(Long_t size, void *p);
   static void delete_MJOptimize(void *p);
   static void deleteArray_MJOptimize(void *p);
   static void destruct_MJOptimize(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MJOptimize*)
   {
      ::MJOptimize *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MJOptimize >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MJOptimize", ::MJOptimize::Class_Version(), "./MJOptimize.h", 30,
                  typeid(::MJOptimize), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MJOptimize::Dictionary, isa_proxy, 4,
                  sizeof(::MJOptimize) );
      instance.SetNew(&new_MJOptimize);
      instance.SetNewArray(&newArray_MJOptimize);
      instance.SetDelete(&delete_MJOptimize);
      instance.SetDeleteArray(&deleteArray_MJOptimize);
      instance.SetDestructor(&destruct_MJOptimize);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MJOptimize*)
   {
      return GenerateInitInstanceLocal((::MJOptimize*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MJOptimize*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MJOptimizeCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MJOptimizeCuts(void *p = 0);
   static void *newArray_MJOptimizeCuts(Long_t size, void *p);
   static void delete_MJOptimizeCuts(void *p);
   static void deleteArray_MJOptimizeCuts(void *p);
   static void destruct_MJOptimizeCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MJOptimizeCuts*)
   {
      ::MJOptimizeCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MJOptimizeCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MJOptimizeCuts", ::MJOptimizeCuts::Class_Version(), "./MJOptimizeCuts.h", 11,
                  typeid(::MJOptimizeCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MJOptimizeCuts::Dictionary, isa_proxy, 4,
                  sizeof(::MJOptimizeCuts) );
      instance.SetNew(&new_MJOptimizeCuts);
      instance.SetNewArray(&newArray_MJOptimizeCuts);
      instance.SetDelete(&delete_MJOptimizeCuts);
      instance.SetDeleteArray(&deleteArray_MJOptimizeCuts);
      instance.SetDestructor(&destruct_MJOptimizeCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MJOptimizeCuts*)
   {
      return GenerateInitInstanceLocal((::MJOptimizeCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MJOptimizeCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MJOptimizeDisp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MJOptimizeDisp(void *p = 0);
   static void *newArray_MJOptimizeDisp(Long_t size, void *p);
   static void delete_MJOptimizeDisp(void *p);
   static void deleteArray_MJOptimizeDisp(void *p);
   static void destruct_MJOptimizeDisp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MJOptimizeDisp*)
   {
      ::MJOptimizeDisp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MJOptimizeDisp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MJOptimizeDisp", ::MJOptimizeDisp::Class_Version(), "./MJOptimizeDisp.h", 11,
                  typeid(::MJOptimizeDisp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MJOptimizeDisp::Dictionary, isa_proxy, 4,
                  sizeof(::MJOptimizeDisp) );
      instance.SetNew(&new_MJOptimizeDisp);
      instance.SetNewArray(&newArray_MJOptimizeDisp);
      instance.SetDelete(&delete_MJOptimizeDisp);
      instance.SetDeleteArray(&deleteArray_MJOptimizeDisp);
      instance.SetDestructor(&destruct_MJOptimizeDisp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MJOptimizeDisp*)
   {
      return GenerateInitInstanceLocal((::MJOptimizeDisp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MJOptimizeDisp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MJOptimizeEnergy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MJOptimizeEnergy(void *p = 0);
   static void *newArray_MJOptimizeEnergy(Long_t size, void *p);
   static void delete_MJOptimizeEnergy(void *p);
   static void deleteArray_MJOptimizeEnergy(void *p);
   static void destruct_MJOptimizeEnergy(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MJOptimizeEnergy*)
   {
      ::MJOptimizeEnergy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MJOptimizeEnergy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MJOptimizeEnergy", ::MJOptimizeEnergy::Class_Version(), "./MJOptimizeEnergy.h", 11,
                  typeid(::MJOptimizeEnergy), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MJOptimizeEnergy::Dictionary, isa_proxy, 4,
                  sizeof(::MJOptimizeEnergy) );
      instance.SetNew(&new_MJOptimizeEnergy);
      instance.SetNewArray(&newArray_MJOptimizeEnergy);
      instance.SetDelete(&delete_MJOptimizeEnergy);
      instance.SetDeleteArray(&deleteArray_MJOptimizeEnergy);
      instance.SetDestructor(&destruct_MJOptimizeEnergy);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MJOptimizeEnergy*)
   {
      return GenerateInitInstanceLocal((::MJOptimizeEnergy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MJOptimizeEnergy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MJOptimizeBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MJOptimizeBase::Class_Name()
{
   return "MJOptimizeBase";
}

//______________________________________________________________________________
const char *MJOptimizeBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MJOptimizeBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MJOptimizeBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MJOptimizeBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MJOptimize::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MJOptimize::Class_Name()
{
   return "MJOptimize";
}

//______________________________________________________________________________
const char *MJOptimize::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimize*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MJOptimize::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimize*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MJOptimize::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimize*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MJOptimize::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimize*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MJOptimizeCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MJOptimizeCuts::Class_Name()
{
   return "MJOptimizeCuts";
}

//______________________________________________________________________________
const char *MJOptimizeCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MJOptimizeCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MJOptimizeCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MJOptimizeCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MJOptimizeDisp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MJOptimizeDisp::Class_Name()
{
   return "MJOptimizeDisp";
}

//______________________________________________________________________________
const char *MJOptimizeDisp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeDisp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MJOptimizeDisp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeDisp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MJOptimizeDisp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeDisp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MJOptimizeDisp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeDisp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MJOptimizeEnergy::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MJOptimizeEnergy::Class_Name()
{
   return "MJOptimizeEnergy";
}

//______________________________________________________________________________
const char *MJOptimizeEnergy::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeEnergy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MJOptimizeEnergy::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeEnergy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MJOptimizeEnergy::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeEnergy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MJOptimizeEnergy::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MJOptimizeEnergy*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MJOptimize::Streamer(TBuffer &R__b)
{
   // Stream an object of class MJOptimize.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MJOptimize::Class(),this);
   } else {
      R__b.WriteClassBuffer(MJOptimize::Class(),this);
   }
}

//______________________________________________________________________________
void MJOptimize::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MJOptimize.
      TClass *R__cl = ::MJOptimize::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilter", &fFilter);
      R__insp.InspectMember(fFilter, "fFilter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtLoop", &fEvtLoop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameters", &fParameters);
      R__insp.InspectMember(fParameters, "fParameters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLimLo", &fLimLo);
      R__insp.InspectMember(fLimLo, "fLimLo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLimUp", &fLimUp);
      R__insp.InspectMember(fLimUp, "fLimUp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStep", &fStep);
      R__insp.InspectMember(fStep, "fStep.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumMaxCalls", &fNumMaxCalls);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTolerance", &fTolerance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestTrain", &fTestTrain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameMinimizationValue", &fNameMinimizationValue);
      R__insp.InspectMember(fNameMinimizationValue, "fNameMinimizationValue.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamesOn", &fNamesOn);
      R__insp.InspectMember(fNamesOn, "fNamesOn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamesOff", &fNamesOff);
      R__insp.InspectMember(fNamesOff, "fNamesOff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameOut", &fNameOut);
      R__insp.InspectMember(fNameOut, "fNameOut.");
      MJOptimizeBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MJOptimize(void *p) {
      return  p ? new(p) ::MJOptimize : new ::MJOptimize;
   }
   static void *newArray_MJOptimize(Long_t nElements, void *p) {
      return p ? new(p) ::MJOptimize[nElements] : new ::MJOptimize[nElements];
   }
   // Wrapper around operator delete
   static void delete_MJOptimize(void *p) {
      delete ((::MJOptimize*)p);
   }
   static void deleteArray_MJOptimize(void *p) {
      delete [] ((::MJOptimize*)p);
   }
   static void destruct_MJOptimize(void *p) {
      typedef ::MJOptimize current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MJOptimize

//______________________________________________________________________________
void MJOptimizeBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class MJOptimizeBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MJOptimizeBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(MJOptimizeBase::Class(),this);
   }
}

//______________________________________________________________________________
void MJOptimizeBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MJOptimizeBase.
      TClass *R__cl = ::MJOptimizeBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDebug", &fDebug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnableWeights", &fEnableWeights);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRules", &fRules);
      R__insp.InspectMember(fRules, "fRules.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrainParameters", &fTrainParameters);
      R__insp.InspectMember(fTrainParameters, "fTrainParameters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreCuts", &fPreCuts);
      R__insp.InspectMember(fPreCuts, "fPreCuts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrainCuts", &fTrainCuts);
      R__insp.InspectMember(fTrainCuts, "fTrainCuts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestCuts", &fTestCuts);
      R__insp.InspectMember(fTestCuts, "fTestCuts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreTasks", &fPreTasks);
      R__insp.InspectMember(fPreTasks, "fPreTasks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPostTasks", &fPostTasks);
      R__insp.InspectMember(fPostTasks, "fPostTasks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestTasks", &fTestTasks);
      R__insp.InspectMember(fTestTasks, "fTestTasks.");
      MJob::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MJOptimizeBase(void *p) {
      return  p ? new(p) ::MJOptimizeBase : new ::MJOptimizeBase;
   }
   static void *newArray_MJOptimizeBase(Long_t nElements, void *p) {
      return p ? new(p) ::MJOptimizeBase[nElements] : new ::MJOptimizeBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_MJOptimizeBase(void *p) {
      delete ((::MJOptimizeBase*)p);
   }
   static void deleteArray_MJOptimizeBase(void *p) {
      delete [] ((::MJOptimizeBase*)p);
   }
   static void destruct_MJOptimizeBase(void *p) {
      typedef ::MJOptimizeBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MJOptimizeBase

//______________________________________________________________________________
void MJOptimizeCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class MJOptimizeCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MJOptimizeCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(MJOptimizeCuts::Class(),this);
   }
}

//______________________________________________________________________________
void MJOptimizeCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MJOptimizeCuts.
      TClass *R__cl = ::MJOptimizeCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameHist", &fNameHist);
      R__insp.InspectMember(fNameHist, "fNameHist.");
      MJOptimize::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MJOptimizeCuts(void *p) {
      return  p ? new(p) ::MJOptimizeCuts : new ::MJOptimizeCuts;
   }
   static void *newArray_MJOptimizeCuts(Long_t nElements, void *p) {
      return p ? new(p) ::MJOptimizeCuts[nElements] : new ::MJOptimizeCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_MJOptimizeCuts(void *p) {
      delete ((::MJOptimizeCuts*)p);
   }
   static void deleteArray_MJOptimizeCuts(void *p) {
      delete [] ((::MJOptimizeCuts*)p);
   }
   static void destruct_MJOptimizeCuts(void *p) {
      typedef ::MJOptimizeCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MJOptimizeCuts

//______________________________________________________________________________
void MJOptimizeDisp::Streamer(TBuffer &R__b)
{
   // Stream an object of class MJOptimizeDisp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MJOptimizeDisp::Class(),this);
   } else {
      R__b.WriteClassBuffer(MJOptimizeDisp::Class(),this);
   }
}

//______________________________________________________________________________
void MJOptimizeDisp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MJOptimizeDisp.
      TClass *R__cl = ::MJOptimizeDisp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseThetaSq", &fUseThetaSq);
      MJOptimize::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MJOptimizeDisp(void *p) {
      return  p ? new(p) ::MJOptimizeDisp : new ::MJOptimizeDisp;
   }
   static void *newArray_MJOptimizeDisp(Long_t nElements, void *p) {
      return p ? new(p) ::MJOptimizeDisp[nElements] : new ::MJOptimizeDisp[nElements];
   }
   // Wrapper around operator delete
   static void delete_MJOptimizeDisp(void *p) {
      delete ((::MJOptimizeDisp*)p);
   }
   static void deleteArray_MJOptimizeDisp(void *p) {
      delete [] ((::MJOptimizeDisp*)p);
   }
   static void destruct_MJOptimizeDisp(void *p) {
      typedef ::MJOptimizeDisp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MJOptimizeDisp

//______________________________________________________________________________
void MJOptimizeEnergy::Streamer(TBuffer &R__b)
{
   // Stream an object of class MJOptimizeEnergy.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MJOptimizeEnergy::Class(),this);
   } else {
      R__b.WriteClassBuffer(MJOptimizeEnergy::Class(),this);
   }
}

//______________________________________________________________________________
void MJOptimizeEnergy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MJOptimizeEnergy.
      TClass *R__cl = ::MJOptimizeEnergy::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOptimLog", &fOptimLog);
      MJOptimize::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MJOptimizeEnergy(void *p) {
      return  p ? new(p) ::MJOptimizeEnergy : new ::MJOptimizeEnergy;
   }
   static void *newArray_MJOptimizeEnergy(Long_t nElements, void *p) {
      return p ? new(p) ::MJOptimizeEnergy[nElements] : new ::MJOptimizeEnergy[nElements];
   }
   // Wrapper around operator delete
   static void delete_MJOptimizeEnergy(void *p) {
      delete ((::MJOptimizeEnergy*)p);
   }
   static void deleteArray_MJOptimizeEnergy(void *p) {
      delete [] ((::MJOptimizeEnergy*)p);
   }
   static void destruct_MJOptimizeEnergy(void *p) {
      typedef ::MJOptimizeEnergy current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MJOptimizeEnergy

/********************************************************
* OptimCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableOptimCint();

extern "C" void G__set_cpp_environmentOptimCint() {
  G__cpp_reset_tagtableOptimCint();
}
#include <new>
extern "C" int G__cpp_dllrevOptimCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MJOptimizeBase */
static int G__OptimCint_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MJOptimizeBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeBase[n];
     } else {
       p = new((void*) gvp) MJOptimizeBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeBase;
     } else {
       p = new((void*) gvp) MJOptimizeBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimizeBase*) G__getstructoffset())->SetDebug((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimizeBase*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MJOptimizeBase*) G__getstructoffset())->AddParameter((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddPreTask((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MJOptimizeBase*) G__getstructoffset())->AddPreTask((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MJOptimizeBase*) G__getstructoffset())->AddPreTask((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddPreCut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddPreCut((MFilter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddTrainCut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddTrainCut((MFilter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddTestCut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddTestCut((MFilter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddPostTask((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MJOptimizeBase*) G__getstructoffset())->AddPostTask((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MJOptimizeBase*) G__getstructoffset())->AddPostTask((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->AddTestTask((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MJOptimizeBase*) G__getstructoffset())->AddTestTask((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MJOptimizeBase*) G__getstructoffset())->AddTestTask((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->SetWeights((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->SetWeights((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MJOptimizeBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MJOptimizeBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MJOptimizeBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_191_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MJOptimizeBase G__TMJOptimizeBase;
static int G__OptimCint_191_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MJOptimizeBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MJOptimizeBase*) (soff+(sizeof(MJOptimizeBase)*i)))->~G__TMJOptimizeBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MJOptimizeBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MJOptimizeBase*) (soff))->~G__TMJOptimizeBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MJOptimize */
static int G__OptimCint_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MJOptimize* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimize[n];
     } else {
       p = new((void*) gvp) MJOptimize[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimize;
     } else {
       p = new((void*) gvp) MJOptimize;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__OptimCintLN_MJOptimize));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MJOptimize*) G__getstructoffset())->AddSequenceOn((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MJOptimize*) G__getstructoffset())->AddSequenceOn((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MJOptimize*) G__getstructoffset())->AddSequenceOff((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MJOptimize*) G__getstructoffset())->AddSequenceOff((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->ResetSequences();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->AddFilter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->SetNumEvents((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->SetDebug((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimize*) G__getstructoffset())->SetNameOut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimize*) G__getstructoffset())->SetNameOut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->SetOptimizer((MJOptimize::Optimizer_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimize*) G__getstructoffset())->SetNumMaxCalls((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimize*) G__getstructoffset())->SetNumMaxCalls();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimize*) G__getstructoffset())->SetTolerance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimize*) G__getstructoffset())->SetTolerance();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimize*) G__getstructoffset())->EnableTestTrain((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimize*) G__getstructoffset())->EnableTestTrain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimize*) G__getstructoffset())->SetNameMinimizationValue((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimize*) G__getstructoffset())->SetNameMinimizationValue();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->SetParameters(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((MJOptimize*) G__getstructoffset())->SetParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MJOptimize*) G__getstructoffset())->SetParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MJOptimize*) G__getstructoffset())->SetParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MJOptimize*) G__getstructoffset())->SetParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((MJOptimize*) G__getstructoffset())->FixParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MJOptimize*) G__getstructoffset())->FixParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MJOptimize*) G__getstructoffset())->FixParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MJOptimize*) G__getstructoffset())->FixParameter((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayD& obj = ((const MJOptimize*) G__getstructoffset())->GetParameters();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MJOptimize*) G__getstructoffset())->Optimize(*(MParList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MJOptimize::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimize::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MJOptimize::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MJOptimize::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimize*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimize::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimize::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimize::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_202_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimize::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MJOptimize G__TMJOptimize;
static int G__OptimCint_202_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MJOptimize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MJOptimize*) (soff+(sizeof(MJOptimize)*i)))->~G__TMJOptimize();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MJOptimize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MJOptimize*) (soff))->~G__TMJOptimize();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MJOptimizeCuts */
static int G__OptimCint_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MJOptimizeCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeCuts((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MJOptimizeCuts((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MJOptimizeCuts[n];
       } else {
         p = new((void*) gvp) MJOptimizeCuts[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MJOptimizeCuts;
       } else {
         p = new((void*) gvp) MJOptimizeCuts;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0]), (MFilter*) G__int(libp->para[1])
, (MAlphaFitter*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0]), (MFilter*) G__int(libp->para[1])
, (MAlphaFitter*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0]), (MFilter*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((MFilter*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((MFilter*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((MFilter*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((MAlphaFitter*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff((MAlphaFitter*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOnOff());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((const char*) G__int(libp->para[0]), (MFilter*) G__int(libp->para[1])
, (MAlphaFitter*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((const char*) G__int(libp->para[0]), (MFilter*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((const char*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((MFilter*) G__int(libp->para[0]), (MAlphaFitter*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((MFilter*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn((MAlphaFitter*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MJOptimizeCuts*) G__getstructoffset())->RunOn());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MJOptimizeCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MJOptimizeCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MJOptimizeCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MJOptimizeCuts G__TMJOptimizeCuts;
static int G__OptimCint_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MJOptimizeCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MJOptimizeCuts*) (soff+(sizeof(MJOptimizeCuts)*i)))->~G__TMJOptimizeCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MJOptimizeCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MJOptimizeCuts*) (soff))->~G__TMJOptimizeCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MJOptimizeDisp */
static int G__OptimCint_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MJOptimizeDisp* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeDisp[n];
     } else {
       p = new((void*) gvp) MJOptimizeDisp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeDisp;
     } else {
       p = new((void*) gvp) MJOptimizeDisp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimizeDisp*) G__getstructoffset())->EnableThetaSq((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimizeDisp*) G__getstructoffset())->EnableThetaSq();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeDisp*) G__getstructoffset())->RunDisp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (MTask*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeDisp*) G__getstructoffset())->RunDisp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeDisp*) G__getstructoffset())->RunDisp((const char*) G__int(libp->para[0]), (MTask*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeDisp*) G__getstructoffset())->RunDisp((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MJOptimizeDisp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeDisp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MJOptimizeDisp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MJOptimizeDisp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeDisp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeDisp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeDisp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeDisp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeDisp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MJOptimizeDisp G__TMJOptimizeDisp;
static int G__OptimCint_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MJOptimizeDisp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MJOptimizeDisp*) (soff+(sizeof(MJOptimizeDisp)*i)))->~G__TMJOptimizeDisp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MJOptimizeDisp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MJOptimizeDisp*) (soff))->~G__TMJOptimizeDisp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MJOptimizeEnergy */
static int G__OptimCint_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MJOptimizeEnergy* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeEnergy[n];
     } else {
       p = new((void*) gvp) MJOptimizeEnergy[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MJOptimizeEnergy;
     } else {
       p = new((void*) gvp) MJOptimizeEnergy;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MJOptimizeEnergy*) G__getstructoffset())->EnableOptimLog((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MJOptimizeEnergy*) G__getstructoffset())->EnableOptimLog();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MJOptimizeEnergy*) G__getstructoffset())->RunEnergy((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (MTask*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeEnergy*) G__getstructoffset())->RunEnergy((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MJOptimizeEnergy*) G__getstructoffset())->RunEnergy((const char*) G__int(libp->para[0]), (MTask*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MJOptimizeEnergy*) G__getstructoffset())->RunEnergy((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MJOptimizeEnergy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeEnergy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MJOptimizeEnergy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MJOptimizeEnergy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MJOptimizeEnergy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeEnergy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeEnergy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MJOptimizeEnergy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__OptimCint_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MJOptimizeEnergy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MJOptimizeEnergy G__TMJOptimizeEnergy;
static int G__OptimCint_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MJOptimizeEnergy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MJOptimizeEnergy*) (soff+(sizeof(MJOptimizeEnergy)*i)))->~G__TMJOptimizeEnergy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MJOptimizeEnergy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MJOptimizeEnergy*) (soff))->~G__TMJOptimizeEnergy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MJOptimizeBase */

/* MJOptimize */

/* MJOptimizeCuts */

/* MJOptimizeDisp */

/* MJOptimizeEnergy */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncOptimCint {
 public:
  G__Sizep2memfuncOptimCint(): p(&G__Sizep2memfuncOptimCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncOptimCint::*p)();
};

size_t G__get_sizep2memfuncOptimCint()
{
  G__Sizep2memfuncOptimCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceOptimCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase))) {
     MJOptimizeBase *G__Lderived;
     G__Lderived=(MJOptimizeBase*)0x1000;
     {
       MJob *G__Lpbase=(MJob*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),G__get_linked_tagnum(&G__OptimCintLN_MJob),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),G__get_linked_tagnum(&G__OptimCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),G__get_linked_tagnum(&G__OptimCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize))) {
     MJOptimize *G__Lderived;
     G__Lderived=(MJOptimize*)0x1000;
     {
       MJOptimizeBase *G__Lpbase=(MJOptimizeBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MJob *G__Lpbase=(MJob*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),G__get_linked_tagnum(&G__OptimCintLN_MJob),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),G__get_linked_tagnum(&G__OptimCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),G__get_linked_tagnum(&G__OptimCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts))) {
     MJOptimizeCuts *G__Lderived;
     G__Lderived=(MJOptimizeCuts*)0x1000;
     {
       MJOptimize *G__Lpbase=(MJOptimize*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts),G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MJOptimizeBase *G__Lpbase=(MJOptimizeBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts),G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MJob *G__Lpbase=(MJob*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts),G__get_linked_tagnum(&G__OptimCintLN_MJob),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts),G__get_linked_tagnum(&G__OptimCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts),G__get_linked_tagnum(&G__OptimCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp))) {
     MJOptimizeDisp *G__Lderived;
     G__Lderived=(MJOptimizeDisp*)0x1000;
     {
       MJOptimize *G__Lpbase=(MJOptimize*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp),G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MJOptimizeBase *G__Lpbase=(MJOptimizeBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp),G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MJob *G__Lpbase=(MJob*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp),G__get_linked_tagnum(&G__OptimCintLN_MJob),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp),G__get_linked_tagnum(&G__OptimCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp),G__get_linked_tagnum(&G__OptimCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy))) {
     MJOptimizeEnergy *G__Lderived;
     G__Lderived=(MJOptimizeEnergy*)0x1000;
     {
       MJOptimize *G__Lpbase=(MJOptimize*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy),G__get_linked_tagnum(&G__OptimCintLN_MJOptimize),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MJOptimizeBase *G__Lpbase=(MJOptimizeBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy),G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MJob *G__Lpbase=(MJob*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy),G__get_linked_tagnum(&G__OptimCintLN_MJob),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy),G__get_linked_tagnum(&G__OptimCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy),G__get_linked_tagnum(&G__OptimCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableOptimCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__OptimCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__OptimCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__OptimCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__OptimCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MJOptimizeBase */
static void G__setup_memvarMJOptimizeBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase));
   { MJOptimizeBase *p; p=(MJOptimizeBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDebug=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fEnableWeights=",0,"Enable using weights");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fRules=",0,"Contains the parameters which can be accessed by matrix column");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fTrainParameters=",0,"Parameters in the last columns");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fPreCuts=",0,"Cuts executed for training and testing");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fTrainCuts=",0,"Cuts executed only in training");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fTestCuts=",0,"Cuts executed only in testing");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fPreTasks=",0,"Tasks executed before cut execution");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fPostTasks=",0,"Tasks executed after pre cut execution");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fTestTasks=",0,"Tasks executed at the end of the testing tasklist");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MJOptimize */
static void G__setup_memvarMJOptimize(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize));
   { MJOptimize *p; p=(MJOptimize*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kMigrad=%lldLL",(long long)MJOptimize::kMigrad).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kSimplex=%lldLL",(long long)MJOptimize::kSimplex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kMinimize=%lldLL",(long long)MJOptimize::kMinimize).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kMinos=%lldLL",(long long)MJOptimize::kMinos).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kImprove=%lldLL",(long long)MJOptimize::kImprove).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kSeek=%lldLL",(long long)MJOptimize::kSeek).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-2,1,G__FastAllocString(2048).Format("kNone=%lldLL",(long long)MJOptimize::kNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_MEvtLoop),-1,-1,4,"fEvtLoop=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TArrayD),-1,-1,4,"fParameters=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TArrayD),-1,-1,4,"fLimLo=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TArrayD),-1,-1,4,"fLimUp=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TArrayD),-1,-1,4,"fStep=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__OptimCintLN_MJOptimizecLcLOptimizer_t),-1,-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumMaxCalls=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTolerance=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTestTrain=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TString),-1,-1,4,"fNameMinimizationValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fNamesOn=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TList),-1,-1,2,"fNamesOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TString),-1,-1,2,"fNameOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MJOptimizeCuts */
static void G__setup_memvarMJOptimizeCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts));
   { MJOptimizeCuts *p; p=(MJOptimizeCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__OptimCintLN_TString),-1,-1,4,"fNameHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MJOptimizeDisp */
static void G__setup_memvarMJOptimizeDisp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp));
   { MJOptimizeDisp *p; p=(MJOptimizeDisp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseThetaSq=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MJOptimizeEnergy */
static void G__setup_memvarMJOptimizeEnergy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy));
   { MJOptimizeEnergy *p; p=(MJOptimizeEnergy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOptimLog=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__OptimCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarOptimCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMJOptimizeBase(void) {
   /* MJOptimizeBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase));
   G__memfunc_setup("AddCut",565,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'TList' - 1 - l C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPar",556,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'TList' - 1 - l C - - 10 - rule "
"C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'TList' - 1 - l U 'MTask' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MJOptimizeBase",1379,G__OptimCint_191_0_4, 105, G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__OptimCint_191_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParameter",1194,G__OptimCint_191_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreTask",963,G__OptimCint_191_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreTask",963,G__OptimCint_191_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - rule C - - 10 '\"MWeight\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreCut",860,G__OptimCint_191_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreCut",860,G__OptimCint_191_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MFilter' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrainCut",1075,G__OptimCint_191_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrainCut",1075,G__OptimCint_191_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MFilter' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTestCut",981,G__OptimCint_191_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTestCut",981,G__OptimCint_191_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MFilter' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPostTask",1090,G__OptimCint_191_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPostTask",1090,G__OptimCint_191_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - rule C - - 10 '\"MWeight\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTestTask",1084,G__OptimCint_191_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTestTask",1084,G__OptimCint_191_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - rule C - - 10 '\"MWeight\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeights",1031,G__OptimCint_191_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeights",1031,G__OptimCint_191_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__OptimCint_191_0_21, 85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MJOptimizeBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__OptimCint_191_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__OptimCint_191_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MJOptimizeBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__OptimCint_191_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MJOptimizeBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__OptimCint_191_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__OptimCint_191_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__OptimCint_191_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__OptimCint_191_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__OptimCint_191_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MJOptimizeBase", 1505, G__OptimCint_191_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMJOptimize(void) {
   /* MJOptimize */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimize));
   G__memfunc_setup("AddPoint",787,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"U 'TList' - 0 - l i - 'Int_t' 0 - idx "
"f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlots",818,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__OptimCintLN_TList), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fcn",311,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 3, 4, 0, 
"i - 'Int_t' 1 - npar D - 'Double_t' 0 - gin "
"d - 'Double_t' 1 - f D - 'Double_t' 0 - par "
"i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fcn",279,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"u 'TArrayD' - 11 - par U 'TMinuit' - 0 '0' minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Minuit",630,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"u 'TMinuit' - 1 - minuit C - - 10 - cmd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Migrad",596,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Simplex",738,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Minimize",834,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Seek",392,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Improve",738,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Minos",518,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TMinuit' - 1 - minuit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Optimize",849,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MEvtLoop' - 1 - evtloop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRulesToMatrix",1612,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'MHMatrix' - 1 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFilters",1258,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 8, 
"u 'MFilterList' - 1 - list U 'MFilter' - 0 '0' filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSequences",1205,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 8, 
"u 'MRead' - 1 - read u 'TList' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillMatrix",1020,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"u 'MReadTree' - 1 - read u 'MParList' - 1 - l "
"g - 'Bool_t' 0 'kFALSE' userules", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MJOptimize",1000,G__OptimCint_202_0_17, 105, G__get_linked_tagnum(&G__OptimCintLN_MJOptimize), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSequenceOn",1279,G__OptimCint_202_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSequenceOff",1373,G__OptimCint_202_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - fname C - - 10 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSequences",1455,G__OptimCint_202_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFilter",879,G__OptimCint_202_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__OptimCint_202_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__OptimCint_202_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameOut",997,G__OptimCint_202_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOptimizer",1263,G__OptimCint_202_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MJOptimize::Optimizer_t' - 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumMaxCalls",1393,G__OptimCint_202_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTolerance",1225,G__OptimCint_202_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0' tol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableTestTrain",1509,G__OptimCint_202_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' b", "Use 1 and -1", (void*) NULL, 0);
   G__memfunc_setup("SetNameMinimizationValue",2466,G__OptimCint_202_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MinimizationValue\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameters",1344,G__OptimCint_202_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameter",1229,G__OptimCint_202_0_31, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - idx d - 'Double_t' 0 - start "
"d - 'Double_t' 0 '0' lo d - 'Double_t' 0 '0' up "
"d - 'Double_t' 0 '-1' step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixParameter",1224,G__OptimCint_202_0_32, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - idx d - 'Double_t' 0 - start "
"d - 'Double_t' 0 '0' lo d - 'Double_t' 0 '0' up "
"d - 'Double_t' 0 '-1' step", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__OptimCint_202_0_33, 117, G__get_linked_tagnum(&G__OptimCintLN_TArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Optimize",849,G__OptimCint_202_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MParList' - 1 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__OptimCint_202_0_35, 85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MJOptimize::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__OptimCint_202_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimize::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__OptimCint_202_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MJOptimize::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__OptimCint_202_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MJOptimize::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__OptimCint_202_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__OptimCint_202_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimize::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__OptimCint_202_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimize::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__OptimCint_202_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimize::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__OptimCint_202_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimize::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MJOptimize", 1126, G__OptimCint_202_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMJOptimizeCuts(void) {
   /* MJOptimizeCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts));
   G__memfunc_setup("CreateNewHist",1302,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__OptimCintLN_MHAlpha), -1, 0, 1, 1, 4, 8, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnCore",891,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"u 'MHAlpha' - 1 - hist C - - 10 - fname "
"U 'MFilter' - 0 - filter U 'MAlphaFitter' - 0 - fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnOffCore",1174,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 4, 0, 
"u 'MHAlpha' - 1 - histon u 'MHAlpha' - 1 - histoff "
"C - - 10 - fname U 'MFilter' - 0 - filter "
"U 'MAlphaFitter' - 0 - fit C - - 10 - tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MJOptimizeCuts",1415,G__OptimCint_205_0_4, 105, G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeCuts), -1, 0, 1, 1, 1, 0, "C - - 10 '\"MHAlpha\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnOff",781,G__OptimCint_205_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - fname U 'MFilter' - 0 - filter "
"U 'MAlphaFitter' - 0 '0' fit C - - 10 '\"Events\"' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnOff",781,G__OptimCint_205_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - fname U 'MAlphaFitter' - 0 '0' fit "
"C - - 10 '\"Events\"' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnOff",781,G__OptimCint_205_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'MFilter' - 0 - filter U 'MAlphaFitter' - 0 '0' fit "
"C - - 10 '\"Events\"' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOnOff",781,G__OptimCint_205_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'MAlphaFitter' - 0 '0' fit C - - 10 '\"Events\"' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOn",498,G__OptimCint_205_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - fname U 'MFilter' - 0 - filter "
"U 'MAlphaFitter' - 0 '0' fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOn",498,G__OptimCint_205_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - fname U 'MAlphaFitter' - 0 '0' fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOn",498,G__OptimCint_205_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'MFilter' - 0 - filter U 'MAlphaFitter' - 0 '0' fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunOn",498,G__OptimCint_205_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MAlphaFitter' - 0 '0' fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__OptimCint_205_0_13, 85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MJOptimizeCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__OptimCint_205_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__OptimCint_205_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MJOptimizeCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__OptimCint_205_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MJOptimizeCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__OptimCint_205_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__OptimCint_205_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__OptimCint_205_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__OptimCint_205_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__OptimCint_205_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeCuts::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MJOptimizeCuts", 1541, G__OptimCint_205_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMJOptimizeDisp(void) {
   /* MJOptimizeDisp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp));
   G__memfunc_setup("MJOptimizeDisp",1400,G__OptimCint_206_0_1, 105, G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeDisp), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableThetaSq",1281,G__OptimCint_206_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunDisp",709,G__OptimCint_206_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - fname C - - 10 - rule "
"U 'MTask' - 0 '0' weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunDisp",709,G__OptimCint_206_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - rule U 'MTask' - 0 '0' weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__OptimCint_206_0_5, 85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MJOptimizeDisp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__OptimCint_206_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeDisp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__OptimCint_206_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MJOptimizeDisp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__OptimCint_206_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MJOptimizeDisp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__OptimCint_206_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__OptimCint_206_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeDisp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__OptimCint_206_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeDisp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__OptimCint_206_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeDisp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__OptimCint_206_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeDisp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MJOptimizeDisp", 1526, G__OptimCint_206_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMJOptimizeEnergy(void) {
   /* MJOptimizeEnergy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy));
   G__memfunc_setup("MJOptimizeEnergy",1618,G__OptimCint_207_0_1, 105, G__get_linked_tagnum(&G__OptimCintLN_MJOptimizeEnergy), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableOptimLog",1394,G__OptimCint_207_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunEnergy",927,G__OptimCint_207_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - fname C - - 10 - rule "
"U 'MTask' - 0 '0' weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunEnergy",927,G__OptimCint_207_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - rule U 'MTask' - 0 '0' weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__OptimCint_207_0_5, 85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MJOptimizeEnergy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__OptimCint_207_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeEnergy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__OptimCint_207_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MJOptimizeEnergy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__OptimCint_207_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MJOptimizeEnergy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__OptimCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__OptimCint_207_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__OptimCint_207_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeEnergy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__OptimCint_207_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeEnergy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__OptimCint_207_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MJOptimizeEnergy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__OptimCint_207_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MJOptimizeEnergy::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MJOptimizeEnergy", 1744, G__OptimCint_207_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncOptimCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalOptimCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcOptimCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__OptimCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__OptimCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MEvtLoop = { "MEvtLoop" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJob = { "MJob" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimizeBase = { "MJOptimizeBase" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_TMinuit = { "TMinuit" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MAlphaFitter = { "MAlphaFitter" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MFilterList = { "MFilterList" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MReadTree = { "MReadTree" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimize = { "MJOptimize" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimizecLcLOptimizer_t = { "MJOptimize::Optimizer_t" , 101 , -1 };
G__linked_taginfo G__OptimCintLN_MHAlpha = { "MHAlpha" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimizeCuts = { "MJOptimizeCuts" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimizeDisp = { "MJOptimizeDisp" , 99 , -1 };
G__linked_taginfo G__OptimCintLN_MJOptimizeEnergy = { "MJOptimizeEnergy" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableOptimCint() {
  G__OptimCintLN_TClass.tagnum = -1 ;
  G__OptimCintLN_TBuffer.tagnum = -1 ;
  G__OptimCintLN_TMemberInspector.tagnum = -1 ;
  G__OptimCintLN_TObject.tagnum = -1 ;
  G__OptimCintLN_TString.tagnum = -1 ;
  G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__OptimCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__OptimCintLN_TList.tagnum = -1 ;
  G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__OptimCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__OptimCintLN_TArrayD.tagnum = -1 ;
  G__OptimCintLN_MParContainer.tagnum = -1 ;
  G__OptimCintLN_MEvtLoop.tagnum = -1 ;
  G__OptimCintLN_MJob.tagnum = -1 ;
  G__OptimCintLN_MTask.tagnum = -1 ;
  G__OptimCintLN_MFilter.tagnum = -1 ;
  G__OptimCintLN_MJOptimizeBase.tagnum = -1 ;
  G__OptimCintLN_TMinuit.tagnum = -1 ;
  G__OptimCintLN_MAlphaFitter.tagnum = -1 ;
  G__OptimCintLN_MParList.tagnum = -1 ;
  G__OptimCintLN_MFilterList.tagnum = -1 ;
  G__OptimCintLN_MHMatrix.tagnum = -1 ;
  G__OptimCintLN_MRead.tagnum = -1 ;
  G__OptimCintLN_MReadTree.tagnum = -1 ;
  G__OptimCintLN_MJOptimize.tagnum = -1 ;
  G__OptimCintLN_MJOptimizecLcLOptimizer_t.tagnum = -1 ;
  G__OptimCintLN_MHAlpha.tagnum = -1 ;
  G__OptimCintLN_MJOptimizeCuts.tagnum = -1 ;
  G__OptimCintLN_MJOptimizeDisp.tagnum = -1 ;
  G__OptimCintLN_MJOptimizeEnergy.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableOptimCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TString);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TList);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MEvtLoop);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MJob);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimizeBase),sizeof(MJOptimizeBase),-1,323840,"Base class for all optimizations and trainings",G__setup_memvarMJOptimizeBase,G__setup_memfuncMJOptimizeBase);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_TMinuit);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MAlphaFitter);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MFilterList);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MHMatrix);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MRead);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MReadTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimize),sizeof(MJOptimize),-1,323840,"Class for optimization of the Supercuts",G__setup_memvarMJOptimize,G__setup_memfuncMJOptimize);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimizecLcLOptimizer_t);
   G__get_linked_tagnum_fwd(&G__OptimCintLN_MHAlpha);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimizeCuts),sizeof(MJOptimizeCuts),-1,323840,"Class for optimization of the Supercuts",G__setup_memvarMJOptimizeCuts,G__setup_memfuncMJOptimizeCuts);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimizeDisp),sizeof(MJOptimizeDisp),-1,323840,"Class for optimization of the Supercuts",G__setup_memvarMJOptimizeDisp,G__setup_memfuncMJOptimizeDisp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__OptimCintLN_MJOptimizeEnergy),sizeof(MJOptimizeEnergy),-1,323840,"Class for optimization of the Supercuts",G__setup_memvarMJOptimizeEnergy,G__setup_memfuncMJOptimizeEnergy);
}
extern "C" void G__cpp_setupOptimCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupOptimCint()");
  G__set_cpp_environmentOptimCint();
  G__cpp_setup_tagtableOptimCint();

  G__cpp_setup_inheritanceOptimCint();

  G__cpp_setup_typetableOptimCint();

  G__cpp_setup_memvarOptimCint();

  G__cpp_setup_memfuncOptimCint();
  G__cpp_setup_globalOptimCint();
  G__cpp_setup_funcOptimCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncOptimCint();
  return;
}
class G__cpp_setup_initOptimCint {
  public:
    G__cpp_setup_initOptimCint() { G__add_setup_func("OptimCint",(G__incsetup)(&G__cpp_setupOptimCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initOptimCint() { G__remove_setup_func("OptimCint"); }
};
G__cpp_setup_initOptimCint G__cpp_setup_initializerOptimCint;

