//
// File generated by rootcint at Mon Nov 28 11:06:02 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME HCalibCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "HCalibCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MHCalibrationPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationPix(void *p = 0);
   static void *newArray_MHCalibrationPix(Long_t size, void *p);
   static void delete_MHCalibrationPix(void *p);
   static void deleteArray_MHCalibrationPix(void *p);
   static void destruct_MHCalibrationPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationPix*)
   {
      ::MHCalibrationPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationPix", ::MHCalibrationPix::Class_Version(), "./MHCalibrationPix.h", 9,
                  typeid(::MHCalibrationPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationPix::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationPix) );
      instance.SetNew(&new_MHCalibrationPix);
      instance.SetNewArray(&newArray_MHCalibrationPix);
      instance.SetDelete(&delete_MHCalibrationPix);
      instance.SetDeleteArray(&deleteArray_MHCalibrationPix);
      instance.SetDestructor(&destruct_MHCalibrationPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationPix*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationCam(void *p = 0);
   static void *newArray_MHCalibrationCam(Long_t size, void *p);
   static void delete_MHCalibrationCam(void *p);
   static void deleteArray_MHCalibrationCam(void *p);
   static void destruct_MHCalibrationCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationCam*)
   {
      ::MHCalibrationCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationCam", ::MHCalibrationCam::Class_Version(), "./MHCalibrationCam.h", 37,
                  typeid(::MHCalibrationCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationCam) );
      instance.SetNew(&new_MHCalibrationCam);
      instance.SetNewArray(&newArray_MHCalibrationCam);
      instance.SetDelete(&delete_MHCalibrationCam);
      instance.SetDeleteArray(&deleteArray_MHCalibrationCam);
      instance.SetDestructor(&destruct_MHCalibrationCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationCam*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHGausEvents_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHGausEvents(void *p = 0);
   static void *newArray_MHGausEvents(Long_t size, void *p);
   static void delete_MHGausEvents(void *p);
   static void deleteArray_MHGausEvents(void *p);
   static void destruct_MHGausEvents(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHGausEvents*)
   {
      ::MHGausEvents *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHGausEvents >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHGausEvents", ::MHGausEvents::Class_Version(), "./MHGausEvents.h", 27,
                  typeid(::MHGausEvents), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHGausEvents::Dictionary, isa_proxy, 4,
                  sizeof(::MHGausEvents) );
      instance.SetNew(&new_MHGausEvents);
      instance.SetNewArray(&newArray_MHGausEvents);
      instance.SetDelete(&delete_MHGausEvents);
      instance.SetDeleteArray(&deleteArray_MHGausEvents);
      instance.SetDestructor(&destruct_MHGausEvents);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHGausEvents*)
   {
      return GenerateInitInstanceLocal((::MHGausEvents*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHGausEvents*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationChargePix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationChargePix(void *p = 0);
   static void *newArray_MHCalibrationChargePix(Long_t size, void *p);
   static void delete_MHCalibrationChargePix(void *p);
   static void deleteArray_MHCalibrationChargePix(void *p);
   static void destruct_MHCalibrationChargePix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationChargePix*)
   {
      ::MHCalibrationChargePix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationChargePix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationChargePix", ::MHCalibrationChargePix::Class_Version(), "./MHCalibrationChargePix.h", 9,
                  typeid(::MHCalibrationChargePix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationChargePix::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationChargePix) );
      instance.SetNew(&new_MHCalibrationChargePix);
      instance.SetNewArray(&newArray_MHCalibrationChargePix);
      instance.SetDelete(&delete_MHCalibrationChargePix);
      instance.SetDeleteArray(&deleteArray_MHCalibrationChargePix);
      instance.SetDestructor(&destruct_MHCalibrationChargePix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationChargePix*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationChargePix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationChargePix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationChargeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationChargeCam(void *p = 0);
   static void *newArray_MHCalibrationChargeCam(Long_t size, void *p);
   static void delete_MHCalibrationChargeCam(void *p);
   static void deleteArray_MHCalibrationChargeCam(void *p);
   static void destruct_MHCalibrationChargeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationChargeCam*)
   {
      ::MHCalibrationChargeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationChargeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationChargeCam", ::MHCalibrationChargeCam::Class_Version(), "./MHCalibrationChargeCam.h", 23,
                  typeid(::MHCalibrationChargeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationChargeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationChargeCam) );
      instance.SetNew(&new_MHCalibrationChargeCam);
      instance.SetNewArray(&newArray_MHCalibrationChargeCam);
      instance.SetDelete(&delete_MHCalibrationChargeCam);
      instance.SetDeleteArray(&deleteArray_MHCalibrationChargeCam);
      instance.SetDestructor(&destruct_MHCalibrationChargeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationChargeCam*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationChargeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationChargeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationChargeBlindPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationChargeBlindPix(void *p = 0);
   static void *newArray_MHCalibrationChargeBlindPix(Long_t size, void *p);
   static void delete_MHCalibrationChargeBlindPix(void *p);
   static void deleteArray_MHCalibrationChargeBlindPix(void *p);
   static void destruct_MHCalibrationChargeBlindPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationChargeBlindPix*)
   {
      ::MHCalibrationChargeBlindPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationChargeBlindPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationChargeBlindPix", ::MHCalibrationChargeBlindPix::Class_Version(), "./MHCalibrationChargeBlindPix.h", 25,
                  typeid(::MHCalibrationChargeBlindPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationChargeBlindPix::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationChargeBlindPix) );
      instance.SetNew(&new_MHCalibrationChargeBlindPix);
      instance.SetNewArray(&newArray_MHCalibrationChargeBlindPix);
      instance.SetDelete(&delete_MHCalibrationChargeBlindPix);
      instance.SetDeleteArray(&deleteArray_MHCalibrationChargeBlindPix);
      instance.SetDestructor(&destruct_MHCalibrationChargeBlindPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationChargeBlindPix*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationChargeBlindPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationChargeBlindCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationChargeBlindCam(void *p = 0);
   static void *newArray_MHCalibrationChargeBlindCam(Long_t size, void *p);
   static void delete_MHCalibrationChargeBlindCam(void *p);
   static void deleteArray_MHCalibrationChargeBlindCam(void *p);
   static void destruct_MHCalibrationChargeBlindCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationChargeBlindCam*)
   {
      ::MHCalibrationChargeBlindCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationChargeBlindCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationChargeBlindCam", ::MHCalibrationChargeBlindCam::Class_Version(), "./MHCalibrationChargeBlindCam.h", 17,
                  typeid(::MHCalibrationChargeBlindCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationChargeBlindCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationChargeBlindCam) );
      instance.SetNew(&new_MHCalibrationChargeBlindCam);
      instance.SetNewArray(&newArray_MHCalibrationChargeBlindCam);
      instance.SetDelete(&delete_MHCalibrationChargeBlindCam);
      instance.SetDeleteArray(&deleteArray_MHCalibrationChargeBlindCam);
      instance.SetDestructor(&destruct_MHCalibrationChargeBlindCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationChargeBlindCam*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationChargeBlindCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationChargePINDiode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationChargePINDiode(void *p = 0);
   static void *newArray_MHCalibrationChargePINDiode(Long_t size, void *p);
   static void delete_MHCalibrationChargePINDiode(void *p);
   static void deleteArray_MHCalibrationChargePINDiode(void *p);
   static void destruct_MHCalibrationChargePINDiode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationChargePINDiode*)
   {
      ::MHCalibrationChargePINDiode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationChargePINDiode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationChargePINDiode", ::MHCalibrationChargePINDiode::Class_Version(), "./MHCalibrationChargePINDiode.h", 13,
                  typeid(::MHCalibrationChargePINDiode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationChargePINDiode::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationChargePINDiode) );
      instance.SetNew(&new_MHCalibrationChargePINDiode);
      instance.SetNewArray(&newArray_MHCalibrationChargePINDiode);
      instance.SetDelete(&delete_MHCalibrationChargePINDiode);
      instance.SetDeleteArray(&deleteArray_MHCalibrationChargePINDiode);
      instance.SetDestructor(&destruct_MHCalibrationChargePINDiode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationChargePINDiode*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationChargePINDiode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationChargePINDiode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationRelTimeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationRelTimeCam(void *p = 0);
   static void *newArray_MHCalibrationRelTimeCam(Long_t size, void *p);
   static void delete_MHCalibrationRelTimeCam(void *p);
   static void deleteArray_MHCalibrationRelTimeCam(void *p);
   static void destruct_MHCalibrationRelTimeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationRelTimeCam*)
   {
      ::MHCalibrationRelTimeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationRelTimeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationRelTimeCam", ::MHCalibrationRelTimeCam::Class_Version(), "./MHCalibrationRelTimeCam.h", 19,
                  typeid(::MHCalibrationRelTimeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationRelTimeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationRelTimeCam) );
      instance.SetNew(&new_MHCalibrationRelTimeCam);
      instance.SetNewArray(&newArray_MHCalibrationRelTimeCam);
      instance.SetDelete(&delete_MHCalibrationRelTimeCam);
      instance.SetDeleteArray(&deleteArray_MHCalibrationRelTimeCam);
      instance.SetDestructor(&destruct_MHCalibrationRelTimeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationRelTimeCam*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationRelTimeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationRelTimeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCalibrationPulseTimeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCalibrationPulseTimeCam(void *p = 0);
   static void *newArray_MHCalibrationPulseTimeCam(Long_t size, void *p);
   static void delete_MHCalibrationPulseTimeCam(void *p);
   static void deleteArray_MHCalibrationPulseTimeCam(void *p);
   static void destruct_MHCalibrationPulseTimeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCalibrationPulseTimeCam*)
   {
      ::MHCalibrationPulseTimeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCalibrationPulseTimeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCalibrationPulseTimeCam", ::MHCalibrationPulseTimeCam::Class_Version(), "./MHCalibrationPulseTimeCam.h", 14,
                  typeid(::MHCalibrationPulseTimeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCalibrationPulseTimeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MHCalibrationPulseTimeCam) );
      instance.SetNew(&new_MHCalibrationPulseTimeCam);
      instance.SetNewArray(&newArray_MHCalibrationPulseTimeCam);
      instance.SetDelete(&delete_MHCalibrationPulseTimeCam);
      instance.SetDeleteArray(&deleteArray_MHCalibrationPulseTimeCam);
      instance.SetDestructor(&destruct_MHCalibrationPulseTimeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCalibrationPulseTimeCam*)
   {
      return GenerateInitInstanceLocal((::MHCalibrationPulseTimeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCalibrationPulseTimeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationPix::Class_Name()
{
   return "MHCalibrationPix";
}

//______________________________________________________________________________
const char *MHCalibrationPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationCam::Class_Name()
{
   return "MHCalibrationCam";
}

//______________________________________________________________________________
const char *MHCalibrationCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHGausEvents::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHGausEvents::Class_Name()
{
   return "MHGausEvents";
}

//______________________________________________________________________________
const char *MHGausEvents::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHGausEvents*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHGausEvents::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHGausEvents*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHGausEvents::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHGausEvents*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHGausEvents::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHGausEvents*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationChargePix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationChargePix::Class_Name()
{
   return "MHCalibrationChargePix";
}

//______________________________________________________________________________
const char *MHCalibrationChargePix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationChargePix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationChargePix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationChargePix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationChargeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationChargeCam::Class_Name()
{
   return "MHCalibrationChargeCam";
}

//______________________________________________________________________________
const char *MHCalibrationChargeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationChargeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationChargeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationChargeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationChargeBlindPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationChargeBlindPix::Class_Name()
{
   return "MHCalibrationChargeBlindPix";
}

//______________________________________________________________________________
const char *MHCalibrationChargeBlindPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationChargeBlindPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationChargeBlindPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationChargeBlindPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationChargeBlindCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationChargeBlindCam::Class_Name()
{
   return "MHCalibrationChargeBlindCam";
}

//______________________________________________________________________________
const char *MHCalibrationChargeBlindCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationChargeBlindCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationChargeBlindCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationChargeBlindCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargeBlindCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationChargePINDiode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationChargePINDiode::Class_Name()
{
   return "MHCalibrationChargePINDiode";
}

//______________________________________________________________________________
const char *MHCalibrationChargePINDiode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePINDiode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationChargePINDiode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePINDiode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationChargePINDiode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePINDiode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationChargePINDiode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationChargePINDiode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationRelTimeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationRelTimeCam::Class_Name()
{
   return "MHCalibrationRelTimeCam";
}

//______________________________________________________________________________
const char *MHCalibrationRelTimeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationRelTimeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationRelTimeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationRelTimeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationRelTimeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationRelTimeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationRelTimeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationRelTimeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCalibrationPulseTimeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCalibrationPulseTimeCam::Class_Name()
{
   return "MHCalibrationPulseTimeCam";
}

//______________________________________________________________________________
const char *MHCalibrationPulseTimeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPulseTimeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCalibrationPulseTimeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPulseTimeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCalibrationPulseTimeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPulseTimeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCalibrationPulseTimeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCalibrationPulseTimeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MHCalibrationCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationCam.
      TClass *R__cl = ::MHCalibrationCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbins", &fNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLast", &fLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProbLimit", &fProbLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOverflowLimit", &fOverflowLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerFitLimitHiGain", &fLowerFitLimitHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperFitLimitHiGain", &fUpperFitLimitHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerFitLimitLoGain", &fLowerFitLimitLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperFitLimitLoGain", &fUpperFitLimitLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsHiGainFitRanges", &fIsHiGainFitRanges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLoGainFitRanges", &fIsLoGainFitRanges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistName", &fHistName);
      R__insp.InspectMember(fHistName, "fHistName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistTitle", &fHistTitle);
      R__insp.InspectMember(fHistTitle, "fHistTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistXTitle", &fHistXTitle);
      R__insp.InspectMember(fHistXTitle, "fHistXTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistYTitle", &fHistYTitle);
      R__insp.InspectMember(fHistYTitle, "fHistYTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainSaturationLimit", &fNumHiGainSaturationLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainSaturationLimit", &fNumLoGainSaturationLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNumEvts", &fMaxNumEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentNumEvts", &fCurrentNumEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumbers", &fRunNumbers);
      R__insp.InspectMember(fRunNumbers, "fRunNumbers.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaRelSigma", &fAverageAreaRelSigma);
      R__insp.InspectMember(fAverageAreaRelSigma, "fAverageAreaRelSigma.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaRelSigmaVar", &fAverageAreaRelSigmaVar);
      R__insp.InspectMember(fAverageAreaRelSigmaVar, "fAverageAreaRelSigmaVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaSat", &fAverageAreaSat);
      R__insp.InspectMember(fAverageAreaSat, "fAverageAreaSat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaSigma", &fAverageAreaSigma);
      R__insp.InspectMember(fAverageAreaSigma, "fAverageAreaSigma.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaSigmaVar", &fAverageAreaSigmaVar);
      R__insp.InspectMember(fAverageAreaSigmaVar, "fAverageAreaSigmaVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageAreaNum", &fAverageAreaNum);
      R__insp.InspectMember(fAverageAreaNum, "fAverageAreaNum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageSectorNum", &fAverageSectorNum);
      R__insp.InspectMember(fAverageSectorNum, "fAverageSectorNum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageHiGainAreas", &fAverageHiGainAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageHiGainSectors", &fAverageHiGainSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageLoGainAreas", &fAverageLoGainAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageLoGainSectors", &fAverageLoGainSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColor", &fColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHiGainArray", &fHiGainArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoGainArray", &fLoGainArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulserFrequency", &fPulserFrequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      MH::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationCam(void *p) {
      return  p ? new(p) ::MHCalibrationCam : new ::MHCalibrationCam;
   }
   static void *newArray_MHCalibrationCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationCam[nElements] : new ::MHCalibrationCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationCam(void *p) {
      delete ((::MHCalibrationCam*)p);
   }
   static void deleteArray_MHCalibrationCam(void *p) {
      delete [] ((::MHCalibrationCam*)p);
   }
   static void destruct_MHCalibrationCam(void *p) {
      typedef ::MHCalibrationCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationCam

//______________________________________________________________________________
void MHCalibrationPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationPix::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationPix.
      TClass *R__cl = ::MHCalibrationPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlackoutLimit", &fBlackoutLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaturated", &fSaturated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPickupLimit", &fPickupLimit);
      MHGausEvents::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationPix(void *p) {
      return  p ? new(p) ::MHCalibrationPix : new ::MHCalibrationPix;
   }
   static void *newArray_MHCalibrationPix(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationPix[nElements] : new ::MHCalibrationPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationPix(void *p) {
      delete ((::MHCalibrationPix*)p);
   }
   static void deleteArray_MHCalibrationPix(void *p) {
      delete [] ((::MHCalibrationPix*)p);
   }
   static void destruct_MHCalibrationPix(void *p) {
      typedef ::MHCalibrationPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationPix

//______________________________________________________________________________
void MHCalibrationChargeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationChargeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationChargeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationChargeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationChargeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationChargeCam.
      TClass *R__cl = ::MHCalibrationChargeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainNbins", &fLoGainNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainFirst", &fLoGainFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainLast", &fLoGainLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainBlackoutLimit", &fNumLoGainBlackoutLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistName", &fAbsHistName);
      R__insp.InspectMember(fAbsHistName, "fAbsHistName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistTitle", &fAbsHistTitle);
      R__insp.InspectMember(fAbsHistTitle, "fAbsHistTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistXTitle", &fAbsHistXTitle);
      R__insp.InspectMember(fAbsHistXTitle, "fAbsHistXTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistYTitle", &fAbsHistYTitle);
      R__insp.InspectMember(fAbsHistYTitle, "fAbsHistYTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReferenceFile", &fReferenceFile);
      R__insp.InspectMember(fReferenceFile, "fReferenceFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerRefCharge", &fInnerRefCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterRefCharge", &fOuterRefCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumhiarea", &fSumhiarea);
      R__insp.InspectMember(fSumhiarea, "fSumhiarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumloarea", &fSumloarea);
      R__insp.InspectMember(fSumloarea, "fSumloarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimehiarea", &fTimehiarea);
      R__insp.InspectMember(fTimehiarea, "fTimehiarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeloarea", &fTimeloarea);
      R__insp.InspectMember(fTimeloarea, "fTimeloarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumhisector", &fSumhisector);
      R__insp.InspectMember(fSumhisector, "fSumhisector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumlosector", &fSumlosector);
      R__insp.InspectMember(fSumlosector, "fSumlosector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimehisector", &fTimehisector);
      R__insp.InspectMember(fTimehisector, "fTimehisector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimelosector", &fTimelosector);
      R__insp.InspectMember(fTimelosector, "fTimelosector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSathiarea", &fSathiarea);
      R__insp.InspectMember(fSathiarea, "fSathiarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSatloarea", &fSatloarea);
      R__insp.InspectMember(fSatloarea, "fSatloarea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSathisector", &fSathisector);
      R__insp.InspectMember(fSathisector, "fSathisector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSatlosector", &fSatlosector);
      R__insp.InspectMember(fSatlosector, "fSatlosector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLowerLimit", &fTimeLowerLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeUpperLimit", &fTimeUpperLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      MHCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationChargeCam(void *p) {
      return  p ? new(p) ::MHCalibrationChargeCam : new ::MHCalibrationChargeCam;
   }
   static void *newArray_MHCalibrationChargeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationChargeCam[nElements] : new ::MHCalibrationChargeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationChargeCam(void *p) {
      delete ((::MHCalibrationChargeCam*)p);
   }
   static void deleteArray_MHCalibrationChargeCam(void *p) {
      delete [] ((::MHCalibrationChargeCam*)p);
   }
   static void destruct_MHCalibrationChargeCam(void *p) {
      typedef ::MHCalibrationChargeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationChargeCam

//______________________________________________________________________________
void MHCalibrationChargePix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationChargePix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationChargePix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationChargePix::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationChargePix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationChargePix.
      TClass *R__cl = ::MHCalibrationChargePix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHAbsTime", &fHAbsTime);
      R__insp.InspectMember(fHAbsTime, "fHAbsTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeNbins", &fAbsTimeNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeFirst", &fAbsTimeFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeLast", &fAbsTimeLast);
      MHCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationChargePix(void *p) {
      return  p ? new(p) ::MHCalibrationChargePix : new ::MHCalibrationChargePix;
   }
   static void *newArray_MHCalibrationChargePix(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationChargePix[nElements] : new ::MHCalibrationChargePix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationChargePix(void *p) {
      delete ((::MHCalibrationChargePix*)p);
   }
   static void deleteArray_MHCalibrationChargePix(void *p) {
      delete [] ((::MHCalibrationChargePix*)p);
   }
   static void destruct_MHCalibrationChargePix(void *p) {
      typedef ::MHCalibrationChargePix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationChargePix

//______________________________________________________________________________
void MHCalibrationChargeBlindCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationChargeBlindCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationChargeBlindCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationChargeBlindCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationChargeBlindCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationChargeBlindCam.
      TClass *R__cl = ::MHCalibrationChargeBlindCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSPheCut", &fSPheCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFitFunc", &fFitFunc);
      MHCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationChargeBlindCam(void *p) {
      return  p ? new(p) ::MHCalibrationChargeBlindCam : new ::MHCalibrationChargeBlindCam;
   }
   static void *newArray_MHCalibrationChargeBlindCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationChargeBlindCam[nElements] : new ::MHCalibrationChargeBlindCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationChargeBlindCam(void *p) {
      delete ((::MHCalibrationChargeBlindCam*)p);
   }
   static void deleteArray_MHCalibrationChargeBlindCam(void *p) {
      delete [] ((::MHCalibrationChargeBlindCam*)p);
   }
   static void destruct_MHCalibrationChargeBlindCam(void *p) {
      typedef ::MHCalibrationChargeBlindCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationChargeBlindCam

//______________________________________________________________________________
void MHCalibrationChargeBlindPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationChargeBlindPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationChargeBlindPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationChargeBlindPix::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationChargeBlindPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationChargeBlindPix.
      TClass *R__cl = ::MHCalibrationChargeBlindPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSinglePheCut", &fSinglePheCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSinglePheLimit", &fNumSinglePheLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSinglePheFit", &fSinglePheFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSinglePhes", &fNumSinglePhes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPedestals", &fNumPedestals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambda", &fLambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaCheck", &fLambdaCheck);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu0", &fMu0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu1", &fMu1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma0", &fSigma0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma1", &fSigma1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaErr", &fLambdaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaCheckErr", &fLambdaCheckErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu0Err", &fMu0Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu1Err", &fMu1Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma0Err", &fSigma0Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma1Err", &fSigma1Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChisquare", &fChisquare);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDF", &fNDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProb", &fProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFitFunc", &fFitFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFitLegend", &fFitLegend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHSinglePheFADCSlices", &fHSinglePheFADCSlices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHPedestalFADCSlices", &fHPedestalFADCSlices);
      MHCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationChargeBlindPix(void *p) {
      return  p ? new(p) ::MHCalibrationChargeBlindPix : new ::MHCalibrationChargeBlindPix;
   }
   static void *newArray_MHCalibrationChargeBlindPix(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationChargeBlindPix[nElements] : new ::MHCalibrationChargeBlindPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationChargeBlindPix(void *p) {
      delete ((::MHCalibrationChargeBlindPix*)p);
   }
   static void deleteArray_MHCalibrationChargeBlindPix(void *p) {
      delete [] ((::MHCalibrationChargeBlindPix*)p);
   }
   static void destruct_MHCalibrationChargeBlindPix(void *p) {
      typedef ::MHCalibrationChargeBlindPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationChargeBlindPix

//______________________________________________________________________________
void MHCalibrationChargePINDiode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationChargePINDiode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationChargePINDiode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationChargePINDiode::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationChargePINDiode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationChargePINDiode.
      TClass *R__cl = ::MHCalibrationChargePINDiode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistName", &fHistName);
      R__insp.InspectMember(fHistName, "fHistName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistTitle", &fHistTitle);
      R__insp.InspectMember(fHistTitle, "fHistTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistXTitle", &fHistXTitle);
      R__insp.InspectMember(fHistXTitle, "fHistXTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistYTitle", &fHistYTitle);
      R__insp.InspectMember(fHistYTitle, "fHistYTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistName", &fAbsHistName);
      R__insp.InspectMember(fAbsHistName, "fAbsHistName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistTitle", &fAbsHistTitle);
      R__insp.InspectMember(fAbsHistTitle, "fAbsHistTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistXTitle", &fAbsHistXTitle);
      R__insp.InspectMember(fAbsHistXTitle, "fAbsHistXTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsHistYTitle", &fAbsHistYTitle);
      R__insp.InspectMember(fAbsHistYTitle, "fAbsHistYTitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPINDiode", &fPINDiode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSigPIN", &fSigPIN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHRmsCharge", &fHRmsCharge);
      R__insp.InspectMember(fHRmsCharge, "fHRmsCharge.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeFirst", &fRmsChargeFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeLast", &fRmsChargeLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeNbins", &fRmsChargeNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeMean", &fRmsChargeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeMeanErr", &fRmsChargeMeanErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeSigma", &fRmsChargeSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeSigmaErr", &fRmsChargeSigmaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLowerLimit", &fTimeLowerLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeUpperLimit", &fTimeUpperLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExclusionMean", &fExclusionMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExclusionSigma", &fExclusionSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExclusionChi2", &fExclusionChi2);
      MHCalibrationChargePix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationChargePINDiode(void *p) {
      return  p ? new(p) ::MHCalibrationChargePINDiode : new ::MHCalibrationChargePINDiode;
   }
   static void *newArray_MHCalibrationChargePINDiode(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationChargePINDiode[nElements] : new ::MHCalibrationChargePINDiode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationChargePINDiode(void *p) {
      delete ((::MHCalibrationChargePINDiode*)p);
   }
   static void deleteArray_MHCalibrationChargePINDiode(void *p) {
      delete [] ((::MHCalibrationChargePINDiode*)p);
   }
   static void destruct_MHCalibrationChargePINDiode(void *p) {
      typedef ::MHCalibrationChargePINDiode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationChargePINDiode

//______________________________________________________________________________
void MHCalibrationRelTimeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationRelTimeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationRelTimeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationRelTimeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationRelTimeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationRelTimeCam.
      TClass *R__cl = ::MHCalibrationRelTimeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerRefTime", &fInnerRefTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterRefTime", &fOuterRefTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReferenceFile", &fReferenceFile);
      R__insp.InspectMember(fReferenceFile, "fReferenceFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumareahi", &fSumareahi);
      R__insp.InspectMember(fSumareahi, "fSumareahi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumarealo", &fSumarealo);
      R__insp.InspectMember(fSumarealo, "fSumarealo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumsectorhi", &fSumsectorhi);
      R__insp.InspectMember(fSumsectorhi, "fSumsectorhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumsectorlo", &fSumsectorlo);
      R__insp.InspectMember(fSumsectorlo, "fSumsectorlo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumareahi", &fNumareahi);
      R__insp.InspectMember(fNumareahi, "fNumareahi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumarealo", &fNumarealo);
      R__insp.InspectMember(fNumarealo, "fNumarealo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumsectorhi", &fNumsectorhi);
      R__insp.InspectMember(fNumsectorhi, "fNumsectorhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumsectorlo", &fNumsectorlo);
      R__insp.InspectMember(fNumsectorlo, "fNumsectorlo.");
      MHCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationRelTimeCam(void *p) {
      return  p ? new(p) ::MHCalibrationRelTimeCam : new ::MHCalibrationRelTimeCam;
   }
   static void *newArray_MHCalibrationRelTimeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationRelTimeCam[nElements] : new ::MHCalibrationRelTimeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationRelTimeCam(void *p) {
      delete ((::MHCalibrationRelTimeCam*)p);
   }
   static void deleteArray_MHCalibrationRelTimeCam(void *p) {
      delete [] ((::MHCalibrationRelTimeCam*)p);
   }
   static void destruct_MHCalibrationRelTimeCam(void *p) {
      typedef ::MHCalibrationRelTimeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationRelTimeCam

//______________________________________________________________________________
void MHCalibrationPulseTimeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCalibrationPulseTimeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCalibrationPulseTimeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCalibrationPulseTimeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MHCalibrationPulseTimeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCalibrationPulseTimeCam.
      TClass *R__cl = ::MHCalibrationPulseTimeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaturationLimit", &fSaturationLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerSignalLimit", &fLowerSignalLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixelsRequired", &fNumPixelsRequired);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReferenceFile", &fReferenceFile);
      R__insp.InspectMember(fReferenceFile, "fReferenceFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInnerRefTime", &fInnerRefTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterRefTime", &fOuterRefTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalCam", &fSignalCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      MHCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCalibrationPulseTimeCam(void *p) {
      return  p ? new(p) ::MHCalibrationPulseTimeCam : new ::MHCalibrationPulseTimeCam;
   }
   static void *newArray_MHCalibrationPulseTimeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MHCalibrationPulseTimeCam[nElements] : new ::MHCalibrationPulseTimeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCalibrationPulseTimeCam(void *p) {
      delete ((::MHCalibrationPulseTimeCam*)p);
   }
   static void deleteArray_MHCalibrationPulseTimeCam(void *p) {
      delete [] ((::MHCalibrationPulseTimeCam*)p);
   }
   static void destruct_MHCalibrationPulseTimeCam(void *p) {
      typedef ::MHCalibrationPulseTimeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCalibrationPulseTimeCam

//______________________________________________________________________________
void MHGausEvents::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHGausEvents.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHGausEvents::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHGausEvents::Class(),this);
   }
}

//______________________________________________________________________________
void MHGausEvents::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHGausEvents.
      TClass *R__cl = ::MHGausEvents::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinsAfterStripping", &fBinsAfterStripping);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentSize", &fCurrentSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventFrequency", &fEventFrequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPowerProbabilityBins", &fPowerProbabilityBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHPowerProbability", &fHPowerProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPowerSpectrum", &fPowerSpectrum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvents", &fEvents);
      R__insp.InspectMember(fEvents, "fEvents.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFExpFit", &fFExpFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraphEvents", &fGraphEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraphPowerSpectrum", &fGraphPowerSpectrum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLast", &fLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbins", &fNbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDFLimit", &fNDFLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProbLimit", &fProbLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFGausFit", &fFGausFit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHGausHist", &fHGausHist);
      R__insp.InspectMember(fHGausHist, "fHGausHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMean", &fMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanErr", &fMeanErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaErr", &fSigmaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProb", &fProb);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHGausEvents(void *p) {
      return  p ? new(p) ::MHGausEvents : new ::MHGausEvents;
   }
   static void *newArray_MHGausEvents(Long_t nElements, void *p) {
      return p ? new(p) ::MHGausEvents[nElements] : new ::MHGausEvents[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHGausEvents(void *p) {
      delete ((::MHGausEvents*)p);
   }
   static void deleteArray_MHGausEvents(void *p) {
      delete [] ((::MHGausEvents*)p);
   }
   static void destruct_MHGausEvents(void *p) {
      typedef ::MHGausEvents current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHGausEvents

/********************************************************
* HCalibCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableHCalibCint();

extern "C" void G__set_cpp_environmentHCalibCint() {
  G__cpp_reset_tagtableHCalibCint();
}
#include <new>
extern "C" int G__cpp_dllrevHCalibCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MHCalibrationPix */
static int G__HCalibCint_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationPix[n];
       } else {
         p = new((void*) gvp) MHCalibrationPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationPix;
       } else {
         p = new((void*) gvp) MHCalibrationPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationPix*) G__getstructoffset())->GetBlackout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationPix*) G__getstructoffset())->GetPickup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationPix*) G__getstructoffset())->GetSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MHCalibrationPix*) G__getstructoffset())->RepeatFit((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MHCalibrationPix*) G__getstructoffset())->RepeatFit());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationPix*) G__getstructoffset())->BypassFit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationPix*) G__getstructoffset())->AddSaturated((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPix*) G__getstructoffset())->SetBlackoutLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPix*) G__getstructoffset())->SetBlackoutLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPix*) G__getstructoffset())->SetPickupLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPix*) G__getstructoffset())->SetPickupLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_238_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationPix G__TMHCalibrationPix;
static int G__HCalibCint_238_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationPix*) (soff+(sizeof(MHCalibrationPix)*i)))->~G__TMHCalibrationPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationPix*) (soff))->~G__TMHCalibrationPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationCam */
static int G__HCalibCint_240_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationCam[n];
       } else {
         p = new((void*) gvp) MHCalibrationCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationCam;
       } else {
         p = new((void*) gvp) MHCalibrationCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->ResetHists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayI& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageAreaNum();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationCam*) G__getstructoffset())->GetAverageAreas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->GetAverageHiGainArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageHiGainArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->GetAverageLoGainArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageLoGainArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->GetAverageHiGainSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageHiGainSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->GetAverageLoGainSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageLoGainSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayI& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetAverageSectorNum();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationCam*) G__getstructoffset())->GetAverageSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationCam*) G__getstructoffset())->GetColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationCam*) G__getstructoffset())->GetNumHiGainSaturationLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationCam*) G__getstructoffset())->GetNumLoGainSaturationLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayI& obj = ((const MHCalibrationCam*) G__getstructoffset())->GetRunNumbers();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationCam*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->operator[]((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->operator[]((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((MHCalibrationCam*) G__getstructoffset())->operator()((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MHCalibrationPix& obj = ((const MHCalibrationCam*) G__getstructoffset())->operator()((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetAverageing((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetAverageing();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetDebug((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetLoGain((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetLoGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetOscillations((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetOscillations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetSizeCheck((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetSizeCheck();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetIsReset((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetIsReset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetHistName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetHistTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetHistXTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetHistYTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetLowerFitLimitHiGain((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetLowerFitLimitHiGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetUpperFitLimitHiGain((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetUpperFitLimitHiGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetLowerFitLimitLoGain((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetLowerFitLimitLoGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetUpperFitLimitLoGain((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetUpperFitLimitLoGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetBinning((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetMaxNumEvts((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetMaxNumEvts();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetProbLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetProbLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetNumLoGainSaturationLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->SetNumHiGainSaturationLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetOverflowLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetOverflowLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationCam*) G__getstructoffset())->SetPulserFrequency((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationCam*) G__getstructoffset())->SetPulserFrequency();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_240_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationCam G__TMHCalibrationCam;
static int G__HCalibCint_240_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationCam*) (soff+(sizeof(MHCalibrationCam)*i)))->~G__TMHCalibrationCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationCam*) (soff))->~G__TMHCalibrationCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHGausEvents */
static int G__HCalibCint_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHGausEvents* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHGausEvents((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHGausEvents((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHGausEvents((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHGausEvents((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHGausEvents[n];
       } else {
         p = new((void*) gvp) MHGausEvents[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHGausEvents;
       } else {
         p = new((void*) gvp) MHGausEvents;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->CreateFourierSpectrum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->CreateGraphEvents();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->CreateGraphPowerSpectrum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->DrawEvents((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->DrawEvents();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->DrawPowerSpectrum((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->DrawPowerSpectrum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->DrawPowerProjection((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->DrawPowerProjection();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->FillArray((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FillHist((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FillHistAndArray((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FitGaus((Option_t*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FitGaus((Option_t*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FitGaus((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MHGausEvents*) G__getstructoffset())->FitGaus());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->InitBins();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetChiSquare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetExpChiSquare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHGausEvents*) G__getstructoffset())->GetExpNdf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetExpProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHGausEvents*) G__getstructoffset())->GetEventFrequency());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetFExpFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetFExpFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetFGausFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetFGausFit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetGraphEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetGraphEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetGraphPowerSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetGraphPowerSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetHGausHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetHGausHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetHPowerProbability());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetHPowerProbability());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetHistRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHGausEvents*) G__getstructoffset())->GetNdf());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHGausEvents*) G__getstructoffset())->GetNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHGausEvents*) G__getstructoffset())->GetPowerSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHGausEvents*) G__getstructoffset())->GetPowerSpectrum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHGausEvents*) G__getstructoffset())->GetSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHGausEvents*) G__getstructoffset())->GetNDFLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHGausEvents*) G__getstructoffset())->GetProbLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsExcluded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsExpFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsFourierSpectrumOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsGausFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsOnlyOverflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHGausEvents*) G__getstructoffset())->IsOnlyUnderflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetEventFrequency((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetExcluded((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetExcluded();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetExpFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetExpFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetFourierSpectrumOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetFourierSpectrumOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetGausFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetGausFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetMean((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetMeanErr((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetNDFLimit((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetNDFLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetProb((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHGausEvents*) G__getstructoffset())->SetProbLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHGausEvents*) G__getstructoffset())->SetProbLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetSigma((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetSigmaErr((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->SetBinning((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MHGausEvents*) G__getstructoffset())->SimulateGausEvents((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MHGausEvents*) G__getstructoffset())->SimulateGausEvents((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHGausEvents::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHGausEvents::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHGausEvents::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHGausEvents::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHGausEvents*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHGausEvents::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHGausEvents::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHGausEvents::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_257_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHGausEvents::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHGausEvents G__TMHGausEvents;
static int G__HCalibCint_257_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHGausEvents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHGausEvents*) (soff+(sizeof(MHGausEvents)*i)))->~G__TMHGausEvents();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHGausEvents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHGausEvents*) (soff))->~G__TMHGausEvents();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationChargePix */
static int G__HCalibCint_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationChargePix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationChargePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargePix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationChargePix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargePix[n];
       } else {
         p = new((void*) gvp) MHCalibrationChargePix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargePix;
       } else {
         p = new((void*) gvp) MHCalibrationChargePix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePix*) G__getstructoffset())->SetBinningAbsTime((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHCalibrationChargePix*) G__getstructoffset())->GetHAbsTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHCalibrationChargePix*) G__getstructoffset())->GetHAbsTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePix*) G__getstructoffset())->GetAbsTimeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePix*) G__getstructoffset())->GetAbsTimeRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePix*) G__getstructoffset())->GetIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHCalibrationChargePix*) G__getstructoffset())->FillAbsTime((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationChargePix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationChargePix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationChargePix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargePix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_261_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargePix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationChargePix G__TMHCalibrationChargePix;
static int G__HCalibCint_261_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationChargePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationChargePix*) (soff+(sizeof(MHCalibrationChargePix)*i)))->~G__TMHCalibrationChargePix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationChargePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationChargePix*) (soff))->~G__TMHCalibrationChargePix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationChargeCam */
static int G__HCalibCint_263_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationChargeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeCam[n];
       } else {
         p = new((void*) gvp) MHCalibrationChargeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeCam;
       } else {
         p = new((void*) gvp) MHCalibrationChargeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetAbsHistName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetAbsHistTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetAbsHistXTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetAbsHistYTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetBinningLoGain((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetNumLoGainBlackoutLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetNumLoGainBlackoutLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetReferenceFile(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetReferenceFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetTimeLowerLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetTimeLowerLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetTimeUpperLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeCam*) G__getstructoffset())->SetTimeUpperLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationChargeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationChargeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationChargeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_263_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationChargeCam G__TMHCalibrationChargeCam;
static int G__HCalibCint_263_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationChargeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationChargeCam*) (soff+(sizeof(MHCalibrationChargeCam)*i)))->~G__TMHCalibrationChargeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationChargeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationChargeCam*) (soff))->~G__TMHCalibrationChargeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationChargeBlindPix */
static int G__HCalibCint_319_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationChargeBlindPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeBlindPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeBlindPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeBlindPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeBlindPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeBlindPix[n];
       } else {
         p = new((void*) gvp) MHCalibrationChargeBlindPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeBlindPix;
       } else {
         p = new((void*) gvp) MHCalibrationChargeBlindPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetLambda());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetLambdaCheck());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetMu0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetMu1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetSigma0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetSigma1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetLambdaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetLambdaCheckErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetMu0Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetMu1Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetSigma0Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetSigma1Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->GetSinglePheCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->IsSinglePheFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHCalibrationChargeBlindPix*) G__getstructoffset())->IsPedestalFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetFitFunc((const MHCalibrationChargeBlindPix::FitFunc_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetSinglePheCut((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetSinglePheCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetNumSinglePheLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetNumSinglePheLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetSinglePheFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetSinglePheFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetPedestalFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SetPedestalFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MHCalibrationChargeBlindPix*) G__getstructoffset())->FitSinglePhe((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MHCalibrationChargeBlindPix*) G__getstructoffset())->FitSinglePhe());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->FitPedestal((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->FitPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHCalibrationChargeBlindPix*) G__getstructoffset())->SimulateSinglePhe((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3])
, (const Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationChargeBlindPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationChargeBlindPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationChargeBlindPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeBlindPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeBlindPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_319_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeBlindPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationChargeBlindPix G__TMHCalibrationChargeBlindPix;
static int G__HCalibCint_319_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationChargeBlindPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationChargeBlindPix*) (soff+(sizeof(MHCalibrationChargeBlindPix)*i)))->~G__TMHCalibrationChargeBlindPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationChargeBlindPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationChargeBlindPix*) (soff))->~G__TMHCalibrationChargeBlindPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationChargeBlindCam */
static int G__HCalibCint_324_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationChargeBlindCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeBlindCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeBlindCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargeBlindCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationChargeBlindCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeBlindCam[n];
       } else {
         p = new((void*) gvp) MHCalibrationChargeBlindCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargeBlindCam;
       } else {
         p = new((void*) gvp) MHCalibrationChargeBlindCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->Draw((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->Draw();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->SetFitFunc((const MHCalibrationChargeBlindPix::FitFunc_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->SetSPheCut((const Axis_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->SetSPheCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationChargeBlindCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationChargeBlindCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationChargeBlindCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargeBlindCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeBlindCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargeBlindCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_324_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargeBlindCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationChargeBlindCam G__TMHCalibrationChargeBlindCam;
static int G__HCalibCint_324_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationChargeBlindCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationChargeBlindCam*) (soff+(sizeof(MHCalibrationChargeBlindCam)*i)))->~G__TMHCalibrationChargeBlindCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationChargeBlindCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationChargeBlindCam*) (soff))->~G__TMHCalibrationChargeBlindCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationChargePINDiode */
static int G__HCalibCint_327_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationChargePINDiode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargePINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationChargePINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationChargePINDiode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationChargePINDiode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargePINDiode[n];
       } else {
         p = new((void*) gvp) MHCalibrationChargePINDiode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationChargePINDiode;
       } else {
         p = new((void*) gvp) MHCalibrationChargePINDiode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHCalibrationChargePINDiode*) G__getstructoffset())->GetHRmsCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetHRmsCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetRmsChargeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetRmsChargeMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetRmsChargeSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetRmsChargeSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetExclusionMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetExclusionSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHCalibrationChargePINDiode*) G__getstructoffset())->GetExclusionChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHCalibrationChargePINDiode*) G__getstructoffset())->FillRmsCharge((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MHCalibrationChargePINDiode*) G__getstructoffset())->FitRmsCharge((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MHCalibrationChargePINDiode*) G__getstructoffset())->FitRmsCharge());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetBinningRmsCharge((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetTimeLowerLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetTimeLowerLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetTimeUpperLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetTimeUpperLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetAbsHistName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetAbsHistTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetAbsHistXTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetAbsHistYTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetHistName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetHistTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetHistXTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->SetHistYTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationChargePINDiode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePINDiode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationChargePINDiode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationChargePINDiode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationChargePINDiode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePINDiode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargePINDiode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationChargePINDiode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_327_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationChargePINDiode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationChargePINDiode G__TMHCalibrationChargePINDiode;
static int G__HCalibCint_327_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationChargePINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationChargePINDiode*) (soff+(sizeof(MHCalibrationChargePINDiode)*i)))->~G__TMHCalibrationChargePINDiode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationChargePINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationChargePINDiode*) (soff))->~G__TMHCalibrationChargePINDiode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationRelTimeCam */
static int G__HCalibCint_328_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationRelTimeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationRelTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationRelTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationRelTimeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationRelTimeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationRelTimeCam[n];
       } else {
         p = new((void*) gvp) MHCalibrationRelTimeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationRelTimeCam;
       } else {
         p = new((void*) gvp) MHCalibrationRelTimeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationRelTimeCam*) G__getstructoffset())->SetReferenceFile(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationRelTimeCam*) G__getstructoffset())->SetReferenceFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationRelTimeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationRelTimeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationRelTimeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationRelTimeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationRelTimeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationRelTimeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationRelTimeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationRelTimeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_328_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationRelTimeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationRelTimeCam G__TMHCalibrationRelTimeCam;
static int G__HCalibCint_328_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationRelTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationRelTimeCam*) (soff+(sizeof(MHCalibrationRelTimeCam)*i)))->~G__TMHCalibrationRelTimeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationRelTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationRelTimeCam*) (soff))->~G__TMHCalibrationRelTimeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCalibrationPulseTimeCam */
static int G__HCalibCint_329_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCalibrationPulseTimeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationPulseTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCalibrationPulseTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCalibrationPulseTimeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCalibrationPulseTimeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationPulseTimeCam[n];
       } else {
         p = new((void*) gvp) MHCalibrationPulseTimeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCalibrationPulseTimeCam;
       } else {
         p = new((void*) gvp) MHCalibrationPulseTimeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetReferenceFile(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetReferenceFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetSaturationLimit((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetSaturationLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetLowerSignalLimit((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetLowerSignalLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetNumPixelsRequired((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->SetNumPixelsRequired();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCalibrationPulseTimeCam*) G__getstructoffset())->GetNumEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCalibrationPulseTimeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPulseTimeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCalibrationPulseTimeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCalibrationPulseTimeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCalibrationPulseTimeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPulseTimeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationPulseTimeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCalibrationPulseTimeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HCalibCint_329_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCalibrationPulseTimeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCalibrationPulseTimeCam G__TMHCalibrationPulseTimeCam;
static int G__HCalibCint_329_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCalibrationPulseTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCalibrationPulseTimeCam*) (soff+(sizeof(MHCalibrationPulseTimeCam)*i)))->~G__TMHCalibrationPulseTimeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCalibrationPulseTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCalibrationPulseTimeCam*) (soff))->~G__TMHCalibrationPulseTimeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MHCalibrationPix */

/* MHCalibrationCam */

/* MHGausEvents */

/* MHCalibrationChargePix */

/* MHCalibrationChargeCam */

/* MHCalibrationChargeBlindPix */

/* MHCalibrationChargeBlindCam */

/* MHCalibrationChargePINDiode */

/* MHCalibrationRelTimeCam */

/* MHCalibrationPulseTimeCam */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncHCalibCint {
 public:
  G__Sizep2memfuncHCalibCint(): p(&G__Sizep2memfuncHCalibCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncHCalibCint::*p)();
};

size_t G__get_sizep2memfuncHCalibCint()
{
  G__Sizep2memfuncHCalibCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceHCalibCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix))) {
     MHCalibrationPix *G__Lderived;
     G__Lderived=(MHCalibrationPix*)0x1000;
     {
       MHGausEvents *G__Lpbase=(MHGausEvents*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam))) {
     MHCalibrationCam *G__Lderived;
     G__Lderived=(MHCalibrationCam*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),G__get_linked_tagnum(&G__HCalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents))) {
     MHGausEvents *G__Lderived;
     G__Lderived=(MHGausEvents*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix))) {
     MHCalibrationChargePix *G__Lderived;
     G__Lderived=(MHCalibrationChargePix*)0x1000;
     {
       MHCalibrationPix *G__Lpbase=(MHCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MHGausEvents *G__Lpbase=(MHGausEvents*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam))) {
     MHCalibrationChargeCam *G__Lderived;
     G__Lderived=(MHCalibrationChargeCam*)0x1000;
     {
       MHCalibrationCam *G__Lpbase=(MHCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam),G__get_linked_tagnum(&G__HCalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix))) {
     MHCalibrationChargeBlindPix *G__Lderived;
     G__Lderived=(MHCalibrationChargeBlindPix*)0x1000;
     {
       MHCalibrationPix *G__Lpbase=(MHCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MHGausEvents *G__Lpbase=(MHGausEvents*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix),G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam))) {
     MHCalibrationChargeBlindCam *G__Lderived;
     G__Lderived=(MHCalibrationChargeBlindCam*)0x1000;
     {
       MHCalibrationCam *G__Lpbase=(MHCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam),G__get_linked_tagnum(&G__HCalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode))) {
     MHCalibrationChargePINDiode *G__Lderived;
     G__Lderived=(MHCalibrationChargePINDiode*)0x1000;
     {
       MHCalibrationChargePix *G__Lpbase=(MHCalibrationChargePix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MHCalibrationPix *G__Lpbase=(MHCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MHGausEvents *G__Lpbase=(MHGausEvents*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam))) {
     MHCalibrationRelTimeCam *G__Lderived;
     G__Lderived=(MHCalibrationRelTimeCam*)0x1000;
     {
       MHCalibrationCam *G__Lpbase=(MHCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam))) {
     MHCalibrationPulseTimeCam *G__Lderived;
     G__Lderived=(MHCalibrationPulseTimeCam*)0x1000;
     {
       MHCalibrationCam *G__Lpbase=(MHCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam),G__get_linked_tagnum(&G__HCalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableHCalibCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HCalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HCalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HCalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HCalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__HCalibCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__HCalibCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__HCalibCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__HCalibCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MHCalibrationPix */
static void G__setup_memvarMHCalibrationPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix));
   { MHCalibrationPix *p; p=(MHCalibrationPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgBlackoutLimit=",0,"! Default for fBlackoutLimit (now set to: 5. )");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgPickupLimit=",0,"! Default for fPickupLimit   (now set to: 5. )");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fBlackoutLimit=",0,"Lower nr sigmas from mean until event is considered blackout");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSaturated=",0,"Number of events classified as saturated");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPickupLimit=",0,"Upper nr sigmas from mean until event is considered pickup");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationCam */
static void G__setup_memvarMHCalibrationCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam));
   { MHCalibrationCam *p; p=(MHCalibrationCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"fgLowerFitLimitHiGain=",0,"! Default for fLowerFitLimitHiGain");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"fgUpperFitLimitHiGain=",0,"! Default for fUpperFitLimitHiGain");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"fgLowerFitLimitLoGain=",0,"! Default for fLowerFitLimitLoGain");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"fgUpperFitLimitLoGain=",0,"! Default for fUpperFitLimitLoGain");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgPulserFrequency=0LL",0,"! Default for fPulserFrequency");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgProbLimit=",0,"! Default for fProbLimit");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgOverflowLimit=",0,"! Default for fOverflowLimit");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgMaxNumEvts=0LL",0,"! Default for fMaxNumEvts");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNbins=",0,"Number of bins        ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fFirst=",0,"Lower histogram limit ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fLast=",0,"Upper histogram limit ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fProbLimit=",0,"Limit for acceptance of probability of Gauss-Fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fOverflowLimit=",0,"Part of maximum allowed overflow events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLowerFitLimitHiGain=",0,"Lower limit for the fit range for the hi-gain hist");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUpperFitLimitHiGain=",0,"Upper limit for the fit range for the hi-gain hist");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLowerFitLimitLoGain=",0,"Lower limit for the fit range for the lo-gain hist");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUpperFitLimitLoGain=",0,"Upper limit for the fit range for the lo-gain hist");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsHiGainFitRanges=",0,"Are high-gain fit ranges defined?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsLoGainFitRanges=",0,"Are low-gain fit ranges defined?");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,2,"fHistName=",0,"! Histogram names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,2,"fHistTitle=",0,"! Histogram titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,2,"fHistXTitle=",0,"! Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,2,"fHistYTitle=",0,"! Histogram y-axis titles");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNumHiGainSaturationLimit=",0,"Rel. amount sat. higain FADC slices until pixel is called saturated ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNumLoGainSaturationLimit=",0,"Rel. amount sat. logain FADC slices until pixel is called saturated");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxNumEvts=",0,"Max Number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentNumEvts=",0,"! Current number of events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,2,"fRunNumbers=",0,"Numbers of runs used");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,2,"fAverageAreaRelSigma=",0,"Re-normalized relative sigmas in average pixels per area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,2,"fAverageAreaRelSigmaVar=",0,"Variance Re-normalized relative sigmas in average pixels per area ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,2,"fAverageAreaSat=",0,"Number of saturated slices in average pixels per area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,2,"fAverageAreaSigma=",0,"Re-normalized sigmas in average pixels per area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,2,"fAverageAreaSigmaVar=",0,"Variance Re-normalized sigmas in average pixels per area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,2,"fAverageAreaNum=",0,"Number of pixels in average pixels per area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,2,"fAverageSectorNum=",0,"Number of pixels in average pixels per sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fAverageHiGainAreas=",0,"Array of calibration pixels, one per pixel area");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fAverageHiGainSectors=",0,"Array of calibration pixels, one per camera sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fAverageLoGainAreas=",0,"Array of calibration pixels, one per pixel area");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fAverageLoGainSectors=",0,"Array of calibration pixels, one per camera sector");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,2,"fColor=",0,"Colour of the pulsed LEDs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MBadPixelsCam),-1,-1,2,"fBadPixels=",0,"! Bad Pixels storage container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MCalibrationCam),-1,-1,2,"fCam=",0,"! Calibration Cam with the results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MGeomCam),-1,-1,2,"fGeom=",0,"! Camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MRawRunHeader),-1,-1,2,"fRunHeader=",0,"! Run Header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fHiGainArray=",0,"Array of calibration pixels, one per pixel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TOrdCollection),-1,-1,2,"fLoGainArray=",0,"Array of calibration pixels, one per pixel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPulserFrequency=",0,"Light pulser frequency");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kDebug=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kLoGain=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kAverageing=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kOscillations=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kSizeCheck=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCamcLcLdA),-1,-2,2,"kIsReset=5LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fFlags=",0,"Bit-field to hold the global flags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHGausEvents */
static void G__setup_memvarMHGausEvents(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents));
   { MHGausEvents *p; p=(MHGausEvents*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNDFLimit=0LL",0,"! Default for fNDFLimit             (now set to: 2)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgProbLimit=",0,"! Default for fProbLimit            (now set to: 0.001)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgPowerProbabilityBins=0LL",0,"! Default for fPowerProbabilityBins (now set to: 20)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBinsAfterStripping=",0,"Bins for the Gauss Histogram after stripping off the zeros at both ends");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCurrentSize=",0,"Current size of the array fEvents");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEventFrequency=",0,"Event frequency in Hertz (to be set)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFlags=",0,"Bit field for the fit result bits");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPowerProbabilityBins=",0,"Bins for the projected power spectrum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1I),-1,-1,4,"fHPowerProbability=",0,"! Fourier transform of fEvents projected on y-axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,4,"fPowerSpectrum=",0,"! Fourier transform of fEvents");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHGausEventscLcLdA),-1,-2,4,"kGausFitOK=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHGausEventscLcLdA),-1,-2,4,"kExpFitOK=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHGausEventscLcLdA),-1,-2,4,"kFourierSpectrumOK=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHGausEventscLcLdA),-1,-2,4,"kExcluded=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayF),-1,-1,4,"fEvents=",0,"Array which holds the entries of GausHist");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TF1),-1,-1,4,"fFExpFit=",0,"Exponential fit for FHPowerProbability");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TGraph),-1,-1,4,"fGraphEvents=",0,"! TGraph to display the event array ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TGraph),-1,-1,4,"fGraphPowerSpectrum=",0,"! TGraph to display the power spectrum array ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fFirst=",0,"Lower histogram edge  for fHGausHist (used by InitBins()) ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fLast=",0,"Upper histogram edge  for fHGausHist (used by InitBins()) ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNbins=",0,"Number histogram bins for fHGausHist (used by InitBins())");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDFLimit=",0,"NDF limit for judgement if fit is OK");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fProbLimit=",0,"Probability limit for judgement if fit is OK ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TF1),-1,-1,2,"fFGausFit=",0,"Gauss fit for fHGausHist");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1F),-1,-1,2,"fHGausHist=",0,"Histogram to hold the Gaussian distribution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMean=",0,"Mean of the Gauss fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMeanErr=",0,"Error of the mean of the Gauss fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigma=",0,"Sigma of the Gauss fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSigmaErr=",0,"Error of the sigma of the Gauss fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fProb=",0,"Probability of the Gauss fit ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationChargePix */
static void G__setup_memvarMHCalibrationChargePix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix));
   { MHCalibrationChargePix *p; p=(MHCalibrationChargePix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1F),-1,-1,2,"fHAbsTime=",0,"Histogram containing the absolute arrival times ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAbsTimeNbins=",0,"Number of  bins used for the fHAbsTime ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fAbsTimeFirst=",0,"Lower bound bin used for the fHAbsTime");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fAbsTimeLast=",0,"Upper bound bin used for the fHAbsTime");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationChargeCam */
static void G__setup_memvarMHCalibrationChargeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam));
   { MHCalibrationChargeCam *p; p=(MHCalibrationChargeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgChargeHiGainNbins=0LL",0,"! Nr. bins of HiGain Histograms");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeHiGainFirst=",0,"! First Bin of HiGain Histograms");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeHiGainLast=",0,"! Last Bin of HiGain Histograms");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgChargeLoGainNbins=0LL",0,"! First Bin of LoGain Histograms");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeLoGainFirst=",0,"! First Bin of LoGain Histograms");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeLoGainLast=",0,"! Last Bin of LoGain Histograms");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgProbLimit=",0,"! The default for fProbLimit");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"fgReferenceFile=",0,"! default for fReferenceFile");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistName=",0,"! Default Histogram names abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistTitle=",0,"! Default Histogram titles abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistXTitle=",0,"! Default Histogram x-axis titles abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistYTitle=",0,"! Default Histogram y-axis titles abs.times");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgNumHiGainSaturationLimit=",0,"! Default for fNumHiGainSaturationLimit");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgNumLoGainSaturationLimit=",0,"! Default for fNumLoGainSaturationLimit");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgNumLoGainBlackoutLimit=",0,"! Default for fNumLoGainBlackoutLimit (now at: 0.05)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLoGainBlackoutLimit=",0,"! Default for low-gain blackout limit (now at: 3.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLoGainPickupLimit=",0,"! Default for low-gian pickup limit   (now at: 3.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgTimeLowerLimit=",0,"! Default for fTimeLowerLimit");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgTimeUpperLimit=",0,"! Default for fTimeUpperLimit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLoGainNbins=",0,"Number of LoGain bins");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fLoGainFirst=",0,"Lower histogram limit low gain");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fLoGainLast=",0,"Upper histogram limit low gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumLoGainBlackoutLimit=",0,"Rel. amount blackout logain events until pixel is declared unsuitable");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistName=",0,"Histogram names abs.times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistTitle=",0,"Histogram titles abs. times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistXTitle=",0,"Histogram x-axis titles abs. times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistYTitle=",0,"Histogram y-axis titles abs. times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fReferenceFile=",0,"File name containing the reference values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fInnerRefCharge=",0,"The reference mean arrival time inner pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOuterRefCharge=",0,"The reference mean arrival time outer pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumhiarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumloarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fTimehiarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fTimeloarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumhisector=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumlosector=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fTimehisector=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fTimelosector=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fSathiarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fSatloarea=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fSathisector=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fSatlosector=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLowerLimit=",0,"Limit dist. to first signal slice (in units of FADC slices) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeUpperLimit=",0,"Limit dist. to last signal slice  (in units of FADC slices) ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MPedestalSubtractedEvt),-1,-1,4,"fRawEvt=",0,"!  Raw event data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MExtractedSignalCam),-1,-1,4,"fSignal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationChargeBlindPix */
static void G__setup_memvarMHCalibrationChargeBlindPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix));
   { MHCalibrationChargeBlindPix *p; p=(MHCalibrationChargeBlindPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgNumSinglePheLimit=",0,"! Default for fNumSinglePheLimit (now set to: 50)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkSignalInitializer=",0,"! Signal initializer (-9999.)");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"gkElectronicAmp=",0,"Electronic Amplification after the PMT (in FADC counts/N_e)");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"gkElectronicAmpErr=",0,"Error of the electronic amplification");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSinglePheCut=",0,"Value of summed FADC slices upon which event considered as single-phe");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumSinglePheLimit=",0,"Minimum number of single-phe events ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TF1),-1,-1,4,"fSinglePheFit=",0,"Single Phe Fit (Gaussians convoluted with Poisson) ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumSinglePhes=",0,"Number of entries in fASinglePheFADCSlices ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPedestals=",0,"Number of entries in fAPedestalFADCSlices  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambda=",0,"Poisson mean from Single-phe fit ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaCheck=",0,"Poisson mean from Pedestal fit alone");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMu0=",0,"Mean of the pedestal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMu1=",0,"Mean of single-phe peak");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma0=",0,"Sigma of the pedestal");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma1=",0,"Sigma of single-phe peak");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaErr=",0,"Error of Poisson mean from Single-phe fit ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaCheckErr=",0,"Error of Poisson mean from Pedestal fit alone ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMu0Err=",0,"Error of  Mean of the pedestal    ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMu1Err=",0,"Error of  Mean of single-phe peak ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma0Err=",0,"Error of  Sigma of the pedestal   ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigma1Err=",0,"Error of  Sigma of single-phe peak");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChisquare=",0,"Chisquare of single-phe fit ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNDF=",0,"Ndof of single-phe fit ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fProb=",0,"Probability of singleo-phe fit");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFlags=",0,"Bit-field for the flags");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLdA),-1,-2,4,"kSinglePheFitOK=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLdA),-1,-2,4,"kPedestalFitOK=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEPoisson4=%lldLL",(long long)MHCalibrationChargeBlindPix::kEPoisson4).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEPoisson5=%lldLL",(long long)MHCalibrationChargeBlindPix::kEPoisson5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEPoisson6=%lldLL",(long long)MHCalibrationChargeBlindPix::kEPoisson6).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEPoisson7=%lldLL",(long long)MHCalibrationChargeBlindPix::kEPoisson7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEPolya=%lldLL",(long long)MHCalibrationChargeBlindPix::kEPolya).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kEMichele=%lldLL",(long long)MHCalibrationChargeBlindPix::kEMichele).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-1,4,"fFitFunc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TPaveText),-1,-1,4,"fFitLegend=",0,"! Some legend to display the fit results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1F),-1,-1,4,"fHSinglePheFADCSlices=",0,"A histogram created and deleted only in Draw()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1F),-1,-1,4,"fHPedestalFADCSlices=",0,"A histogram created and deleted only in Draw()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationChargeBlindCam */
static void G__setup_memvarMHCalibrationChargeBlindCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam));
   { MHCalibrationChargeBlindCam *p; p=(MHCalibrationChargeBlindCam*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNbins=0LL",0,"! Default for fNBins new style blind pixel (now set to:  128   )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgFirst=",0,"! Default for fFirst new style blind pixel (now set to: - 0.5 )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgLast=",0,"! Default for fLast  new style blind pixel (now set to: 511.5 )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgSPheCut=",0,"! Default for fSinglePheCut new style blind pixel (now set to: 20)");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fSPheCut=",0,"Signal value upon which event considered as single-phe");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MRawEvtData),-1,-1,4,"fRawEvt=",0,"!  Raw event data");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t),-1,-1,4,"fFitFunc=",0,"The actual fit function type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationChargePINDiode */
static void G__setup_memvarMHCalibrationChargePINDiode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode));
   { MHCalibrationChargePINDiode *p; p=(MHCalibrationChargePINDiode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgAbsTimeFirst=",0,"! Default for fAbsTimeFirst    (now set to: -0.5  )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgAbsTimeLast=",0,"! Default for fAbsTimeLast     (now set to: 29.5  )");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgAbsTimeNbins=0LL",0,"! Default for fAbsTimeNBins    (now set to: 30    )");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgChargeNbins=0LL",0,"! Default for fNBins           (now set to: 200   )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeFirst=",0,"! Default for fFirst           (now set to: -0.5  )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgChargeLast=",0,"! Default for fLast            (now set to: 199.5 )");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgRmsChargeNbins=0LL",0,"! Default for fRmsChargeNBins  (now set to: 100   )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgRmsChargeFirst=",0,"! Default for fRmsChargeFirst  (now set to: 0.    )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgRmsChargeLast=",0,"! Default for fRmsChargeLast   (now set to: 100.  )");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgTimeLowerLimit=",0,"! Default for fTimeLowerLimit    (now set to: 1.) ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgTimeUpperLimit=",0,"! Default for fTimeUpperLimit    (now set to: 2.)");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistName=",0,"! Default Histogram names abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistTitle=",0,"! Default Histogram titles abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistXTitle=",0,"! Default Histogram x-axis titles abs.times");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsAbsHistYTitle=",0,"! Default Histogram y-axis titles abs.times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fHistName=",0,"Histogram names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fHistTitle=",0,"Histogram titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fHistXTitle=",0,"Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fHistYTitle=",0,"Histogram y-axis titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistName=",0,"Histogram names abs.times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistTitle=",0,"Histogram titles abs. times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistXTitle=",0,"Histogram x-axis titles abs. times");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fAbsHistYTitle=",0,"Histogram y-axis titles abs. times");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MCalibrationChargePINDiode),-1,-1,4,"fPINDiode=",0,"! Storage container of the results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MExtractedSignalPINDiode),-1,-1,4,"fSigPIN=",0,"! Storage container of extracted signal");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TH1F),-1,-1,4,"fHRmsCharge=",0,"Histogram containing Variance of summed FADC slices");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fRmsChargeFirst=",0,"Lower bound bin used for the fHRmsCharge");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,4,"fRmsChargeLast=",0,"Upper bound bin used for the fHRmsCharge");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRmsChargeNbins=",0,"Number of  bins used for the fHRmsCharge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeMean=",0,"Mean of the Gauss fit               ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeMeanErr=",0,"Error of the mean of the Gauss fit ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeSigma=",0,"Sigma of the Gauss fit             ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeSigmaErr=",0,"Error of the sigma of the Gauss fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLowerLimit=",0,"Limit dist. to first signal slice (units: FADC slices) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeUpperLimit=",0,"Limit dist. to last signal slice  (units: FADC slices) ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExclusionMean=",0,"Number of events excluded by deviating mean");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExclusionSigma=",0,"Number of events excluded by deviating sigma");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fExclusionChi2=",0,"Number of events excluded by deviating chi2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationRelTimeCam */
static void G__setup_memvarMHCalibrationRelTimeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam));
   { MHCalibrationRelTimeCam *p; p=(MHCalibrationRelTimeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgNumHiGainSaturationLimit=",0,"! The default for fNumHiGainSaturationLimit (now at: 0.25)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNbins=0LL",0,"! Default number of bins        (now set to: 900   )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgFirst=",0,"! Default lower histogram limit (now set to: -13.5 )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgLast=",0,"! Default upper histogram limit (now set to:  13.5 )");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgProbLimit=",0,"! The default for fProbLimit    (now set to: 0.0)  ");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"fgReferenceFile=",0,"! default for fReferenceFile (\"mjobs/calibrationref.rc\")");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fInnerRefTime=",0,"The reference mean arrival time inner pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOuterRefTime=",0,"The reference mean arrival time outer pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fReferenceFile=",0,"File name containing the reference values");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumareahi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumarealo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumsectorhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayD),-1,-1,4,"fSumsectorlo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fNumareahi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fNumarealo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fNumsectorhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MArrayI),-1,-1,4,"fNumsectorlo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCalibrationPulseTimeCam */
static void G__setup_memvarMHCalibrationPulseTimeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam));
   { MHCalibrationPulseTimeCam *p; p=(MHCalibrationPulseTimeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgSaturationLimit=0ULL",0,"! Default for fSaturationLimit (now set to: 245)");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgLowerSignalLimit=0ULL",0,"! Default for fLowerSignalLimit");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNumPixelsRequired=0LL",0,"! Default for fNumPixelsRequired");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgHiGainNbins=0LL",0,"! Nr. bins of HiGain Histograms  (now set to:  550  )");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgHiGainFirst=",0,"! First Bin of HiGain Histograms (now set to: -100.5)");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Axis_t"),-2,4,"fgHiGainLast=",0,"! Last Bin of HiGain Histograms  (now set to:  999.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgProbLimit=",0,"! The default for fProbLimit    (now set to: 0.00001)");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"fgReferenceFile=",0,"! default for fReferenceFile (\"mjobs/calibrationref.rc\")");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistName=",0,"! Default Histogram names");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistTitle=",0,"! Default Histogram titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistXTitle=",0,"! Default Histogram x-axis titles");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-2,4,"gsHistYTitle=",0,"! Default Histogram y-axis titles");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fSaturationLimit=",0,"Highest FADC slice value until being declared saturated");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLowerSignalLimit=",0,"Lower signal limit for pulse time extraction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumPixelsRequired=",0,"Minimum Number of pixels required for averageing");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TString),-1,-1,4,"fReferenceFile=",0,"File name containing the reference values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fInnerRefTime=",0,"The reference mean arrival time inner pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOuterRefTime=",0,"The reference mean arrival time outer pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MExtractedSignalCam),-1,-1,4,"fSignalCam=",0,"! Signal cam for extraction range");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"! Bad Pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HCalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarHCalibCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMHCalibrationPix(void) {
   /* MHCalibrationPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix));
   G__memfunc_setup("MHCalibrationPix",1582,G__HCalibCint_238_0_1, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBlackout",1109,G__HCalibCint_238_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPickup",908,G__HCalibCint_238_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSaturated",1229,G__HCalibCint_238_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RepeatFit",900,G__HCalibCint_238_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"RQ0\"' option", "Repeat fit within limits defined by fPickupLimit", (void*) NULL, 0);
   G__memfunc_setup("BypassFit",917,G__HCalibCint_238_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "Take mean and RMS from the histogram", (void*) NULL, 0);
   G__memfunc_setup("AddSaturated",1206,G__HCalibCint_238_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlackoutLimit",1632,G__HCalibCint_238_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgBlackoutLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPickupLimit",1431,G__HCalibCint_238_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgPickupLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_238_0_12, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_238_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_238_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_238_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_238_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_238_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_238_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_238_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_238_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationPix", 1708, G__HCalibCint_238_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationCam(void) {
   /* MHCalibrationCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam));
   G__memfunc_setup("SetupHists",1052,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitHists",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHists",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeHists",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeBadPixels",1710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcAverageSigma",1567,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitHiGainArrays",1590,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 10 - npix i - 'Int_t' 10 - nareas "
"i - 'Int_t' 10 - nsectors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitLoGainArrays",1600,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 10 - npix i - 'Int_t' 10 - nareas "
"i - 'Int_t' 10 - nsectors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetHistTitles",1552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawAverageSigma",1594,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 8, 
"g - 'Bool_t' 0 - sat g - 'Bool_t' 0 - inner "
"f - 'Float_t' 0 - sigma f - 'Float_t' 0 - sigmaerr "
"f - 'Float_t' 0 - relsigma f - 'Float_t' 0 - relsigmaerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitHiGainArrays",1477,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"u 'MCalibrationCam' - 1 - calcam u 'MBadPixelsCam' - 1 - badcam "
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - fittyp i 'MBadPixelsPix::UncalibratedType_t' - 0 - osctyp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitHiGainHists",1374,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"u 'MHCalibrationPix' - 1 - hist u 'MCalibrationPix' - 1 - pix "
"u 'MBadPixelsPix' - 1 - bad i 'MBadPixelsPix::UncalibratedType_t' - 0 - fittyp "
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - osctyp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitLoGainArrays",1487,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"u 'MCalibrationCam' - 1 - calcam u 'MBadPixelsCam' - 1 - badcam "
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - fittyp i 'MBadPixelsPix::UncalibratedType_t' - 0 - osctyp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitLoGainHists",1384,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"u 'MHCalibrationPix' - 1 - hist u 'MCalibrationPix' - 1 - pix "
"u 'MBadPixelsPix' - 1 - bad i 'MBadPixelsPix::UncalibratedType_t' - 0 - fittyp "
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - osctyp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitHists",927,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'MHCalibrationPix' - 1 - hist u 'MBadPixelsPix' - 1 - bad "
"i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCams",792,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"U 'MParList' - 0 - plist u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoGain",758,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAverageing",1205,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDebug",675,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOscillations",1456,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSizeCheck",1077,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsReset",703,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToggleFlag",988,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"g - 'Bool_t' 0 - b b - 'Byte_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Remove",622,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TOrdCollection' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHCalibrationCam",1550,G__HCalibCint_240_0_26, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetHists",1038,G__HCalibCint_240_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAverageAreaNum",1668,G__HCalibCint_240_0_35, 117, G__get_linked_tagnum(&G__HCalibCintLN_MArrayI), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageAreas",1479,G__HCalibCint_240_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageHiGainArea",1924,G__HCalibCint_240_0_37, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageHiGainArea",1924,G__HCalibCint_240_0_38, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageLoGainArea",1934,G__HCalibCint_240_0_39, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageLoGainArea",1934,G__HCalibCint_240_0_40, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageHiGainSector",2171,G__HCalibCint_240_0_41, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageHiGainSector",2171,G__HCalibCint_240_0_42, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageLoGainSector",2181,G__HCalibCint_240_0_43, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageLoGainSector",2181,G__HCalibCint_240_0_44, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSectorNum",1915,G__HCalibCint_240_0_45, 117, G__get_linked_tagnum(&G__HCalibCintLN_MArrayI), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSectors",1726,G__HCalibCint_240_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColor",799,G__HCalibCint_240_0_47, 105, G__get_linked_tagnum(&G__HCalibCintLN_MCalibrationCamcLcLPulserColor_t), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainSaturationLimit",2729,G__HCalibCint_240_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainSaturationLimit",2739,G__HCalibCint_240_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumbers",1329,G__HCalibCint_240_0_50, 117, G__get_linked_tagnum(&G__HCalibCintLN_MArrayI), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__HCalibCint_240_0_51, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__HCalibCint_240_0_52, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__HCalibCint_240_0_53, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__HCalibCint_240_0_54, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__HCalibCint_240_0_55, 117, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColor",811,G__HCalibCint_240_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageing",1317,G__HCalibCint_240_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__HCalibCint_240_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGain",870,G__HCalibCint_240_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOscillations",1568,G__HCalibCint_240_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSizeCheck",1189,G__HCalibCint_240_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsReset",1003,G__HCalibCint_240_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistName",1093,G__HCalibCint_240_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistTitle",1222,G__HCalibCint_240_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistXTitle",1310,G__HCalibCint_240_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistYTitle",1311,G__HCalibCint_240_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowerFitLimitHiGain",2183,G__HCalibCint_240_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 'fgLowerFitLimitHiGain' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpperFitLimitHiGain",2186,G__HCalibCint_240_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 'fgUpperFitLimitHiGain' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowerFitLimitLoGain",2193,G__HCalibCint_240_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 'fgLowerFitLimitLoGain' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpperFitLimitLoGain",2196,G__HCalibCint_240_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 'fgUpperFitLimitLoGain' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinning",1009,G__HCalibCint_240_0_71, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxNumEvts",1316,G__HCalibCint_240_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 'fgMaxNumEvts' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProbLimit",1214,G__HCalibCint_240_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgProbLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumLoGainSaturationLimit",2751,G__HCalibCint_240_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumHiGainSaturationLimit",2741,G__HCalibCint_240_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOverflowLimit",1663,G__HCalibCint_240_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgOverflowLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserFrequency",1881,G__HCalibCint_240_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 'fgPulserFrequency' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_240_0_78, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_240_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_240_0_80, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_240_0_81, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_240_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_240_0_86, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_240_0_87, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_240_0_88, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_240_0_89, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationCam", 1676, G__HCalibCint_240_0_90, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHGausEvents(void) {
   /* MHGausEvents */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents));
   G__memfunc_setup("SetBinsAfterStripping",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 10 '0' nbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPowerProbabilityBins",2374,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 10 'fgPowerProbabilityBins' nbins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHGausEvents",1178,G__HCalibCint_257_0_3, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHGausEvents), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateFourierSpectrum",2179,G__HCalibCint_257_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGraphEvents",1723,G__HCalibCint_257_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGraphPowerSpectrum",2470,G__HCalibCint_257_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("DrawEvents",1027,G__HCalibCint_257_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("DrawPowerSpectrum",1774,G__HCalibCint_257_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("DrawPowerProjection",1976,G__HCalibCint_257_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("FillArray",902,G__HCalibCint_257_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHist",799,G__HCalibCint_257_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHistAndArray",1585,G__HCalibCint_257_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitGaus",691,G__HCalibCint_257_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - 'Option_t' 10 '\"RQ0\"' option d - 'Double_t' 10 '0.' xmin "
"d - 'Double_t' 10 '0.' xmax", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("InitBins",800,G__HCalibCint_257_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,G__HCalibCint_257_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChiSquare",1189,G__HCalibCint_257_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpChiSquare",1490,G__HCalibCint_257_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpNdf",869,G__HCalibCint_257_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExpProb",992,G__HCalibCint_257_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvents",917,G__HCalibCint_257_0_23, 85, G__get_linked_tagnum(&G__HCalibCintLN_MArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvents",917,G__HCalibCint_257_0_24, 85, G__get_linked_tagnum(&G__HCalibCintLN_MArrayF), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventFrequency",1748,G__HCalibCint_257_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFExpFit",950,G__HCalibCint_257_0_26, 85, G__get_linked_tagnum(&G__HCalibCintLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFExpFit",950,G__HCalibCint_257_0_27, 85, G__get_linked_tagnum(&G__HCalibCintLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFGausFit",1049,G__HCalibCint_257_0_28, 85, G__get_linked_tagnum(&G__HCalibCintLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFGausFit",1049,G__HCalibCint_257_0_29, 85, G__get_linked_tagnum(&G__HCalibCintLN_TF1), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphEvents",1415,G__HCalibCint_257_0_30, 85, G__get_linked_tagnum(&G__HCalibCintLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirst",808,G__HCalibCint_257_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLast",692,G__HCalibCint_257_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphEvents",1415,G__HCalibCint_257_0_33, 85, G__get_linked_tagnum(&G__HCalibCintLN_TGraph), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphPowerSpectrum",2162,G__HCalibCint_257_0_34, 85, G__get_linked_tagnum(&G__HCalibCintLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphPowerSpectrum",2162,G__HCalibCint_257_0_35, 85, G__get_linked_tagnum(&G__HCalibCintLN_TGraph), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHGausHist",1168,G__HCalibCint_257_0_36, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHGausHist",1168,G__HCalibCint_257_0_37, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHPowerProbability",2038,G__HCalibCint_257_0_38, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1I), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHPowerProbability",2038,G__HCalibCint_257_0_39, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1I), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistRms",1002,G__HCalibCint_257_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__HCalibCint_257_0_41, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanErr",970,G__HCalibCint_257_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNdf",568,G__HCalibCint_257_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbins",794,G__HCalibCint_257_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__HCalibCint_257_0_45, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerSpectrum",1664,G__HCalibCint_257_0_46, 85, G__get_linked_tagnum(&G__HCalibCintLN_MArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPowerSpectrum",1664,G__HCalibCint_257_0_47, 85, G__get_linked_tagnum(&G__HCalibCintLN_MArrayF), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProb",691,G__HCalibCint_257_0_48, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma",785,G__HCalibCint_257_0_49, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaErr",1082,G__HCalibCint_257_0_50, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlope",803,G__HCalibCint_257_0_51, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDFLimit",1015,G__HCalibCint_257_0_52, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProbLimit",1202,G__HCalibCint_257_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__HCalibCint_257_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExcluded",1002,G__HCalibCint_257_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpFitOK",934,G__HCalibCint_257_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__HCalibCint_257_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFourierSpectrumOK",1925,G__HCalibCint_257_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGausFitOK",1033,G__HCalibCint_257_0_59, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOnlyOverflow",1458,G__HCalibCint_257_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOnlyUnderflow",1556,G__HCalibCint_257_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetEventFrequency",1760,G__HCalibCint_257_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExcluded",1114,G__HCalibCint_257_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExpFitOK",1046,G__HCalibCint_257_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFourierSpectrumOK",2037,G__HCalibCint_257_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGausFitOK",1145,G__HCalibCint_257_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMean",685,G__HCalibCint_257_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanErr",982,G__HCalibCint_257_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNDFLimit",1027,G__HCalibCint_257_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 'fgNDFLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProb",703,G__HCalibCint_257_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProbLimit",1214,G__HCalibCint_257_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgProbLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__HCalibCint_257_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaErr",1094,G__HCalibCint_257_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinning",1009,G__HCalibCint_257_0_75, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SimulateGausEvents",1865,G__HCalibCint_257_0_76, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - mean f - 'Float_t' 10 - sigma "
"i - 'Int_t' 10 '4096' nevts", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_257_0_77, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHGausEvents::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_257_0_78, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHGausEvents::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_257_0_79, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHGausEvents::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_257_0_80, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHGausEvents::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_257_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_257_0_85, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHGausEvents::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_257_0_86, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHGausEvents::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_257_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHGausEvents::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_257_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHGausEvents::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHGausEvents", 1304, G__HCalibCint_257_0_89, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationChargePix(void) {
   /* MHCalibrationChargePix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix));
   G__memfunc_setup("MHCalibrationChargePix",2168,G__HCalibCint_261_0_1, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitBins",800,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBinningAbsTime",1686,G__HCalibCint_261_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHAbsTime",1037,G__HCalibCint_261_0_5, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHAbsTime",1037,G__HCalibCint_261_0_6, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeMean",1350,G__HCalibCint_261_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeRms",1271,G__HCalibCint_261_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntegral",1110,G__HCalibCint_261_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillAbsTime",1068,G__HCalibCint_261_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HCalibCint_261_0_12, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationChargePix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_261_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_261_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationChargePix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_261_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationChargePix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_261_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_261_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_261_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargePix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_261_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_261_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargePix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationChargePix", 2294, G__HCalibCint_261_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationChargeCam(void) {
   /* MHCalibrationChargeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam));
   G__memfunc_setup("SetupHists",1052,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitHists",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHists",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitHiGainArrays",1590,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 10 - npix i - 'Int_t' 10 - nareas "
"i - 'Int_t' 10 - nsectors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitLoGainArrays",1600,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 10 - npix i - 'Int_t' 10 - nareas "
"i - 'Int_t' 10 - nsectors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeAbsTimes",1610,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"u 'MHCalibrationChargePix' - 1 - hist u 'MCalibrationChargePix' - 1 - pix "
"u 'MBadPixelsPix' - 1 - bad i - 'Int_t' 0 - first "
"i - 'Int_t' 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeHists",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeBadPixels",1710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawDataCheckPixel",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'MHCalibrationChargePix' - 1 - pix f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisplayRefLines",1518,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"U 'TH1F' - 10 - hist f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHCalibrationChargeCam",2136,G__HCalibCint_263_0_12, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAbsHistName",1371,G__HCalibCint_263_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistTitle",1500,G__HCalibCint_263_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistXTitle",1588,G__HCalibCint_263_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistYTitle",1589,G__HCalibCint_263_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningLoGain",1579,G__HCalibCint_263_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumLoGainBlackoutLimit",2506,G__HCalibCint_263_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgNumLoGainBlackoutLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReferenceFile",1595,G__HCalibCint_263_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 'fgReferenceFile' ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLowerLimit",1731,G__HCalibCint_263_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgTimeLowerLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeUpperLimit",1734,G__HCalibCint_263_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgTimeUpperLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HCalibCint_263_0_26, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationChargeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_263_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_263_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationChargeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_263_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationChargeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_263_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_263_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_263_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_263_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_263_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationChargeCam", 2262, G__HCalibCint_263_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationChargeBlindPix(void) {
   /* MHCalibrationChargeBlindPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix));
   G__memfunc_setup("FitFuncMichele",1382,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PoissonKto4",1101,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PoissonKto5",1102,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PoissonKto6",1103,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Polya",517,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFit",695,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExitFit",701,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawLegend",989,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHCalibrationChargeBlindPix",2657,G__HCalibCint_319_0_9, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLambda",865,G__HCalibCint_319_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaCheck",1343,G__HCalibCint_319_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu0",530,G__HCalibCint_319_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu1",531,G__HCalibCint_319_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma0",833,G__HCalibCint_319_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1",834,G__HCalibCint_319_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaErr",1162,G__HCalibCint_319_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaCheckErr",1640,G__HCalibCint_319_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu0Err",827,G__HCalibCint_319_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu1Err",828,G__HCalibCint_319_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma0Err",1130,G__HCalibCint_319_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1Err",1131,G__HCalibCint_319_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSinglePheCut",1483,G__HCalibCint_319_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSinglePheFitOK",1528,G__HCalibCint_319_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPedestalFitOK",1451,G__HCalibCint_319_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFitFunc",987,G__HCalibCint_319_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MHCalibrationChargeBlindPix::FitFunc_t' - 10 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSinglePheCut",1495,G__HCalibCint_319_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 '0.' cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSinglePheLimit",2010,G__HCalibCint_319_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgNumSinglePheLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSinglePheFitOK",1640,G__HCalibCint_319_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestalFitOK",1563,G__HCalibCint_319_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitSinglePhe",1186,G__HCalibCint_319_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"RL0+Q\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitPedestal",1109,G__HCalibCint_319_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"RL0+Q\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SimulateSinglePhe",1731,G__HCalibCint_319_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 10 - lambda d - 'Double_t' 10 - mu0 "
"d - 'Double_t' 10 - mu1 d - 'Double_t' 10 - sigma0 "
"d - 'Double_t' 10 - sigma1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_319_0_36, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationChargeBlindPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_319_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_319_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationChargeBlindPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_319_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationChargeBlindPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_319_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_319_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_319_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeBlindPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_319_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_319_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeBlindPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationChargeBlindPix", 2783, G__HCalibCint_319_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationChargeBlindCam(void) {
   /* MHCalibrationChargeBlindCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam));
   G__memfunc_setup("SetupHists",1052,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitHists",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHists",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeHists",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetHistTitles",1552,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitBlindPixel",1294,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'MHCalibrationChargeBlindPix' - 1 - hist u 'MCalibrationBlindPix' - 1 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHCalibrationChargeBlindCam",2625,G__HCalibCint_324_0_8, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargeBlindCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,G__HCalibCint_324_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFitFunc",987,G__HCalibCint_324_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MHCalibrationChargeBlindPix::FitFunc_t' - 10 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSPheCut",968,G__HCalibCint_324_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Axis_t' 10 'fgSPheCut' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_324_0_12, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationChargeBlindCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_324_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_324_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationChargeBlindCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_324_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationChargeBlindCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_324_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_324_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_324_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeBlindCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_324_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargeBlindCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_324_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargeBlindCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationChargeBlindCam", 2751, G__HCalibCint_324_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationChargePINDiode(void) {
   /* MHCalibrationChargePINDiode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode));
   G__memfunc_setup("MHCalibrationChargePINDiode",2579,G__HCalibCint_327_0_1, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationChargePINDiode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHRmsCharge",1252,G__HCalibCint_327_0_7, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHRmsCharge",1252,G__HCalibCint_327_0_8, 85, G__get_linked_tagnum(&G__HCalibCintLN_TH1F), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsChargeMean",1565,G__HCalibCint_327_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsChargeMeanErr",1862,G__HCalibCint_327_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsChargeSigma",1677,G__HCalibCint_327_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRmsChargeSigmaErr",1974,G__HCalibCint_327_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExclusionMean",1627,G__HCalibCint_327_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExclusionSigma",1739,G__HCalibCint_327_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExclusionChi2",1568,G__HCalibCint_327_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillRmsCharge",1283,G__HCalibCint_327_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitRmsCharge",1183,G__HCalibCint_327_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"RQ0\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningRmsCharge",1901,G__HCalibCint_327_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLowerLimit",1731,G__HCalibCint_327_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgTimeLowerLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeUpperLimit",1734,G__HCalibCint_327_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgTimeUpperLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistName",1371,G__HCalibCint_327_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistTitle",1500,G__HCalibCint_327_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistXTitle",1588,G__HCalibCint_327_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsHistYTitle",1589,G__HCalibCint_327_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistName",1093,G__HCalibCint_327_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistTitle",1222,G__HCalibCint_327_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistXTitle",1310,G__HCalibCint_327_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistYTitle",1311,G__HCalibCint_327_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HCalibCint_327_0_29, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationChargePINDiode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_327_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePINDiode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_327_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationChargePINDiode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_327_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationChargePINDiode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_327_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_327_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePINDiode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_327_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargePINDiode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_327_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationChargePINDiode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_327_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationChargePINDiode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationChargePINDiode", 2705, G__HCalibCint_327_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationRelTimeCam(void) {
   /* MHCalibrationRelTimeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam));
   G__memfunc_setup("ReInitHists",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHists",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeHists",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeBadPixels",1710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckOverflow",1330,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'MHCalibrationPix' - 1 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawDataCheckPixel",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'MHCalibrationPix' - 1 - pix f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisplayRefLines",1518,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"U 'TH1F' - 10 - hist f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHCalibrationRelTimeCam",2240,G__HCalibCint_328_0_9, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationRelTimeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetReferenceFile",1595,G__HCalibCint_328_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 'fgReferenceFile' ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HCalibCint_328_0_15, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationRelTimeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_328_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationRelTimeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_328_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationRelTimeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_328_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationRelTimeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_328_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_328_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationRelTimeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_328_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationRelTimeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_328_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationRelTimeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_328_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationRelTimeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationRelTimeCam", 2366, G__HCalibCint_328_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCalibrationPulseTimeCam(void) {
   /* MHCalibrationPulseTimeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam));
   G__memfunc_setup("InitHiGainArrays",1590,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 10 - npix i - 'Int_t' 10 - nareas "
"i - 'Int_t' 10 - nsectors", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupHists",1052,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitHists",1110,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHists",914,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeHists",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawDataCheckPixel",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'MHCalibrationPix' - 1 - pix f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisplayRefLines",1518,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"U 'TH1F' - 10 - hist f - 'Float_t' 10 - refline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcHists",894,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'MHCalibrationPix' - 1 - hist u 'MCalibrationPix' - 1 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHCalibrationPulseTimeCam",2470,G__HCalibCint_329_0_10, 105, G__get_linked_tagnum(&G__HCalibCintLN_MHCalibrationPulseTimeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetReferenceFile",1595,G__HCalibCint_329_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 'fgReferenceFile' ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaturationLimit",1877,G__HCalibCint_329_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgSaturationLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowerSignalLimit",1938,G__HCalibCint_329_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgLowerSignalLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPixelsRequired",2066,G__HCalibCint_329_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 10 'fgNumPixelsRequired' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEvents",1221,G__HCalibCint_329_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HCalibCint_329_0_20, 85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCalibrationPulseTimeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HCalibCint_329_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPulseTimeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HCalibCint_329_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCalibrationPulseTimeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HCalibCint_329_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCalibrationPulseTimeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HCalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HCalibCint_329_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HCalibCint_329_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPulseTimeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HCalibCint_329_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationPulseTimeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HCalibCint_329_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCalibrationPulseTimeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HCalibCint_329_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCalibrationPulseTimeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCalibrationPulseTimeCam", 2596, G__HCalibCint_329_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncHCalibCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalHCalibCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcHCalibCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__HCalibCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__HCalibCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MArrayD = { "MArrayD" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MBadPixelsPix = { "MBadPixelsPix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MBadPixelsPixcLcLUncalibratedType_t = { "MBadPixelsPix::UncalibratedType_t" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_TOrdCollection = { "TOrdCollection" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationPix = { "MCalibrationPix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MBadPixelsCam = { "MBadPixelsCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationCam = { "MCalibrationCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationCamcLcLPulserColor_t = { "MCalibrationCam::PulserColor_t" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationPix = { "MHCalibrationPix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationCam = { "MHCalibrationCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationCamcLcLdA = { "MHCalibrationCam::$" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHGausEvents = { "MHGausEvents" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHGausEventscLcLdA = { "MHGausEvents::$" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_MExtractedSignalCam = { "MExtractedSignalCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationChargePix = { "MCalibrationChargePix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargePix = { "MHCalibrationChargePix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MPedestalSubtractedEvt = { "MPedestalSubtractedEvt" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargeCam = { "MHCalibrationChargeCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_TPaveText = { "TPaveText" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargeBlindPix = { "MHCalibrationChargeBlindPix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLdA = { "MHCalibrationChargeBlindPix::$" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t = { "MHCalibrationChargeBlindPix::FitFunc_t" , 101 , -1 };
G__linked_taginfo G__HCalibCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationBlindPix = { "MCalibrationBlindPix" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargeBlindCam = { "MHCalibrationChargeBlindCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MExtractedSignalPINDiode = { "MExtractedSignalPINDiode" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MCalibrationChargePINDiode = { "MCalibrationChargePINDiode" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationChargePINDiode = { "MHCalibrationChargePINDiode" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationRelTimeCam = { "MHCalibrationRelTimeCam" , 99 , -1 };
G__linked_taginfo G__HCalibCintLN_MHCalibrationPulseTimeCam = { "MHCalibrationPulseTimeCam" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableHCalibCint() {
  G__HCalibCintLN_TClass.tagnum = -1 ;
  G__HCalibCintLN_TBuffer.tagnum = -1 ;
  G__HCalibCintLN_TMemberInspector.tagnum = -1 ;
  G__HCalibCintLN_TObject.tagnum = -1 ;
  G__HCalibCintLN_TString.tagnum = -1 ;
  G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__HCalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__HCalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__HCalibCintLN_MArrayI.tagnum = -1 ;
  G__HCalibCintLN_MArrayF.tagnum = -1 ;
  G__HCalibCintLN_TEnv.tagnum = -1 ;
  G__HCalibCintLN_MParContainer.tagnum = -1 ;
  G__HCalibCintLN_TH1I.tagnum = -1 ;
  G__HCalibCintLN_MArrayD.tagnum = -1 ;
  G__HCalibCintLN_MParList.tagnum = -1 ;
  G__HCalibCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__HCalibCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__HCalibCintLN_TF1.tagnum = -1 ;
  G__HCalibCintLN_TH1F.tagnum = -1 ;
  G__HCalibCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__HCalibCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__HCalibCintLN_MH.tagnum = -1 ;
  G__HCalibCintLN_MGeomCam.tagnum = -1 ;
  G__HCalibCintLN_MCamEvent.tagnum = -1 ;
  G__HCalibCintLN_MBadPixelsPix.tagnum = -1 ;
  G__HCalibCintLN_MBadPixelsPixcLcLUncalibratedType_t.tagnum = -1 ;
  G__HCalibCintLN_TOrdCollection.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationPix.tagnum = -1 ;
  G__HCalibCintLN_MBadPixelsCam.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationCam.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationCamcLcLPulserColor_t.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationPix.tagnum = -1 ;
  G__HCalibCintLN_MRawRunHeader.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationCam.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationCamcLcLdA.tagnum = -1 ;
  G__HCalibCintLN_TGraph.tagnum = -1 ;
  G__HCalibCintLN_MHGausEvents.tagnum = -1 ;
  G__HCalibCintLN_MHGausEventscLcLdA.tagnum = -1 ;
  G__HCalibCintLN_MExtractedSignalCam.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationChargePix.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargePix.tagnum = -1 ;
  G__HCalibCintLN_MPedestalSubtractedEvt.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargeCam.tagnum = -1 ;
  G__HCalibCintLN_TPaveText.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargeBlindPix.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLdA.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t.tagnum = -1 ;
  G__HCalibCintLN_MRawEvtData.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationBlindPix.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargeBlindCam.tagnum = -1 ;
  G__HCalibCintLN_MExtractedSignalPINDiode.tagnum = -1 ;
  G__HCalibCintLN_MCalibrationChargePINDiode.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationChargePINDiode.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationRelTimeCam.tagnum = -1 ;
  G__HCalibCintLN_MHCalibrationPulseTimeCam.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableHCalibCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TString);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MArrayI);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TH1I);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MArrayD);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MH);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MBadPixelsPix);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MBadPixelsPixcLcLUncalibratedType_t);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TOrdCollection);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationPix);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MBadPixelsCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationCamcLcLPulserColor_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationPix),sizeof(MHCalibrationPix),-1,323840,"Base class for calibration events ",G__setup_memvarMHCalibrationPix,G__setup_memfuncMHCalibrationPix);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MRawRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationCam),sizeof(MHCalibrationCam),-1,324864,"Base Histogram class for Calibration Camera",G__setup_memvarMHCalibrationCam,G__setup_memfuncMHCalibrationCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationCamcLcLdA);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHGausEvents),sizeof(MHGausEvents),-1,324864,"Base class for events with Gaussian distributed values",G__setup_memvarMHGausEvents,G__setup_memfuncMHGausEvents);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHGausEventscLcLdA);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MExtractedSignalCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationChargePix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargePix),sizeof(MHCalibrationChargePix),-1,324864,"Base Histogram class for Charge Pixel Calibration",G__setup_memvarMHCalibrationChargePix,G__setup_memfuncMHCalibrationChargePix);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MPedestalSubtractedEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargeCam),sizeof(MHCalibrationChargeCam),-1,324864,"Histogram class for Charge Camera Calibration",G__setup_memvarMHCalibrationChargeCam,G__setup_memfuncMHCalibrationChargeCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_TPaveText);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargeBlindPix),sizeof(MHCalibrationChargeBlindPix),-1,324864,"Histogram class for Charge Blind Pixel Calibration",G__setup_memvarMHCalibrationChargeBlindPix,G__setup_memfuncMHCalibrationChargeBlindPix);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLdA);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargeBlindPixcLcLFitFunc_t);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MRawEvtData);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationBlindPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargeBlindCam),sizeof(MHCalibrationChargeBlindCam),-1,324864,"Histogram class for Blind Pixel Calibration",G__setup_memvarMHCalibrationChargeBlindCam,G__setup_memfuncMHCalibrationChargeBlindCam);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MExtractedSignalPINDiode);
   G__get_linked_tagnum_fwd(&G__HCalibCintLN_MCalibrationChargePINDiode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationChargePINDiode),sizeof(MHCalibrationChargePINDiode),-1,324864,"Histogram class for Charge PIN Diode Calibration ",G__setup_memvarMHCalibrationChargePINDiode,G__setup_memfuncMHCalibrationChargePINDiode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationRelTimeCam),sizeof(MHCalibrationRelTimeCam),-1,324864,"Histogram class for Relative Time Camera Calibration",G__setup_memvarMHCalibrationRelTimeCam,G__setup_memfuncMHCalibrationRelTimeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HCalibCintLN_MHCalibrationPulseTimeCam),sizeof(MHCalibrationPulseTimeCam),-1,324864,"Histogram class for Pulse Time Checks",G__setup_memvarMHCalibrationPulseTimeCam,G__setup_memfuncMHCalibrationPulseTimeCam);
}
extern "C" void G__cpp_setupHCalibCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupHCalibCint()");
  G__set_cpp_environmentHCalibCint();
  G__cpp_setup_tagtableHCalibCint();

  G__cpp_setup_inheritanceHCalibCint();

  G__cpp_setup_typetableHCalibCint();

  G__cpp_setup_memvarHCalibCint();

  G__cpp_setup_memfuncHCalibCint();
  G__cpp_setup_globalHCalibCint();
  G__cpp_setup_funcHCalibCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncHCalibCint();
  return;
}
class G__cpp_setup_initHCalibCint {
  public:
    G__cpp_setup_initHCalibCint() { G__add_setup_func("HCalibCint",(G__incsetup)(&G__cpp_setupHCalibCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initHCalibCint() { G__remove_setup_func("HCalibCint"); }
};
G__cpp_setup_initHCalibCint G__cpp_setup_initializerHCalibCint;

