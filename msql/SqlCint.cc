//
// File generated by rootcint at Mon Nov 28 11:06:46 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SqlCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SqlCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MTreeSQL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MTreeSQL(void *p);
   static void deleteArray_MTreeSQL(void *p);
   static void destruct_MTreeSQL(void *p);
   static void directoryAutoAdd_MTreeSQL(void *obj, TDirectory *dir);
   static Long64_t merge_MTreeSQL(void *obj, TCollection *coll,TFileMergeInfo *info);
   static void reset_MTreeSQL(void *obj, TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTreeSQL*)
   {
      ::MTreeSQL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTreeSQL >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTreeSQL", ::MTreeSQL::Class_Version(), "./MTreeSQL.h", 43,
                  typeid(::MTreeSQL), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTreeSQL::Dictionary, isa_proxy, 4,
                  sizeof(::MTreeSQL) );
      instance.SetDelete(&delete_MTreeSQL);
      instance.SetDeleteArray(&deleteArray_MTreeSQL);
      instance.SetDestructor(&destruct_MTreeSQL);
      instance.SetDirectoryAutoAdd(&directoryAutoAdd_MTreeSQL);
      instance.SetMerge(&merge_MTreeSQL);
      instance.SetResetAfterMerge(&reset_MTreeSQL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTreeSQL*)
   {
      return GenerateInitInstanceLocal((::MTreeSQL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTreeSQL*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSQLServer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSQLServer(void *p = 0);
   static void *newArray_MSQLServer(Long_t size, void *p);
   static void delete_MSQLServer(void *p);
   static void deleteArray_MSQLServer(void *p);
   static void destruct_MSQLServer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSQLServer*)
   {
      ::MSQLServer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSQLServer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSQLServer", ::MSQLServer::Class_Version(), "./MSQLServer.h", 17,
                  typeid(::MSQLServer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSQLServer::Dictionary, isa_proxy, 4,
                  sizeof(::MSQLServer) );
      instance.SetNew(&new_MSQLServer);
      instance.SetNewArray(&newArray_MSQLServer);
      instance.SetDelete(&delete_MSQLServer);
      instance.SetDeleteArray(&deleteArray_MSQLServer);
      instance.SetDestructor(&destruct_MSQLServer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSQLServer*)
   {
      return GenerateInitInstanceLocal((::MSQLServer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSQLServer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSQLColumn_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MSQLColumn(void *p);
   static void deleteArray_MSQLColumn(void *p);
   static void destruct_MSQLColumn(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSQLColumn*)
   {
      ::MSQLColumn *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSQLColumn >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSQLColumn", ::MSQLColumn::Class_Version(), "./MSQLServer.h", 139,
                  typeid(::MSQLColumn), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSQLColumn::Dictionary, isa_proxy, 4,
                  sizeof(::MSQLColumn) );
      instance.SetDelete(&delete_MSQLColumn);
      instance.SetDeleteArray(&deleteArray_MSQLColumn);
      instance.SetDestructor(&destruct_MSQLColumn);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSQLColumn*)
   {
      return GenerateInitInstanceLocal((::MSQLColumn*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSQLColumn*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSQLMagic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSQLMagic(void *p = 0);
   static void *newArray_MSQLMagic(Long_t size, void *p);
   static void delete_MSQLMagic(void *p);
   static void deleteArray_MSQLMagic(void *p);
   static void destruct_MSQLMagic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSQLMagic*)
   {
      ::MSQLMagic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSQLMagic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSQLMagic", ::MSQLMagic::Class_Version(), "./MSQLMagic.h", 9,
                  typeid(::MSQLMagic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSQLMagic::Dictionary, isa_proxy, 4,
                  sizeof(::MSQLMagic) );
      instance.SetNew(&new_MSQLMagic);
      instance.SetNewArray(&newArray_MSQLMagic);
      instance.SetDelete(&delete_MSQLMagic);
      instance.SetDeleteArray(&deleteArray_MSQLMagic);
      instance.SetDestructor(&destruct_MSQLMagic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSQLMagic*)
   {
      return GenerateInitInstanceLocal((::MSQLMagic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSQLMagic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MBasketSQL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MBasketSQL(void *p = 0);
   static void *newArray_MBasketSQL(Long_t size, void *p);
   static void delete_MBasketSQL(void *p);
   static void deleteArray_MBasketSQL(void *p);
   static void destruct_MBasketSQL(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MBasketSQL*)
   {
      ::MBasketSQL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MBasketSQL >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MBasketSQL", ::MBasketSQL::Class_Version(), "./MBasketSQL.h", 17,
                  typeid(::MBasketSQL), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MBasketSQL::Dictionary, isa_proxy, 4,
                  sizeof(::MBasketSQL) );
      instance.SetNew(&new_MBasketSQL);
      instance.SetNewArray(&newArray_MBasketSQL);
      instance.SetDelete(&delete_MBasketSQL);
      instance.SetDeleteArray(&deleteArray_MBasketSQL);
      instance.SetDestructor(&destruct_MBasketSQL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MBasketSQL*)
   {
      return GenerateInitInstanceLocal((::MBasketSQL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MBasketSQL*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MBufferSQL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MBufferSQL(void *p = 0);
   static void *newArray_MBufferSQL(Long_t size, void *p);
   static void delete_MBufferSQL(void *p);
   static void deleteArray_MBufferSQL(void *p);
   static void destruct_MBufferSQL(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MBufferSQL*)
   {
      ::MBufferSQL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MBufferSQL >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MBufferSQL", ::MBufferSQL::Class_Version(), "./MBufferSQL.h", 35,
                  typeid(::MBufferSQL), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MBufferSQL::Dictionary, isa_proxy, 4,
                  sizeof(::MBufferSQL) );
      instance.SetNew(&new_MBufferSQL);
      instance.SetNewArray(&newArray_MBufferSQL);
      instance.SetDelete(&delete_MBufferSQL);
      instance.SetDeleteArray(&deleteArray_MBufferSQL);
      instance.SetDestructor(&destruct_MBufferSQL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MBufferSQL*)
   {
      return GenerateInitInstanceLocal((::MBufferSQL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MBufferSQL*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MTreeSQL::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTreeSQL::Class_Name()
{
   return "MTreeSQL";
}

//______________________________________________________________________________
const char *MTreeSQL::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTreeSQL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTreeSQL::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTreeSQL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTreeSQL::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTreeSQL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTreeSQL::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTreeSQL*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSQLServer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSQLServer::Class_Name()
{
   return "MSQLServer";
}

//______________________________________________________________________________
const char *MSQLServer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLServer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSQLServer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLServer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSQLServer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLServer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSQLServer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLServer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSQLColumn::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSQLColumn::Class_Name()
{
   return "MSQLColumn";
}

//______________________________________________________________________________
const char *MSQLColumn::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLColumn*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSQLColumn::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLColumn*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSQLColumn::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLColumn*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSQLColumn::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLColumn*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSQLMagic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSQLMagic::Class_Name()
{
   return "MSQLMagic";
}

//______________________________________________________________________________
const char *MSQLMagic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLMagic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSQLMagic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLMagic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSQLMagic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLMagic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSQLMagic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSQLMagic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MBasketSQL::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MBasketSQL::Class_Name()
{
   return "MBasketSQL";
}

//______________________________________________________________________________
const char *MBasketSQL::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBasketSQL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MBasketSQL::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBasketSQL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MBasketSQL::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBasketSQL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MBasketSQL::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBasketSQL*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MBufferSQL::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MBufferSQL::Class_Name()
{
   return "MBufferSQL";
}

//______________________________________________________________________________
const char *MBufferSQL::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBufferSQL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MBufferSQL::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBufferSQL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MBufferSQL::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBufferSQL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MBufferSQL::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBufferSQL*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MSQLColumn::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSQLColumn.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSQLColumn::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSQLColumn::Class(),this);
   }
}

//______________________________________________________________________________
void MSQLColumn::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSQLColumn.
      TClass *R__cl = ::MSQLColumn::IsA();
      if (R__cl || R__insp.IsA()) { }
      MSQLServer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MSQLColumn(void *p) {
      delete ((::MSQLColumn*)p);
   }
   static void deleteArray_MSQLColumn(void *p) {
      delete [] ((::MSQLColumn*)p);
   }
   static void destruct_MSQLColumn(void *p) {
      typedef ::MSQLColumn current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSQLColumn

//______________________________________________________________________________
void MSQLServer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSQLServer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSQLServer::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSQLServer::Class(),this);
   }
}

//______________________________________________________________________________
void MSQLServer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSQLServer.
      TClass *R__cl = ::MSQLServer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServ", &fServ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrees", &fTrees);
      R__insp.InspectMember(fTrees, "fTrees.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataBase", &fDataBase);
      R__insp.InspectMember(fDataBase, "fDataBase.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTable", &fTable);
      R__insp.InspectMember(fTable, "fTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColumn", &fColumn);
      R__insp.InspectMember(fColumn, "fColumn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fList", &fList);
      R__insp.InspectMember(fList, "fList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSQLServer(void *p) {
      return  p ? new(p) ::MSQLServer : new ::MSQLServer;
   }
   static void *newArray_MSQLServer(Long_t nElements, void *p) {
      return p ? new(p) ::MSQLServer[nElements] : new ::MSQLServer[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSQLServer(void *p) {
      delete ((::MSQLServer*)p);
   }
   static void deleteArray_MSQLServer(void *p) {
      delete [] ((::MSQLServer*)p);
   }
   static void destruct_MSQLServer(void *p) {
      typedef ::MSQLServer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSQLServer

//______________________________________________________________________________
void MSQLMagic::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSQLMagic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSQLMagic::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSQLMagic::Class(),this);
   }
}

//______________________________________________________________________________
void MSQLMagic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSQLMagic.
      TClass *R__cl = ::MSQLMagic::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsDummy", &fIsDummy);
      MSQLServer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSQLMagic(void *p) {
      return  p ? new(p) ::MSQLMagic : new ::MSQLMagic;
   }
   static void *newArray_MSQLMagic(Long_t nElements, void *p) {
      return p ? new(p) ::MSQLMagic[nElements] : new ::MSQLMagic[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSQLMagic(void *p) {
      delete ((::MSQLMagic*)p);
   }
   static void deleteArray_MSQLMagic(void *p) {
      delete [] ((::MSQLMagic*)p);
   }
   static void destruct_MSQLMagic(void *p) {
      typedef ::MSQLMagic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSQLMagic

//______________________________________________________________________________
void MTreeSQL::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTreeSQL.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTreeSQL::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTreeSQL::Class(),this);
   }
}

//______________________________________________________________________________
void MTreeSQL::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTreeSQL.
      TClass *R__cl = ::MTreeSQL::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fServer", &fServer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQuery", &fQuery);
      R__insp.InspectMember(fQuery, "fQuery.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTables", (void*)&fTables);
      R__insp.InspectMember("vector<TString>", (void*)&fTables, "fTables.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRows", (void*)&fRows);
      R__insp.InspectMember("vector<TSQLRow*>", (void*)&fRows, "fRows.", false);
      TTree::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MTreeSQL(void *p) {
      delete ((::MTreeSQL*)p);
   }
   static void deleteArray_MTreeSQL(void *p) {
      delete [] ((::MTreeSQL*)p);
   }
   static void destruct_MTreeSQL(void *p) {
      typedef ::MTreeSQL current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the directory auto add.
   static void directoryAutoAdd_MTreeSQL(void *p, TDirectory *dir) {
      ((::MTreeSQL*)p)->DirectoryAutoAdd(dir);
   }
   // Wrapper around the merge function.
   static Long64_t merge_MTreeSQL(void *obj,TCollection *coll,TFileMergeInfo *info) {
      return ((::MTreeSQL*)obj)->Merge(coll,info);
   }
   // Wrapper around the Reset function.
   static void reset_MTreeSQL(void *obj,TFileMergeInfo *info) {
      ((::MTreeSQL*)obj)->ResetAfterMerge(info);
   }
} // end of namespace ROOTDict for class ::MTreeSQL

//______________________________________________________________________________
void MBasketSQL::Streamer(TBuffer &R__b)
{
   // Stream an object of class MBasketSQL.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MBasketSQL::Class(),this);
   } else {
      R__b.WriteClassBuffer(MBasketSQL::Class(),this);
   }
}

//______________________________________________________________________________
void MBasketSQL::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MBasketSQL.
      TClass *R__cl = ::MBasketSQL::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRowPtr", &fRowPtr);
      TBasket::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MBasketSQL(void *p) {
      return  p ? new(p) ::MBasketSQL : new ::MBasketSQL;
   }
   static void *newArray_MBasketSQL(Long_t nElements, void *p) {
      return p ? new(p) ::MBasketSQL[nElements] : new ::MBasketSQL[nElements];
   }
   // Wrapper around operator delete
   static void delete_MBasketSQL(void *p) {
      delete ((::MBasketSQL*)p);
   }
   static void deleteArray_MBasketSQL(void *p) {
      delete [] ((::MBasketSQL*)p);
   }
   static void destruct_MBasketSQL(void *p) {
      typedef ::MBasketSQL current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MBasketSQL

//______________________________________________________________________________
void MBufferSQL::Streamer(TBuffer &R__b)
{
   // Stream an object of class MBufferSQL.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MBufferSQL::Class(),this);
   } else {
      R__b.WriteClassBuffer(MBufferSQL::Class(),this);
   }
}

//______________________________________________________________________________
void MBufferSQL::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MBufferSQL.
      TClass *R__cl = ::MBufferSQL::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRowPtr", &fRowPtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsDate", &fIsDate);
      TBufferFile::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MBufferSQL(void *p) {
      return  p ? new(p) ::MBufferSQL : new ::MBufferSQL;
   }
   static void *newArray_MBufferSQL(Long_t nElements, void *p) {
      return p ? new(p) ::MBufferSQL[nElements] : new ::MBufferSQL[nElements];
   }
   // Wrapper around operator delete
   static void delete_MBufferSQL(void *p) {
      delete ((::MBufferSQL*)p);
   }
   static void deleteArray_MBufferSQL(void *p) {
      delete [] ((::MBufferSQL*)p);
   }
   static void destruct_MBufferSQL(void *p) {
      typedef ::MBufferSQL current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MBufferSQL

namespace ROOTDict {
   void vectorlETSQLRowmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETSQLRowmUgR_Dictionary();
   static void *new_vectorlETSQLRowmUgR(void *p = 0);
   static void *newArray_vectorlETSQLRowmUgR(Long_t size, void *p);
   static void delete_vectorlETSQLRowmUgR(void *p);
   static void deleteArray_vectorlETSQLRowmUgR(void *p);
   static void destruct_vectorlETSQLRowmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TSQLRow*>*)
   {
      vector<TSQLRow*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TSQLRow*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TSQLRow*>", -2, "/home/sebastian/CERN_root/build_5.34.36/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TSQLRow*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETSQLRowmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TSQLRow*>) );
      instance.SetNew(&new_vectorlETSQLRowmUgR);
      instance.SetNewArray(&newArray_vectorlETSQLRowmUgR);
      instance.SetDelete(&delete_vectorlETSQLRowmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETSQLRowmUgR);
      instance.SetDestructor(&destruct_vectorlETSQLRowmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TSQLRow*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TSQLRow*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETSQLRowmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TSQLRow*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETSQLRowmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TSQLRow*> : new vector<TSQLRow*>;
   }
   static void *newArray_vectorlETSQLRowmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TSQLRow*>[nElements] : new vector<TSQLRow*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETSQLRowmUgR(void *p) {
      delete ((vector<TSQLRow*>*)p);
   }
   static void deleteArray_vectorlETSQLRowmUgR(void *p) {
      delete [] ((vector<TSQLRow*>*)p);
   }
   static void destruct_vectorlETSQLRowmUgR(void *p) {
      typedef vector<TSQLRow*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TSQLRow*>

namespace ROOTDict {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "/home/sebastian/CERN_root/build_5.34.36/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TString>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TString>

/********************************************************
* SqlCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSqlCint();

extern "C" void G__set_cpp_environmentSqlCint() {
  G__cpp_reset_tagtableSqlCint();
}
#include <new>
extern "C" int G__cpp_dllrevSqlCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MTreeSQL */
static int G__SqlCint_140_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTreeSQL* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTreeSQL(
(MSQLServer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) MTreeSQL(
(MSQLServer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTreeSQL((MSQLServer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) MTreeSQL((MSQLServer*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTreeSQL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreeSQL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTreeSQL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTreeSQL::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTreeSQL*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreeSQL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTreeSQL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreeSQL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_140_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTreeSQL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTreeSQL G__TMTreeSQL;
static int G__SqlCint_140_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTreeSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTreeSQL*) (soff+(sizeof(MTreeSQL)*i)))->~G__TMTreeSQL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTreeSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTreeSQL*) (soff))->~G__TMTreeSQL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSQLServer */
static int G__SqlCint_141_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MSQLServer(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MSQLServer(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSQLServer((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer((TSQLServer*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSQLServer((TSQLServer*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSQLServer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) MSQLServer(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSQLServer((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MSQLServer((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer(*(TEnv*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSQLServer(*(TEnv*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer(*(TEnv*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MSQLServer(*(TEnv*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSQLServer(*(MSQLServer*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MSQLServer(*(MSQLServer*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLServer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer[n];
     } else {
       p = new((void*) gvp) MSQLServer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLServer;
     } else {
       p = new((void*) gvp) MSQLServer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSQLServer::PrintLine(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSQLServer::PrintTable(*(TSQLResult*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MSQLServer*) G__getstructoffset())->GetNameDataBase());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->PrintQuery((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowColumns();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowTableIndex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowTableCreate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowVariables();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MSQLServer*) G__getstructoffset())->ShowProcesses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSQLServer*) G__getstructoffset())->Close((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSQLServer*) G__getstructoffset())->Close();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->Query((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MSQLServer*) G__getstructoffset())->Exec((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLServer*) G__getstructoffset())->SelectDataBase((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetDataBases((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetDataBases());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetTables((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetTables((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetTables());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetColumns((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetColumns((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetColumns((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLServer*) G__getstructoffset())->CreateDataBase((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLServer*) G__getstructoffset())->DropDataBase((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLServer*) G__getstructoffset())->Reload());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLServer*) G__getstructoffset())->Shutdown());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MSQLServer*) G__getstructoffset())->ServerInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSQLServer*) G__getstructoffset())->IsConnected());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         const TString* pobj;
         const TString xobj = ((const MSQLServer*) G__getstructoffset())->GetEntry((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const TString* pobj;
         const TString xobj = ((const MSQLServer*) G__getstructoffset())->GetEntry((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const TString* pobj;
         const TString xobj = ((const MSQLServer*) G__getstructoffset())->GetEntry((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MSQLServer*) G__getstructoffset())->GetPrimaryKeys((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MSQLServer*) G__getstructoffset())->GetJoins((const char*) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetTree(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) ((MSQLServer*) G__getstructoffset())->GetTree(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSQLServer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLServer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSQLServer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSQLServer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSQLServer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLServer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLServer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLServer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_141_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLServer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSQLServer G__TMSQLServer;
static int G__SqlCint_141_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSQLServer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSQLServer*) (soff+(sizeof(MSQLServer)*i)))->~G__TMSQLServer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSQLServer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSQLServer*) (soff))->~G__TMSQLServer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSQLColumn */
static int G__SqlCint_144_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLColumn* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLColumn(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MSQLColumn(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLColumn(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MSQLColumn(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLColumn((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSQLColumn((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLColumn((TSQLServer*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSQLColumn((TSQLServer*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSQLColumn::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLColumn::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSQLColumn::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSQLColumn::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSQLColumn*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLColumn::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLColumn::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLColumn::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_144_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLColumn::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSQLColumn G__TMSQLColumn;
static int G__SqlCint_144_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSQLColumn*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSQLColumn*) (soff+(sizeof(MSQLColumn)*i)))->~G__TMSQLColumn();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSQLColumn*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSQLColumn*) (soff))->~G__TMSQLColumn();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSQLMagic */
static int G__SqlCint_145_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MSQLMagic(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MSQLMagic(
(TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSQLMagic((TSQLServer*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic((TSQLServer*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSQLMagic((TSQLServer*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSQLMagic(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) MSQLMagic(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSQLMagic((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MSQLMagic((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic(*(TEnv*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSQLMagic(*(TEnv*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic(*(TEnv*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MSQLMagic(*(TEnv*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSQLMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic[n];
     } else {
       p = new((void*) gvp) MSQLMagic[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSQLMagic;
     } else {
       p = new((void*) gvp) MSQLMagic;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSQLMagic*) G__getstructoffset())->SetIsDummy((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSQLMagic*) G__getstructoffset())->SetIsDummy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSQLMagic*) G__getstructoffset())->IsDummy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MSQLMagic*) G__getstructoffset())->QueryValOf(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MSQLMagic*) G__getstructoffset())->QueryValOfKey(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MSQLMagic*) G__getstructoffset())->QueryNameOfKey(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->QueryKeyOfName((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->QueryKeyOfName((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->QueryKeyOfVal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->QueryKeyOf((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MSQLMagic*) G__getstructoffset())->ExistStr((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MSQLMagic*) G__getstructoffset())->ExistStr((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MSQLMagic*) G__getstructoffset())->ExistRow((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->Insert((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->Insert((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->Update((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->Update((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->Delete((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->InsertUpdate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSQLMagic*) G__getstructoffset())->InsertUpdate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSQLMagic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLMagic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSQLMagic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSQLMagic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSQLMagic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLMagic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLMagic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSQLMagic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_145_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSQLMagic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSQLMagic G__TMSQLMagic;
static int G__SqlCint_145_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSQLMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSQLMagic*) (soff+(sizeof(MSQLMagic)*i)))->~G__TMSQLMagic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSQLMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSQLMagic*) (soff))->~G__TMSQLMagic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MBasketSQL */
static int G__SqlCint_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBasketSQL* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBasketSQL[n];
     } else {
       p = new((void*) gvp) MBasketSQL[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBasketSQL;
     } else {
       p = new((void*) gvp) MBasketSQL;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBasketSQL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MBasketSQL(
(TBranch*) G__int(libp->para[0]), (TSQLRow**) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
   } else {
     p = new((void*) gvp) MBasketSQL(
(TBranch*) G__int(libp->para[0]), (TSQLRow**) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MBasketSQL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBasketSQL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MBasketSQL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MBasketSQL::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBasketSQL*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBasketSQL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBasketSQL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBasketSQL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBasketSQL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MBasketSQL G__TMBasketSQL;
static int G__SqlCint_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MBasketSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MBasketSQL*) (soff+(sizeof(MBasketSQL)*i)))->~G__TMBasketSQL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MBasketSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MBasketSQL*) (soff))->~G__TMBasketSQL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MBufferSQL */
static int G__SqlCint_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBufferSQL* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBufferSQL[n];
     } else {
       p = new((void*) gvp) MBufferSQL[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBufferSQL;
     } else {
       p = new((void*) gvp) MBufferSQL;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBufferSQL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MBufferSQL(
(TSQLRow**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   } else {
     p = new((void*) gvp) MBufferSQL(
(TSQLRow**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MBufferSQL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBufferSQL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MBufferSQL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MBufferSQL::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBufferSQL*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBufferSQL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBufferSQL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBufferSQL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SqlCint_238_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBufferSQL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MBufferSQL G__TMBufferSQL;
static int G__SqlCint_238_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MBufferSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MBufferSQL*) (soff+(sizeof(MBufferSQL)*i)))->~G__TMBufferSQL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MBufferSQL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MBufferSQL*) (soff))->~G__TMBufferSQL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MTreeSQL */

/* MSQLServer */

/* MSQLColumn */

/* MSQLMagic */

/* MBasketSQL */

/* MBufferSQL */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSqlCint {
 public:
  G__Sizep2memfuncSqlCint(): p(&G__Sizep2memfuncSqlCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSqlCint::*p)();
};

size_t G__get_sizep2memfuncSqlCint()
{
  G__Sizep2memfuncSqlCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSqlCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL))) {
     MTreeSQL *G__Lderived;
     G__Lderived=(MTreeSQL*)0x1000;
     {
       TTree *G__Lpbase=(TTree*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TTree),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL),G__get_linked_tagnum(&G__SqlCintLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MSQLServer))) {
     MSQLServer *G__Lderived;
     G__Lderived=(MSQLServer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLServer),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn))) {
     MSQLColumn *G__Lderived;
     G__Lderived=(MSQLColumn*)0x1000;
     {
       MSQLServer *G__Lpbase=(MSQLServer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn),G__get_linked_tagnum(&G__SqlCintLN_MSQLServer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic))) {
     MSQLMagic *G__Lderived;
     G__Lderived=(MSQLMagic*)0x1000;
     {
       MSQLServer *G__Lpbase=(MSQLServer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic),G__get_linked_tagnum(&G__SqlCintLN_MSQLServer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_TTree))) {
     TTree *G__Lderived;
     G__Lderived=(TTree*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_TTree),G__get_linked_tagnum(&G__SqlCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_TTree),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_TTree),G__get_linked_tagnum(&G__SqlCintLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_TTree),G__get_linked_tagnum(&G__SqlCintLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_TTree),G__get_linked_tagnum(&G__SqlCintLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL))) {
     MBasketSQL *G__Lderived;
     G__Lderived=(MBasketSQL*)0x1000;
     {
       TBasket *G__Lpbase=(TBasket*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL),G__get_linked_tagnum(&G__SqlCintLN_TBasket),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TKey *G__Lpbase=(TKey*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL),G__get_linked_tagnum(&G__SqlCintLN_TKey),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL),G__get_linked_tagnum(&G__SqlCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL))) {
     MBufferSQL *G__Lderived;
     G__Lderived=(MBufferSQL*)0x1000;
     {
       TBufferFile *G__Lpbase=(TBufferFile*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL),G__get_linked_tagnum(&G__SqlCintLN_TBufferFile),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TBuffer *G__Lpbase=(TBuffer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL),G__get_linked_tagnum(&G__SqlCintLN_TBuffer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL),G__get_linked_tagnum(&G__SqlCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSqlCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TSQLRow*>",117,G__get_linked_tagnum(&G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SqlCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MTreeSQL */
static void G__setup_memvarMTreeSQL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL));
   { MTreeSQL *p; p=(MTreeSQL*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_MSQLServer),-1,-1,2,"fServer=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TString),-1,-1,2,"fQuery=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TSQLResult),-1,-1,2,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TSQLRow),-1,-1,2,"fRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,2,"fTables=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR),G__defined_typename("vector<TSQLRow*>"),-1,2,"fRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSQLServer */
static void G__setup_memvarMSQLServer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   { MSQLServer *p; p=(MSQLServer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TSQLServer),-1,-1,4,"fServ=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TList),-1,-1,4,"fTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TString),-1,-1,4,"fDataBase=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TString),-1,-1,4,"fTable=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TString),-1,-1,4,"fColumn=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SqlCintLN_TList),-1,-1,4,"fList=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-2,4,"kIsZombie=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-2,4,"kIsServer=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-2,4,"kIsDataBase=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-2,4,"kIsTable=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-2,4,"kIsColumn=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLType_t),-1,-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SqlCintLN_MSQLServercLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSQLColumn */
static void G__setup_memvarMSQLColumn(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn));
   { MSQLColumn *p; p=(MSQLColumn*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSQLMagic */
static void G__setup_memvarMSQLMagic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   { MSQLMagic *p; p=(MSQLMagic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsDummy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MBasketSQL */
static void G__setup_memvarMBasketSQL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL));
   { MBasketSQL *p; p=(MBasketSQL*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__SqlCintLN_TSQLRow),-1,-1,2,"fRowPtr=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MBufferSQL */
static void G__setup_memvarMBufferSQL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL));
   { MBufferSQL *p; p=(MBufferSQL*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__SqlCintLN_TSQLRow),-1,-1,4,"fRowPtr=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SqlCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSqlCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMTreeSQL(void) {
   /* MTreeSQL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL));
   G__memfunc_setup("CheckTable",966,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 8, "u 'TString' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BranchImp",884,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SqlCintLN_TBranch), -1, 0, 6, 1, 2, 0, 
"C - - 10 - branchname C - - 10 - classname "
"U 'TClass' - 0 - ptrClass Y - - 0 - addobj "
"i - 'Int_t' 0 - bufsize i - 'Int_t' 0 - splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BranchImp",884,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SqlCintLN_TBranch), -1, 0, 5, 1, 2, 0, 
"C - - 10 - branchname U 'TClass' - 0 - ptrClass "
"Y - - 0 - addobj i - 'Int_t' 0 - bufsize "
"i - 'Int_t' 0 - splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MTreeSQL",717,G__SqlCint_140_0_5, 105, G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL), -1, 0, 3, 1, 1, 0, 
"U 'MSQLServer' - 0 - server u 'TString' - 11 - table "
"u 'TString' - 11 '\"\"' addon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Branch",590,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"U 'TCollection' - 0 - list i - 'Int_t' 0 '32000' bufsize "
"i - 'Int_t' 0 '99' splitlevel C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Branch",590,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'TList' - 0 - list i - 'Int_t' 0 '32000' bufsize "
"i - 'Int_t' 0 '99' splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Branch",590,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - folder i - 'Int_t' 0 '32000' bufsize "
"i - 'Int_t' 0 '99' splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Bronch",604,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TBranch), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - classname "
"Y - - 0 - addobj i - 'Int_t' 0 '32000' bufsize "
"i - 'Int_t' 0 '99' splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BranchOld",877,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TBranch), -1, 0, 5, 1, 1, 0, 
"C - - 10 - name C - - 10 - classname "
"Y - - 0 - addobj i - 'Int_t' 0 '32000' bufsize "
"i - 'Int_t' 0 '1' splitlevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Branch",590,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TBranch), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name Y - - 0 - address "
"C - - 10 - leaflist i - 'Int_t' 0 - bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "C - - 10 - sel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntriesFast",1416,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadTree",784,(G__InterfaceMethod) NULL,110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Refresh",719,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SqlCint_140_0_18, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTreeSQL::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_140_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreeSQL::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_140_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTreeSQL::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_140_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTreeSQL::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_140_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_140_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreeSQL::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_140_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTreeSQL::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_140_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreeSQL::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_140_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTreeSQL::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MTreeSQL", 843, G__SqlCint_140_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSQLServer(void) {
   /* MSQLServer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLServer));
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintError",1047,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"C - - 10 - txt C - - 10 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFields",887,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BrowseDataBase",1383,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BrowseTable",1114,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BrowseColumn",1248,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BrowseServer",1257,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNameTable",1161,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNameColumn",1295,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Split",524,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"u 'TString' - 1 - url u 'TString' - 1 - user "
"u 'TString' - 1 - pasw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"C - - 10 - connection C - - 10 - user "
"C - - 10 - password", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitEnv",701,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TEnv' - 1 - env C - - 10 '0' prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_14, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 4, 1, 1, 0, 
"U 'TSQLServer' - 0 - serv C - - 10 '0' dbname "
"C - - 10 '0' tname C - - 10 '0' col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_15, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 3, 1, 1, 0, 
"C - - 10 - connection C - - 10 - user "
"C - - 10 - password", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_16, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 1, 1, 1, 0, "C - - 10 - link", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_17, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 2, 1, 1, 0, 
"u 'TEnv' - 1 - env C - - 10 '0' prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_18, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 1, 1, 1, 0, "u 'MSQLServer' - 1 - serv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLServer",948,G__SqlCint_141_0_19, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLServer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintLine",917,G__SqlCint_141_0_20, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TArrayI' - 11 - max", (char*)NULL, (void*) G__func2void( (void (*)(const TArrayI&))(&MSQLServer::PrintLine) ), 0);
   G__memfunc_setup("PrintTable",1013,G__SqlCint_141_0_21, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TSQLResult' - 1 - res", (char*)NULL, (void*) G__func2void( (void (*)(TSQLResult&))(&MSQLServer::PrintTable) ), 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNameDataBase",1430,G__SqlCint_141_0_23, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__SqlCint_141_0_25, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("PrintQuery",1059,G__SqlCint_141_0_26, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - query", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowColumns",1154,G__SqlCint_141_0_27, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowStatus",1061,G__SqlCint_141_0_28, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowTableIndex",1409,G__SqlCint_141_0_29, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowTableCreate",1501,G__SqlCint_141_0_30, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowVariables",1338,G__SqlCint_141_0_31, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ShowProcesses",1368,G__SqlCint_141_0_32, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__SqlCint_141_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Query",534,G__SqlCint_141_0_34, 85, G__get_linked_tagnum(&G__SqlCintLN_TSQLResult), -1, 0, 1, 1, 1, 0, "C - - 10 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exec",389,G__SqlCint_141_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - sql", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectDataBase",1365,G__SqlCint_141_0_36, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - dbname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBases",1160,G__SqlCint_141_0_37, 85, G__get_linked_tagnum(&G__SqlCintLN_TSQLResult), -1, 0, 1, 1, 1, 0, "C - - 10 '0' wild", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTables",891,G__SqlCint_141_0_38, 85, G__get_linked_tagnum(&G__SqlCintLN_TSQLResult), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' wild C - - 10 '0' dbname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColumns",1025,G__SqlCint_141_0_39, 85, G__get_linked_tagnum(&G__SqlCintLN_TSQLResult), -1, 0, 3, 1, 1, 0, 
"C - - 10 - table C - - 10 '0' wild "
"C - - 10 '0' dbname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateDataBase",1353,G__SqlCint_141_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - dbname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DropDataBase",1162,G__SqlCint_141_0_41, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - dbname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reload",599,G__SqlCint_141_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shutdown",860,G__SqlCint_141_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ServerInfo",1027,G__SqlCint_141_0_44, 67, -1, -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConnected",1103,G__SqlCint_141_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__SqlCint_141_0_46, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 3, 1, 1, 8, 
"C - - 10 - where C - - 10 '0' col "
"C - - 10 '0' table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrimaryKeys",1440,G__SqlCint_141_0_47, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 1, 1, 1, 0, "C - - 10 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJoins",803,G__SqlCint_141_0_48, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 2, 1, 1, 0, 
"C - - 10 - table u 'TString' - 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTree",688,G__SqlCint_141_0_50, 85, G__get_linked_tagnum(&G__SqlCintLN_MTreeSQL), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - table u 'TString' - 0 '\"\"' addon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SqlCint_141_0_51, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSQLServer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_141_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLServer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_141_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSQLServer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_141_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSQLServer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_141_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_141_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLServer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_141_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLServer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_141_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLServer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_141_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLServer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSQLServer", 1074, G__SqlCint_141_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSQLColumn(void) {
   /* MSQLColumn */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn));
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSQLColumn",939,G__SqlCint_144_0_2, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLColumn), -1, 0, 4, 1, 1, 0, 
"U 'TSQLServer' - 0 - serv C - - 10 '0' dbname "
"C - - 10 '0' tname C - - 10 '0' col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SqlCint_144_0_3, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSQLColumn::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_144_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLColumn::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_144_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSQLColumn::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_144_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSQLColumn::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_144_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_144_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLColumn::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_144_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLColumn::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_144_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLColumn::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_144_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLColumn::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSQLColumn", 1065, G__SqlCint_144_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSQLMagic(void) {
   /* MSQLMagic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic));
   G__memfunc_setup("MSQLMagic",798,G__SqlCint_145_0_1, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic), -1, 0, 4, 1, 1, 0, 
"U 'TSQLServer' - 0 - serv C - - 10 '0' dbname "
"C - - 10 '0' tname C - - 10 '0' col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLMagic",798,G__SqlCint_145_0_2, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic), -1, 0, 3, 1, 1, 0, 
"C - - 10 - connection C - - 10 - user "
"C - - 10 - password", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLMagic",798,G__SqlCint_145_0_3, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic), -1, 0, 1, 1, 1, 0, "C - - 10 - link", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLMagic",798,G__SqlCint_145_0_4, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic), -1, 0, 2, 1, 1, 0, 
"u 'TEnv' - 1 - env C - - 10 '0' prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSQLMagic",798,G__SqlCint_145_0_5, 105, G__get_linked_tagnum(&G__SqlCintLN_MSQLMagic), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIsDummy",1012,G__SqlCint_145_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' dummy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDummy",712,G__SqlCint_145_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryValOf",1006,G__SqlCint_145_0_8, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - col C - - 10 - ext "
"C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryValOfKey",1303,G__SqlCint_145_0_9, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - col C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryNameOfKey",1397,G__SqlCint_145_0_10, 117, G__get_linked_tagnum(&G__SqlCintLN_TString), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - col C - - 10 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryKeyOfName",1397,G__SqlCint_145_0_11, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - col C - - 10 - name "
"g - 'Bool_t' 0 'kTRUE' insert", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryKeyOfVal",1303,G__SqlCint_145_0_12, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - col C - - 10 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueryKeyOf",1012,G__SqlCint_145_0_13, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - col C - - 10 - ext "
"C - - 10 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExistStr",838,G__SqlCint_145_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - column C - - 10 - table "
"C - - 10 - test C - - 10 '0' where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExistRow",837,G__SqlCint_145_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - - 10 - table C - - 10 - where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Insert",629,G__SqlCint_145_0_16, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - table C - - 10 - vars "
"C - - 10 '0' where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__SqlCint_145_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - table C - - 10 - vars "
"C - - 10 '0' where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Delete",595,G__SqlCint_145_0_18, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - table C - - 10 - where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertUpdate",1240,G__SqlCint_145_0_19, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"C - - 10 - table C - - 10 - col "
"C - - 10 - val C - - 10 - vars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertUpdate",1240,G__SqlCint_145_0_20, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 - table C - - 10 - vars "
"C - - 10 - where", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Delete",595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SqlCint_145_0_22, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSQLMagic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_145_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLMagic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_145_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSQLMagic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_145_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSQLMagic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_145_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_145_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLMagic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_145_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLMagic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_145_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSQLMagic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_145_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSQLMagic::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSQLMagic", 924, G__SqlCint_145_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMBasketSQL(void) {
   /* MBasketSQL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL));
   G__memfunc_setup("MBasketSQL",919,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL), -1, 0, 1, 1, 4, 0, "u 'MBasketSQL' - 11 - -", "MBasketSQL objects are not copiable.", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL), -1, 1, 1, 1, 4, 0, "u 'MBasketSQL' - 11 - -", "MBasketSQL objects are not copiable.", (void*) NULL, 0);
   G__memfunc_setup("MBasketSQL",919,G__SqlCint_231_0_3, 105, G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBasketSQL",919,G__SqlCint_231_0_4, 105, G__get_linked_tagnum(&G__SqlCintLN_MBasketSQL), -1, 0, 4, 1, 1, 0, 
"U 'TBranch' - 0 - b U 'TSQLRow' - 2 - r "
"i - 'Int_t' 0 - index u 'TString' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareBasket",1321,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBasketBuffers",1699,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"n - 'Long64_t' 0 - pos i - 'Int_t' 0 - len "
"U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBasketBytes",1501,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"n - 'Long64_t' 0 - pos U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - offset i - 'Int_t' 0 - skipped", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SqlCint_231_0_9, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MBasketSQL::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_231_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBasketSQL::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_231_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MBasketSQL::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_231_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MBasketSQL::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_231_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_231_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBasketSQL::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_231_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBasketSQL::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_231_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBasketSQL::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_231_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBasketSQL::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MBasketSQL", 1045, G__SqlCint_231_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMBufferSQL(void) {
   /* MBufferSQL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL));
   G__memfunc_setup("MBufferSQL",919,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL), -1, 0, 1, 1, 4, 0, "u 'MBufferSQL' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'MBufferSQL' - 11 - -", "not implemented", (void*) NULL, 0);
   G__memfunc_setup("MBufferSQL",919,G__SqlCint_238_0_3, 105, G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBufferSQL",919,G__SqlCint_238_0_4, 105, G__get_linked_tagnum(&G__SqlCintLN_MBufferSQL), -1, 0, 3, 1, 1, 0, 
"U 'TSQLRow' - 2 - row i - 'Int_t' 0 - index "
"u 'TString' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDouble",983,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 1 - d", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SqlCint_238_0_6, 85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MBufferSQL::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SqlCint_238_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBufferSQL::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SqlCint_238_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MBufferSQL::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SqlCint_238_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MBufferSQL::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SqlCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SqlCint_238_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SqlCint_238_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBufferSQL::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SqlCint_238_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBufferSQL::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SqlCint_238_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBufferSQL::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SqlCint_238_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBufferSQL::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MBufferSQL", 1045, G__SqlCint_238_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSqlCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSqlCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSqlCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SqlCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TBufferFile = { "TBufferFile" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SqlCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TSQLServer = { "TSQLServer" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TSQLResult = { "TSQLResult" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MTreeSQL = { "MTreeSQL" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MSQLServer = { "MSQLServer" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MSQLServercLcLType_t = { "MSQLServer::Type_t" , 101 , -1 };
G__linked_taginfo G__SqlCintLN_MSQLServercLcLdA = { "MSQLServer::$" , 101 , -1 };
G__linked_taginfo G__SqlCintLN_MSQLColumn = { "MSQLColumn" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MSQLMagic = { "MSQLMagic" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TBasket = { "TBasket" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TSQLRow = { "TSQLRow" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR = { "vector<TSQLRow*,allocator<TSQLRow*> >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_reverse_iteratorlEvectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TSQLRow*,allocator<TSQLRow*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_TKey = { "TKey" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MBasketSQL = { "MBasketSQL" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SqlCintLN_MBufferSQL = { "MBufferSQL" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSqlCint() {
  G__SqlCintLN_TClass.tagnum = -1 ;
  G__SqlCintLN_TBuffer.tagnum = -1 ;
  G__SqlCintLN_TMemberInspector.tagnum = -1 ;
  G__SqlCintLN_TObject.tagnum = -1 ;
  G__SqlCintLN_TNamed.tagnum = -1 ;
  G__SqlCintLN_TCollection.tagnum = -1 ;
  G__SqlCintLN_TString.tagnum = -1 ;
  G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SqlCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SqlCintLN_TList.tagnum = -1 ;
  G__SqlCintLN_TBrowser.tagnum = -1 ;
  G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SqlCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SqlCintLN_TBufferFile.tagnum = -1 ;
  G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SqlCintLN_TEnv.tagnum = -1 ;
  G__SqlCintLN_TArrayI.tagnum = -1 ;
  G__SqlCintLN_TSQLServer.tagnum = -1 ;
  G__SqlCintLN_TSQLResult.tagnum = -1 ;
  G__SqlCintLN_MTreeSQL.tagnum = -1 ;
  G__SqlCintLN_MSQLServer.tagnum = -1 ;
  G__SqlCintLN_MSQLServercLcLType_t.tagnum = -1 ;
  G__SqlCintLN_MSQLServercLcLdA.tagnum = -1 ;
  G__SqlCintLN_MSQLColumn.tagnum = -1 ;
  G__SqlCintLN_MSQLMagic.tagnum = -1 ;
  G__SqlCintLN_TAttFill.tagnum = -1 ;
  G__SqlCintLN_TTree.tagnum = -1 ;
  G__SqlCintLN_TBasket.tagnum = -1 ;
  G__SqlCintLN_TFile.tagnum = -1 ;
  G__SqlCintLN_TBranch.tagnum = -1 ;
  G__SqlCintLN_TAttLine.tagnum = -1 ;
  G__SqlCintLN_TAttMarker.tagnum = -1 ;
  G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__SqlCintLN_TSQLRow.tagnum = -1 ;
  G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__SqlCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR.tagnum = -1 ;
  G__SqlCintLN_reverse_iteratorlEvectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SqlCintLN_TKey.tagnum = -1 ;
  G__SqlCintLN_MBasketSQL.tagnum = -1 ;
  G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__SqlCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SqlCintLN_MBufferSQL.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSqlCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TCollection);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TString);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TList);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TBufferFile);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TSQLServer);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TSQLResult);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MTreeSQL),sizeof(MTreeSQL),-1,324608,"TTree Implementation read and write to a SQL database.",G__setup_memvarMTreeSQL,G__setup_memfuncMTreeSQL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MSQLServer),sizeof(MSQLServer),-1,325376,"An enhancement of TSQLServer",G__setup_memvarMSQLServer,G__setup_memfuncMSQLServer);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_MSQLServercLcLType_t);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_MSQLServercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MSQLColumn),sizeof(MSQLColumn),-1,323584,"A workarount to let MSQLServer return kFALSE for IsFolder",G__setup_memvarMSQLColumn,G__setup_memfuncMSQLColumn);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MSQLMagic),sizeof(MSQLMagic),-1,323840,"An enhancement of MSQLServer featuring our database",G__setup_memvarMSQLMagic,G__setup_memfuncMSQLMagic);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TTree);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TBasket);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TFile);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TBranch);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TSQLRow);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_vectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_reverse_iteratorlEvectorlETSQLRowmUcOallocatorlETSQLRowmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_TKey);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MBasketSQL),sizeof(MBasketSQL),-1,326400,"the TBranch buffers",G__setup_memvarMBasketSQL,G__setup_memfuncMBasketSQL);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SqlCintLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SqlCintLN_MBufferSQL),sizeof(MBufferSQL),-1,326400,"Implementation of TBuffer to load and write to a SQL database",G__setup_memvarMBufferSQL,G__setup_memfuncMBufferSQL);
}
extern "C" void G__cpp_setupSqlCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupSqlCint()");
  G__set_cpp_environmentSqlCint();
  G__cpp_setup_tagtableSqlCint();

  G__cpp_setup_inheritanceSqlCint();

  G__cpp_setup_typetableSqlCint();

  G__cpp_setup_memvarSqlCint();

  G__cpp_setup_memfuncSqlCint();
  G__cpp_setup_globalSqlCint();
  G__cpp_setup_funcSqlCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSqlCint();
  return;
}
class G__cpp_setup_initSqlCint {
  public:
    G__cpp_setup_initSqlCint() { G__add_setup_func("SqlCint",(G__incsetup)(&G__cpp_setupSqlCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSqlCint() { G__remove_setup_func("SqlCint"); }
};
G__cpp_setup_initSqlCint G__cpp_setup_initializerSqlCint;

