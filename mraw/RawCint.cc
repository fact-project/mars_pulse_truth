//
// File generated by rootcint at Mon Nov 28 11:07:02 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME RawCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RawCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MRawRunHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawRunHeader(void *p = 0);
   static void *newArray_MRawRunHeader(Long_t size, void *p);
   static void delete_MRawRunHeader(void *p);
   static void deleteArray_MRawRunHeader(void *p);
   static void destruct_MRawRunHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawRunHeader*)
   {
      ::MRawRunHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawRunHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawRunHeader", ::MRawRunHeader::Class_Version(), "./MRawRunHeader.h", 17,
                  typeid(::MRawRunHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawRunHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MRawRunHeader) );
      instance.SetNew(&new_MRawRunHeader);
      instance.SetNewArray(&newArray_MRawRunHeader);
      instance.SetDelete(&delete_MRawRunHeader);
      instance.SetDeleteArray(&deleteArray_MRawRunHeader);
      instance.SetDestructor(&destruct_MRawRunHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawRunHeader*)
   {
      return GenerateInitInstanceLocal((::MRawRunHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawRunHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawEvtHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawEvtHeader(void *p = 0);
   static void *newArray_MRawEvtHeader(Long_t size, void *p);
   static void delete_MRawEvtHeader(void *p);
   static void deleteArray_MRawEvtHeader(void *p);
   static void destruct_MRawEvtHeader(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawEvtHeader*)
   {
      ::MRawEvtHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawEvtHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawEvtHeader", ::MRawEvtHeader::Class_Version(), "./MRawEvtHeader.h", 21,
                  typeid(::MRawEvtHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawEvtHeader::Dictionary, isa_proxy, 4,
                  sizeof(::MRawEvtHeader) );
      instance.SetNew(&new_MRawEvtHeader);
      instance.SetNewArray(&newArray_MRawEvtHeader);
      instance.SetDelete(&delete_MRawEvtHeader);
      instance.SetDeleteArray(&deleteArray_MRawEvtHeader);
      instance.SetDestructor(&destruct_MRawEvtHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawEvtHeader*)
   {
      return GenerateInitInstanceLocal((::MRawEvtHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawEvtHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawCrateArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawCrateArray(void *p = 0);
   static void *newArray_MRawCrateArray(Long_t size, void *p);
   static void delete_MRawCrateArray(void *p);
   static void deleteArray_MRawCrateArray(void *p);
   static void destruct_MRawCrateArray(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawCrateArray*)
   {
      ::MRawCrateArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawCrateArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawCrateArray", ::MRawCrateArray::Class_Version(), "./MRawCrateArray.h", 17,
                  typeid(::MRawCrateArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawCrateArray::Dictionary, isa_proxy, 4,
                  sizeof(::MRawCrateArray) );
      instance.SetNew(&new_MRawCrateArray);
      instance.SetNewArray(&newArray_MRawCrateArray);
      instance.SetDelete(&delete_MRawCrateArray);
      instance.SetDeleteArray(&deleteArray_MRawCrateArray);
      instance.SetDestructor(&destruct_MRawCrateArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawCrateArray*)
   {
      return GenerateInitInstanceLocal((::MRawCrateArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawCrateArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawEvtData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawEvtData(void *p = 0);
   static void *newArray_MRawEvtData(Long_t size, void *p);
   static void delete_MRawEvtData(void *p);
   static void deleteArray_MRawEvtData(void *p);
   static void destruct_MRawEvtData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawEvtData*)
   {
      ::MRawEvtData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawEvtData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawEvtData", ::MRawEvtData::Class_Version(), "./MRawEvtData.h", 25,
                  typeid(::MRawEvtData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawEvtData::Dictionary, isa_proxy, 4,
                  sizeof(::MRawEvtData) );
      instance.SetNew(&new_MRawEvtData);
      instance.SetNewArray(&newArray_MRawEvtData);
      instance.SetDelete(&delete_MRawEvtData);
      instance.SetDeleteArray(&deleteArray_MRawEvtData);
      instance.SetDestructor(&destruct_MRawEvtData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawEvtData*)
   {
      return GenerateInitInstanceLocal((::MRawEvtData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawEvtData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawEvtPixelIter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MRawEvtPixelIter(void *p);
   static void deleteArray_MRawEvtPixelIter(void *p);
   static void destruct_MRawEvtPixelIter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawEvtPixelIter*)
   {
      ::MRawEvtPixelIter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawEvtPixelIter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawEvtPixelIter", ::MRawEvtPixelIter::Class_Version(), "./MRawEvtPixelIter.h", 17,
                  typeid(::MRawEvtPixelIter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawEvtPixelIter::Dictionary, isa_proxy, 4,
                  sizeof(::MRawEvtPixelIter) );
      instance.SetDelete(&delete_MRawEvtPixelIter);
      instance.SetDeleteArray(&deleteArray_MRawEvtPixelIter);
      instance.SetDestructor(&destruct_MRawEvtPixelIter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawEvtPixelIter*)
   {
      return GenerateInitInstanceLocal((::MRawEvtPixelIter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawEvtPixelIter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawCrateData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawCrateData(void *p = 0);
   static void *newArray_MRawCrateData(Long_t size, void *p);
   static void delete_MRawCrateData(void *p);
   static void deleteArray_MRawCrateData(void *p);
   static void destruct_MRawCrateData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawCrateData*)
   {
      ::MRawCrateData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawCrateData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawCrateData", ::MRawCrateData::Class_Version(), "./MRawCrateData.h", 13,
                  typeid(::MRawCrateData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawCrateData::Dictionary, isa_proxy, 4,
                  sizeof(::MRawCrateData) );
      instance.SetNew(&new_MRawCrateData);
      instance.SetNewArray(&newArray_MRawCrateData);
      instance.SetDelete(&delete_MRawCrateData);
      instance.SetDeleteArray(&deleteArray_MRawCrateData);
      instance.SetDestructor(&destruct_MRawCrateData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawCrateData*)
   {
      return GenerateInitInstanceLocal((::MRawCrateData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawCrateData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawBoardsFACT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawBoardsFACT(void *p = 0);
   static void *newArray_MRawBoardsFACT(Long_t size, void *p);
   static void delete_MRawBoardsFACT(void *p);
   static void deleteArray_MRawBoardsFACT(void *p);
   static void destruct_MRawBoardsFACT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawBoardsFACT*)
   {
      ::MRawBoardsFACT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawBoardsFACT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawBoardsFACT", ::MRawBoardsFACT::Class_Version(), "./MRawBoardsFACT.h", 13,
                  typeid(::MRawBoardsFACT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawBoardsFACT::Dictionary, isa_proxy, 4,
                  sizeof(::MRawBoardsFACT) );
      instance.SetNew(&new_MRawBoardsFACT);
      instance.SetNewArray(&newArray_MRawBoardsFACT);
      instance.SetDelete(&delete_MRawBoardsFACT);
      instance.SetDeleteArray(&deleteArray_MRawBoardsFACT);
      instance.SetDestructor(&destruct_MRawBoardsFACT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawBoardsFACT*)
   {
      return GenerateInitInstanceLocal((::MRawBoardsFACT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawBoardsFACT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawFitsRead_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawFitsRead(void *p = 0);
   static void *newArray_MRawFitsRead(Long_t size, void *p);
   static void delete_MRawFitsRead(void *p);
   static void deleteArray_MRawFitsRead(void *p);
   static void destruct_MRawFitsRead(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawFitsRead*)
   {
      ::MRawFitsRead *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawFitsRead >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawFitsRead", ::MRawFitsRead::Class_Version(), "./MRawFitsRead.h", 14,
                  typeid(::MRawFitsRead), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawFitsRead::Dictionary, isa_proxy, 4,
                  sizeof(::MRawFitsRead) );
      instance.SetNew(&new_MRawFitsRead);
      instance.SetNewArray(&newArray_MRawFitsRead);
      instance.SetDelete(&delete_MRawFitsRead);
      instance.SetDeleteArray(&deleteArray_MRawFitsRead);
      instance.SetDestructor(&destruct_MRawFitsRead);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawFitsRead*)
   {
      return GenerateInitInstanceLocal((::MRawFitsRead*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawFitsRead*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawRead_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MRawRead(void *p);
   static void deleteArray_MRawRead(void *p);
   static void destruct_MRawRead(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawRead*)
   {
      ::MRawRead *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawRead >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawRead", ::MRawRead::Class_Version(), "./MRawRead.h", 16,
                  typeid(::MRawRead), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawRead::Dictionary, isa_proxy, 4,
                  sizeof(::MRawRead) );
      instance.SetDelete(&delete_MRawRead);
      instance.SetDeleteArray(&deleteArray_MRawRead);
      instance.SetDestructor(&destruct_MRawRead);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawRead*)
   {
      return GenerateInitInstanceLocal((::MRawRead*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawRead*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRawFileRead_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRawFileRead(void *p = 0);
   static void *newArray_MRawFileRead(Long_t size, void *p);
   static void delete_MRawFileRead(void *p);
   static void deleteArray_MRawFileRead(void *p);
   static void destruct_MRawFileRead(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRawFileRead*)
   {
      ::MRawFileRead *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRawFileRead >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRawFileRead", ::MRawFileRead::Class_Version(), "./MRawFileRead.h", 12,
                  typeid(::MRawFileRead), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRawFileRead::Dictionary, isa_proxy, 4,
                  sizeof(::MRawFileRead) );
      instance.SetNew(&new_MRawFileRead);
      instance.SetNewArray(&newArray_MRawFileRead);
      instance.SetDelete(&delete_MRawFileRead);
      instance.SetDeleteArray(&deleteArray_MRawFileRead);
      instance.SetDestructor(&destruct_MRawFileRead);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRawFileRead*)
   {
      return GenerateInitInstanceLocal((::MRawFileRead*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRawFileRead*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MRawRunHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawRunHeader::Class_Name()
{
   return "MRawRunHeader";
}

//______________________________________________________________________________
const char *MRawRunHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRunHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawRunHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRunHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawRunHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRunHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawRunHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRunHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawEvtHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawEvtHeader::Class_Name()
{
   return "MRawEvtHeader";
}

//______________________________________________________________________________
const char *MRawEvtHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawEvtHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawEvtHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawEvtHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawCrateArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawCrateArray::Class_Name()
{
   return "MRawCrateArray";
}

//______________________________________________________________________________
const char *MRawCrateArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawCrateArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawCrateArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawCrateArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawEvtData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawEvtData::Class_Name()
{
   return "MRawEvtData";
}

//______________________________________________________________________________
const char *MRawEvtData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawEvtData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawEvtData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawEvtData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawEvtPixelIter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawEvtPixelIter::Class_Name()
{
   return "MRawEvtPixelIter";
}

//______________________________________________________________________________
const char *MRawEvtPixelIter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtPixelIter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawEvtPixelIter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtPixelIter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawEvtPixelIter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtPixelIter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawEvtPixelIter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawEvtPixelIter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawCrateData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawCrateData::Class_Name()
{
   return "MRawCrateData";
}

//______________________________________________________________________________
const char *MRawCrateData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawCrateData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawCrateData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawCrateData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawCrateData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawBoardsFACT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawBoardsFACT::Class_Name()
{
   return "MRawBoardsFACT";
}

//______________________________________________________________________________
const char *MRawBoardsFACT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawBoardsFACT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawBoardsFACT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawBoardsFACT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawBoardsFACT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawBoardsFACT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawBoardsFACT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawBoardsFACT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawFitsRead::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawFitsRead::Class_Name()
{
   return "MRawFitsRead";
}

//______________________________________________________________________________
const char *MRawFitsRead::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFitsRead*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawFitsRead::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFitsRead*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawFitsRead::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFitsRead*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawFitsRead::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFitsRead*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawRead::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawRead::Class_Name()
{
   return "MRawRead";
}

//______________________________________________________________________________
const char *MRawRead::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRead*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawRead::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRead*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawRead::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRead*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawRead::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawRead*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRawFileRead::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRawFileRead::Class_Name()
{
   return "MRawFileRead";
}

//______________________________________________________________________________
const char *MRawFileRead::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFileRead*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRawFileRead::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFileRead*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRawFileRead::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFileRead*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRawFileRead::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRawFileRead*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MRawRunHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawRunHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawRunHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawRunHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MRawRunHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawRunHeader.
      TClass *R__cl = ::MRawRunHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMagicNumber", &fMagicNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeaderSizeRun", &fHeaderSizeRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeaderSizeEvt", &fHeaderSizeEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeaderSizeCrate", &fHeaderSizeCrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormatVersion", &fFormatVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSoftVersion", &fSoftVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadcType", &fFadcType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCameraVersion", &fCameraVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopeNumber", &fTelescopeNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunType", &fRunType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNumber", &fFileNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProjectName[101]", fProjectName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceName[81]", fSourceName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fObservationMode[61]", fObservationMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceEpochChar[4]", fSourceEpochChar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceEpochDate", &fSourceEpochDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCrates", &fNumCrates);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixInCrate", &fNumPixInCrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSamplesLoGain", &fNumSamplesLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSamplesHiGain", &fNumSamplesHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBytesPerSample", &fNumBytesPerSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSigned", &fIsSigned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEventsRead", &fNumEventsRead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSamplingFrequency", &fSamplingFrequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadcResolution", &fFadcResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStart", &fRunStart);
      R__insp.InspectMember(fRunStart, "fRunStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStop", &fRunStop);
      R__insp.InspectMember(fRunStop, "fRunStop.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPixAssignment", &fPixAssignment);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawRunHeader(void *p) {
      return  p ? new(p) ::MRawRunHeader : new ::MRawRunHeader;
   }
   static void *newArray_MRawRunHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MRawRunHeader[nElements] : new ::MRawRunHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawRunHeader(void *p) {
      delete ((::MRawRunHeader*)p);
   }
   static void deleteArray_MRawRunHeader(void *p) {
      delete [] ((::MRawRunHeader*)p);
   }
   static void destruct_MRawRunHeader(void *p) {
      typedef ::MRawRunHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawRunHeader

//______________________________________________________________________________
void MRawEvtHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawEvtHeader.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawEvtHeader::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawEvtHeader::Class(),this);
   }
}

//______________________________________________________________________________
void MRawEvtHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawEvtHeader.
      TClass *R__cl = ::MRawEvtHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDAQEvtNumber", &fDAQEvtNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTrigLvl1", &fNumTrigLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTrigLvl2", &fNumTrigLvl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigPattern[2]", fTrigPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainOn", &fNumLoGainOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrigType", &fTrigType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPixLoGainOn", &fPixLoGainOn);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawEvtHeader(void *p) {
      return  p ? new(p) ::MRawEvtHeader : new ::MRawEvtHeader;
   }
   static void *newArray_MRawEvtHeader(Long_t nElements, void *p) {
      return p ? new(p) ::MRawEvtHeader[nElements] : new ::MRawEvtHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawEvtHeader(void *p) {
      delete ((::MRawEvtHeader*)p);
   }
   static void deleteArray_MRawEvtHeader(void *p) {
      delete [] ((::MRawEvtHeader*)p);
   }
   static void destruct_MRawEvtHeader(void *p) {
      typedef ::MRawEvtHeader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawEvtHeader

//______________________________________________________________________________
void MRawEvtData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawEvtData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawEvtData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawEvtData::Class(),this);
   }
}

//______________________________________________________________________________
void MRawEvtData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawEvtData.
      TClass *R__cl = ::MRawEvtData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHiGainPixId", &fHiGainPixId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHiGainFadcSamples", &fHiGainFadcSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoGainPixId", &fLoGainPixId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoGainFadcSamples", &fLoGainFadcSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fABFlags", &fABFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartCells", &fStartCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerType", &fTriggerType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBytesPerSample", &fNumBytesPerSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSigned", &fIsSigned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConnectedPixels", &fConnectedPixels);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawEvtData(void *p) {
      return  p ? new(p) ::MRawEvtData : new ::MRawEvtData;
   }
   static void *newArray_MRawEvtData(Long_t nElements, void *p) {
      return p ? new(p) ::MRawEvtData[nElements] : new ::MRawEvtData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawEvtData(void *p) {
      delete ((::MRawEvtData*)p);
   }
   static void deleteArray_MRawEvtData(void *p) {
      delete [] ((::MRawEvtData*)p);
   }
   static void destruct_MRawEvtData(void *p) {
      typedef ::MRawEvtData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawEvtData

//______________________________________________________________________________
void MRawEvtPixelIter::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawEvtPixelIter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawEvtPixelIter::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawEvtPixelIter::Class(),this);
   }
}

//______________________________________________________________________________
void MRawEvtPixelIter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawEvtPixelIter.
      TClass *R__cl = ::MRawEvtPixelIter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainEntry", &fNumHiGainEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainEntry", &fNumLoGainEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHiGainId", &fHiGainId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoGainId", &fLoGainId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHiGainPos", &fHiGainPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLoGainPos", &fLoGainPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fABFlags", &fABFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartCell", &fStartCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEntry", &fNumEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBytesHiGain", &fNumBytesHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBytesLoGain", &fNumBytesLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBytesPerSample", &fNumBytesPerSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MRawEvtPixelIter(void *p) {
      delete ((::MRawEvtPixelIter*)p);
   }
   static void deleteArray_MRawEvtPixelIter(void *p) {
      delete [] ((::MRawEvtPixelIter*)p);
   }
   static void destruct_MRawEvtPixelIter(void *p) {
      typedef ::MRawEvtPixelIter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawEvtPixelIter

//______________________________________________________________________________
void MRawCrateArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawCrateArray.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawCrateArray::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawCrateArray::Class(),this);
   }
}

//______________________________________________________________________________
void MRawCrateArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawCrateArray.
      TClass *R__cl = ::MRawCrateArray::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawCrateArray(void *p) {
      return  p ? new(p) ::MRawCrateArray : new ::MRawCrateArray;
   }
   static void *newArray_MRawCrateArray(Long_t nElements, void *p) {
      return p ? new(p) ::MRawCrateArray[nElements] : new ::MRawCrateArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawCrateArray(void *p) {
      delete ((::MRawCrateArray*)p);
   }
   static void deleteArray_MRawCrateArray(void *p) {
      delete [] ((::MRawCrateArray*)p);
   }
   static void destruct_MRawCrateArray(void *p) {
      typedef ::MRawCrateArray current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawCrateArray

//______________________________________________________________________________
void MRawCrateData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawCrateData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawCrateData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawCrateData::Class(),this);
   }
}

//______________________________________________________________________________
void MRawCrateData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawCrateData.
      TClass *R__cl = ::MRawCrateData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDAQCrateNumber", &fDAQCrateNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFADCEvtNumber", &fFADCEvtNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFADCClockTick", &fFADCClockTick);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fABFlags", &fABFlags);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawCrateData(void *p) {
      return  p ? new(p) ::MRawCrateData : new ::MRawCrateData;
   }
   static void *newArray_MRawCrateData(Long_t nElements, void *p) {
      return p ? new(p) ::MRawCrateData[nElements] : new ::MRawCrateData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawCrateData(void *p) {
      delete ((::MRawCrateData*)p);
   }
   static void deleteArray_MRawCrateData(void *p) {
      delete [] ((::MRawCrateData*)p);
   }
   static void destruct_MRawCrateData(void *p) {
      typedef ::MRawCrateData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawCrateData

//______________________________________________________________________________
void MRawBoardsFACT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawBoardsFACT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawBoardsFACT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawBoardsFACT::Class(),this);
   }
}

//______________________________________________________________________________
void MRawBoardsFACT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawBoardsFACT.
      TClass *R__cl = ::MRawBoardsFACT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFadTime[40]", fFadTime);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawBoardsFACT(void *p) {
      return  p ? new(p) ::MRawBoardsFACT : new ::MRawBoardsFACT;
   }
   static void *newArray_MRawBoardsFACT(Long_t nElements, void *p) {
      return p ? new(p) ::MRawBoardsFACT[nElements] : new ::MRawBoardsFACT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawBoardsFACT(void *p) {
      delete ((::MRawBoardsFACT*)p);
   }
   static void deleteArray_MRawBoardsFACT(void *p) {
      delete [] ((::MRawBoardsFACT*)p);
   }
   static void destruct_MRawBoardsFACT(void *p) {
      typedef ::MRawBoardsFACT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawBoardsFACT

//______________________________________________________________________________
void MRawRead::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawRead.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawRead::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawRead::Class(),this);
   }
}

//______________________________________________________________________________
void MRawRead::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawRead.
      TClass *R__cl = ::MRawRead::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawRunHeader", &fRawRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvtHeader", &fRawEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvtData1", &fRawEvtData1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvtData2", &fRawEvtData2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCrateArray", &fRawCrateArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvtTime", &fRawEvtTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fForceMode", &fForceMode);
      MRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MRawRead(void *p) {
      delete ((::MRawRead*)p);
   }
   static void deleteArray_MRawRead(void *p) {
      delete [] ((::MRawRead*)p);
   }
   static void destruct_MRawRead(void *p) {
      typedef ::MRawRead current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawRead

//______________________________________________________________________________
void MRawFileRead::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawFileRead.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawFileRead::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawFileRead::Class(),this);
   }
}

//______________________________________________________________________________
void MRawFileRead::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawFileRead.
      TClass *R__cl = ::MRawFileRead::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileNames", &fFileNames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFile", &fNumFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTotalEvents", &fNumTotalEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIn", &fIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParList", &fParList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInterleave", &fInterleave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fForce", &fForce);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsMc", &fIsMc);
      MRawRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawFileRead(void *p) {
      return  p ? new(p) ::MRawFileRead : new ::MRawFileRead;
   }
   static void *newArray_MRawFileRead(Long_t nElements, void *p) {
      return p ? new(p) ::MRawFileRead[nElements] : new ::MRawFileRead[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawFileRead(void *p) {
      delete ((::MRawFileRead*)p);
   }
   static void deleteArray_MRawFileRead(void *p) {
      delete [] ((::MRawFileRead*)p);
   }
   static void destruct_MRawFileRead(void *p) {
      typedef ::MRawFileRead current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawFileRead

//______________________________________________________________________________
void MRawFitsRead::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRawFitsRead.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRawFitsRead::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRawFitsRead::Class(),this);
   }
}

//______________________________________________________________________________
void MRawFitsRead::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRawFitsRead.
      TClass *R__cl = ::MRawFitsRead::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPCTime", (void*)&fPCTime);
      R__insp.InspectMember("vector<UInt_t>", (void*)&fPCTime, "fPCTime.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixelMap", (void*)&fPixelMap);
      R__insp.InspectMember("vector<UShort_t>", (void*)&fPixelMap, "fPixelMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBoards", &fNumBoards);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawBoards", &fRawBoards);
      MRawFileRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRawFitsRead(void *p) {
      return  p ? new(p) ::MRawFitsRead : new ::MRawFitsRead;
   }
   static void *newArray_MRawFitsRead(Long_t nElements, void *p) {
      return p ? new(p) ::MRawFitsRead[nElements] : new ::MRawFitsRead[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRawFitsRead(void *p) {
      delete ((::MRawFitsRead*)p);
   }
   static void deleteArray_MRawFitsRead(void *p) {
      delete [] ((::MRawFitsRead*)p);
   }
   static void destruct_MRawFitsRead(void *p) {
      typedef ::MRawFitsRead current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRawFitsRead

/********************************************************
* RawCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRawCint();

extern "C" void G__set_cpp_environmentRawCint() {
  G__cpp_reset_tagtableRawCint();
}
#include <new>
extern "C" int G__cpp_dllrevRawCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MRawRunHeader */
static int G__RawCint_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawRunHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawRunHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawRunHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawRunHeader[n];
       } else {
         p = new((void*) gvp) MRawRunHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawRunHeader;
       } else {
         p = new((void*) gvp) MRawRunHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawRunHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MRawRunHeader(*(MRawRunHeader*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MRawRunHeader(*(MRawRunHeader*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->InitFadcType((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MRawRunHeader*) G__getstructoffset())->InitCamera((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MRawRunHeader*) G__getstructoffset())->InitCamera((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->InitPixels((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MRawRunHeader*) G__getstructoffset())->InitFact((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (UShort_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MRawRunHeader*) G__getstructoffset())->InitFact((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetRunType((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MRawRunHeader*) G__getstructoffset())->SetRunInfo((UShort_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MRawRunHeader*) G__getstructoffset())->SetRunInfo((UShort_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetFileNumber((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MRawRunHeader*) G__getstructoffset())->SetSourceInfo(*((const TString*) G__int(libp->para[0])), (char) G__int(libp->para[1])
, (UShort_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MRawRunHeader*) G__getstructoffset())->SetSourceInfo(*((const TString*) G__int(libp->para[0])), (char) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MRawRunHeader*) G__getstructoffset())->SetSourceInfo(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetRunTime(*(MTime*) libp->para[0].ref, *(MTime*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetRunTimeMjd((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetObservation(*((const TString*) G__int(libp->para[0])), *((const TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetNumEvents((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetValidMagicNumber();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->SetFormat((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetMagicNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetHeaderSizeEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetHeaderSizeCrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetFormatVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetSoftVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetCameraVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetFileNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetTypeID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetFileID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MRawRunHeader*) G__getstructoffset())->GetStringID();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetTelescopeNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetRunType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MRawRunHeader*) G__getstructoffset())->GetRunTypeStr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const MRawRunHeader*) G__getstructoffset())->GetRunTypeChar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MRawRunHeader*) G__getstructoffset())->GetProjectName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MRawRunHeader*) G__getstructoffset())->GetSourceName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MRawRunHeader*) G__getstructoffset())->GetSourceEpocheChar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MRawRunHeader*) G__getstructoffset())->GetObservationMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetSourceEpocheDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumCrates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumPixInCrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumSamplesLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumSamplesHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumBytesPerSample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsSigned());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumEventsRead());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetFreqSampling());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MTime& obj = ((const MRawRunHeader*) G__getstructoffset())->GetRunStart();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MTime& obj = ((const MRawRunHeader*) G__getstructoffset())->GetRunEnd();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRawRunHeader*) G__getstructoffset())->GetRunLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MRawRunHeader*) G__getstructoffset())->GetPixAssignment((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetMaxPixId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetMinPixId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumConnectedPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumNormalPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumSpecialPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayS& obj = ((const MRawRunHeader*) G__getstructoffset())->GetPixAssignment();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumSamplesPerCrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumPixel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRawRunHeader*) G__getstructoffset())->GetNumTotalBytes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsMonteCarloRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsDataRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsPedestalRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsCalibrationRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsPointRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsValidRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawRunHeader*) G__getstructoffset())->IsConsistent(*(MRawRunHeader*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRawRunHeader*) G__getstructoffset())->ReadEvt(*(istream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawRunHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRunHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawRunHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawRunHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRunHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRunHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawRunHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRunHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_176_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawRunHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawRunHeader G__TMRawRunHeader;
static int G__RawCint_176_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawRunHeader*) (soff+(sizeof(MRawRunHeader)*i)))->~G__TMRawRunHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawRunHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawRunHeader*) (soff))->~G__TMRawRunHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_176_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawRunHeader* dest = (MRawRunHeader*) G__getstructoffset();
   *dest = *(MRawRunHeader*) libp->para[0].ref;
   const MRawRunHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawEvtHeader */
static int G__RawCint_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawEvtHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawEvtHeader((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawEvtHeader((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawEvtHeader((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawEvtHeader[n];
       } else {
         p = new((void*) gvp) MRawEvtHeader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawEvtHeader;
       } else {
         p = new((void*) gvp) MRawEvtHeader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->InitRead((MRawRunHeader*) G__int(libp->para[0]), (MTime*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetTrigType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetNumTrigLvl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetNumTrigLvl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetDAQEvtNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetTriggerID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetCalibrationPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtHeader*) G__getstructoffset())->GetPulserSlotPattern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MRawEvtHeader*) G__getstructoffset())->FillHeader((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MRawEvtHeader*) G__getstructoffset())->FillHeader((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->SetTriggerPattern((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->SetCalibrationPattern((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->SetDAQEvtNumber((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->SetNumTrigLvl1((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MRawEvtHeader*) G__getstructoffset())->ReadEvt(*(istream*) libp->para[0].ref, (UShort_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->SkipEvt(*(istream*) libp->para[0].ref, (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawEvtHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawEvtHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawEvtHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_190_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_190_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawEvtHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawEvtHeader(*(MRawEvtHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawEvtHeader G__TMRawEvtHeader;
static int G__RawCint_190_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawEvtHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawEvtHeader*) (soff+(sizeof(MRawEvtHeader)*i)))->~G__TMRawEvtHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawEvtHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawEvtHeader*) (soff))->~G__TMRawEvtHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_190_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtHeader* dest = (MRawEvtHeader*) G__getstructoffset();
   *dest = *(MRawEvtHeader*) libp->para[0].ref;
   const MRawEvtHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawCrateArray */
static int G__RawCint_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawCrateArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawCrateArray((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawCrateArray((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawCrateArray((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawCrateArray((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawCrateArray[n];
       } else {
         p = new((void*) gvp) MRawCrateArray[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawCrateArray;
       } else {
         p = new((void*) gvp) MRawCrateArray;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawCrateArray*) G__getstructoffset())->SetSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRawCrateArray*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MRawCrateArray*) G__getstructoffset())->GetEntry((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         MRawCrateData*& obj = ((MRawCrateArray*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MRawCrateArray*) G__getstructoffset())->GetArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawCrateArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawCrateArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawCrateArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawCrateArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawCrateArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawCrateArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawCrateArray* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawCrateArray(*(MRawCrateArray*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawCrateArray G__TMRawCrateArray;
static int G__RawCint_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawCrateArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawCrateArray*) (soff+(sizeof(MRawCrateArray)*i)))->~G__TMRawCrateArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawCrateArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawCrateArray*) (soff))->~G__TMRawCrateArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawCrateArray* dest = (MRawCrateArray*) G__getstructoffset();
   *dest = *(MRawCrateArray*) libp->para[0].ref;
   const MRawCrateArray& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawEvtData */
static int G__RawCint_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawEvtData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawEvtData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawEvtData((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawEvtData((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawEvtData[n];
       } else {
         p = new((void*) gvp) MRawEvtData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawEvtData;
       } else {
         p = new((void*) gvp) MRawEvtData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->InitRead((MRawRunHeader*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->ResetPixels();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->ResetPixels((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->InitStartCells();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->AddPixel((UShort_t) G__int(libp->para[0]), *(TArrayC*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->Set(*(MArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->SetIndices(*(MArrayS*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->SetIndices();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtData*) G__getstructoffset())->GetNumHiGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtData*) G__getstructoffset())->GetNumLoGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtData*) G__getstructoffset())->GetNumSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtData*) G__getstructoffset())->GetNumPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtData*) G__getstructoffset())->GetNumBytesPerSample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtData*) G__getstructoffset())->GetScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const MRawEvtData*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const MRawEvtData*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 66, (long) ((const MRawEvtData*) G__getstructoffset())->GetSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const MRawEvtData*) G__getstructoffset())->GetStartCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((const MRawEvtData*) G__getstructoffset())->GetPixelIds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawEvtData*) G__getstructoffset())->HasStartCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->ReadPixel(*(istream*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->SetABFlag((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->SkipEvt(*(istream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawEvtData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawEvtData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawEvtData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_195_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_195_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawEvtData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawEvtData(*(MRawEvtData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawEvtData G__TMRawEvtData;
static int G__RawCint_195_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawEvtData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawEvtData*) (soff+(sizeof(MRawEvtData)*i)))->~G__TMRawEvtData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawEvtData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawEvtData*) (soff))->~G__TMRawEvtData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_195_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtData* dest = (MRawEvtData*) G__getstructoffset();
   *dest = *(MRawEvtData*) libp->para[0].ref;
   const MRawEvtData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawEvtPixelIter */
static int G__RawCint_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtPixelIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MRawEvtPixelIter((MRawEvtData*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MRawEvtPixelIter((MRawEvtData*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MRawEvtPixelIter*) G__getstructoffset())->Next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRawEvtPixelIter*) G__getstructoffset())->Jump((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetPixelId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetNumEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetHiGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetNumBytes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->HasLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->IsABFlagValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->HasABFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetABFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 89, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetLoGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MRawEvtPixelIter*) G__getstructoffset())->GetStartCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtPixelIter*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawEvtPixelIter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtPixelIter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawEvtPixelIter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawEvtPixelIter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawEvtPixelIter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtPixelIter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtPixelIter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawEvtPixelIter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawEvtPixelIter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawEvtPixelIter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawEvtPixelIter(*(MRawEvtPixelIter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawEvtPixelIter G__TMRawEvtPixelIter;
static int G__RawCint_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawEvtPixelIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawEvtPixelIter*) (soff+(sizeof(MRawEvtPixelIter)*i)))->~G__TMRawEvtPixelIter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawEvtPixelIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawEvtPixelIter*) (soff))->~G__TMRawEvtPixelIter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_196_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawEvtPixelIter* dest = (MRawEvtPixelIter*) G__getstructoffset();
   *dest = *(MRawEvtPixelIter*) libp->para[0].ref;
   const MRawEvtPixelIter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawCrateData */
static int G__RawCint_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawCrateData* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawCrateData[n];
     } else {
       p = new((void*) gvp) MRawCrateData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawCrateData;
     } else {
       p = new((void*) gvp) MRawCrateData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawCrateData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MRawCrateData*) G__getstructoffset())->GetDAQCrateNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawCrateData*) G__getstructoffset())->GetFADCEvtNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawCrateData*) G__getstructoffset())->GetFADCClockTick());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MRawCrateData*) G__getstructoffset())->GetABFlags());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRawCrateData*) G__getstructoffset())->ReadEvt(*(istream*) libp->para[0].ref, (UShort_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawCrateData*) G__getstructoffset())->SkipEvt(*(istream*) libp->para[0].ref, (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawCrateData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawCrateData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawCrateData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawCrateData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawCrateData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawCrateData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawCrateData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_197_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawCrateData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawCrateData(*(MRawCrateData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawCrateData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawCrateData G__TMRawCrateData;
static int G__RawCint_197_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawCrateData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawCrateData*) (soff+(sizeof(MRawCrateData)*i)))->~G__TMRawCrateData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawCrateData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawCrateData*) (soff))->~G__TMRawCrateData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_197_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawCrateData* dest = (MRawCrateData*) G__getstructoffset();
   *dest = *(MRawCrateData*) libp->para[0].ref;
   const MRawCrateData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawBoardsFACT */
static int G__RawCint_198_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawBoardsFACT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawBoardsFACT[n];
     } else {
       p = new((void*) gvp) MRawBoardsFACT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawBoardsFACT;
     } else {
       p = new((void*) gvp) MRawBoardsFACT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MRawBoardsFACT*) G__getstructoffset())->GetFadTime((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawBoardsFACT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawBoardsFACT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawBoardsFACT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawBoardsFACT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawBoardsFACT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawBoardsFACT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawBoardsFACT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawBoardsFACT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_198_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawBoardsFACT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_198_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawBoardsFACT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawBoardsFACT(*(MRawBoardsFACT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawBoardsFACT G__TMRawBoardsFACT;
static int G__RawCint_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawBoardsFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawBoardsFACT*) (soff+(sizeof(MRawBoardsFACT)*i)))->~G__TMRawBoardsFACT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawBoardsFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawBoardsFACT*) (soff))->~G__TMRawBoardsFACT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawBoardsFACT* dest = (MRawBoardsFACT*) G__getstructoffset();
   *dest = *(MRawBoardsFACT*) libp->para[0].ref;
   const MRawBoardsFACT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawFitsRead */
static int G__RawCint_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawFitsRead* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFitsRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MRawFitsRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFitsRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawFitsRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFitsRead((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawFitsRead((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawFitsRead[n];
       } else {
         p = new((void*) gvp) MRawFitsRead[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawFitsRead;
       } else {
         p = new((void*) gvp) MRawFitsRead;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MRawFitsRead::IsFits((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MRawFitsRead*) G__getstructoffset())->LoadMap((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRawFitsRead*) G__getstructoffset())->GetFitsFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<UInt_t>& obj = ((const MRawFitsRead*) G__getstructoffset())->GetPCTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawFitsRead::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFitsRead::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawFitsRead::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawFitsRead::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawFitsRead*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFitsRead::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawFitsRead::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFitsRead::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawFitsRead::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawFitsRead* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawFitsRead(*(MRawFitsRead*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawFitsRead G__TMRawFitsRead;
static int G__RawCint_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawFitsRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawFitsRead*) (soff+(sizeof(MRawFitsRead)*i)))->~G__TMRawFitsRead();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawFitsRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawFitsRead*) (soff))->~G__TMRawFitsRead();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawFitsRead* dest = (MRawFitsRead*) G__getstructoffset();
   *dest = *(MRawFitsRead*) libp->para[0].ref;
   const MRawFitsRead& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawRead */
static int G__RawCint_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRawRead*) G__getstructoffset())->SetForceMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRawRead*) G__getstructoffset())->SetForceMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawRead::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRead::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawRead::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawRead::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawRead*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRead::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawRead::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawRead::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_208_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawRead::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawRead G__TMRawRead;
static int G__RawCint_208_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawRead*) (soff+(sizeof(MRawRead)*i)))->~G__TMRawRead();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawRead*) (soff))->~G__TMRawRead();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_208_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawRead* dest = (MRawRead*) G__getstructoffset();
   *dest = *(MRawRead*) libp->para[0].ref;
   const MRawRead& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRawFileRead */
static int G__RawCint_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawFileRead* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFileRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MRawFileRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFileRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRawFileRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRawFileRead((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MRawFileRead((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawFileRead[n];
       } else {
         p = new((void*) gvp) MRawFileRead[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRawFileRead;
       } else {
         p = new((void*) gvp) MRawFileRead;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawFileRead));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) MRawFileRead::IsFileValid((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawFileRead*) G__getstructoffset())->SetInterleave((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MRawFileRead*) G__getstructoffset())->SetForce((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MRawFileRead*) G__getstructoffset())->SetForce();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MRawFileRead*) G__getstructoffset())->GetStream());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRawFileRead::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFileRead::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRawFileRead::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRawFileRead::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRawFileRead*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFileRead::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawFileRead::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRawFileRead::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RawCint_210_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRawFileRead::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RawCint_210_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRawFileRead* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRawFileRead(*(MRawFileRead*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RawCintLN_MRawFileRead));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRawFileRead G__TMRawFileRead;
static int G__RawCint_210_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRawFileRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRawFileRead*) (soff+(sizeof(MRawFileRead)*i)))->~G__TMRawFileRead();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRawFileRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRawFileRead*) (soff))->~G__TMRawFileRead();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RawCint_210_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRawFileRead* dest = (MRawFileRead*) G__getstructoffset();
   *dest = *(MRawFileRead*) libp->para[0].ref;
   const MRawFileRead& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MRawRunHeader */

/* MRawEvtHeader */

/* MRawCrateArray */

/* MRawEvtData */

/* MRawEvtPixelIter */

/* MRawCrateData */

/* MRawBoardsFACT */

/* MRawFitsRead */

/* MRawRead */

/* MRawFileRead */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRawCint {
 public:
  G__Sizep2memfuncRawCint(): p(&G__Sizep2memfuncRawCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRawCint::*p)();
};

size_t G__get_sizep2memfuncRawCint()
{
  G__Sizep2memfuncRawCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRawCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader))) {
     MRawRunHeader *G__Lderived;
     G__Lderived=(MRawRunHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader))) {
     MRawEvtHeader *G__Lderived;
     G__Lderived=(MRawEvtHeader*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray))) {
     MRawCrateArray *G__Lderived;
     G__Lderived=(MRawCrateArray*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData))) {
     MRawEvtData *G__Lderived;
     G__Lderived=(MRawEvtData*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),G__get_linked_tagnum(&G__RawCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter))) {
     MRawEvtPixelIter *G__Lderived;
     G__Lderived=(MRawEvtPixelIter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawCrateData))) {
     MRawCrateData *G__Lderived;
     G__Lderived=(MRawCrateData*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateData),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateData),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT))) {
     MRawBoardsFACT *G__Lderived;
     G__Lderived=(MRawBoardsFACT*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead))) {
     MRawFitsRead *G__Lderived;
     G__Lderived=(MRawFitsRead*)0x1000;
     {
       MRawFileRead *G__Lpbase=(MRawFileRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MRawRead *G__Lpbase=(MRawRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MRawRead),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MInputStreamID))) {
     MInputStreamID *G__Lderived;
     G__Lderived=(MInputStreamID*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MTask))) {
     MTask *G__Lderived;
     G__Lderived=(MTask*)0x1000;
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MTask),G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MTask),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MTask),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRead))) {
     MRead *G__Lderived;
     G__Lderived=(MRead*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRead),G__get_linked_tagnum(&G__RawCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRead),G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRead),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRead),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawRead))) {
     MRawRead *G__Lderived;
     G__Lderived=(MRawRead*)0x1000;
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead),G__get_linked_tagnum(&G__RawCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead),G__get_linked_tagnum(&G__RawCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead),G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead))) {
     MRawFileRead *G__Lderived;
     G__Lderived=(MRawFileRead*)0x1000;
     {
       MRawRead *G__Lpbase=(MRawRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_MRawRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead),G__get_linked_tagnum(&G__RawCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRawCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned short>",117,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MRawRunHeader */
static void G__setup_memvarMRawRunHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader));
   { MRawRunHeader *p; p=(MRawRunHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTData=%lldLL",(long long)MRawRunHeader::kRTData).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTPedestal=%lldLL",(long long)MRawRunHeader::kRTPedestal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTCalibration=%lldLL",(long long)MRawRunHeader::kRTCalibration).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTDominoCal=%lldLL",(long long)MRawRunHeader::kRTDominoCal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTLinearity=%lldLL",(long long)MRawRunHeader::kRTLinearity).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTPointRun=%lldLL",(long long)MRawRunHeader::kRTPointRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTMonteCarlo=%lldLL",(long long)MRawRunHeader::kRTMonteCarlo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTFact=%lldLL",(long long)MRawRunHeader::kRTFact).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeadercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRTNone=%lldLL",(long long)MRawRunHeader::kRTNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,1,G__FastAllocString(2048).Format("kMagicNumber=%lluULL",(unsigned long long)MRawRunHeader::kMagicNumber).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,1,G__FastAllocString(2048).Format("kMaxFormatVersion=%lluULL",(unsigned long long)MRawRunHeader::kMaxFormatVersion).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fMagicNumber=",0,"File type identifier");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fHeaderSizeRun=",0,"Size of run header");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fHeaderSizeEvt=",0,"Size of evt header");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fHeaderSizeCrate=",0,"Size of crate header");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fFormatVersion=",0,"File format version");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSoftVersion=",0,"DAQ software version");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fFadcType=",0,"FADC type (1=Siegen, 2=MUX)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCameraVersion=",0,"Camera Version (1=MAGIC I)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTelescopeNumber=",0,"Telescope number (1=Magic I)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRunType=",0,"Run Type");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunNumber=",0,"Run number");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFileNumber=",0,"File number");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fProjectName[101]=",0,"Project name");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fSourceName[81]=",0,"Source name");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fObservationMode[61]=",0,"observation mode");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fSourceEpochChar[4]=",0,"epoch char of the source");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSourceEpochDate=",0,"epoch date of the source");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumCrates=",0,"number of electronic boards");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumPixInCrate=",0,"number of pixels in crate");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumSamplesLoGain=",0,"number of logain samples stored");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumSamplesHiGain=",0,"number of higain samples stored");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumBytesPerSample=",0,"number of bytes per sample");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsSigned=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"number of events stored");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEventsRead=",0,"number of events read by the electronics");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSamplingFrequency=",0,"Sampling Frequency [MHz]");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFadcResolution=",0,"number of significant bits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RawCintLN_MTime),-1,-1,4,"fRunStart=",0,"time of run start");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RawCintLN_MTime),-1,-1,4,"fRunStop=",0,"time of run stop");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayS),-1,-1,4,"fPixAssignment=",0,"-> pixel assignment table");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawEvtHeader */
static void G__setup_memvarMRawEvtHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader));
   { MRawEvtHeader *p; p=(MRawEvtHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLUV=%lldLL",(long long)MRawEvtHeader::kCLUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLGreen=%lldLL",(long long)MRawEvtHeader::kCLGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmber=%lldLL",(long long)MRawEvtHeader::kCLAmber).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRed=%lldLL",(long long)MRawEvtHeader::kCLRed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedAmber=%lldLL",(long long)MRawEvtHeader::kCLRedAmber).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedGreen=%lldLL",(long long)MRawEvtHeader::kCLRedGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedUV=%lldLL",(long long)MRawEvtHeader::kCLRedUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberGreen=%lldLL",(long long)MRawEvtHeader::kCLAmberGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberUV=%lldLL",(long long)MRawEvtHeader::kCLAmberUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLGreenUV=%lldLL",(long long)MRawEvtHeader::kCLGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedAmberGreen=%lldLL",(long long)MRawEvtHeader::kCLRedAmberGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedGreenUV=%lldLL",(long long)MRawEvtHeader::kCLRedGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberGreenUV=%lldLL",(long long)MRawEvtHeader::kCLAmberGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAll=%lldLL",(long long)MRawEvtHeader::kCLAll).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MTime),-1,-1,4,"fTime=",0,"! object to store the time in (ReadEvt)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fDAQEvtNumber=",0,"Number of Event {fits: name=EventNum ; unit=uint32}");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumTrigLvl1=",0,"Number of 1st level tiggers between 2 events");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumTrigLvl2=",0,"Number of 2nd level tiggers between 2 events");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTrigPattern[2]=",0,"Trigger configuration");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumLoGainOn=",0,"Indicating if no pixel has a neglegible");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTrigType=",0,"! Trigger Type of this event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayB),-1,-1,4,"fPixLoGainOn=",0,"! Array which tell you which pixels have lo gain on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawCrateArray */
static void G__setup_memvarMRawCrateArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray));
   { MRawCrateArray *p; p=(MRawCrateArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClonesArray),-1,-1,4,"fArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawEvtData */
static void G__setup_memvarMRawEvtData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData));
   { MRawEvtData *p; p=(MRawEvtData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! provides information about numbers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayS),-1,-1,4,"fHiGainPixId=",0,"-> list of pixel IDs of hi gain channel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayB),-1,-1,4,"fHiGainFadcSamples=",0,"-> list of hi gain samples of all pixels (ordering: see fHiGainPixId) {fits: unit=mV ; name=Data }");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayS),-1,-1,4,"fLoGainPixId=",0,"-> list of pixel IDs of lo gain channel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayB),-1,-1,4,"fLoGainFadcSamples=",0,"-> list of lo gain samples of all pixels (ordering: see fLoGainPixId)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayB),-1,-1,4,"fABFlags=",0,"-> A information about the exact trigger position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MArrayS),-1,-1,4,"fStartCells=",0,"{fits: unit=uint16 ; name=StartCellData }");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTriggerType=",0,"{fits: unit=uint16 ; name=TriggerType }");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumBytesPerSample=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsSigned=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fConnectedPixels=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawEvtPixelIter */
static void G__setup_memvarMRawEvtPixelIter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter));
   { MRawEvtPixelIter *p; p=(MRawEvtPixelIter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumHiGainEntry=",0,"! actual number of entry in fHiGainPixId");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumLoGainEntry=",0,"! actual number of entry in fLoGainPixId");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fHiGainId=",0,"! actual entry of fHiGainPixId");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fLoGainId=",0,"! actual entry of fLoGainPixId");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fHiGainPos=",0,"! pointer to hi-gain samples of actual pixel");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fLoGainPos=",0,"! pointer to lo-gain samples of actual pixel");
   G__memvar_setup((void*)0,66,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fABFlags=",0,"! pointer to AB flags");
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fStartCell=",0,"! pointer to AB flags");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumEntry=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBytesHiGain=",0,"!");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBytesLoGain=",0,"!");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumBytesPerSample=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),-1,-1,4,"fData=",0,"! pointer to object which we are iterating");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawCrateData */
static void G__setup_memvarMRawCrateData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateData));
   { MRawCrateData *p; p=(MRawCrateData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fDAQCrateNumber=",0,"Crate number the information corresponds to");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFADCEvtNumber=",0,"event number from the fadc");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFADCClockTick=",0,"clock tick from the fadc (20MHz)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fABFlags=",0,"flag describing in which two-slice block the trigger was raised");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawBoardsFACT */
static void G__setup_memvarMRawBoardsFACT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT));
   { MRawBoardsFACT *p; p=(MRawBoardsFACT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFadTime[40]=",0,"Crate number the information corresponds to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawFitsRead */
static void G__setup_memvarMRawFitsRead(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead));
   { MRawFitsRead *p; p=(MRawFitsRead*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fPCTime=",0,"! Buffer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),G__defined_typename("vector<UShort_t>"),-1,4,"fPixelMap=",0,"! ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBoards=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT),-1,-1,4,"fRawBoards=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawRead */
static void G__setup_memvarMRawRead(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead));
   { MRawRead *p; p=(MRawRead*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader),-1,-1,2,"fRawRunHeader=",0,"run header information container to fill from file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader),-1,-1,2,"fRawEvtHeader=",0,"event header information container to fill from file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),-1,-1,2,"fRawEvtData1=",0,"raw evt data infomation container to fill from file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawEvtData),-1,-1,2,"fRawEvtData2=",0,"raw evt data for pixels with negative indices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray),-1,-1,2,"fRawCrateArray=",0,"crate information array container to fill from file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MTime),-1,-1,2,"fRawEvtTime=",0,"raw evt time information container to fill from file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fForceMode=",0,"Force mode skipping defect events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRawFileRead */
static void G__setup_memvarMRawFileRead(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead));
   { MRawFileRead *p; p=(MRawFileRead*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TList),-1,-1,4,"fFileNames=",0,"list of file names");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumFile=",0,"! number of next file");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"! input stream (file to read from)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumTotalEvents=",0,"! total number of events in all files");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("istream"),-1,4,"fIn=",0,"! input stream (file to read from)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_MParList),-1,-1,2,"fParList=",0,"! tasklist to call ReInit from");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fInterleave=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fForce=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsMc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RawCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRawCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMRawRunHeader(void) {
   /* MRawRunHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader));
   G__memfunc_setup("SwapAssignment",1460,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"s - 'Short_t' 0 - id0 s - 'Short_t' 0 - id1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixRunNumbers",1336,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixAssignment",1344,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fixes",511,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConsistent",1254,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEvtOld",970,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MRawRunHeader",1269,G__RawCint_176_0_8, 105, G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRawRunHeader",1269,G__RawCint_176_0_9, 105, G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader), -1, 0, 1, 1, 1, 0, "u 'MRawRunHeader' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFadcType",1188,G__RawCint_176_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCamera",989,G__RawCint_176_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - type r - 'UShort_t' 0 '0' pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPixels",1033,G__RawCint_176_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFact",786,G__RawCint_176_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 0 - num r - 'UShort_t' 0 - pix "
"r - 'UShort_t' 0 - samples R - 'UShort_t' 0 '0' map", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunType",1027,G__RawCint_176_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunInfo",1005,G__RawCint_176_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"r - 'UShort_t' 0 - tel h - 'UInt_t' 0 - run "
"h - 'UInt_t' 0 '0' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileNumber",1301,G__RawCint_176_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSourceInfo",1321,G__RawCint_176_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 10 - src c - - 0 ''J'' epoch "
"r - 'UShort_t' 0 '2000' date", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunTime",1008,G__RawCint_176_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'MTime' - 11 - start u 'MTime' - 11 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunTimeMjd",1291,G__RawCint_176_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - start f - 'Float_t' 0 - stop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObservation",1464,G__RawCint_176_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 10 - mode u 'TString' - 10 - proj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__RawCint_176_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValidMagicNumber",1894,G__RawCint_176_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFormat",917,G__RawCint_176_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - file r - 'UShort_t' 0 - soft", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMagicNumber",1386,G__RawCint_176_0_24, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeaderSizeEvt",1587,G__RawCint_176_0_25, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeaderSizeCrate",1779,G__RawCint_176_0_26, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormatVersion",1647,G__RawCint_176_0_27, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSoftVersion",1442,G__RawCint_176_0_28, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCameraVersion",1615,G__RawCint_176_0_29, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__RawCint_176_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileNumber",1289,G__RawCint_176_0_31, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTypeID",847,G__RawCint_176_0_32, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileID",813,G__RawCint_176_0_33, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringID",1060,G__RawCint_176_0_34, 117, G__get_linked_tagnum(&G__RawCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopeNumber",1837,G__RawCint_176_0_35, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunType",1015,G__RawCint_176_0_36, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunTypeStr",1328,G__RawCint_176_0_37, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunTypeChar",1397,G__RawCint_176_0_38, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProjectName",1400,G__RawCint_176_0_39, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceName",1298,G__RawCint_176_0_40, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceEpocheChar",1891,G__RawCint_176_0_41, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObservationMode",1841,G__RawCint_176_0_42, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceEpocheDate",1891,G__RawCint_176_0_43, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumCrates",1202,G__RawCint_176_0_44, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixInCrate",1575,G__RawCint_176_0_45, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSamplesLoGain",1887,G__RawCint_176_0_46, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSamplesHiGain",1877,G__RawCint_176_0_47, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSamples",1317,G__RawCint_176_0_48, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBytesPerSample",2016,G__RawCint_176_0_49, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSigned",790,G__RawCint_176_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEvents",1221,G__RawCint_176_0_51, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEventsRead",1601,G__RawCint_176_0_52, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqSampling",1513,G__RawCint_176_0_53, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunStart",1123,G__RawCint_176_0_54, 117, G__get_linked_tagnum(&G__RawCintLN_MTime), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunEnd",876,G__RawCint_176_0_55, 117, G__get_linked_tagnum(&G__RawCintLN_MTime), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunLength",1207,G__RawCint_176_0_56, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixAssignment",1642,G__RawCint_176_0_57, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "r - 'UShort_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPixId",1060,G__RawCint_176_0_58, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPixId",1058,G__RawCint_176_0_59, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumConnectedPixels",2136,G__RawCint_176_0_60, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumNormalPixels",1838,G__RawCint_176_0_61, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSpecialPixels",1926,G__RawCint_176_0_62, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScale",776,G__RawCint_176_0_63, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__RawCint_176_0_64, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixAssignment",1642,G__RawCint_176_0_65, 117, G__get_linked_tagnum(&G__RawCintLN_MArrayS), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSamplesPerCrate",2107,G__RawCint_176_0_66, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixel",1106,G__RawCint_176_0_67, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTotalBytes",1627,G__RawCint_176_0_68, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__RawCint_176_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMonteCarloRun",1509,G__RawCint_176_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDataRun",875,G__RawCint_176_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPedestalRun",1315,G__RawCint_176_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCalibrationRun",1625,G__RawCint_176_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPointRun",1019,G__RawCint_176_0_74, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValidRun",993,G__RawCint_176_0_75, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsConsistent",1254,G__RawCint_176_0_76, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MRawRunHeader' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvt",683,G__RawCint_176_0_78, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_176_0_79, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawRunHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_176_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRunHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_176_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawRunHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_176_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawRunHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_176_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_176_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRunHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_176_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawRunHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_176_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRunHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_176_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawRunHeader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRawRunHeader", 1395, G__RawCint_176_0_91, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_176_0_92, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawRunHeader), -1, 1, 1, 1, 1, 0, "u 'MRawRunHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawEvtHeader(void) {
   /* MRawEvtHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader));
   G__memfunc_setup("DecodeTime",979,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"H - 'UInt_t' 10 - abstime r - 'UShort_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBytes",1111,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEvtOld",970,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRawEvtHeader",1263,G__RawCint_190_0_4, 105, G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRead",784,G__RawCint_190_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MRawRunHeader' - 0 - rh U 'MTime' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrigType",1112,G__RawCint_190_0_6, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTrigLvl1",1349,G__RawCint_190_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumTrigLvl2",1350,G__RawCint_190_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDAQEvtNumber",1422,G__RawCint_190_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerID",1153,G__RawCint_190_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibrationPattern",2150,G__RawCint_190_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulserSlotPattern",2075,G__RawCint_190_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillHeader",976,G__RawCint_190_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - - f - 'Float_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerPattern",1758,G__RawCint_190_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - pattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibrationPattern",2162,G__RawCint_190_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - pattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDAQEvtNumber",1434,G__RawCint_190_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumTrigLvl1",1361,G__RawCint_190_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvt",683,G__RawCint_190_0_20, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver "
"h - 'UInt_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipEvt",710,G__RawCint_190_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_190_0_22, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawEvtHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_190_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_190_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawEvtHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_190_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawEvtHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_190_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_190_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_190_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_190_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_190_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawEvtHeader", 1263, G__RawCint_190_0_34, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader), -1, 0, 1, 1, 1, 0, "u 'MRawEvtHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawEvtHeader", 1389, G__RawCint_190_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_190_0_36, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtHeader), -1, 1, 1, 1, 1, 0, "u 'MRawEvtHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawCrateArray(void) {
   /* MRawCrateArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray));
   G__memfunc_setup("MRawCrateArray",1381,G__RawCint_192_0_1, 105, G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSize",711,G__RawCint_192_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__RawCint_192_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__RawCint_192_0_6, 85, G__get_linked_tagnum(&G__RawCintLN_MRawCrateData), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RawCint_192_0_7, 85, G__get_linked_tagnum(&G__RawCintLN_MRawCrateData), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArray",799,G__RawCint_192_0_8, 85, G__get_linked_tagnum(&G__RawCintLN_TClonesArray), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_192_0_9, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawCrateArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_192_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_192_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawCrateArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_192_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawCrateArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_192_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_192_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_192_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawCrateArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_192_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_192_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawCrateArray::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawCrateArray", 1381, G__RawCint_192_0_21, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray), -1, 0, 1, 1, 1, 0, "u 'MRawCrateArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawCrateArray", 1507, G__RawCint_192_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_192_0_23, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawCrateArray), -1, 1, 1, 1, 1, 0, "u 'MRawCrateArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawEvtData(void) {
   /* MRawEvtData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtData));
   G__memfunc_setup("InitArrays",1030,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"r - 'UShort_t' 0 '0' numconnected r - 'UShort_t' 0 '0' maxid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteArrays",1221,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBytes",1111,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSample",898,(G__InterfaceMethod) NULL, 108, -1, G__defined_typename("Long_t"), 0, 2, 1, 4, 0, 
"Y - - 10 - ptr i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRawEvtData",1056,G__RawCint_195_0_5, 105, G__get_linked_tagnum(&G__RawCintLN_MRawEvtData), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitRead",784,G__RawCint_195_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MRawRunHeader' - 0 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetPixels",1144,G__RawCint_195_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetPixels",1144,G__RawCint_195_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - npix r - 'UShort_t' 0 - maxid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitStartCells",1429,G__RawCint_195_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPixel",779,G__RawCint_195_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - nOfPixel u 'TArrayC' - 11 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__RawCint_195_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MArrayI' - 11 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndices",1003,G__RawCint_195_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MArrayS' - 11 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndices",1003,G__RawCint_195_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainSamples",1877,G__RawCint_195_0_17, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainSamples",1887,G__RawCint_195_0_18, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSamples",1317,G__RawCint_195_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixels",1221,G__RawCint_195_0_20, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBytesPerSample",2016,G__RawCint_195_0_21, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScale",776,G__RawCint_195_0_22, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__RawCint_195_0_23, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__RawCint_195_0_24, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSamples",1013,G__RawCint_195_0_25, 66, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartCells",1313,G__RawCint_195_0_26, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelIds",1090,G__RawCint_195_0_27, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasStartCells",1309,G__RawCint_195_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadPixel",894,G__RawCint_195_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin i - 'Int_t' 0 - npix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetABFlag",809,G__RawCint_195_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - npix g - 'Bool_t' 0 - ab", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipEvt",710,G__RawCint_195_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - named", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RawCint_195_0_35, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawEvtData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_195_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_195_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawEvtData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_195_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawEvtData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_195_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_195_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_195_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_195_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_195_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawEvtData", 1056, G__RawCint_195_0_47, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtData), -1, 0, 1, 1, 1, 0, "u 'MRawEvtData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawEvtData", 1182, G__RawCint_195_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_195_0_49, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtData), -1, 1, 1, 1, 1, 0, "u 'MRawEvtData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawEvtPixelIter(void) {
   /* MRawEvtPixelIter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter));
   G__memfunc_setup("MRawEvtPixelIter",1596,G__RawCint_196_0_1, 105, G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter), -1, 0, 1, 1, 1, 0, "U 'MRawEvtData' - 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Next",415,G__RawCint_196_0_2, 85, G__get_linked_tagnum(&G__RawCintLN_MRawEvtData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Jump",412,G__RawCint_196_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelId",975,G__RawCint_196_0_4, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEntry",1122,G__RawCint_196_0_5, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainSamples",1573,G__RawCint_196_0_6, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBytes",1111,G__RawCint_196_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasLoGain",854,G__RawCint_196_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsABFlagValid",1193,G__RawCint_196_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasABFlag",793,G__RawCint_196_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetABFlag",797,G__RawCint_196_0_11, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainSamples",1583,G__RawCint_196_0_12, 89, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartCell",1198,G__RawCint_196_0_13, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RawCint_196_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"GRAPH\"' t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RawCint_196_0_16, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawEvtPixelIter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_196_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtPixelIter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_196_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawEvtPixelIter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_196_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawEvtPixelIter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_196_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_196_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtPixelIter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_196_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtPixelIter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_196_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawEvtPixelIter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_196_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawEvtPixelIter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawEvtPixelIter", 1596, G__RawCint_196_0_28, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter), -1, 0, 1, 1, 1, 0, "u 'MRawEvtPixelIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawEvtPixelIter", 1722, G__RawCint_196_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_196_0_30, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawEvtPixelIter), -1, 1, 1, 1, 1, 0, "u 'MRawEvtPixelIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawCrateData(void) {
   /* MRawCrateData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawCrateData));
   G__memfunc_setup("ReadEvtOld",970,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRawCrateData",1248,G__RawCint_197_0_2, 105, G__get_linked_tagnum(&G__RawCintLN_MRawCrateData), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDAQCrateNumber",1614,G__RawCint_197_0_3, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFADCEvtNumber",1478,G__RawCint_197_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFADCClockTick",1445,G__RawCint_197_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetABFlags",912,G__RawCint_197_0_6, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvt",683,G__RawCint_197_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver "
"h - 'UInt_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipEvt",710,G__RawCint_197_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin r - 'UShort_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_197_0_10, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawCrateData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_197_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_197_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawCrateData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_197_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawCrateData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_197_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_197_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_197_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawCrateData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_197_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawCrateData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_197_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawCrateData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawCrateData", 1248, G__RawCint_197_0_22, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawCrateData), -1, 0, 1, 1, 1, 0, "u 'MRawCrateData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawCrateData", 1374, G__RawCint_197_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_197_0_24, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawCrateData), -1, 1, 1, 1, 1, 0, "u 'MRawCrateData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawBoardsFACT(void) {
   /* MRawBoardsFACT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT));
   G__memfunc_setup("MRawBoardsFACT",1264,G__RawCint_198_0_1, 105, G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFadTime",954,G__RawCint_198_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' t", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RawCint_198_0_4, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawBoardsFACT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_198_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawBoardsFACT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_198_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawBoardsFACT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_198_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawBoardsFACT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_198_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_198_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawBoardsFACT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_198_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawBoardsFACT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_198_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawBoardsFACT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_198_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawBoardsFACT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawBoardsFACT", 1264, G__RawCint_198_0_16, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT), -1, 0, 1, 1, 1, 0, "u 'MRawBoardsFACT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawBoardsFACT", 1390, G__RawCint_198_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_198_0_18, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawBoardsFACT), -1, 1, 1, 1, 1, 0, "u 'MRawBoardsFACT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawFitsRead(void) {
   /* MRawFitsRead */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenFile",786,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 0, 1, 1, 4, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadRunHeader",1274,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitReadData",1162,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEvent",894,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SkipEvent",921,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MRawFitsRead",1161,G__RawCint_199_0_7, 105, G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' filename C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFits",594,G__RawCint_199_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const char*))(&MRawFitsRead::IsFits) ), 0);
   G__memfunc_setup("LoadMap",670,G__RawCint_199_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitsFile",1078,G__RawCint_199_0_10, 85, G__get_linked_tagnum(&G__RawCintLN_fits), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPCTime",834,G__RawCint_199_0_11, 117, G__get_linked_tagnum(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR), G__defined_typename("vector<UInt_t>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_199_0_12, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawFitsRead::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_199_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFitsRead::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_199_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawFitsRead::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_199_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawFitsRead::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_199_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_199_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFitsRead::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_199_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawFitsRead::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_199_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFitsRead::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_199_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawFitsRead::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawFitsRead", 1161, G__RawCint_199_0_24, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead), -1, 0, 1, 1, 1, 0, "u 'MRawFitsRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawFitsRead", 1287, G__RawCint_199_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_199_0_26, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawFitsRead), -1, 1, 1, 1, 1, 0, "u 'MRawFitsRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawRead(void) {
   /* MRawRead */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawRead));
   G__memfunc_setup("CreateFakeTime",1370,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEvent",894,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SkipEvent",921,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenStream",1022,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Rewind",617,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetForceMode",1184,G__RawCint_208_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_208_0_10, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawRead::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_208_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRead::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_208_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawRead::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_208_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawRead::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_208_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_208_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRead::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_208_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawRead::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_208_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawRead::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_208_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawRead::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MRawRead", 881, G__RawCint_208_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_208_0_23, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawRead), -1, 1, 1, 1, 1, 0, "u 'MRawRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRawFileRead(void) {
   /* MRawFileRead */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RawCintLN_MRawFileRead));
   G__memfunc_setup("OpenFile",786,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 0, 1, 1, 4, 0, "C - - 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadRunHeader",1274,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - fin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitReadData",1162,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'basic_istream<char,char_traits<char> >' 'istream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenNextFile",1201,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kTRUE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcNumTotalEvents",1820,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MRawFileRead",1139,G__RawCint_210_0_9, 105, G__get_linked_tagnum(&G__RawCintLN_MRawFileRead), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' filename C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFileValid",1068,G__RawCint_210_0_10, 98, -1, G__defined_typename("Byte_t"), 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (Byte_t (*)(const char*))(&MRawFileRead::IsFileValid) ), 0);
   G__memfunc_setup("SetInterleave",1339,G__RawCint_210_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetForce",795,G__RawCint_210_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFullFileName",1460,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__RawCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddFile",649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - - 10 - fname i - 'Int_t' 0 '-1' entries", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Rewind",617,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStream",908,G__RawCint_210_0_17, 85, G__get_linked_tagnum(&G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("istream"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RawCint_210_0_18, 85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRawFileRead::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RawCint_210_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFileRead::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RawCint_210_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRawFileRead::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RawCint_210_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRawFileRead::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RawCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RawCint_210_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RawCint_210_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFileRead::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RawCint_210_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawFileRead::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RawCint_210_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRawFileRead::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RawCint_210_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRawFileRead::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRawFileRead", 1139, G__RawCint_210_0_30, (int) ('i'), G__get_linked_tagnum(&G__RawCintLN_MRawFileRead), -1, 0, 1, 1, 1, 0, "u 'MRawFileRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRawFileRead", 1265, G__RawCint_210_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RawCint_210_0_32, (int) ('u'), G__get_linked_tagnum(&G__RawCintLN_MRawFileRead), -1, 1, 1, 1, 1, 0, "u 'MRawFileRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRawCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRawCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRawCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RawCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RawCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RawCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RawCintLN_fits = { "fits" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MArrayS = { "MArrayS" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawRunHeadercLcLdA = { "MRawRunHeader::$" , 101 , -1 };
G__linked_taginfo G__RawCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MArrayB = { "MArrayB" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawEvtHeadercLcLCLColor_t = { "MRawEvtHeader::CLColor_t" , 101 , -1 };
G__linked_taginfo G__RawCintLN_MRawCrateArray = { "MRawCrateArray" , 99 , -1 };
G__linked_taginfo G__RawCintLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawEvtPixelIter = { "MRawEvtPixelIter" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawCrateData = { "MRawCrateData" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawBoardsFACT = { "MRawBoardsFACT" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawFitsRead = { "MRawFitsRead" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawRead = { "MRawRead" , 99 , -1 };
G__linked_taginfo G__RawCintLN_MRawFileRead = { "MRawFileRead" , 99 , -1 };
G__linked_taginfo G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned short,allocator<unsigned short> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRawCint() {
  G__RawCintLN_TClass.tagnum = -1 ;
  G__RawCintLN_TBuffer.tagnum = -1 ;
  G__RawCintLN_TMemberInspector.tagnum = -1 ;
  G__RawCintLN_TObject.tagnum = -1 ;
  G__RawCintLN_TString.tagnum = -1 ;
  G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RawCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RawCintLN_TList.tagnum = -1 ;
  G__RawCintLN_TClonesArray.tagnum = -1 ;
  G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RawCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RawCintLN_fits.tagnum = -1 ;
  G__RawCintLN_TEnv.tagnum = -1 ;
  G__RawCintLN_MParContainer.tagnum = -1 ;
  G__RawCintLN_MTime.tagnum = -1 ;
  G__RawCintLN_MArrayS.tagnum = -1 ;
  G__RawCintLN_MRawRunHeader.tagnum = -1 ;
  G__RawCintLN_MRawRunHeadercLcLdA.tagnum = -1 ;
  G__RawCintLN_MGeomCam.tagnum = -1 ;
  G__RawCintLN_MCamEvent.tagnum = -1 ;
  G__RawCintLN_MArrayB.tagnum = -1 ;
  G__RawCintLN_MRawEvtHeader.tagnum = -1 ;
  G__RawCintLN_MRawEvtHeadercLcLCLColor_t.tagnum = -1 ;
  G__RawCintLN_MRawCrateArray.tagnum = -1 ;
  G__RawCintLN_TArrayC.tagnum = -1 ;
  G__RawCintLN_MArrayI.tagnum = -1 ;
  G__RawCintLN_MRawEvtData.tagnum = -1 ;
  G__RawCintLN_MRawEvtPixelIter.tagnum = -1 ;
  G__RawCintLN_MRawCrateData.tagnum = -1 ;
  G__RawCintLN_MRawBoardsFACT.tagnum = -1 ;
  G__RawCintLN_MRawFitsRead.tagnum = -1 ;
  G__RawCintLN_MInputStreamID.tagnum = -1 ;
  G__RawCintLN_MParList.tagnum = -1 ;
  G__RawCintLN_MTask.tagnum = -1 ;
  G__RawCintLN_MRead.tagnum = -1 ;
  G__RawCintLN_MRawRead.tagnum = -1 ;
  G__RawCintLN_MRawFileRead.tagnum = -1 ;
  G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRawCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RawCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TString);
   G__get_linked_tagnum_fwd(&G__RawCintLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TList);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__RawCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_fits);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MTime);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MArrayS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawRunHeader),sizeof(MRawRunHeader),-1,325376,"storage container for general info",G__setup_memvarMRawRunHeader,G__setup_memfuncMRawRunHeader);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MRawRunHeadercLcLdA);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MArrayB);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawEvtHeader),sizeof(MRawEvtHeader),-1,324864,"Parameter Conatiner for raw EVENT HEADER",G__setup_memvarMRawEvtHeader,G__setup_memfuncMRawEvtHeader);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MRawEvtHeadercLcLCLColor_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawCrateArray),sizeof(MRawCrateArray),-1,324864,"Mapping container for the MRawCrateData TClonesArray",G__setup_memvarMRawCrateArray,G__setup_memfuncMRawCrateArray);
   G__get_linked_tagnum_fwd(&G__RawCintLN_TArrayC);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawEvtData),sizeof(MRawEvtData),-1,324864,"Container to store the raw Event Data",G__setup_memvarMRawEvtData,G__setup_memfuncMRawEvtData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawEvtPixelIter),sizeof(MRawEvtPixelIter),-1,323584,"iterates over all pixels of one MRawEvtData object",G__setup_memvarMRawEvtPixelIter,G__setup_memfuncMRawEvtPixelIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawCrateData),sizeof(MRawCrateData),-1,323840,"Container to store the Raw CRATE DATA",G__setup_memvarMRawCrateData,G__setup_memfuncMRawCrateData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawBoardsFACT),sizeof(MRawBoardsFACT),-1,323840,"Container to store the Raw CRATE DATA",G__setup_memvarMRawBoardsFACT,G__setup_memfuncMRawBoardsFACT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawFitsRead),sizeof(MRawFitsRead),-1,323840,"Task to read the raw data binary file",G__setup_memvarMRawFitsRead,G__setup_memfuncMRawFitsRead);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__RawCintLN_MRead);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawRead),sizeof(MRawRead),-1,323841,"Task to read the raw data binary file",G__setup_memvarMRawRead,G__setup_memfuncMRawRead);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RawCintLN_MRawFileRead),sizeof(MRawFileRead),-1,324864,"Task to read the raw data binary file",G__setup_memvarMRawFileRead,G__setup_memfuncMRawFileRead);
   G__get_linked_tagnum_fwd(&G__RawCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__RawCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupRawCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupRawCint()");
  G__set_cpp_environmentRawCint();
  G__cpp_setup_tagtableRawCint();

  G__cpp_setup_inheritanceRawCint();

  G__cpp_setup_typetableRawCint();

  G__cpp_setup_memvarRawCint();

  G__cpp_setup_memfuncRawCint();
  G__cpp_setup_globalRawCint();
  G__cpp_setup_funcRawCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRawCint();
  return;
}
class G__cpp_setup_initRawCint {
  public:
    G__cpp_setup_initRawCint() { G__add_setup_func("RawCint",(G__incsetup)(&G__cpp_setupRawCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRawCint() { G__remove_setup_func("RawCint"); }
};
G__cpp_setup_initRawCint G__cpp_setup_initializerRawCint;

