//
// File generated by rootcint at Mon Nov 28 11:06:03 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SignalCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SignalCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MExtractedSignalPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractedSignalPix(void *p = 0);
   static void *newArray_MExtractedSignalPix(Long_t size, void *p);
   static void delete_MExtractedSignalPix(void *p);
   static void deleteArray_MExtractedSignalPix(void *p);
   static void destruct_MExtractedSignalPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractedSignalPix*)
   {
      ::MExtractedSignalPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractedSignalPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractedSignalPix", ::MExtractedSignalPix::Class_Version(), "./MExtractedSignalPix.h", 9,
                  typeid(::MExtractedSignalPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractedSignalPix::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractedSignalPix) );
      instance.SetNew(&new_MExtractedSignalPix);
      instance.SetNewArray(&newArray_MExtractedSignalPix);
      instance.SetDelete(&delete_MExtractedSignalPix);
      instance.SetDeleteArray(&deleteArray_MExtractedSignalPix);
      instance.SetDestructor(&destruct_MExtractedSignalPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractedSignalPix*)
   {
      return GenerateInitInstanceLocal((::MExtractedSignalPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractedSignalPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractedSignalCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractedSignalCam(void *p = 0);
   static void *newArray_MExtractedSignalCam(Long_t size, void *p);
   static void delete_MExtractedSignalCam(void *p);
   static void deleteArray_MExtractedSignalCam(void *p);
   static void destruct_MExtractedSignalCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractedSignalCam*)
   {
      ::MExtractedSignalCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractedSignalCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractedSignalCam", ::MExtractedSignalCam::Class_Version(), "./MExtractedSignalCam.h", 16,
                  typeid(::MExtractedSignalCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractedSignalCam::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractedSignalCam) );
      instance.SetNew(&new_MExtractedSignalCam);
      instance.SetNewArray(&newArray_MExtractedSignalCam);
      instance.SetDelete(&delete_MExtractedSignalCam);
      instance.SetDeleteArray(&deleteArray_MExtractedSignalCam);
      instance.SetDestructor(&destruct_MExtractedSignalCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractedSignalCam*)
   {
      return GenerateInitInstanceLocal((::MExtractedSignalCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractedSignalCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractedSignalPINDiode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractedSignalPINDiode(void *p = 0);
   static void *newArray_MExtractedSignalPINDiode(Long_t size, void *p);
   static void delete_MExtractedSignalPINDiode(void *p);
   static void deleteArray_MExtractedSignalPINDiode(void *p);
   static void destruct_MExtractedSignalPINDiode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractedSignalPINDiode*)
   {
      ::MExtractedSignalPINDiode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractedSignalPINDiode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractedSignalPINDiode", ::MExtractedSignalPINDiode::Class_Version(), "./MExtractedSignalPINDiode.h", 9,
                  typeid(::MExtractedSignalPINDiode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractedSignalPINDiode::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractedSignalPINDiode) );
      instance.SetNew(&new_MExtractedSignalPINDiode);
      instance.SetNewArray(&newArray_MExtractedSignalPINDiode);
      instance.SetDelete(&delete_MExtractedSignalPINDiode);
      instance.SetDeleteArray(&deleteArray_MExtractedSignalPINDiode);
      instance.SetDestructor(&destruct_MExtractedSignalPINDiode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractedSignalPINDiode*)
   {
      return GenerateInitInstanceLocal((::MExtractedSignalPINDiode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractedSignalPINDiode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractor(void *p = 0);
   static void *newArray_MExtractor(Long_t size, void *p);
   static void delete_MExtractor(void *p);
   static void deleteArray_MExtractor(void *p);
   static void destruct_MExtractor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractor*)
   {
      ::MExtractor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractor", ::MExtractor::Class_Version(), "./MExtractor.h", 23,
                  typeid(::MExtractor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractor::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractor) );
      instance.SetNew(&new_MExtractor);
      instance.SetNewArray(&newArray_MExtractor);
      instance.SetDelete(&delete_MExtractor);
      instance.SetDeleteArray(&deleteArray_MExtractor);
      instance.SetDestructor(&destruct_MExtractor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractor*)
   {
      return GenerateInitInstanceLocal((::MExtractor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractedSignalBlindPixel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractedSignalBlindPixel(void *p = 0);
   static void *newArray_MExtractedSignalBlindPixel(Long_t size, void *p);
   static void delete_MExtractedSignalBlindPixel(void *p);
   static void deleteArray_MExtractedSignalBlindPixel(void *p);
   static void destruct_MExtractedSignalBlindPixel(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractedSignalBlindPixel*)
   {
      ::MExtractedSignalBlindPixel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractedSignalBlindPixel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractedSignalBlindPixel", ::MExtractedSignalBlindPixel::Class_Version(), "./MExtractedSignalBlindPixel.h", 21,
                  typeid(::MExtractedSignalBlindPixel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractedSignalBlindPixel::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractedSignalBlindPixel) );
      instance.SetNew(&new_MExtractedSignalBlindPixel);
      instance.SetNewArray(&newArray_MExtractedSignalBlindPixel);
      instance.SetDelete(&delete_MExtractedSignalBlindPixel);
      instance.SetDeleteArray(&deleteArray_MExtractedSignalBlindPixel);
      instance.SetDestructor(&destruct_MExtractedSignalBlindPixel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractedSignalBlindPixel*)
   {
      return GenerateInitInstanceLocal((::MExtractedSignalBlindPixel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractedSignalBlindPixel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractBlindPixel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractBlindPixel(void *p = 0);
   static void *newArray_MExtractBlindPixel(Long_t size, void *p);
   static void delete_MExtractBlindPixel(void *p);
   static void deleteArray_MExtractBlindPixel(void *p);
   static void destruct_MExtractBlindPixel(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractBlindPixel*)
   {
      ::MExtractBlindPixel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractBlindPixel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractBlindPixel", ::MExtractBlindPixel::Class_Version(), "./MExtractBlindPixel.h", 19,
                  typeid(::MExtractBlindPixel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractBlindPixel::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractBlindPixel) );
      instance.SetNew(&new_MExtractBlindPixel);
      instance.SetNewArray(&newArray_MExtractBlindPixel);
      instance.SetDelete(&delete_MExtractBlindPixel);
      instance.SetDeleteArray(&deleteArray_MExtractBlindPixel);
      instance.SetDestructor(&destruct_MExtractBlindPixel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractBlindPixel*)
   {
      return GenerateInitInstanceLocal((::MExtractBlindPixel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractBlindPixel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractPINDiode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractPINDiode(void *p = 0);
   static void *newArray_MExtractPINDiode(Long_t size, void *p);
   static void delete_MExtractPINDiode(void *p);
   static void deleteArray_MExtractPINDiode(void *p);
   static void destruct_MExtractPINDiode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractPINDiode*)
   {
      ::MExtractPINDiode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractPINDiode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractPINDiode", ::MExtractPINDiode::Class_Version(), "./MExtractPINDiode.h", 25,
                  typeid(::MExtractPINDiode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractPINDiode::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractPINDiode) );
      instance.SetNew(&new_MExtractPINDiode);
      instance.SetNewArray(&newArray_MExtractPINDiode);
      instance.SetDelete(&delete_MExtractPINDiode);
      instance.SetDeleteArray(&deleteArray_MExtractPINDiode);
      instance.SetDestructor(&destruct_MExtractPINDiode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractPINDiode*)
   {
      return GenerateInitInstanceLocal((::MExtractPINDiode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractPINDiode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MArrivalTimeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MArrivalTimeCam(void *p = 0);
   static void *newArray_MArrivalTimeCam(Long_t size, void *p);
   static void delete_MArrivalTimeCam(void *p);
   static void deleteArray_MArrivalTimeCam(void *p);
   static void destruct_MArrivalTimeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MArrivalTimeCam*)
   {
      ::MArrivalTimeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MArrivalTimeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MArrivalTimeCam", ::MArrivalTimeCam::Class_Version(), "./MArrivalTimeCam.h", 16,
                  typeid(::MArrivalTimeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MArrivalTimeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MArrivalTimeCam) );
      instance.SetNew(&new_MArrivalTimeCam);
      instance.SetNewArray(&newArray_MArrivalTimeCam);
      instance.SetDelete(&delete_MArrivalTimeCam);
      instance.SetDeleteArray(&deleteArray_MArrivalTimeCam);
      instance.SetDestructor(&destruct_MArrivalTimeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MArrivalTimeCam*)
   {
      return GenerateInitInstanceLocal((::MArrivalTimeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MArrivalTimeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractTime(void *p = 0);
   static void *newArray_MExtractTime(Long_t size, void *p);
   static void delete_MExtractTime(void *p);
   static void deleteArray_MExtractTime(void *p);
   static void destruct_MExtractTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractTime*)
   {
      ::MExtractTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractTime", ::MExtractTime::Class_Version(), "./MExtractTime.h", 12,
                  typeid(::MExtractTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractTime::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractTime) );
      instance.SetNew(&new_MExtractTime);
      instance.SetNewArray(&newArray_MExtractTime);
      instance.SetDelete(&delete_MExtractTime);
      instance.SetDeleteArray(&deleteArray_MExtractTime);
      instance.SetDestructor(&destruct_MExtractTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractTime*)
   {
      return GenerateInitInstanceLocal((::MExtractTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractTimeAndCharge_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractTimeAndCharge(void *p = 0);
   static void *newArray_MExtractTimeAndCharge(Long_t size, void *p);
   static void delete_MExtractTimeAndCharge(void *p);
   static void deleteArray_MExtractTimeAndCharge(void *p);
   static void destruct_MExtractTimeAndCharge(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractTimeAndCharge*)
   {
      ::MExtractTimeAndCharge *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractTimeAndCharge >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractTimeAndCharge", ::MExtractTimeAndCharge::Class_Version(), "./MExtractTimeAndCharge.h", 11,
                  typeid(::MExtractTimeAndCharge), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractTimeAndCharge::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractTimeAndCharge) );
      instance.SetNew(&new_MExtractTimeAndCharge);
      instance.SetNewArray(&newArray_MExtractTimeAndCharge);
      instance.SetDelete(&delete_MExtractTimeAndCharge);
      instance.SetDeleteArray(&deleteArray_MExtractTimeAndCharge);
      instance.SetDestructor(&destruct_MExtractTimeAndCharge);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractTimeAndCharge*)
   {
      return GenerateInitInstanceLocal((::MExtractTimeAndCharge*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractTimeAndCharge*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractTimeAndChargeSpline_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractTimeAndChargeSpline(void *p = 0);
   static void *newArray_MExtractTimeAndChargeSpline(Long_t size, void *p);
   static void delete_MExtractTimeAndChargeSpline(void *p);
   static void deleteArray_MExtractTimeAndChargeSpline(void *p);
   static void destruct_MExtractTimeAndChargeSpline(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractTimeAndChargeSpline*)
   {
      ::MExtractTimeAndChargeSpline *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractTimeAndChargeSpline >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractTimeAndChargeSpline", ::MExtractTimeAndChargeSpline::Class_Version(), "./MExtractTimeAndChargeSpline.h", 19,
                  typeid(::MExtractTimeAndChargeSpline), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractTimeAndChargeSpline::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractTimeAndChargeSpline) );
      instance.SetNew(&new_MExtractTimeAndChargeSpline);
      instance.SetNewArray(&newArray_MExtractTimeAndChargeSpline);
      instance.SetDelete(&delete_MExtractTimeAndChargeSpline);
      instance.SetDeleteArray(&deleteArray_MExtractTimeAndChargeSpline);
      instance.SetDestructor(&destruct_MExtractTimeAndChargeSpline);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractTimeAndChargeSpline*)
   {
      return GenerateInitInstanceLocal((::MExtractTimeAndChargeSpline*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractTimeAndChargeSpline*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractTimeAndChargeDigitalFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractTimeAndChargeDigitalFilter(void *p = 0);
   static void *newArray_MExtractTimeAndChargeDigitalFilter(Long_t size, void *p);
   static void delete_MExtractTimeAndChargeDigitalFilter(void *p);
   static void deleteArray_MExtractTimeAndChargeDigitalFilter(void *p);
   static void destruct_MExtractTimeAndChargeDigitalFilter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractTimeAndChargeDigitalFilter*)
   {
      ::MExtractTimeAndChargeDigitalFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractTimeAndChargeDigitalFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractTimeAndChargeDigitalFilter", ::MExtractTimeAndChargeDigitalFilter::Class_Version(), "./MExtractTimeAndChargeDigitalFilter.h", 15,
                  typeid(::MExtractTimeAndChargeDigitalFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractTimeAndChargeDigitalFilter::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractTimeAndChargeDigitalFilter) );
      instance.SetNew(&new_MExtractTimeAndChargeDigitalFilter);
      instance.SetNewArray(&newArray_MExtractTimeAndChargeDigitalFilter);
      instance.SetDelete(&delete_MExtractTimeAndChargeDigitalFilter);
      instance.SetDeleteArray(&deleteArray_MExtractTimeAndChargeDigitalFilter);
      instance.SetDestructor(&destruct_MExtractTimeAndChargeDigitalFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractTimeAndChargeDigitalFilter*)
   {
      return GenerateInitInstanceLocal((::MExtractTimeAndChargeDigitalFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractTimeAndChargeDigitalFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MExtractFACT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MExtractFACT(void *p = 0);
   static void *newArray_MExtractFACT(Long_t size, void *p);
   static void delete_MExtractFACT(void *p);
   static void deleteArray_MExtractFACT(void *p);
   static void destruct_MExtractFACT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MExtractFACT*)
   {
      ::MExtractFACT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MExtractFACT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MExtractFACT", ::MExtractFACT::Class_Version(), "./MExtractFACT.h", 9,
                  typeid(::MExtractFACT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MExtractFACT::Dictionary, isa_proxy, 4,
                  sizeof(::MExtractFACT) );
      instance.SetNew(&new_MExtractFACT);
      instance.SetNewArray(&newArray_MExtractFACT);
      instance.SetDelete(&delete_MExtractFACT);
      instance.SetDeleteArray(&deleteArray_MExtractFACT);
      instance.SetDestructor(&destruct_MExtractFACT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MExtractFACT*)
   {
      return GenerateInitInstanceLocal((::MExtractFACT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MExtractFACT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSignalPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSignalPix(void *p = 0);
   static void *newArray_MSignalPix(Long_t size, void *p);
   static void delete_MSignalPix(void *p);
   static void deleteArray_MSignalPix(void *p);
   static void destruct_MSignalPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSignalPix*)
   {
      ::MSignalPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSignalPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSignalPix", ::MSignalPix::Class_Version(), "./MSignalPix.h", 12,
                  typeid(::MSignalPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSignalPix::Dictionary, isa_proxy, 4,
                  sizeof(::MSignalPix) );
      instance.SetNew(&new_MSignalPix);
      instance.SetNewArray(&newArray_MSignalPix);
      instance.SetDelete(&delete_MSignalPix);
      instance.SetDeleteArray(&deleteArray_MSignalPix);
      instance.SetDestructor(&destruct_MSignalPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSignalPix*)
   {
      return GenerateInitInstanceLocal((::MSignalPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSignalPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSignalCamIter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MSignalCamIter(void *p);
   static void deleteArray_MSignalCamIter(void *p);
   static void destruct_MSignalCamIter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSignalCamIter*)
   {
      ::MSignalCamIter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSignalCamIter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSignalCamIter", ::MSignalCamIter::Class_Version(), "./MSignalCam.h", 102,
                  typeid(::MSignalCamIter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSignalCamIter::Dictionary, isa_proxy, 4,
                  sizeof(::MSignalCamIter) );
      instance.SetDelete(&delete_MSignalCamIter);
      instance.SetDeleteArray(&deleteArray_MSignalCamIter);
      instance.SetDestructor(&destruct_MSignalCamIter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSignalCamIter*)
   {
      return GenerateInitInstanceLocal((::MSignalCamIter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSignalCamIter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSignalCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSignalCam(void *p = 0);
   static void *newArray_MSignalCam(Long_t size, void *p);
   static void delete_MSignalCam(void *p);
   static void deleteArray_MSignalCam(void *p);
   static void destruct_MSignalCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSignalCam*)
   {
      ::MSignalCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSignalCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSignalCam", ::MSignalCam::Class_Version(), "./MSignalCam.h", 19,
                  typeid(::MSignalCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSignalCam::Dictionary, isa_proxy, 4,
                  sizeof(::MSignalCam) );
      instance.SetNew(&new_MSignalCam);
      instance.SetNewArray(&newArray_MSignalCam);
      instance.SetDelete(&delete_MSignalCam);
      instance.SetDeleteArray(&deleteArray_MSignalCam);
      instance.SetDestructor(&destruct_MSignalCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSignalCam*)
   {
      return GenerateInitInstanceLocal((::MSignalCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSignalCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSignalCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSignalCalc(void *p = 0);
   static void *newArray_MSignalCalc(Long_t size, void *p);
   static void delete_MSignalCalc(void *p);
   static void deleteArray_MSignalCalc(void *p);
   static void destruct_MSignalCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSignalCalc*)
   {
      ::MSignalCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSignalCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSignalCalc", ::MSignalCalc::Class_Version(), "./MSignalCalc.h", 14,
                  typeid(::MSignalCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSignalCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MSignalCalc) );
      instance.SetNew(&new_MSignalCalc);
      instance.SetNewArray(&newArray_MSignalCalc);
      instance.SetDelete(&delete_MSignalCalc);
      instance.SetDeleteArray(&deleteArray_MSignalCalc);
      instance.SetDestructor(&destruct_MSignalCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSignalCalc*)
   {
      return GenerateInitInstanceLocal((::MSignalCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSignalCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFilterData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFilterData(void *p = 0);
   static void *newArray_MFilterData(Long_t size, void *p);
   static void delete_MFilterData(void *p);
   static void deleteArray_MFilterData(void *p);
   static void destruct_MFilterData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFilterData*)
   {
      ::MFilterData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFilterData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFilterData", ::MFilterData::Class_Version(), "./MFilterData.h", 13,
                  typeid(::MFilterData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFilterData::Dictionary, isa_proxy, 4,
                  sizeof(::MFilterData) );
      instance.SetNew(&new_MFilterData);
      instance.SetNewArray(&newArray_MFilterData);
      instance.SetDelete(&delete_MFilterData);
      instance.SetDeleteArray(&deleteArray_MFilterData);
      instance.SetDestructor(&destruct_MFilterData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFilterData*)
   {
      return GenerateInitInstanceLocal((::MFilterData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFilterData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTreatSaturation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTreatSaturation(void *p = 0);
   static void *newArray_MTreatSaturation(Long_t size, void *p);
   static void delete_MTreatSaturation(void *p);
   static void deleteArray_MTreatSaturation(void *p);
   static void destruct_MTreatSaturation(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTreatSaturation*)
   {
      ::MTreatSaturation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTreatSaturation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTreatSaturation", ::MTreatSaturation::Class_Version(), "./MTreatSaturation.h", 15,
                  typeid(::MTreatSaturation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTreatSaturation::Dictionary, isa_proxy, 4,
                  sizeof(::MTreatSaturation) );
      instance.SetNew(&new_MTreatSaturation);
      instance.SetNewArray(&newArray_MTreatSaturation);
      instance.SetDelete(&delete_MTreatSaturation);
      instance.SetDeleteArray(&deleteArray_MTreatSaturation);
      instance.SetDestructor(&destruct_MTreatSaturation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTreatSaturation*)
   {
      return GenerateInitInstanceLocal((::MTreatSaturation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTreatSaturation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MArrivalTimePix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MArrivalTimePix(void *p = 0);
   static void *newArray_MArrivalTimePix(Long_t size, void *p);
   static void delete_MArrivalTimePix(void *p);
   static void deleteArray_MArrivalTimePix(void *p);
   static void destruct_MArrivalTimePix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MArrivalTimePix*)
   {
      ::MArrivalTimePix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MArrivalTimePix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MArrivalTimePix", ::MArrivalTimePix::Class_Version(), "./MArrivalTimePix.h", 9,
                  typeid(::MArrivalTimePix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MArrivalTimePix::Dictionary, isa_proxy, 4,
                  sizeof(::MArrivalTimePix) );
      instance.SetNew(&new_MArrivalTimePix);
      instance.SetNewArray(&newArray_MArrivalTimePix);
      instance.SetDelete(&delete_MArrivalTimePix);
      instance.SetDeleteArray(&deleteArray_MArrivalTimePix);
      instance.SetDestructor(&destruct_MArrivalTimePix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MArrivalTimePix*)
   {
      return GenerateInitInstanceLocal((::MArrivalTimePix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MArrivalTimePix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MExtractedSignalPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractedSignalPix::Class_Name()
{
   return "MExtractedSignalPix";
}

//______________________________________________________________________________
const char *MExtractedSignalPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractedSignalPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractedSignalPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractedSignalPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractedSignalCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractedSignalCam::Class_Name()
{
   return "MExtractedSignalCam";
}

//______________________________________________________________________________
const char *MExtractedSignalCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractedSignalCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractedSignalCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractedSignalCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractedSignalPINDiode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractedSignalPINDiode::Class_Name()
{
   return "MExtractedSignalPINDiode";
}

//______________________________________________________________________________
const char *MExtractedSignalPINDiode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPINDiode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractedSignalPINDiode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPINDiode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractedSignalPINDiode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPINDiode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractedSignalPINDiode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalPINDiode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractor::Class_Name()
{
   return "MExtractor";
}

//______________________________________________________________________________
const char *MExtractor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractedSignalBlindPixel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractedSignalBlindPixel::Class_Name()
{
   return "MExtractedSignalBlindPixel";
}

//______________________________________________________________________________
const char *MExtractedSignalBlindPixel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalBlindPixel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractedSignalBlindPixel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalBlindPixel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractedSignalBlindPixel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalBlindPixel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractedSignalBlindPixel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractedSignalBlindPixel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractBlindPixel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractBlindPixel::Class_Name()
{
   return "MExtractBlindPixel";
}

//______________________________________________________________________________
const char *MExtractBlindPixel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractBlindPixel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractBlindPixel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractBlindPixel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractBlindPixel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractBlindPixel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractBlindPixel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractBlindPixel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractPINDiode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractPINDiode::Class_Name()
{
   return "MExtractPINDiode";
}

//______________________________________________________________________________
const char *MExtractPINDiode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractPINDiode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractPINDiode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractPINDiode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractPINDiode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractPINDiode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractPINDiode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractPINDiode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MArrivalTimeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MArrivalTimeCam::Class_Name()
{
   return "MArrivalTimeCam";
}

//______________________________________________________________________________
const char *MArrivalTimeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MArrivalTimeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MArrivalTimeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MArrivalTimeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractTime::Class_Name()
{
   return "MExtractTime";
}

//______________________________________________________________________________
const char *MExtractTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractTimeAndCharge::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractTimeAndCharge::Class_Name()
{
   return "MExtractTimeAndCharge";
}

//______________________________________________________________________________
const char *MExtractTimeAndCharge::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndCharge*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractTimeAndCharge::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndCharge*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractTimeAndCharge::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndCharge*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractTimeAndCharge::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndCharge*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractTimeAndChargeSpline::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractTimeAndChargeSpline::Class_Name()
{
   return "MExtractTimeAndChargeSpline";
}

//______________________________________________________________________________
const char *MExtractTimeAndChargeSpline::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeSpline*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractTimeAndChargeSpline::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeSpline*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractTimeAndChargeSpline::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeSpline*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractTimeAndChargeSpline::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeSpline*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractTimeAndChargeDigitalFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractTimeAndChargeDigitalFilter::Class_Name()
{
   return "MExtractTimeAndChargeDigitalFilter";
}

//______________________________________________________________________________
const char *MExtractTimeAndChargeDigitalFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeDigitalFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractTimeAndChargeDigitalFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeDigitalFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractTimeAndChargeDigitalFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeDigitalFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractTimeAndChargeDigitalFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractTimeAndChargeDigitalFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MExtractFACT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MExtractFACT::Class_Name()
{
   return "MExtractFACT";
}

//______________________________________________________________________________
const char *MExtractFACT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractFACT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MExtractFACT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractFACT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MExtractFACT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractFACT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MExtractFACT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MExtractFACT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSignalPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSignalPix::Class_Name()
{
   return "MSignalPix";
}

//______________________________________________________________________________
const char *MSignalPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSignalPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSignalPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSignalPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSignalCamIter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSignalCamIter::Class_Name()
{
   return "MSignalCamIter";
}

//______________________________________________________________________________
const char *MSignalCamIter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCamIter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSignalCamIter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCamIter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSignalCamIter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCamIter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSignalCamIter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCamIter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSignalCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSignalCam::Class_Name()
{
   return "MSignalCam";
}

//______________________________________________________________________________
const char *MSignalCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSignalCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSignalCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSignalCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSignalCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSignalCalc::Class_Name()
{
   return "MSignalCalc";
}

//______________________________________________________________________________
const char *MSignalCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSignalCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSignalCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSignalCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSignalCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFilterData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFilterData::Class_Name()
{
   return "MFilterData";
}

//______________________________________________________________________________
const char *MFilterData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFilterData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFilterData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFilterData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTreatSaturation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTreatSaturation::Class_Name()
{
   return "MTreatSaturation";
}

//______________________________________________________________________________
const char *MTreatSaturation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTreatSaturation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTreatSaturation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTreatSaturation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTreatSaturation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTreatSaturation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTreatSaturation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTreatSaturation*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MArrivalTimePix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MArrivalTimePix::Class_Name()
{
   return "MArrivalTimePix";
}

//______________________________________________________________________________
const char *MArrivalTimePix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimePix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MArrivalTimePix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimePix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MArrivalTimePix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimePix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MArrivalTimePix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MArrivalTimePix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MExtractedSignalCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractedSignalCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractedSignalCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractedSignalCam::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractedSignalCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractedSignalCam.
      TClass *R__cl = ::MExtractedSignalCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstUsedSliceHiGain", &fFirstUsedSliceHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstUsedSliceLoGain", &fFirstUsedSliceLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastUsedSliceHiGain", &fLastUsedSliceHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastUsedSliceLoGain", &fLastUsedSliceLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedWindowHiGain", &fUsedWindowHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedWindowLoGain", &fUsedWindowLoGain);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractedSignalCam(void *p) {
      return  p ? new(p) ::MExtractedSignalCam : new ::MExtractedSignalCam;
   }
   static void *newArray_MExtractedSignalCam(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractedSignalCam[nElements] : new ::MExtractedSignalCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractedSignalCam(void *p) {
      delete ((::MExtractedSignalCam*)p);
   }
   static void deleteArray_MExtractedSignalCam(void *p) {
      delete [] ((::MExtractedSignalCam*)p);
   }
   static void destruct_MExtractedSignalCam(void *p) {
      typedef ::MExtractedSignalCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractedSignalCam

//______________________________________________________________________________
void MExtractedSignalPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractedSignalPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractedSignalPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractedSignalPix::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractedSignalPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractedSignalPix.
      TClass *R__cl = ::MExtractedSignalPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignalHiGain", &fExtractedSignalHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignalHiGainError", &fExtractedSignalHiGainError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignalLoGain", &fExtractedSignalLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignalLoGainError", &fExtractedSignalLoGainError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainSaturated", &fNumHiGainSaturated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainSaturated", &fNumLoGainSaturated);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractedSignalPix(void *p) {
      return  p ? new(p) ::MExtractedSignalPix : new ::MExtractedSignalPix;
   }
   static void *newArray_MExtractedSignalPix(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractedSignalPix[nElements] : new ::MExtractedSignalPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractedSignalPix(void *p) {
      delete ((::MExtractedSignalPix*)p);
   }
   static void deleteArray_MExtractedSignalPix(void *p) {
      delete [] ((::MExtractedSignalPix*)p);
   }
   static void destruct_MExtractedSignalPix(void *p) {
      typedef ::MExtractedSignalPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractedSignalPix

//______________________________________________________________________________
void MExtractedSignalPINDiode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractedSignalPINDiode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractedSignalPINDiode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractedSignalPINDiode::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractedSignalPINDiode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractedSignalPINDiode.
      TClass *R__cl = ::MExtractedSignalPINDiode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignal", &fExtractedSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignalErr", &fExtractedSignalErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedTime", &fExtractedTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedTimeErr", &fExtractedTimeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSigma", &fExtractedSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSigmaErr", &fExtractedSigmaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedChi2", &fExtractedChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFADCSamples", &fNumFADCSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaturated", &fSaturated);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractedSignalPINDiode(void *p) {
      return  p ? new(p) ::MExtractedSignalPINDiode : new ::MExtractedSignalPINDiode;
   }
   static void *newArray_MExtractedSignalPINDiode(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractedSignalPINDiode[nElements] : new ::MExtractedSignalPINDiode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractedSignalPINDiode(void *p) {
      delete ((::MExtractedSignalPINDiode*)p);
   }
   static void deleteArray_MExtractedSignalPINDiode(void *p) {
      delete [] ((::MExtractedSignalPINDiode*)p);
   }
   static void destruct_MExtractedSignalPINDiode(void *p) {
      typedef ::MExtractedSignalPINDiode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractedSignalPINDiode

//______________________________________________________________________________
void MExtractedSignalBlindPixel::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractedSignalBlindPixel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractedSignalBlindPixel::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractedSignalBlindPixel::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractedSignalBlindPixel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractedSignalBlindPixel.
      TClass *R__cl = ::MExtractedSignalBlindPixel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlindPixelIdx", &fBlindPixelIdx);
      R__insp.InspectMember(fBlindPixelIdx, "fBlindPixelIdx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractedSignal", &fExtractedSignal);
      R__insp.InspectMember(fExtractedSignal, "fExtractedSignal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSaturated", &fNumSaturated);
      R__insp.InspectMember(fNumSaturated, "fNumSaturated.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", &fPed);
      R__insp.InspectMember(fPed, "fPed.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedErr", &fPedErr);
      R__insp.InspectMember(fPedErr, "fPedErr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedRms", &fPedRms);
      R__insp.InspectMember(fPedRms, "fPedRms.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedRmsErr", &fPedRmsErr);
      R__insp.InspectMember(fPedRmsErr, "fPedRmsErr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirst", &fFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFADCSamples", &fNumFADCSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractionType", &fExtractionType);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractedSignalBlindPixel(void *p) {
      return  p ? new(p) ::MExtractedSignalBlindPixel : new ::MExtractedSignalBlindPixel;
   }
   static void *newArray_MExtractedSignalBlindPixel(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractedSignalBlindPixel[nElements] : new ::MExtractedSignalBlindPixel[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractedSignalBlindPixel(void *p) {
      delete ((::MExtractedSignalBlindPixel*)p);
   }
   static void deleteArray_MExtractedSignalBlindPixel(void *p) {
      delete [] ((::MExtractedSignalBlindPixel*)p);
   }
   static void destruct_MExtractedSignalBlindPixel(void *p) {
      typedef ::MExtractedSignalBlindPixel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractedSignalBlindPixel

//______________________________________________________________________________
void MExtractor::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractor::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractor::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractor.
      TClass *R__cl = ::MExtractor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoiseCalculation", &fNoiseCalculation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolutionPerPheHiGain", &fResolutionPerPheHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolutionPerPheLoGain", &fResolutionPerPheLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffsetLoGain", &fOffsetLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignals", &fSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainFirst", &fHiGainFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainLast", &fHiGainLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainFirst", &fLoGainFirst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainLast", &fLoGainLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainSamples", &fNumHiGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainSamples", &fNumLoGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqrtHiGainSamples", &fSqrtHiGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqrtLoGainSamples", &fSqrtLoGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSaturationLimit", &fSaturationLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalCam", &fNameSignalCam);
      R__insp.InspectMember(fNameSignalCam, "fNameSignalCam.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractor(void *p) {
      return  p ? new(p) ::MExtractor : new ::MExtractor;
   }
   static void *newArray_MExtractor(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractor[nElements] : new ::MExtractor[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractor(void *p) {
      delete ((::MExtractor*)p);
   }
   static void deleteArray_MExtractor(void *p) {
      delete [] ((::MExtractor*)p);
   }
   static void destruct_MExtractor(void *p) {
      typedef ::MExtractor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractor

//______________________________________________________________________________
void MExtractPINDiode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractPINDiode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractPINDiode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractPINDiode::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractPINDiode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractPINDiode.
      TClass *R__cl = ::MExtractPINDiode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerFitLimit", &fLowerFitLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperFitLimit", &fUpperFitLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPINDiode", &fPINDiode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSlices", &fSlices);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPINDiodeIdx", &fPINDiodeIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedMean", &fPedMean);
      R__insp.InspectMember(fPedMean, "fPedMean.");
      MExtractor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractPINDiode(void *p) {
      return  p ? new(p) ::MExtractPINDiode : new ::MExtractPINDiode;
   }
   static void *newArray_MExtractPINDiode(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractPINDiode[nElements] : new ::MExtractPINDiode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractPINDiode(void *p) {
      delete ((::MExtractPINDiode*)p);
   }
   static void deleteArray_MExtractPINDiode(void *p) {
      delete [] ((::MExtractPINDiode*)p);
   }
   static void destruct_MExtractPINDiode(void *p) {
      typedef ::MExtractPINDiode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractPINDiode

//______________________________________________________________________________
void MExtractBlindPixel::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractBlindPixel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractBlindPixel::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractBlindPixel::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractBlindPixel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractBlindPixel.
      TClass *R__cl = ::MExtractBlindPixel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlindPixel", &fBlindPixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainFirstDeriv", &fHiGainFirstDeriv);
      R__insp.InspectMember(fHiGainFirstDeriv, "fHiGainFirstDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainSecondDeriv", &fHiGainSecondDeriv);
      R__insp.InspectMember(fHiGainSecondDeriv, "fHiGainSecondDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlindPixelIdx", &fBlindPixelIdx);
      R__insp.InspectMember(fBlindPixelIdx, "fBlindPixelIdx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNSBFilterLimit", &fNSBFilterLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractionType", &fExtractionType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataType", &fDataType);
      MExtractor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractBlindPixel(void *p) {
      return  p ? new(p) ::MExtractBlindPixel : new ::MExtractBlindPixel;
   }
   static void *newArray_MExtractBlindPixel(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractBlindPixel[nElements] : new ::MExtractBlindPixel[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractBlindPixel(void *p) {
      delete ((::MExtractBlindPixel*)p);
   }
   static void deleteArray_MExtractBlindPixel(void *p) {
      delete [] ((::MExtractBlindPixel*)p);
   }
   static void destruct_MExtractBlindPixel(void *p) {
      typedef ::MExtractBlindPixel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractBlindPixel

//______________________________________________________________________________
void MExtractFACT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractFACT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractFACT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractFACT::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractFACT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractFACT.
      TClass *R__cl = ::MExtractFACT::IsA();
      if (R__cl || R__insp.IsA()) { }
      MExtractTime::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractFACT(void *p) {
      return  p ? new(p) ::MExtractFACT : new ::MExtractFACT;
   }
   static void *newArray_MExtractFACT(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractFACT[nElements] : new ::MExtractFACT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractFACT(void *p) {
      delete ((::MExtractFACT*)p);
   }
   static void deleteArray_MExtractFACT(void *p) {
      delete [] ((::MExtractFACT*)p);
   }
   static void destruct_MExtractFACT(void *p) {
      typedef ::MExtractFACT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractFACT

//______________________________________________________________________________
void MExtractTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractTime::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractTime.
      TClass *R__cl = ::MExtractTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTimeCam", &fNameTimeCam);
      R__insp.InspectMember(fNameTimeCam, "fNameTimeCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArrTime", &fArrTime);
      MExtractor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractTime(void *p) {
      return  p ? new(p) ::MExtractTime : new ::MExtractTime;
   }
   static void *newArray_MExtractTime(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractTime[nElements] : new ::MExtractTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractTime(void *p) {
      delete ((::MExtractTime*)p);
   }
   static void deleteArray_MExtractTime(void *p) {
      delete [] ((::MExtractTime*)p);
   }
   static void destruct_MExtractTime(void *p) {
      typedef ::MExtractTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractTime

//______________________________________________________________________________
void MTreatSaturation::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTreatSaturation.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTreatSaturation::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTreatSaturation::Class(),this);
   }
}

//______________________________________________________________________________
void MTreatSaturation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTreatSaturation.
      TClass *R__cl = ::MTreatSaturation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDev1", &fDev1);
      R__insp.InspectMember(fDev1, "fDev1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDev2", &fDev2);
      R__insp.InspectMember(fDev2, "fDev2.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTreatSaturation(void *p) {
      return  p ? new(p) ::MTreatSaturation : new ::MTreatSaturation;
   }
   static void *newArray_MTreatSaturation(Long_t nElements, void *p) {
      return p ? new(p) ::MTreatSaturation[nElements] : new ::MTreatSaturation[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTreatSaturation(void *p) {
      delete ((::MTreatSaturation*)p);
   }
   static void deleteArray_MTreatSaturation(void *p) {
      delete [] ((::MTreatSaturation*)p);
   }
   static void destruct_MTreatSaturation(void *p) {
      typedef ::MTreatSaturation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTreatSaturation

//______________________________________________________________________________
void MExtractTimeAndCharge::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractTimeAndCharge.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractTimeAndCharge::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractTimeAndCharge::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractTimeAndCharge::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractTimeAndCharge.
      TClass *R__cl = ::MExtractTimeAndCharge::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainStartShift", &fLoGainStartShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainSwitch", &fLoGainSwitch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowSizeHiGain", &fWindowSizeHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowSizeLoGain", &fWindowSizeLoGain);
      MExtractTime::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractTimeAndCharge(void *p) {
      return  p ? new(p) ::MExtractTimeAndCharge : new ::MExtractTimeAndCharge;
   }
   static void *newArray_MExtractTimeAndCharge(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractTimeAndCharge[nElements] : new ::MExtractTimeAndCharge[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractTimeAndCharge(void *p) {
      delete ((::MExtractTimeAndCharge*)p);
   }
   static void deleteArray_MExtractTimeAndCharge(void *p) {
      delete [] ((::MExtractTimeAndCharge*)p);
   }
   static void destruct_MExtractTimeAndCharge(void *p) {
      typedef ::MExtractTimeAndCharge current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractTimeAndCharge

//______________________________________________________________________________
void MExtractTimeAndChargeSpline::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractTimeAndChargeSpline.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractTimeAndChargeSpline::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractTimeAndChargeSpline::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractTimeAndChargeSpline::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractTimeAndChargeSpline.
      TClass *R__cl = ::MExtractTimeAndChargeSpline::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainFirstDeriv", &fHiGainFirstDeriv);
      R__insp.InspectMember(fHiGainFirstDeriv, "fHiGainFirstDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainFirstDeriv", &fLoGainFirstDeriv);
      R__insp.InspectMember(fLoGainFirstDeriv, "fLoGainFirstDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainSecondDeriv", &fHiGainSecondDeriv);
      R__insp.InspectMember(fHiGainSecondDeriv, "fHiGainSecondDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainSecondDeriv", &fLoGainSecondDeriv);
      R__insp.InspectMember(fLoGainSecondDeriv, "fLoGainSecondDeriv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResolution", &fResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRiseTimeHiGain", &fRiseTimeHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFallTimeHiGain", &fFallTimeHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRiseTimeLoGain", &fRiseTimeLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFallTimeLoGain", &fFallTimeLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainStretch", &fLoGainStretch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeightTm", &fHeightTm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExtractionType", &fExtractionType);
      MExtractTimeAndCharge::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractTimeAndChargeSpline(void *p) {
      return  p ? new(p) ::MExtractTimeAndChargeSpline : new ::MExtractTimeAndChargeSpline;
   }
   static void *newArray_MExtractTimeAndChargeSpline(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractTimeAndChargeSpline[nElements] : new ::MExtractTimeAndChargeSpline[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractTimeAndChargeSpline(void *p) {
      delete ((::MExtractTimeAndChargeSpline*)p);
   }
   static void deleteArray_MExtractTimeAndChargeSpline(void *p) {
      delete [] ((::MExtractTimeAndChargeSpline*)p);
   }
   static void destruct_MExtractTimeAndChargeSpline(void *p) {
      typedef ::MExtractTimeAndChargeSpline current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractTimeAndChargeSpline

//______________________________________________________________________________
void MExtractTimeAndChargeDigitalFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class MExtractTimeAndChargeDigitalFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MExtractTimeAndChargeDigitalFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(MExtractTimeAndChargeDigitalFilter::Class(),this);
   }
}

//______________________________________________________________________________
void MExtractTimeAndChargeDigitalFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MExtractTimeAndChargeDigitalFilter.
      TClass *R__cl = ::MExtractTimeAndChargeDigitalFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibPattern", &fCalibPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinningResolutionHiGain", &fBinningResolutionHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinningResolutionLoGain", &fBinningResolutionLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmpWeightsHiGain", &fAmpWeightsHiGain);
      R__insp.InspectMember(fAmpWeightsHiGain, "fAmpWeightsHiGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWeightsHiGain", &fTimeWeightsHiGain);
      R__insp.InspectMember(fTimeWeightsHiGain, "fTimeWeightsHiGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmpWeightsLoGain", &fAmpWeightsLoGain);
      R__insp.InspectMember(fAmpWeightsLoGain, "fAmpWeightsLoGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWeightsLoGain", &fTimeWeightsLoGain);
      R__insp.InspectMember(fTimeWeightsLoGain, "fTimeWeightsLoGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulseHiGain", &fPulseHiGain);
      R__insp.InspectMember(fPulseHiGain, "fPulseHiGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulseLoGain", &fPulseLoGain);
      R__insp.InspectMember(fPulseLoGain, "fPulseLoGain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameWeightsFile", &fNameWeightsFile);
      R__insp.InspectMember(fNameWeightsFile, "fNameWeightsFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAutomaticWeights", &fAutomaticWeights);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameWeightsFileSet", &fNameWeightsFileSet);
      R__insp.InspectMember(fNameWeightsFileSet, "fNameWeightsFileSet.");
      MExtractTimeAndCharge::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MExtractTimeAndChargeDigitalFilter(void *p) {
      return  p ? new(p) ::MExtractTimeAndChargeDigitalFilter : new ::MExtractTimeAndChargeDigitalFilter;
   }
   static void *newArray_MExtractTimeAndChargeDigitalFilter(Long_t nElements, void *p) {
      return p ? new(p) ::MExtractTimeAndChargeDigitalFilter[nElements] : new ::MExtractTimeAndChargeDigitalFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_MExtractTimeAndChargeDigitalFilter(void *p) {
      delete ((::MExtractTimeAndChargeDigitalFilter*)p);
   }
   static void deleteArray_MExtractTimeAndChargeDigitalFilter(void *p) {
      delete [] ((::MExtractTimeAndChargeDigitalFilter*)p);
   }
   static void destruct_MExtractTimeAndChargeDigitalFilter(void *p) {
      typedef ::MExtractTimeAndChargeDigitalFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MExtractTimeAndChargeDigitalFilter

//______________________________________________________________________________
void MArrivalTimeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MArrivalTimeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MArrivalTimeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MArrivalTimeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MArrivalTimeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MArrivalTimeCam.
      TClass *R__cl = ::MArrivalTimeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MArrivalTimeCam(void *p) {
      return  p ? new(p) ::MArrivalTimeCam : new ::MArrivalTimeCam;
   }
   static void *newArray_MArrivalTimeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MArrivalTimeCam[nElements] : new ::MArrivalTimeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MArrivalTimeCam(void *p) {
      delete ((::MArrivalTimeCam*)p);
   }
   static void deleteArray_MArrivalTimeCam(void *p) {
      delete [] ((::MArrivalTimeCam*)p);
   }
   static void destruct_MArrivalTimeCam(void *p) {
      typedef ::MArrivalTimeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MArrivalTimeCam

//______________________________________________________________________________
void MArrivalTimePix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MArrivalTimePix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MArrivalTimePix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MArrivalTimePix::Class(),this);
   }
}

//______________________________________________________________________________
void MArrivalTimePix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MArrivalTimePix.
      TClass *R__cl = ::MArrivalTimePix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrivalTimeHiGain", &fArrivalTimeHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrivalTimeHiGainError", &fArrivalTimeHiGainError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrivalTimeLoGain", &fArrivalTimeLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrivalTimeLoGainError", &fArrivalTimeLoGainError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainSaturated", &fNumHiGainSaturated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainSaturated", &fNumLoGainSaturated);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MArrivalTimePix(void *p) {
      return  p ? new(p) ::MArrivalTimePix : new ::MArrivalTimePix;
   }
   static void *newArray_MArrivalTimePix(Long_t nElements, void *p) {
      return p ? new(p) ::MArrivalTimePix[nElements] : new ::MArrivalTimePix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MArrivalTimePix(void *p) {
      delete ((::MArrivalTimePix*)p);
   }
   static void deleteArray_MArrivalTimePix(void *p) {
      delete [] ((::MArrivalTimePix*)p);
   }
   static void destruct_MArrivalTimePix(void *p) {
      typedef ::MArrivalTimePix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MArrivalTimePix

//______________________________________________________________________________
void MSignalPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSignalPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSignalPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSignalPix::Class(),this);
   }
}

//______________________________________________________________________________
void MSignalPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSignalPix.
      TClass *R__cl = ::MSignalPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsCore", &fIsCore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRing", &fRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxIsland", &fIdxIsland);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhot", &fPhot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrPhot", &fErrPhot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrivalTime", &fArrivalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeSlope", &fTimeSlope);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSignalPix(void *p) {
      return  p ? new(p) ::MSignalPix : new ::MSignalPix;
   }
   static void *newArray_MSignalPix(Long_t nElements, void *p) {
      return p ? new(p) ::MSignalPix[nElements] : new ::MSignalPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSignalPix(void *p) {
      delete ((::MSignalPix*)p);
   }
   static void deleteArray_MSignalPix(void *p) {
      delete [] ((::MSignalPix*)p);
   }
   static void destruct_MSignalPix(void *p) {
      typedef ::MSignalPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSignalPix

//______________________________________________________________________________
void MSignalCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSignalCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSignalCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSignalCam::Class(),this);
   }
}

//______________________________________________________________________________
void MSignalCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSignalCam.
      TClass *R__cl = ::MSignalCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumIslands", &fNumIslands);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSinglePixels", &fNumSinglePixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeSinglePixels", &fSizeSinglePixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeSubIslands", &fSizeSubIslands);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeMainIsland", &fSizeMainIsland);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixelsSaturatedHiGain", &fNumPixelsSaturatedHiGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixelsSaturatedLoGain", &fNumPixelsSaturatedLoGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPixels", &fPixels);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSignalCam(void *p) {
      return  p ? new(p) ::MSignalCam : new ::MSignalCam;
   }
   static void *newArray_MSignalCam(Long_t nElements, void *p) {
      return p ? new(p) ::MSignalCam[nElements] : new ::MSignalCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSignalCam(void *p) {
      delete ((::MSignalCam*)p);
   }
   static void deleteArray_MSignalCam(void *p) {
      delete [] ((::MSignalCam*)p);
   }
   static void destruct_MSignalCam(void *p) {
      typedef ::MSignalCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSignalCam

//______________________________________________________________________________
void MSignalCamIter::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSignalCamIter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSignalCamIter::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSignalCamIter::Class(),this);
   }
}

//______________________________________________________________________________
void MSignalCamIter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSignalCamIter.
      TClass *R__cl = ::MSignalCamIter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedOnly", &fUsedOnly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdx", &fIdx);
      TObjArrayIter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MSignalCamIter(void *p) {
      delete ((::MSignalCamIter*)p);
   }
   static void deleteArray_MSignalCamIter(void *p) {
      delete [] ((::MSignalCamIter*)p);
   }
   static void destruct_MSignalCamIter(void *p) {
      typedef ::MSignalCamIter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSignalCamIter

//______________________________________________________________________________
void MSignalCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSignalCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSignalCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSignalCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MSignalCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSignalCalc.
      TClass *R__cl = ::MSignalCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCerPhotEvt", &fCerPhotEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPedestals", &fPedestals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBefore", &fBefore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAfter", &fAfter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkip", &fSkip);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSignalCalc(void *p) {
      return  p ? new(p) ::MSignalCalc : new ::MSignalCalc;
   }
   static void *newArray_MSignalCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MSignalCalc[nElements] : new ::MSignalCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSignalCalc(void *p) {
      delete ((::MSignalCalc*)p);
   }
   static void deleteArray_MSignalCalc(void *p) {
      delete [] ((::MSignalCalc*)p);
   }
   static void destruct_MSignalCalc(void *p) {
      typedef ::MSignalCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSignalCalc

//______________________________________________________________________________
void MFilterData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFilterData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFilterData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFilterData::Class(),this);
   }
}

//______________________________________________________________________________
void MFilterData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFilterData.
      TClass *R__cl = ::MFilterData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalIn", &fSignalIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalOut", &fSignalOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalIn", &fNameSignalIn);
      R__insp.InspectMember(fNameSignalIn, "fNameSignalIn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalOut", &fNameSignalOut);
      R__insp.InspectMember(fNameSignalOut, "fNameSignalOut.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeights", (void*)&fWeights);
      R__insp.InspectMember("vector<float>", (void*)&fWeights, "fWeights.", false);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFilterData(void *p) {
      return  p ? new(p) ::MFilterData : new ::MFilterData;
   }
   static void *newArray_MFilterData(Long_t nElements, void *p) {
      return p ? new(p) ::MFilterData[nElements] : new ::MFilterData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFilterData(void *p) {
      delete ((::MFilterData*)p);
   }
   static void deleteArray_MFilterData(void *p) {
      delete [] ((::MFilterData*)p);
   }
   static void destruct_MFilterData(void *p) {
      typedef ::MFilterData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFilterData

/********************************************************
* SignalCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSignalCint();

extern "C" void G__set_cpp_environmentSignalCint() {
  G__cpp_reset_tagtableSignalCint();
}
#include <new>
extern "C" int G__cpp_dllrevSignalCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MExtractedSignalPix */
static int G__SignalCint_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractedSignalPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractedSignalPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractedSignalPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalPix[n];
       } else {
         p = new((void*) gvp) MExtractedSignalPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalPix;
       } else {
         p = new((void*) gvp) MExtractedSignalPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalPix*) G__getstructoffset())->SetExtractedSignal((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalPix*) G__getstructoffset())->SetExtractedSignal((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPix*) G__getstructoffset())->SetExtractedSignal((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalPix*) G__getstructoffset())->SetGainSaturation((Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalPix*) G__getstructoffset())->SetGainSaturation((Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPix*) G__getstructoffset())->GetExtractedSignalHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPix*) G__getstructoffset())->GetExtractedSignalHiGainError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPix*) G__getstructoffset())->GetExtractedSignalLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPix*) G__getstructoffset())->GetExtractedSignalLoGainError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalPix*) G__getstructoffset())->GetNumHiGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalPix*) G__getstructoffset())->GetNumLoGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractedSignalPix*) G__getstructoffset())->IsHiGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractedSignalPix*) G__getstructoffset())->IsLoGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractedSignalPix*) G__getstructoffset())->IsLoGainValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractedSignalPix*) G__getstructoffset())->IsHiGainValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractedSignalPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractedSignalPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractedSignalPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_174_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractedSignalPix G__TMExtractedSignalPix;
static int G__SignalCint_174_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractedSignalPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractedSignalPix*) (soff+(sizeof(MExtractedSignalPix)*i)))->~G__TMExtractedSignalPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractedSignalPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractedSignalPix*) (soff))->~G__TMExtractedSignalPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractedSignalCam */
static int G__SignalCint_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractedSignalCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractedSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractedSignalCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalCam[n];
       } else {
         p = new((void*) gvp) MExtractedSignalCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalCam;
       } else {
         p = new((void*) gvp) MExtractedSignalCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractedSignalCam*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalCam*) G__getstructoffset())->GetFirstUsedSliceHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractedSignalCam*) G__getstructoffset())->GetFirstUsedSliceLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalCam*) G__getstructoffset())->GetLastUsedSliceHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalCam*) G__getstructoffset())->GetLastUsedSliceLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalCam*) G__getstructoffset())->GetNumUsedHiGainFADCSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalCam*) G__getstructoffset())->GetNumUsedLoGainFADCSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalCam*) G__getstructoffset())->SetUsedFADCSlices((Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Byte_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MExtractedSignalPix& obj = ((MExtractedSignalCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MExtractedSignalPix& obj = ((const MExtractedSignalCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractedSignalCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractedSignalCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractedSignalCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_175_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractedSignalCam G__TMExtractedSignalCam;
static int G__SignalCint_175_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractedSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractedSignalCam*) (soff+(sizeof(MExtractedSignalCam)*i)))->~G__TMExtractedSignalCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractedSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractedSignalCam*) (soff))->~G__TMExtractedSignalCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractedSignalPINDiode */
static int G__SignalCint_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractedSignalPINDiode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalPINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractedSignalPINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalPINDiode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractedSignalPINDiode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalPINDiode[n];
       } else {
         p = new((void*) gvp) MExtractedSignalPINDiode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalPINDiode;
       } else {
         p = new((void*) gvp) MExtractedSignalPINDiode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedSignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedSignalErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedTimeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetExtractedChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalPINDiode*) G__getstructoffset())->GetNumFADCSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractedSignalPINDiode*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetExtractedSignal((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetExtractedSigma((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetExtractedTime((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetExtractedChi2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetSaturation((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetSaturation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->SetUsedFADCSlices((const Byte_t) G__int(libp->para[0]), (const Byte_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractedSignalPINDiode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPINDiode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractedSignalPINDiode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractedSignalPINDiode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalPINDiode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPINDiode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalPINDiode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalPINDiode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_176_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalPINDiode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractedSignalPINDiode G__TMExtractedSignalPINDiode;
static int G__SignalCint_176_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractedSignalPINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractedSignalPINDiode*) (soff+(sizeof(MExtractedSignalPINDiode)*i)))->~G__TMExtractedSignalPINDiode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractedSignalPINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractedSignalPINDiode*) (soff))->~G__TMExtractedSignalPINDiode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractor */
static int G__SignalCint_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractor* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractor((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractor((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractor((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractor((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractor[n];
       } else {
         p = new((void*) gvp) MExtractor[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractor;
       } else {
         p = new((void*) gvp) MExtractor;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MExtractor*) G__getstructoffset())->GetHiGainFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MExtractor*) G__getstructoffset())->GetHiGainLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractor*) G__getstructoffset())->GetLoGainFirst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractor*) G__getstructoffset())->GetLoGainLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->GetNumHiGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->GetNumLoGainSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->GetOffsetLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->GetResolutionPerPheHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->GetResolutionPerPheLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MExtractor*) G__getstructoffset())->GetSaturationLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractor*) G__getstructoffset())->HasLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MExtractor*) G__getstructoffset())->IsNoiseCalculation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->SetResolutionPerPheHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractor*) G__getstructoffset())->SetResolutionPerPheLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MExtractor*) G__getstructoffset())->SetRange((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Byte_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MExtractor*) G__getstructoffset())->SetRange((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MExtractor*) G__getstructoffset())->SetRange((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractor*) G__getstructoffset())->SetRange((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractor*) G__getstructoffset())->SetRange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractor*) G__getstructoffset())->SetOffsetLoGain((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractor*) G__getstructoffset())->SetOffsetLoGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractor*) G__getstructoffset())->SetSaturationLimit((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractor*) G__getstructoffset())->SetSaturationLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractor*) G__getstructoffset())->SetNameSignalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractor*) G__getstructoffset())->SetNameSignalCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractor*) G__getstructoffset())->SetNoiseCalculation((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractor*) G__getstructoffset())->SetNoiseCalculation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_188_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractor G__TMExtractor;
static int G__SignalCint_188_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractor*) (soff+(sizeof(MExtractor)*i)))->~G__TMExtractor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractor*) (soff))->~G__TMExtractor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractedSignalBlindPixel */
static int G__SignalCint_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractedSignalBlindPixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalBlindPixel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractedSignalBlindPixel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractedSignalBlindPixel((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractedSignalBlindPixel((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalBlindPixel[n];
       } else {
         p = new((void*) gvp) MExtractedSignalBlindPixel[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractedSignalBlindPixel;
       } else {
         p = new((void*) gvp) MExtractedSignalBlindPixel;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetBlindPixelIdx((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetBlindPixelIdx());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetExtractedSignal((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetExtractedSignal());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetNumBlindPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetNumSaturated((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetNumSaturated());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetNumFADCSamples());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPed((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPed());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedErr((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedErr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedRms((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedRms());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedRmsErr((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->GetPedRmsErr());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MExtractedSignalBlindPixel*) G__getstructoffset())->IsExtractionType((const MExtractBlindPixel::ExtractionType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->IsValid((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const MExtractedSignalBlindPixel*) G__getstructoffset())->IsValid());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetExtractionType((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetExtractionType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetNumFADCSamples((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetUsedFADCSlices((const Byte_t) G__int(libp->para[0]), (const Byte_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetBlindPixelIdx((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetBlindPixelIdx((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetExtractedSignal((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetExtractedSignal((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetNumSaturated((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetNumSaturated((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPed((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPed((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedErr((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedRms((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedRms((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedRmsErr((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->SetPedRmsErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractedSignalBlindPixel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalBlindPixel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractedSignalBlindPixel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractedSignalBlindPixel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractedSignalBlindPixel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalBlindPixel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalBlindPixel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractedSignalBlindPixel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_193_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractedSignalBlindPixel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractedSignalBlindPixel G__TMExtractedSignalBlindPixel;
static int G__SignalCint_193_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractedSignalBlindPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractedSignalBlindPixel*) (soff+(sizeof(MExtractedSignalBlindPixel)*i)))->~G__TMExtractedSignalBlindPixel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractedSignalBlindPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractedSignalBlindPixel*) (soff))->~G__TMExtractedSignalBlindPixel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractBlindPixel */
static int G__SignalCint_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractBlindPixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractBlindPixel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractBlindPixel((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractBlindPixel((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractBlindPixel((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractBlindPixel[n];
       } else {
         p = new((void*) gvp) MExtractBlindPixel[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractBlindPixel;
       } else {
         p = new((void*) gvp) MExtractBlindPixel;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MExtractBlindPixel*) G__getstructoffset())->IsExtractionType((const MExtractBlindPixel::ExtractionType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MExtractBlindPixel*) G__getstructoffset())->IsDataType((const MExtractBlindPixel::DataType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractBlindPixel*) G__getstructoffset())->SetBlindPixels(*(MCalibrationBlindCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractBlindPixel*) G__getstructoffset())->SetExtractionType((const MExtractBlindPixel::ExtractionType_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractBlindPixel*) G__getstructoffset())->SetExtractionType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractBlindPixel*) G__getstructoffset())->SetDataType((const MExtractBlindPixel::DataType_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractBlindPixel*) G__getstructoffset())->SetDataType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractBlindPixel*) G__getstructoffset())->SetNSBFilterLimit((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractBlindPixel*) G__getstructoffset())->SetNSBFilterLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MExtractBlindPixel*) G__getstructoffset())->SetRange((const UShort_t) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Byte_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MExtractBlindPixel*) G__getstructoffset())->SetRange((const UShort_t) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MExtractBlindPixel*) G__getstructoffset())->SetRange((const UShort_t) G__int(libp->para[0]), (const UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractBlindPixel*) G__getstructoffset())->SetRange((const UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractBlindPixel*) G__getstructoffset())->SetRange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractBlindPixel*) G__getstructoffset())->SetResolution((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractBlindPixel*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractBlindPixel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractBlindPixel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractBlindPixel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractBlindPixel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractBlindPixel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractBlindPixel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractBlindPixel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractBlindPixel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractBlindPixel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractBlindPixel G__TMExtractBlindPixel;
static int G__SignalCint_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractBlindPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractBlindPixel*) (soff+(sizeof(MExtractBlindPixel)*i)))->~G__TMExtractBlindPixel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractBlindPixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractBlindPixel*) (soff))->~G__TMExtractBlindPixel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractPINDiode */
static int G__SignalCint_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractPINDiode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractPINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractPINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractPINDiode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractPINDiode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractPINDiode[n];
       } else {
         p = new((void*) gvp) MExtractPINDiode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractPINDiode;
       } else {
         p = new((void*) gvp) MExtractPINDiode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractPINDiode*) G__getstructoffset())->SetPINDiodeIdx((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractPINDiode*) G__getstructoffset())->SetPINDiodeIdx();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractPINDiode*) G__getstructoffset())->SetLowerFitLimit((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractPINDiode*) G__getstructoffset())->SetLowerFitLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractPINDiode*) G__getstructoffset())->SetUpperFitLimit((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractPINDiode*) G__getstructoffset())->SetUpperFitLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractPINDiode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractPINDiode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractPINDiode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractPINDiode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractPINDiode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractPINDiode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractPINDiode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractPINDiode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractPINDiode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractPINDiode G__TMExtractPINDiode;
static int G__SignalCint_198_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractPINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractPINDiode*) (soff+(sizeof(MExtractPINDiode)*i)))->~G__TMExtractPINDiode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractPINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractPINDiode*) (soff))->~G__TMExtractPINDiode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MArrivalTimeCam */
static int G__SignalCint_200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MArrivalTimeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MArrivalTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MArrivalTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MArrivalTimeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MArrivalTimeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MArrivalTimeCam[n];
       } else {
         p = new((void*) gvp) MArrivalTimeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MArrivalTimeCam;
       } else {
         p = new((void*) gvp) MArrivalTimeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MArrivalTimeCam*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrivalTimePix& obj = ((MArrivalTimeCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrivalTimePix& obj = ((const MArrivalTimeCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MArrivalTimeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MArrivalTimeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MArrivalTimeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MArrivalTimeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MArrivalTimeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MArrivalTimeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MArrivalTimeCam G__TMArrivalTimeCam;
static int G__SignalCint_200_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MArrivalTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MArrivalTimeCam*) (soff+(sizeof(MArrivalTimeCam)*i)))->~G__TMArrivalTimeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MArrivalTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MArrivalTimeCam*) (soff))->~G__TMArrivalTimeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractTime */
static int G__SignalCint_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTime[n];
       } else {
         p = new((void*) gvp) MExtractTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTime;
       } else {
         p = new((void*) gvp) MExtractTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTime*) G__getstructoffset())->SetNameTimeCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTime*) G__getstructoffset())->SetNameTimeCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractTime G__TMExtractTime;
static int G__SignalCint_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractTime*) (soff+(sizeof(MExtractTime)*i)))->~G__TMExtractTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractTime*) (soff))->~G__TMExtractTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractTimeAndCharge */
static int G__SignalCint_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractTimeAndCharge* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndCharge((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractTimeAndCharge((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndCharge((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractTimeAndCharge((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndCharge[n];
       } else {
         p = new((void*) gvp) MExtractTimeAndCharge[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndCharge;
       } else {
         p = new((void*) gvp) MExtractTimeAndCharge;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractTimeAndCharge*) G__getstructoffset())->GetWindowSizeHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MExtractTimeAndCharge*) G__getstructoffset())->GetWindowSizeLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractTimeAndCharge*) G__getstructoffset())->GetLoGainStartShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MExtractTimeAndCharge*) G__getstructoffset())->GetLoGainSwitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndCharge*) G__getstructoffset())->SetLoGainStartShift((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndCharge*) G__getstructoffset())->SetLoGainStartShift();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndCharge*) G__getstructoffset())->SetLoGainSwitch((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndCharge*) G__getstructoffset())->SetLoGainSwitch();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTimeAndCharge*) G__getstructoffset())->SetWindowSize((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MExtractTimeAndCharge*) G__getstructoffset())->InitArrays((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MExtractTimeAndCharge*) G__getstructoffset())->FindTimeAndChargeHiGain2(
(Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, (Byte_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MExtractTimeAndCharge*) G__getstructoffset())->FindTimeAndChargeLoGain2(
(Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, (Byte_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const MExtractTimeAndCharge*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MExtractTimeAndCharge*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractTimeAndCharge::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndCharge::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractTimeAndCharge::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractTimeAndCharge::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTimeAndCharge*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndCharge::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndCharge::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndCharge::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_202_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndCharge::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractTimeAndCharge G__TMExtractTimeAndCharge;
static int G__SignalCint_202_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractTimeAndCharge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractTimeAndCharge*) (soff+(sizeof(MExtractTimeAndCharge)*i)))->~G__TMExtractTimeAndCharge();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractTimeAndCharge*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractTimeAndCharge*) (soff))->~G__TMExtractTimeAndCharge();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractTimeAndChargeSpline */
static int G__SignalCint_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractTimeAndChargeSpline* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndChargeSpline((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractTimeAndChargeSpline((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndChargeSpline((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractTimeAndChargeSpline((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndChargeSpline[n];
       } else {
         p = new((void*) gvp) MExtractTimeAndChargeSpline[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndChargeSpline;
       } else {
         p = new((void*) gvp) MExtractTimeAndChargeSpline;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractTimeAndChargeSpline*) G__getstructoffset())->GetRiseTimeHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MExtractTimeAndChargeSpline*) G__getstructoffset())->GetFallTimeHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetResolution((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetRiseTimeHiGain((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetRiseTimeHiGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetFallTimeHiGain((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetFallTimeHiGain();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetHeightTm((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetLoGainStretch((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetLoGainStretch();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetChargeType((const MExtralgoSpline::ExtractionType_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->SetChargeType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractTimeAndChargeSpline::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeSpline::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractTimeAndChargeSpline::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractTimeAndChargeSpline::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTimeAndChargeSpline*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeSpline::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndChargeSpline::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeSpline::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_207_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndChargeSpline::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractTimeAndChargeSpline G__TMExtractTimeAndChargeSpline;
static int G__SignalCint_207_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractTimeAndChargeSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractTimeAndChargeSpline*) (soff+(sizeof(MExtractTimeAndChargeSpline)*i)))->~G__TMExtractTimeAndChargeSpline();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractTimeAndChargeSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractTimeAndChargeSpline*) (soff))->~G__TMExtractTimeAndChargeSpline();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractTimeAndChargeDigitalFilter */
static int G__SignalCint_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractTimeAndChargeDigitalFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndChargeDigitalFilter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractTimeAndChargeDigitalFilter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractTimeAndChargeDigitalFilter((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractTimeAndChargeDigitalFilter((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndChargeDigitalFilter[n];
       } else {
         p = new((void*) gvp) MExtractTimeAndChargeDigitalFilter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractTimeAndChargeDigitalFilter;
       } else {
         p = new((void*) gvp) MExtractTimeAndChargeDigitalFilter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->SetNameWeightsFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->SetNameWeightsFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->EnableAutomaticWeights((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->EnableAutomaticWeights();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->SetBinningResolution((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->SetBinningResolution((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->SetBinningResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->GetNameWeightsFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractTimeAndChargeDigitalFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeDigitalFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractTimeAndChargeDigitalFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractTimeAndChargeDigitalFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractTimeAndChargeDigitalFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeDigitalFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndChargeDigitalFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractTimeAndChargeDigitalFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractTimeAndChargeDigitalFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractTimeAndChargeDigitalFilter G__TMExtractTimeAndChargeDigitalFilter;
static int G__SignalCint_209_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractTimeAndChargeDigitalFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractTimeAndChargeDigitalFilter*) (soff+(sizeof(MExtractTimeAndChargeDigitalFilter)*i)))->~G__TMExtractTimeAndChargeDigitalFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractTimeAndChargeDigitalFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractTimeAndChargeDigitalFilter*) (soff))->~G__TMExtractTimeAndChargeDigitalFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MExtractFACT */
static int G__SignalCint_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MExtractFACT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractFACT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MExtractFACT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MExtractFACT((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MExtractFACT((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractFACT[n];
       } else {
         p = new((void*) gvp) MExtractFACT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MExtractFACT;
       } else {
         p = new((void*) gvp) MExtractFACT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MExtractFACT*) G__getstructoffset())->InitArrays((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MExtractFACT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractFACT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MExtractFACT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MExtractFACT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MExtractFACT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractFACT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractFACT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MExtractFACT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MExtractFACT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MExtractFACT G__TMExtractFACT;
static int G__SignalCint_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MExtractFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MExtractFACT*) (soff+(sizeof(MExtractFACT)*i)))->~G__TMExtractFACT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MExtractFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MExtractFACT*) (soff))->~G__TMExtractFACT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSignalPix */
static int G__SignalCint_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSignalPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalPix((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MSignalPix((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalPix((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MSignalPix((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalPix[n];
       } else {
         p = new((void*) gvp) MSignalPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalPix;
       } else {
         p = new((void*) gvp) MSignalPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSignalPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MSignalPix(*(MSignalPix*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MSignalPix(*(MSignalPix*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalPix*) G__getstructoffset())->GetNumPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalPix*) G__getstructoffset())->GetErrorPhot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalPix*) G__getstructoffset())->GetArrivalTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalPix*) G__getstructoffset())->GetTimeSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSignalPix*) G__getstructoffset())->IsPixelUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSignalPix*) G__getstructoffset())->IsPixelUnmapped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetPixelUnused();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetPixelUsed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetPixelUnmapped();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetIdxIsland((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MSignalPix*) G__getstructoffset())->GetIdxIsland());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetRing((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MSignalPix*) G__getstructoffset())->GetRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSignalPix*) G__getstructoffset())->SetPixelCore((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSignalPix*) G__getstructoffset())->SetPixelCore();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSignalPix*) G__getstructoffset())->IsPixelCore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetNumPhotons((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetErrorPhot((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->Set((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetArrivalTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->SetTimeSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSignalPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSignalPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSignalPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_216_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSignalPix G__TMSignalPix;
static int G__SignalCint_216_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSignalPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSignalPix*) (soff+(sizeof(MSignalPix)*i)))->~G__TMSignalPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSignalPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSignalPix*) (soff))->~G__TMSignalPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSignalCamIter */
static int G__SignalCint_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSignalCamIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCamIter(
(MSignalCam*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MSignalCamIter(
(MSignalCam*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCamIter((MSignalCam*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSignalCamIter((MSignalCam*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCamIter((MSignalCam*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSignalCamIter((MSignalCam*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MSignalCamIter*) G__getstructoffset())->GetIdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSignalCamIter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCamIter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSignalCamIter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSignalCamIter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCamIter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCamIter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCamIter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCamIter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCamIter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SignalCint_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MSignalCamIter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MSignalCamIter(*(MSignalCamIter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSignalCamIter G__TMSignalCamIter;
static int G__SignalCint_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSignalCamIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSignalCamIter*) (soff+(sizeof(MSignalCamIter)*i)))->~G__TMSignalCamIter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSignalCamIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSignalCamIter*) (soff))->~G__TMSignalCamIter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSignalCam */
static int G__SignalCint_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSignalCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSignalCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSignalCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalCam[n];
       } else {
         p = new((void*) gvp) MSignalCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalCam;
       } else {
         p = new((void*) gvp) MSignalCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((MSignalCam*) G__getstructoffset())->AddPixel((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((MSignalCam*) G__getstructoffset())->AddPixel((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((MSignalCam*) G__getstructoffset())->AddPixel((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCam*) G__getstructoffset())->SetSinglePixels((Short_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCam*) G__getstructoffset())->SetNumPixelsSaturated((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCam*) G__getstructoffset())->SetIslandInfo((Short_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MSignalCam*) G__getstructoffset())->GetNumPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MSignalCam*) G__getstructoffset())->GetNumIslands());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MSignalCam*) G__getstructoffset())->GetNumSinglePixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetSizeSinglePixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetSizeSubIslands());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetSizeMainIsland());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MSignalCam*) G__getstructoffset())->GetNumPixelsSaturatedHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MSignalCam*) G__getstructoffset())->GetNumPixelsSaturatedLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MSignalCam*) G__getstructoffset())->GetNumPixelsUnmapped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetNumPhotonsMin((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetNumPhotonsMin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetNumPhotonsMax((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetNumPhotonsMax());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetRatioMin((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetRatioMin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetRatioMax((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetRatioMax());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetErrorPhotMin((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetErrorPhotMin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetErrorPhotMax((MGeomCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MSignalCam*) G__getstructoffset())->GetErrorPhotMax());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MSignalPix& obj = ((MSignalCam*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MSignalPix& obj = ((const MSignalCam*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MSignalCam*) G__getstructoffset())->CalcIslands(*(MGeomCam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSignalCam*) G__getstructoffset())->CompareCleaning(*(MSignalCam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MSignalCam*) G__getstructoffset())->CompareIslands(*(MSignalCam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MSignalCam*) G__getstructoffset())->operator ::TIterator*());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSignalCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSignalCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSignalCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_218_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSignalCam G__TMSignalCam;
static int G__SignalCint_218_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSignalCam*) (soff+(sizeof(MSignalCam)*i)))->~G__TMSignalCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSignalCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSignalCam*) (soff))->~G__TMSignalCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSignalCalc */
static int G__SignalCint_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSignalCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCalc(
(Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MSignalCalc(
(Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCalc(
(Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MSignalCalc(
(Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCalc((Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSignalCalc((Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSignalCalc((Byte_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSignalCalc((Byte_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalCalc[n];
       } else {
         p = new((void*) gvp) MSignalCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSignalCalc;
       } else {
         p = new((void*) gvp) MSignalCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSignalCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSignalCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSignalCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSignalCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSignalCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSignalCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSignalCalc G__TMSignalCalc;
static int G__SignalCint_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSignalCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSignalCalc*) (soff+(sizeof(MSignalCalc)*i)))->~G__TMSignalCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSignalCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSignalCalc*) (soff))->~G__TMSignalCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFilterData */
static int G__SignalCint_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFilterData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFilterData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterData((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFilterData((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFilterData[n];
       } else {
         p = new((void*) gvp) MFilterData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFilterData;
       } else {
         p = new((void*) gvp) MFilterData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MFilterData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFilterData*) G__getstructoffset())->SetNameSignalIn((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFilterData*) G__getstructoffset())->SetNameSignalIn();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFilterData*) G__getstructoffset())->SetNameSignalOut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFilterData*) G__getstructoffset())->SetNameSignalOut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFilterData*) G__getstructoffset())->SetWeights(*(vector<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFilterData*) G__getstructoffset())->SetAverage((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MFilterData*) G__getstructoffset())->Filter((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFilterData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFilterData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFilterData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFilterData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFilterData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_221_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFilterData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFilterData G__TMFilterData;
static int G__SignalCint_221_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFilterData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFilterData*) (soff+(sizeof(MFilterData)*i)))->~G__TMFilterData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFilterData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFilterData*) (soff))->~G__TMFilterData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTreatSaturation */
static int G__SignalCint_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTreatSaturation* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTreatSaturation((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTreatSaturation((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTreatSaturation((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTreatSaturation((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTreatSaturation[n];
       } else {
         p = new((void*) gvp) MTreatSaturation[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTreatSaturation;
       } else {
         p = new((void*) gvp) MTreatSaturation;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTreatSaturation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreatSaturation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTreatSaturation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTreatSaturation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTreatSaturation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreatSaturation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTreatSaturation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTreatSaturation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTreatSaturation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTreatSaturation G__TMTreatSaturation;
static int G__SignalCint_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTreatSaturation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTreatSaturation*) (soff+(sizeof(MTreatSaturation)*i)))->~G__TMTreatSaturation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTreatSaturation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTreatSaturation*) (soff))->~G__TMTreatSaturation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MArrivalTimePix */
static int G__SignalCint_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MArrivalTimePix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MArrivalTimePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MArrivalTimePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MArrivalTimePix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MArrivalTimePix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MArrivalTimePix[n];
       } else {
         p = new((void*) gvp) MArrivalTimePix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MArrivalTimePix;
       } else {
         p = new((void*) gvp) MArrivalTimePix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MArrivalTimePix*) G__getstructoffset())->SetArrivalTime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MArrivalTimePix*) G__getstructoffset())->SetArrivalTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MArrivalTimePix*) G__getstructoffset())->SetArrivalTime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MArrivalTimePix*) G__getstructoffset())->SetGainSaturation((Byte_t) G__int(libp->para[0]), (Byte_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MArrivalTimePix*) G__getstructoffset())->SetGainSaturation((Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MArrivalTimePix*) G__getstructoffset())->GetArrivalTimeHiGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MArrivalTimePix*) G__getstructoffset())->GetArrivalTimeHiGainError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MArrivalTimePix*) G__getstructoffset())->GetArrivalTimeLoGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MArrivalTimePix*) G__getstructoffset())->GetArrivalTimeLoGainError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MArrivalTimePix*) G__getstructoffset())->GetArrivalTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MArrivalTimePix*) G__getstructoffset())->IsArrivalTimeValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MArrivalTimePix*) G__getstructoffset())->GetNumHiGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MArrivalTimePix*) G__getstructoffset())->GetNumLoGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MArrivalTimePix*) G__getstructoffset())->IsHiGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MArrivalTimePix*) G__getstructoffset())->IsLoGainSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MArrivalTimePix*) G__getstructoffset())->IsLoGainValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MArrivalTimePix*) G__getstructoffset())->IsHiGainValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MArrivalTimePix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimePix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MArrivalTimePix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MArrivalTimePix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MArrivalTimePix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimePix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MArrivalTimePix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MArrivalTimePix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SignalCint_227_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MArrivalTimePix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MArrivalTimePix G__TMArrivalTimePix;
static int G__SignalCint_227_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MArrivalTimePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MArrivalTimePix*) (soff+(sizeof(MArrivalTimePix)*i)))->~G__TMArrivalTimePix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MArrivalTimePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MArrivalTimePix*) (soff))->~G__TMArrivalTimePix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MExtractedSignalPix */

/* MExtractedSignalCam */

/* MExtractedSignalPINDiode */

/* MExtractor */

/* MExtractedSignalBlindPixel */

/* MExtractBlindPixel */

/* MExtractPINDiode */

/* MArrivalTimeCam */

/* MExtractTime */

/* MExtractTimeAndCharge */

/* MExtractTimeAndChargeSpline */

/* MExtractTimeAndChargeDigitalFilter */

/* MExtractFACT */

/* MSignalPix */

/* MSignalCamIter */

/* MSignalCam */

/* MSignalCalc */

/* MFilterData */

/* MTreatSaturation */

/* MArrivalTimePix */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSignalCint {
 public:
  G__Sizep2memfuncSignalCint(): p(&G__Sizep2memfuncSignalCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSignalCint::*p)();
};

size_t G__get_sizep2memfuncSignalCint()
{
  G__Sizep2memfuncSignalCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSignalCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix))) {
     MExtractedSignalPix *G__Lderived;
     G__Lderived=(MExtractedSignalPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam))) {
     MExtractedSignalCam *G__Lderived;
     G__Lderived=(MExtractedSignalCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam),G__get_linked_tagnum(&G__SignalCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode))) {
     MExtractedSignalPINDiode *G__Lderived;
     G__Lderived=(MExtractedSignalPINDiode*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractor))) {
     MExtractor *G__Lderived;
     G__Lderived=(MExtractor*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel))) {
     MExtractedSignalBlindPixel *G__Lderived;
     G__Lderived=(MExtractedSignalBlindPixel*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel))) {
     MExtractBlindPixel *G__Lderived;
     G__Lderived=(MExtractBlindPixel*)0x1000;
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode))) {
     MExtractPINDiode *G__Lderived;
     G__Lderived=(MExtractPINDiode*)0x1000;
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam))) {
     MArrivalTimeCam *G__Lderived;
     G__Lderived=(MArrivalTimeCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam),G__get_linked_tagnum(&G__SignalCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime))) {
     MExtractTime *G__Lderived;
     G__Lderived=(MExtractTime*)0x1000;
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge))) {
     MExtractTimeAndCharge *G__Lderived;
     G__Lderived=(MExtractTimeAndCharge*)0x1000;
     {
       MExtractTime *G__Lpbase=(MExtractTime*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline))) {
     MExtractTimeAndChargeSpline *G__Lderived;
     G__Lderived=(MExtractTimeAndChargeSpline*)0x1000;
     {
       MExtractTimeAndCharge *G__Lpbase=(MExtractTimeAndCharge*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MExtractTime *G__Lpbase=(MExtractTime*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter))) {
     MExtractTimeAndChargeDigitalFilter *G__Lderived;
     G__Lderived=(MExtractTimeAndChargeDigitalFilter*)0x1000;
     {
       MExtractTimeAndCharge *G__Lpbase=(MExtractTimeAndCharge*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MExtractTime *G__Lpbase=(MExtractTime*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT))) {
     MExtractFACT *G__Lderived;
     G__Lderived=(MExtractFACT*)0x1000;
     {
       MExtractTime *G__Lpbase=(MExtractTime*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_MExtractTime),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MExtractor *G__Lpbase=(MExtractor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_MExtractor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MSignalPix))) {
     MSignalPix *G__Lderived;
     G__Lderived=(MSignalPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalPix),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalPix),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter))) {
     MSignalCamIter *G__Lderived;
     G__Lderived=(MSignalCamIter*)0x1000;
     {
       TObjArrayIter *G__Lpbase=(TObjArrayIter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter),G__get_linked_tagnum(&G__SignalCintLN_TObjArrayIter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TIterator *G__Lpbase=(TIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter),G__get_linked_tagnum(&G__SignalCintLN_TIterator),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&> *G__Lpbase=(iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter),G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam))) {
     MSignalCam *G__Lderived;
     G__Lderived=(MSignalCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam),G__get_linked_tagnum(&G__SignalCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc))) {
     MSignalCalc *G__Lderived;
     G__Lderived=(MSignalCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MFilterData))) {
     MFilterData *G__Lderived;
     G__Lderived=(MFilterData*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation))) {
     MTreatSaturation *G__Lderived;
     G__Lderived=(MTreatSaturation*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation),G__get_linked_tagnum(&G__SignalCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation),G__get_linked_tagnum(&G__SignalCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix))) {
     MArrivalTimePix *G__Lderived;
     G__Lderived=(MArrivalTimePix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix),G__get_linked_tagnum(&G__SignalCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix),G__get_linked_tagnum(&G__SignalCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSignalCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float>",117,G__get_linked_tagnum(&G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SignalCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MExtractedSignalPix */
static void G__setup_memvarMExtractedSignalPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix));
   { MExtractedSignalPix *p; p=(MExtractedSignalPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignalHiGain=",0,"mean value of the extracted signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignalHiGainError=",0,"error of the mean value of the extracted signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignalLoGain=",0,"mean value of the extracted signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignalLoGainError=",0,"error of the mean value of the extracted signal");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumHiGainSaturated=",0,"Number of how many hi-gain slices saturated");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumLoGainSaturated=",0,"Number of how many lo-gain slices saturated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractedSignalCam */
static void G__setup_memvarMExtractedSignalCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam));
   { MExtractedSignalCam *p; p=(MExtractedSignalCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClonesArray),-1,-1,4,"fArray=",0,"-> FIXME: Change TClonesArray away from a pointer?");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFirstUsedSliceHiGain=",0,"First High Gain FADC used for extraction (incl.)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstUsedSliceLoGain=",0,"First Low Gain FADC used for extraction (incl.)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fLastUsedSliceHiGain=",0,"Last High Gain FADC used for extraction (incl.)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fLastUsedSliceLoGain=",0,"Last Low Gain FADC used for extraction (incl.)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUsedWindowHiGain=",0,"High Gain FADC extraction window ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUsedWindowLoGain=",0,"Low Gain FADC extraction window ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractedSignalPINDiode */
static void G__setup_memvarMExtractedSignalPINDiode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode));
   { MExtractedSignalPINDiode *p; p=(MExtractedSignalPINDiode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignal=",0,"Extracted signal amplitude");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSignalErr=",0,"Error extracted signal amplitude");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedTime=",0,"Position of signal amplitude");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedTimeErr=",0,"Error position of signal amplitude");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSigma=",0,"Width Gauss fit ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedSigmaErr=",0,"Error of width");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExtractedChi2=",0,"Chi2 Gauss fit   ");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumFADCSamples=",0,"Number of used FADC slices");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFirst=",0,"First FADC slice to start extraction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSaturated=",0,"FADC saturation occurrance flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractor */
static void G__setup_memvarMExtractor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor));
   { MExtractor *p; p=(MExtractor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgOffsetLoGain=",0,"! Default for fOffsetLoGain (now set to 1.51 (= 5ns)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoiseCalculation=",0,"! Flag if extractor determines noise contribution from pedestal file.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolutionPerPheHiGain=",0,"Extractor-dependent charge resolution per phe for high-gain (see TDAS-0502).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolutionPerPheLoGain=",0,"Extractor-dependent charge resolution per phe for low-gain  (see TDAS-0502).");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,2,"fgSaturationLimit=0ULL",0,"! Default for fSaturationLimit (now set to: 254)");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,2,"fgNameSignalCam=",0,"! \"MExtractedSignalCam\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fOffsetLoGain=",0,"Offset of the low-gain signal w.r.t. the High-Gain slices");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam),-1,-1,2,"fSignals=",0,"! Extracted signal of all pixels in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MRawEvtData),-1,-1,2,"fRawEvt=",0,"! Raw event data (time slices)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MRawRunHeader),-1,-1,2,"fRunHeader=",0,"! RunHeader information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalSubtractedEvt),-1,-1,2,"fSignal=",0,"!");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHiGainFirst=",0,"First FADC slice nr. to extract the High Gain signal");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHiGainLast=",0,"Last FADC slice nr. to extract the High Gain signal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLoGainFirst=",0,"First FADC slice nr. to extract the Low Gain signal");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fLoGainLast=",0,"Last FADC slice nr. to extract the Low Gain signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNumHiGainSamples=",0,"Number High Gain FADC slices used to extract the signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNumLoGainSamples=",0,"Number Low  Gain FADC slices used to extract the signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSqrtHiGainSamples=",0,"Sqrt. nr. High Gain FADC slices used to extract the signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSqrtLoGainSamples=",0,"Sqrt. nr. Low  Gain FADC slices used to extract the signal");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fSaturationLimit=",0,"Highest FADC slice value until being declared saturated");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,2,"fNameSignalCam=",0,"Name of the 'MExtractedSignalCam' container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractedSignalBlindPixel */
static void G__setup_memvarMExtractedSignalBlindPixel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel));
   { MExtractedSignalBlindPixel *p; p=(MExtractedSignalBlindPixel*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gkSignalInitializer=0LL",0,"! Initializer for variables");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayI),-1,-1,4,"fBlindPixelIdx=",0,"Array Blind Pixel IDs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayF),-1,-1,4,"fExtractedSignal=",0,"Array Extracted signals per Blind Pixel ID");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayI),-1,-1,4,"fNumSaturated=",0,"Array Number of saturated slices per Blind Pixel ID ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayF),-1,-1,4,"fPed=",0,"Array Pedestal per Blind Pixel IDs                               ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayF),-1,-1,4,"fPedErr=",0,"Array Pedestal Error per Blind Pixel ID          ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayF),-1,-1,4,"fPedRms=",0,"Array Pedestal RMS per Blind Pixel ID ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TArrayF),-1,-1,4,"fPedRmsErr=",0,"Array Pedestal RMS Error per Blind Pixel ID ");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFirst=",0,"First FADC extraction slice");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumFADCSamples=",0,"Number of summed FADC slices");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fExtractionType=",0,"What extraction type has been chosen?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractBlindPixel */
static void G__setup_memvarMExtractBlindPixel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel));
   { MExtractBlindPixel *p; p=(MExtractBlindPixel*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgBlindPixelIdx=0ULL",0,"! Default blind pixels index before modification run");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainFirst=0ULL",0,"! Default First FADC slice Hi-Gain Signal (currently set to: 10   ) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainLast=0ULL",0,"! Default Last  FADC slice Hi-Gain Signal (currently set to: 29   ) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainFirst=0ULL",0,"! Default First FADC slice Filter         (currently set to: 0    ) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainLast=0ULL",0,"! Default Last  FADC slice Filter         (currently set to: 6    ) ");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgNSBFilterLimit=0LL",0,"! Default for fNSBFilterLimit");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgResolution=",0,"! Default for fResolution         (currently set to: 0.003)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkOverflow=",0,"! Default sum to assign overflow in case of saturation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel),-1,-1,4,"fBlindPixel=",0,"Extracted signal of the Blind Pixel");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fHiGainFirstDeriv=",0,"! First derivative at intersection");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fHiGainSecondDeriv=",0,"! Second derivative at intersection");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolution=",0,"The time resolution in FADC units");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayI),-1,-1,4,"fBlindPixelIdx=",0,"Array holding the IDs of the blind pixel(s)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNSBFilterLimit=",0,"Limit of sum of FADC slices for filter part");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fExtractionType=",0,"What extraction type has been chosen?");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fDataType=",0,"What data container type is needed?  ");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t),-1,-2,1,G__FastAllocString(2048).Format("kAmplitude=%lldLL",(long long)MExtractBlindPixel::kAmplitude).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t),-1,-2,1,G__FastAllocString(2048).Format("kIntegral=%lldLL",(long long)MExtractBlindPixel::kIntegral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t),-1,-2,1,G__FastAllocString(2048).Format("kFilter=%lldLL",(long long)MExtractBlindPixel::kFilter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixelcLcLDataType_t),-1,-2,1,G__FastAllocString(2048).Format("kRawEvt=%lldLL",(long long)MExtractBlindPixel::kRawEvt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixelcLcLDataType_t),-1,-2,1,G__FastAllocString(2048).Format("kRawEvt2=%lldLL",(long long)MExtractBlindPixel::kRawEvt2).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractPINDiode */
static void G__setup_memvarMExtractPINDiode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode));
   { MExtractPINDiode *p; p=(MExtractPINDiode*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgPINDiodeIdx=0ULL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainFirst=0ULL",0,"First FADC slice Hi-Gain (now set to: 3) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainLast=0ULL",0,"Last  FADC slice Hi-Gain (now set to: 14) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainFirst=0ULL",0,"First FADC slice Lo-Gain (now set to: 3) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainLast=0ULL",0,"Last  FADC slice Lo-Gain (now set to: 14) ");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLowerFitLimit=0ULL",0,"Default for fLowerFitLimit (now set to: 2)");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgUpperFitLimit=0ULL",0,"Default for fUpperFitLimit (now set to: 5)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fLowerFitLimit=",0,"Number of FADC slices before maximum to start fit");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fUpperFitLimit=",0,"Number of FADC slices after maximum to end fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode),-1,-1,4,"fPINDiode=",0,"Extracted signal of the PIN Diode");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TH1F),-1,-1,4,"fSlices=",0,"Histogram to fit the slices");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPINDiodeIdx=",0,"PIN Diode pixel ID");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fPedMean=",0,"The used pedestals (0: ped+AB, 1: ped-AB)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MArrivalTimeCam */
static void G__setup_memvarMArrivalTimeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam));
   { MArrivalTimeCam *p; p=(MArrivalTimeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClonesArray),-1,-1,4,"fArray=",0,"-> FIXME: Change TClonesArray away from a pointer?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractTime */
static void G__setup_memvarMExtractTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime));
   { MExtractTime *p; p=(MExtractTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,2,"fgNameTimeCam=",0,"! \"MArrivalTimeCam\"");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,2,"fNameTimeCam=",0,"Name of the 'MArrivalTimeCam' container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam),-1,-1,2,"fArrTime=",0,"! Container with the photons arrival times");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractTimeAndCharge */
static void G__setup_memvarMExtractTimeAndCharge(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge));
   { MExtractTimeAndCharge *p; p=(MExtractTimeAndCharge*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLoGainStartShift=",0,"! Default for fLoGainStartShift (now set to: -2.8)");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgLoGainSwitch=0ULL",0,"! Default for fLoGainSwitch     (now set to: 100)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLoGainStartShift=",0,"Shift to start searching the low-gain signal obtained from the high-gain times.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLoGainSwitch=",0,"Limit for max. bin content before the low-gain gets extracted");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fWindowSizeHiGain=",0,"Window Size High-Gain");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fWindowSizeLoGain=",0,"Window Size Low-Gain");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractTimeAndChargeSpline */
static void G__setup_memvarMExtractTimeAndChargeSpline(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline));
   { MExtractTimeAndChargeSpline *p; p=(MExtractTimeAndChargeSpline*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainFirst=0ULL",0,"! Default for fHiGainFirst  (now set to: 2)");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainLast=0ULL",0,"! Default for fHiGainLast   (now set to: 14)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgLoGainFirst=0LL",0,"! Default for fLoGainFirst  (now set to: 2)");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainLast=0ULL",0,"! Default for fLoGainLast   (now set to: 14)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgResolution=",0,"! Default for fResolution   (now set to: 0.003)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgRiseTimeHiGain=",0,"! Default for fRiseTime     (now set to: 1.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgFallTimeHiGain=",0,"! Default for fFallTime     (now set to: 4.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLoGainStretch=",0,"! Default for fLoGainStretch    (now set to: 1.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgOffsetLoGain=",0,"! Default for fOffsetLoGain     (now set to 1.7)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fHiGainFirstDeriv=",0,"! High-gain discretized first derivatives");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fLoGainFirstDeriv=",0,"! Low-gain discretized first derivatives");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fHiGainSecondDeriv=",0,"! High-gain discretized second derivatives");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fLoGainSecondDeriv=",0,"! Low-gain discretized second derivatives");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fResolution=",0,"The time resolution in FADC units");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRiseTimeHiGain=",0,"The usual rise time of the pulse in the high-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFallTimeHiGain=",0,"The usual fall time of the pulse in the high-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRiseTimeLoGain=",0,"The usual rise time of the pulse in the low-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFallTimeLoGain=",0,"The usual fall time of the pulse in the low-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLoGainStretch=",0,"The stretch of the low-gain w.r.t. the high-gain pulse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHeightTm=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SignalCintLN_MExtralgoSplinecLcLExtractionType_t),-1,-1,4,"fExtractionType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractTimeAndChargeDigitalFilter */
static void G__setup_memvarMExtractTimeAndChargeDigitalFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter));
   { MExtractTimeAndChargeDigitalFilter *p; p=(MExtractTimeAndChargeDigitalFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainFirst=0ULL",0,"! Default for fHiGainFirst       (now set to: 0)");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgHiGainLast=0ULL",0,"! Default for fHiGainLast        (now set to:14)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgLoGainFirst=0LL",0,"! Default for fLoGainFirst       (now set to: 3)");
   G__memvar_setup((void*)G__PVOID,98,0,1,-1,G__defined_typename("Byte_t"),-2,4,"fgLoGainLast=0ULL",0,"! Default for fLoGainLast        (now set to:14)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgBinningResolutionHiGain=0LL",0,"! Default for fBinningResolutionHiGain (now set to: 10)");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgBinningResolutionLoGain=0LL",0,"! Default for fBinningResolutionLoGain (now set to: 10)");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-2,4,"fgNameWeightsFile=",0,"! \"cosmics_weights.dat\"");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgOffsetLoGain=",0,"! Default for fOffsetLoGain (now set to 1.7)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MCalibrationPattern),-1,-1,4,"fCalibPattern=",0,"! Calibration DM pattern");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBinningResolutionHiGain=",0,"Number of weights per bin High-Gain");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBinningResolutionLoGain=",0,"Number of weights per bin Low-Gain");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fAmpWeightsHiGain=",0,"! Amplitude weights High-Gain (from weights file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fTimeWeightsHiGain=",0,"! Time weights High-Gain (from weights file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fAmpWeightsLoGain=",0,"! Amplitude weights Low-Gain (from weights file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fTimeWeightsLoGain=",0,"! Time weights Low-Gain (from weights file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fPulseHiGain=",0,"! Pulse Shape Hi-Gain (for chisq)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fPulseLoGain=",0,"! Pulse Shape Lo-Gain (for chisq)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,4,"fNameWeightsFile=",0,"Name of the weights file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAutomaticWeights=",0,"Flag whether weight should be determined automatically");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,4,"fNameWeightsFileSet=",0,"! Flag if weights have alreayd been set");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MExtractFACT */
static void G__setup_memvarMExtractFACT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT));
   { MExtractFACT *p; p=(MExtractFACT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSignalPix */
static void G__setup_memvarMSignalPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalPix));
   { MSignalPix *p; p=(MSignalPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsCore=",0,"! the pixel is a Core pixel -> kTRUE");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fRing=",0,"NT: number of analyzed rings around the core pixels, fRing>0 means: used, fRing= 0 means: unused, fRing= -1 means: unmapped (no possible to use in the calculation of the image parameters)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fIdxIsland=",0,"! the pixel is a Core pixel -> kTRUE");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhot=",0,"The number of Cerenkov photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fErrPhot=",0,"the error of fPhot");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrivalTime=",0,"Calibrated Arrival Time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeSlope=",0,"Time between half rise time and position of maximum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSignalCamIter */
static void G__setup_memvarMSignalCamIter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter));
   { MSignalCamIter *p; p=(MSignalCamIter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsedOnly=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSignalCam */
static void G__setup_memvarMSignalCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam));
   { MSignalCam *p; p=(MSignalCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumIslands=",0,"!");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSinglePixels=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeSinglePixels=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeSubIslands=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeMainIsland=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumPixelsSaturatedHiGain=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumPixelsSaturatedLoGain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClonesArray),-1,-1,4,"fPixels=",0,"-> FIXME: Change TClonesArray away from a pointer?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSignalCalc */
static void G__setup_memvarMSignalCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc));
   { MSignalCalc *p; p=(MSignalCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"RunHeader information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalSubtractedEvt),-1,-1,4,"fRawEvt=",0,"raw event data (time slices)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MSignalCam),-1,-1,4,"fCerPhotEvt=",0,"Cerenkov Photon Event used for calculation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalCam),-1,-1,4,"fPedestals=",0,"Pedestals of all pixels in the camera");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fBefore=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fAfter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSkip=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFilterData */
static void G__setup_memvarMFilterData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData));
   { MFilterData *p; p=(MFilterData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalSubtractedEvt),-1,-1,4,"fSignalIn=",0,"! Input container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalSubtractedEvt),-1,-1,4,"fSignalOut=",0,"! Output container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,4,"fNameSignalIn=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_TString),-1,-1,4,"fNameSignalOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"fWeights=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTreatSaturation */
static void G__setup_memvarMTreatSaturation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation));
   { MTreatSaturation *p; p=(MTreatSaturation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MRawEvtData),-1,-1,4,"fRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_MPedestalSubtractedEvt),-1,-1,4,"fEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fDev1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SignalCintLN_MArrayF),-1,-1,4,"fDev2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MArrivalTimePix */
static void G__setup_memvarMArrivalTimePix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix));
   { MArrivalTimePix *p; p=(MArrivalTimePix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrivalTimeHiGain=",0,"mean value of the ArrivalTime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrivalTimeHiGainError=",0,"error of the mean value of the ArrivalTime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrivalTimeLoGain=",0,"mean value of the ArrivalTime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrivalTimeLoGainError=",0,"error of the mean value of the ArrivalTime");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumHiGainSaturated=",0,"Number of first hi-gain slice which has saturated (could be negative if already the first slice saturates)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumLoGainSaturated=",0,"Number of first lo-gain slices which have saturated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SignalCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSignalCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMExtractedSignalPix(void) {
   /* MExtractedSignalPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix));
   G__memfunc_setup("MExtractedSignalPix",1920,G__SignalCint_174_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExtractedSignal",1838,G__SignalCint_174_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - sig f - 'Float_t' 0 '0' sigerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractedSignal",1838,G__SignalCint_174_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - sighi f - 'Float_t' 0 - sighierr "
"f - 'Float_t' 0 - siglo f - 'Float_t' 0 - sigloerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainSaturation",1749,G__SignalCint_174_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 0 - higain b - 'Byte_t' 0 '0' logain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignalHiGain",2386,G__SignalCint_174_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignalHiGainError",2908,G__SignalCint_174_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignalLoGain",2396,G__SignalCint_174_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignalLoGainError",2918,G__SignalCint_174_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainSaturated",2093,G__SignalCint_174_0_11, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainSaturated",2103,G__SignalCint_174_0_12, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiGainSaturated",1689,G__SignalCint_174_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoGainSaturated",1699,G__SignalCint_174_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoGainValid",1254,G__SignalCint_174_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiGainValid",1244,G__SignalCint_174_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_174_0_17, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractedSignalPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_174_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_174_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractedSignalPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_174_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractedSignalPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_174_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_174_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_174_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_174_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_174_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractedSignalPix", 2046, G__SignalCint_174_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractedSignalCam(void) {
   /* MExtractedSignalCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam));
   G__memfunc_setup("MExtractedSignalCam",1888,G__SignalCint_175_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSize",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__SignalCint_175_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstUsedSliceHiGain",2265,G__SignalCint_175_0_7, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstUsedSliceLoGain",2275,G__SignalCint_175_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastUsedSliceHiGain",2149,G__SignalCint_175_0_9, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastUsedSliceLoGain",2159,G__SignalCint_175_0_10, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUsedHiGainFADCSlices",2434,G__SignalCint_175_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUsedLoGainFADCSlices",2444,G__SignalCint_175_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogStream",1210,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'MLog' - 0 - lg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUsedFADCSlices",1582,G__SignalCint_175_0_14, 121, -1, -1, 0, 6, 1, 1, 0, 
"b - 'Byte_t' 0 - firsth b - 'Byte_t' 0 - lasth "
"f - 'Float_t' 0 - winh i - 'Int_t' 0 - firstl "
"b - 'Byte_t' 0 - lastl f - 'Float_t' 0 - winl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_175_0_15, 117, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_175_0_16, 117, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPix), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_175_0_19, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractedSignalCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_175_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_175_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractedSignalCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_175_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractedSignalCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_175_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_175_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_175_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_175_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_175_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractedSignalCam", 2014, G__SignalCint_175_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractedSignalPINDiode(void) {
   /* MExtractedSignalPINDiode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode));
   G__memfunc_setup("MExtractedSignalPINDiode",2331,G__SignalCint_176_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalPINDiode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetExtractedSignal",1826,G__SignalCint_176_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignalErr",2123,G__SignalCint_176_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedTime",1619,G__SignalCint_176_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedTimeErr",1916,G__SignalCint_176_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSigma",1717,G__SignalCint_176_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSigmaErr",2014,G__SignalCint_176_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedChi2",1546,G__SignalCint_176_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFADCSamples",1587,G__SignalCint_176_0_10, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__SignalCint_176_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExtractedSignal",1838,G__SignalCint_176_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - sig f - 'Float_t' 10 - sigerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractedSigma",1729,G__SignalCint_176_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - sig f - 'Float_t' 10 - sigerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractedTime",1631,G__SignalCint_176_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - sig f - 'Float_t' 10 - sigerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractedChi2",1558,G__SignalCint_176_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaturation",1366,G__SignalCint_176_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsedFADCSlices",1582,G__SignalCint_176_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 10 - first b - 'Byte_t' 10 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_176_0_19, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractedSignalPINDiode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_176_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPINDiode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_176_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractedSignalPINDiode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_176_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractedSignalPINDiode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_176_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_176_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPINDiode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_176_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalPINDiode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_176_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalPINDiode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_176_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalPINDiode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractedSignalPINDiode", 2457, G__SignalCint_176_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractor(void) {
   /* MExtractor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractor));
   G__memfunc_setup("FindSignalHiGain",1551,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 8, 
"B - 'Byte_t' 0 - - B - 'Byte_t' 0 - - "
"f - 'Float_t' 1 - - b - 'Byte_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindSignalLoGain",1561,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 8, 
"B - 'Byte_t' 0 - - f - 'Float_t' 1 - - "
"b - 'Byte_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetResolutionPerPheHiGain",2516,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResolutionPerPheLoGain",2526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcessStd",1329,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractor",1033,G__SignalCint_188_0_11, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractor), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainFirst",1368,G__SignalCint_188_0_12, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainLast",1252,G__SignalCint_188_0_13, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainFirst",1378,G__SignalCint_188_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainLast",1262,G__SignalCint_188_0_15, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainSamples",1877,G__SignalCint_188_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainSamples",1887,G__SignalCint_188_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffsetLoGain",1473,G__SignalCint_188_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolutionPerPheHiGain",2504,G__SignalCint_188_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResolutionPerPheLoGain",2514,G__SignalCint_188_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSaturationLimit",1865,G__SignalCint_188_0_21, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasLoGain",854,G__SignalCint_188_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsNoiseCalculation",1833,G__SignalCint_188_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResolutionPerPheHiGain",2516,G__SignalCint_188_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResolutionPerPheLoGain",2526,G__SignalCint_188_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRange",793,G__SignalCint_188_0_26, 121, -1, -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 0 '0' hifirst r - 'UShort_t' 0 '0' hilast "
"i - 'Int_t' 0 '0' lofirst b - 'Byte_t' 0 '0' lolast", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOffsetLoGain",1485,G__SignalCint_188_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgOffsetLoGain' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSaturationLimit",1877,G__SignalCint_188_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgSaturationLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalCam",1564,G__SignalCint_188_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 'fgNameSignalCam' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNoiseCalculation",1945,G__SignalCint_188_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_188_0_33, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_188_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_188_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_188_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_188_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_188_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_188_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_188_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_188_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractor::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractor", 1159, G__SignalCint_188_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractedSignalBlindPixel(void) {
   /* MExtractedSignalBlindPixel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel));
   G__memfunc_setup("MExtractedSignalBlindPixel",2618,G__SignalCint_193_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractedSignalBlindPixel), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBlindPixelIdx",1584,G__SignalCint_193_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtractedSignal",1826,G__SignalCint_193_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBlindPixels",1710,G__SignalCint_193_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSaturated",1533,G__SignalCint_193_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumFADCSamples",1587,G__SignalCint_193_0_8, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPed",569,G__SignalCint_193_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedErr",866,G__SignalCint_193_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedRms",875,G__SignalCint_193_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedRmsErr",1172,G__SignalCint_193_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExtractionType",1663,G__SignalCint_193_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'MExtractBlindPixel::ExtractionType_t' - 10 - typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__SignalCint_193_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractionType",1775,G__SignalCint_193_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 10 '0' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumFADCSamples",1599,G__SignalCint_193_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 10 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsedFADCSlices",1582,G__SignalCint_193_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 10 - first b - 'Byte_t' 10 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixelIdx",1596,G__SignalCint_193_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - i i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractedSignal",1838,G__SignalCint_193_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSaturated",1545,G__SignalCint_193_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - i i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPed",581,G__SignalCint_193_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedErr",878,G__SignalCint_193_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedRms",887,G__SignalCint_193_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedRmsErr",1184,G__SignalCint_193_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_193_0_25, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractedSignalBlindPixel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_193_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalBlindPixel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_193_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractedSignalBlindPixel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_193_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractedSignalBlindPixel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_193_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_193_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalBlindPixel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_193_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalBlindPixel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_193_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractedSignalBlindPixel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_193_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractedSignalBlindPixel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractedSignalBlindPixel", 2744, G__SignalCint_193_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractBlindPixel(void) {
   /* MExtractBlindPixel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel));
   G__memfunc_setup("FindAmplitude",1318,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - idx i - 'Int_t' 0 - numsat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractBlindPixel",1811,G__SignalCint_194_0_5, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractBlindPixel), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExtractionType",1663,G__SignalCint_194_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'MExtractBlindPixel::ExtractionType_t' - 10 - typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDataType",984,G__SignalCint_194_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i 'MExtractBlindPixel::DataType_t' - 10 - typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixels",1418,G__SignalCint_194_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MCalibrationBlindCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractionType",1775,G__SignalCint_194_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MExtractBlindPixel::ExtractionType_t' - 10 'kAmplitude' typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDataType",1096,G__SignalCint_194_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MExtractBlindPixel::DataType_t' - 10 'kRawEvt' typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSBFilterLimit",1652,G__SignalCint_194_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 'fgNSBFilterLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRange",793,G__SignalCint_194_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 10 '0' hifirst r - 'UShort_t' 10 '0' hilast "
"i - 'Int_t' 10 '0' lofirst b - 'Byte_t' 10 '0' lolast", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetResolution",1376,G__SignalCint_194_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgResolution' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_194_0_15, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractBlindPixel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_194_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractBlindPixel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_194_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractBlindPixel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_194_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractBlindPixel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_194_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_194_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractBlindPixel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_194_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractBlindPixel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_194_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractBlindPixel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_194_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractBlindPixel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractBlindPixel", 1937, G__SignalCint_194_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractPINDiode(void) {
   /* MExtractPINDiode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractPINDiode",1524,G__SignalCint_198_0_5, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractPINDiode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRange",793,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 0 '0' hifirst r - 'UShort_t' 0 '0' hilast "
"i - 'Int_t' 0 '0' lofirst b - 'Byte_t' 0 '0' lolast", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPINDiodeIdx",1309,G__SignalCint_198_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgPINDiodeIdx' idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLowerFitLimit",1623,G__SignalCint_198_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 10 'fgLowerFitLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpperFitLimit",1626,G__SignalCint_198_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 10 'fgUpperFitLimit' lim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_198_0_10, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractPINDiode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_198_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractPINDiode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_198_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractPINDiode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_198_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractPINDiode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_198_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_198_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractPINDiode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_198_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractPINDiode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_198_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractPINDiode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_198_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractPINDiode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractPINDiode", 1650, G__SignalCint_198_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMArrivalTimeCam(void) {
   /* MArrivalTimeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam));
   G__memfunc_setup("MArrivalTimeCam",1470,G__SignalCint_200_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLogStream",1210,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'MLog' - 0 - lg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSize",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSize",699,G__SignalCint_200_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_200_0_8, 117, G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_200_0_9, 117, G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_200_0_12, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MArrivalTimeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_200_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_200_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MArrivalTimeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_200_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MArrivalTimeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_200_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_200_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_200_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MArrivalTimeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_200_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_200_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MArrivalTimeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MArrivalTimeCam", 1596, G__SignalCint_200_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractTime(void) {
   /* MExtractTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTime));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractTime",1207,G__SignalCint_201_0_2, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetNameTimeCam",1357,G__SignalCint_201_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 'fgNameTimeCam' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_201_0_5, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_201_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_201_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_201_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_201_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_201_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_201_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_201_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_201_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTime::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractTime", 1333, G__SignalCint_201_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractTimeAndCharge(void) {
   /* MExtractTimeAndCharge */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSaturationTime",1753,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 2, 8, 
"i - 'Int_t' 0 - sat0 F - 'Float_t' 10 - sig "
"i - 'Int_t' 0 - maxcont", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MExtractTimeAndCharge",2068,G__SignalCint_202_0_5, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndCharge), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWindowSizeHiGain",1891,G__SignalCint_202_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWindowSizeLoGain",1901,G__SignalCint_202_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainStartShift",1894,G__SignalCint_202_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainSwitch",1484,G__SignalCint_202_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainStartShift",1906,G__SignalCint_202_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgLoGainStartShift' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainSwitch",1496,G__SignalCint_202_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgLoGainSwitch' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWindowSize",1343,G__SignalCint_202_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - windowh i - 'Int_t' 0 - windowl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitArrays",1030,G__SignalCint_202_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindTimeAndChargeHiGain2",2255,G__SignalCint_202_0_14, 121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"b - 'Byte_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindTimeAndChargeLoGain2",2265,G__SignalCint_202_0_15, 121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"b - 'Byte_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__SignalCint_202_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_202_0_18, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractTimeAndCharge::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_202_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndCharge::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_202_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractTimeAndCharge::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_202_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractTimeAndCharge::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_202_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_202_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndCharge::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_202_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndCharge::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_202_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndCharge::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_202_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndCharge::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractTimeAndCharge", 2194, G__SignalCint_202_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractTimeAndChargeSpline(void) {
   /* MExtractTimeAndChargeSpline */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitArrays",1030,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractTimeAndChargeSpline",2687,G__SignalCint_207_0_3, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeSpline), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRiseTimeHiGain",1650,G__SignalCint_207_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFallTimeHiGain",1630,G__SignalCint_207_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRange",793,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 0 '0' hifirst r - 'UShort_t' 0 '0' hilast "
"i - 'Int_t' 0 '0' lofirst b - 'Byte_t' 0 '0' lolast", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetResolution",1376,G__SignalCint_207_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgResolution' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRiseTimeHiGain",1662,G__SignalCint_207_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgRiseTimeHiGain' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFallTimeHiGain",1642,G__SignalCint_207_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgFallTimeHiGain' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHeightTm",1094,G__SignalCint_207_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainStretch",1603,G__SignalCint_207_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgLoGainStretch' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeType",1304,G__SignalCint_207_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MExtralgoSpline::ExtractionType_t' - 10 'MExtralgoSpline::kIntegralRel' typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTimeAndChargeHiGain2",2255,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - firstused i - 'Int_t' 0 - num "
"f - 'Float_t' 1 - sum f - 'Float_t' 1 - dsum "
"f - 'Float_t' 1 - time f - 'Float_t' 1 - dtime "
"b - 'Byte_t' 0 - sat i - 'Int_t' 0 - maxpos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindTimeAndChargeLoGain2",2265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - firstused i - 'Int_t' 0 - num "
"f - 'Float_t' 1 - sum f - 'Float_t' 1 - dsum "
"f - 'Float_t' 1 - time f - 'Float_t' 1 - dtime "
"b - 'Byte_t' 0 - sat i - 'Int_t' 0 - maxpos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_207_0_15, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractTimeAndChargeSpline::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_207_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeSpline::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_207_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractTimeAndChargeSpline::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_207_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractTimeAndChargeSpline::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_207_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_207_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeSpline::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_207_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndChargeSpline::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_207_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeSpline::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_207_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndChargeSpline::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractTimeAndChargeSpline", 2813, G__SignalCint_207_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractTimeAndChargeDigitalFilter(void) {
   /* MExtractTimeAndChargeDigitalFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter));
   G__memfunc_setup("CalcBinningResArrays",2004,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAutomaticWeights",1954,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeights",1019,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadWeightsFile",1495,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 0 - filename u 'TString' - 0 '\"\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompileWeightFileName",2098,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SignalCintLN_TString), -1, 0, 2, 1, 4, 8, 
"u 'TString' - 0 - path u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitArrays",1030,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractTimeAndChargeDigitalFilter",3384,G__SignalCint_209_0_10, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameWeightsFile",1800,G__SignalCint_209_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableAutomaticWeights",2249,G__SignalCint_209_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningResolution",2085,G__SignalCint_209_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 'fgBinningResolutionHiGain' rh i - 'Int_t' 10 'fgBinningResolutionLoGain' rl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWindowSize",1343,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - windowh i - 'Int_t' 0 - windowl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNameWeightsFile",1788,G__SignalCint_209_0_15, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("FindTimeAndChargeHiGain2",2255,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - firstused i - 'Int_t' 0 - num "
"f - 'Float_t' 1 - sum f - 'Float_t' 1 - dsum "
"f - 'Float_t' 1 - time f - 'Float_t' 1 - dtime "
"b - 'Byte_t' 0 - sat i - 'Int_t' 0 - maxpos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindTimeAndChargeLoGain2",2265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 8, 1, 1, 8, 
"F - 'Float_t' 10 - firstused i - 'Int_t' 0 - num "
"f - 'Float_t' 1 - sum f - 'Float_t' 1 - dsum "
"f - 'Float_t' 1 - time f - 'Float_t' 1 - dtime "
"b - 'Byte_t' 0 - sat i - 'Int_t' 0 - maxpos", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_209_0_19, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractTimeAndChargeDigitalFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_209_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeDigitalFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_209_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractTimeAndChargeDigitalFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_209_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractTimeAndChargeDigitalFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_209_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_209_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeDigitalFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_209_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndChargeDigitalFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_209_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractTimeAndChargeDigitalFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_209_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractTimeAndChargeDigitalFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractTimeAndChargeDigitalFilter", 3510, G__SignalCint_209_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMExtractFACT(void) {
   /* MExtractFACT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MExtractFACT",1094,G__SignalCint_210_0_5, 105, G__get_linked_tagnum(&G__SignalCintLN_MExtractFACT), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitArrays",1030,G__SignalCint_210_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SignalCint_210_0_7, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MExtractFACT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_210_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractFACT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_210_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MExtractFACT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_210_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MExtractFACT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_210_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_210_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractFACT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_210_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractFACT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_210_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MExtractFACT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_210_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MExtractFACT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MExtractFACT", 1220, G__SignalCint_210_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSignalPix(void) {
   /* MSignalPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalPix));
   G__memfunc_setup("MSignalPix",988,G__SignalCint_216_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MSignalPix), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 '0' phot f - 'Float_t' 0 '0' errphot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSignalPix",988,G__SignalCint_216_0_2, 105, G__get_linked_tagnum(&G__SignalCintLN_MSignalPix), -1, 0, 1, 1, 1, 0, "u 'MSignalPix' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumPhotons",1339,G__SignalCint_216_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorPhot",1221,G__SignalCint_216_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTime",1408,G__SignalCint_216_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSlope",1202,G__SignalCint_216_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPixelUsed",1103,G__SignalCint_216_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPixelUnmapped",1528,G__SignalCint_216_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelUnused",1442,G__SignalCint_216_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelUsed",1215,G__SignalCint_216_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelUnmapped",1640,G__SignalCint_216_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdxIsland",1196,G__SignalCint_216_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdxIsland",1184,G__SignalCint_216_0_16, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRing",700,G__SignalCint_216_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRing",688,G__SignalCint_216_0_18, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixelCore",1207,G__SignalCint_216_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPixelCore",1095,G__SignalCint_216_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotons",1351,G__SignalCint_216_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetErrorPhot",1233,G__SignalCint_216_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__SignalCint_216_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - np f - 'Float_t' 0 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArrivalTime",1420,G__SignalCint_216_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeSlope",1214,G__SignalCint_216_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_216_0_26, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSignalPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_216_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_216_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSignalPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_216_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSignalPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_216_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_216_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_216_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_216_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_216_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSignalPix", 1114, G__SignalCint_216_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSignalCamIter(void) {
   /* MSignalCamIter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter));
   G__memfunc_setup("MSignalCamIter",1360,G__SignalCint_217_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter), -1, 0, 3, 1, 1, 0, 
"U 'MSignalCam' - 10 - evt g - 'Bool_t' 0 'kTRUE' usedonly "
"g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Next",415,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__SignalCintLN_TIterator), -1, 1, 1, 1, 1, 0, "u 'TIterator' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIdx",581,G__SignalCint_217_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_217_0_6, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSignalCamIter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_217_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCamIter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_217_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSignalCamIter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_217_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSignalCamIter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_217_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_217_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCamIter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_217_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCamIter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_217_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCamIter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_217_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCamIter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MSignalCamIter", 1360, G__SignalCint_217_0_18, (int) ('i'), G__get_linked_tagnum(&G__SignalCintLN_MSignalCamIter), -1, 0, 1, 1, 1, 0, "u 'MSignalCamIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MSignalCamIter", 1486, G__SignalCint_217_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSignalCam(void) {
   /* MSignalCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCam));
   G__memfunc_setup("CalcIsland",974,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 0, 
"u 'MGeomCam' - 11 - geom i - 'Int_t' 0 - idx "
"i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MSignalCam",956,G__SignalCint_218_0_2, 105, G__get_linked_tagnum(&G__SignalCintLN_MSignalCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPixel",779,G__SignalCint_218_0_3, 85, G__get_linked_tagnum(&G__SignalCintLN_MSignalPix), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - idx f - 'Float_t' 0 '0' nph "
"f - 'Float_t' 0 '0' er", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSize",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSinglePixels",1539,G__SignalCint_218_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - num f - 'Float_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPixelsSaturated",2174,G__SignalCint_218_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - hi h - 'UInt_t' 0 - lo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIslandInfo",1299,G__SignalCint_218_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"s - 'Short_t' 0 - num f - 'Float_t' 0 - main "
"f - 'Float_t' 0 - sub", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixels",1221,G__SignalCint_218_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumIslands",1310,G__SignalCint_218_0_9, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSinglePixels",1831,G__SignalCint_218_0_10, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeSinglePixels",1938,G__SignalCint_218_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeSubIslands",1715,G__SignalCint_218_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeMainIsland",1691,G__SignalCint_218_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixelsSaturatedHiGain",2722,G__SignalCint_218_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixelsSaturatedLoGain",2732,G__SignalCint_218_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixelsUnmapped",2047,G__SignalCint_218_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsMin",1631,G__SignalCint_218_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsMax",1633,G__SignalCint_218_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRatioMin",1091,G__SignalCint_218_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRatioMax",1093,G__SignalCint_218_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorPhotMin",1513,G__SignalCint_218_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorPhotMax",1515,G__SignalCint_218_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "U 'MGeomCam' - 10 '0' geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_218_0_23, 117, G__get_linked_tagnum(&G__SignalCintLN_MSignalPix), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SignalCint_218_0_24, 117, G__get_linked_tagnum(&G__SignalCintLN_MSignalPix), -1, 1, 1, 1, 1, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcIslands",1089,G__SignalCint_218_0_25, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompareCleaning",1512,G__SignalCint_218_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MSignalCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompareIslands",1429,G__SignalCint_218_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MSignalCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator TIterator*",1876,G__SignalCint_218_0_34, 85, G__get_linked_tagnum(&G__SignalCintLN_TIterator), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_218_0_35, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSignalCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_218_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_218_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSignalCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_218_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSignalCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_218_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_218_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_218_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_218_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_218_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSignalCam", 1082, G__SignalCint_218_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSignalCalc(void) {
   /* MSignalCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSignalCalc",1054,G__SignalCint_220_0_5, 105, G__get_linked_tagnum(&G__SignalCintLN_MSignalCalc), -1, 0, 4, 1, 1, 0, 
"b - 'Byte_t' 0 '2' b b - 'Byte_t' 0 '5' a "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_220_0_6, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSignalCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_220_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_220_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSignalCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_220_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSignalCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_220_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_220_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_220_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_220_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSignalCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_220_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSignalCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSignalCalc", 1180, G__SignalCint_220_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFilterData(void) {
   /* MFilterData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MFilterData));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFilterData",1069,G__SignalCint_221_0_3, 105, G__get_linked_tagnum(&G__SignalCintLN_MFilterData), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalIn",1474,G__SignalCint_221_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MPedestalSubtractedEvt\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalOut",1603,G__SignalCint_221_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MPedestalSubtractedEvt\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeights",1031,G__SignalCint_221_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' 'vector<float>' 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverage",999,G__SignalCint_221_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Filter",614,G__SignalCint_221_0_8, 121, -1, -1, 0, 4, 1, 1, 8, 
"r - 'UShort_t' 0 - npix r - 'UShort_t' 0 - nroi "
"F - 'Float_t' 10 - beg F - 'Float_t' 0 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_221_0_9, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFilterData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_221_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_221_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFilterData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_221_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFilterData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_221_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_221_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_221_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFilterData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_221_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_221_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFilterData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MFilterData", 1195, G__SignalCint_221_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTreatSaturation(void) {
   /* MTreatSaturation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MTreatSaturation",1655,G__SignalCint_226_0_3, 105, G__get_linked_tagnum(&G__SignalCintLN_MTreatSaturation), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_226_0_4, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTreatSaturation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_226_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreatSaturation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_226_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTreatSaturation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_226_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTreatSaturation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_226_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreatSaturation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_226_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTreatSaturation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTreatSaturation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTreatSaturation::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MTreatSaturation", 1781, G__SignalCint_226_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMArrivalTimePix(void) {
   /* MArrivalTimePix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix));
   G__memfunc_setup("MArrivalTimePix",1502,G__SignalCint_227_0_1, 105, G__get_linked_tagnum(&G__SignalCintLN_MArrivalTimePix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetArrivalTime",1420,G__SignalCint_227_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - sig f - 'Float_t' 0 '0' sigerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArrivalTime",1420,G__SignalCint_227_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - sighi f - 'Float_t' 0 - sighierr "
"f - 'Float_t' 0 - siglo f - 'Float_t' 0 - sigloerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGainSaturation",1749,G__SignalCint_227_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 0 - higain b - 'Byte_t' 0 '0' logain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTimeHiGain",1968,G__SignalCint_227_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTimeHiGainError",2490,G__SignalCint_227_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTimeLoGain",1978,G__SignalCint_227_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTimeLoGainError",2500,G__SignalCint_227_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrivalTime",1408,G__SignalCint_227_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsArrivalTimeValid",1804,G__SignalCint_227_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainSaturated",2093,G__SignalCint_227_0_14, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainSaturated",2103,G__SignalCint_227_0_15, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiGainSaturated",1689,G__SignalCint_227_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoGainSaturated",1699,G__SignalCint_227_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLoGainValid",1254,G__SignalCint_227_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiGainValid",1244,G__SignalCint_227_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SignalCint_227_0_20, 85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MArrivalTimePix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SignalCint_227_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimePix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SignalCint_227_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MArrivalTimePix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SignalCint_227_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MArrivalTimePix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SignalCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SignalCint_227_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SignalCint_227_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimePix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SignalCint_227_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MArrivalTimePix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SignalCint_227_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MArrivalTimePix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SignalCint_227_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MArrivalTimePix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MArrivalTimePix", 1628, G__SignalCint_227_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSignalCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSignalCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSignalCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SignalCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SignalCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MLog = { "MLog" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractedSignalPix = { "MExtractedSignalPix" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractedSignalCam = { "MExtractedSignalCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractedSignalPINDiode = { "MExtractedSignalPINDiode" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MPedestalSubtractedEvt = { "MPedestalSubtractedEvt" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractor = { "MExtractor" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MCalibrationBlindCam = { "MCalibrationBlindCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractedSignalBlindPixel = { "MExtractedSignalBlindPixel" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractBlindPixel = { "MExtractBlindPixel" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t = { "MExtractBlindPixel::ExtractionType_t" , 101 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractBlindPixelcLcLDataType_t = { "MExtractBlindPixel::DataType_t" , 101 , -1 };
G__linked_taginfo G__SignalCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractPINDiode = { "MExtractPINDiode" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MArrivalTimeCam = { "MArrivalTimeCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractTime = { "MExtractTime" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractTimeAndCharge = { "MExtractTimeAndCharge" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtralgoSpline = { "MExtralgoSpline" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtralgoSplinecLcLExtractionType_t = { "MExtralgoSpline::ExtractionType_t" , 101 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractTimeAndChargeSpline = { "MExtractTimeAndChargeSpline" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MCalibrationPattern = { "MCalibrationPattern" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractTimeAndChargeDigitalFilter = { "MExtractTimeAndChargeDigitalFilter" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MExtractFACT = { "MExtractFACT" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_TObjArrayIter = { "TObjArrayIter" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MSignalPix = { "MSignalPix" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MSignalCamIter = { "MSignalCamIter" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MPedestalCam = { "MPedestalCam" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MSignalCalc = { "MSignalCalc" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MFilterData = { "MFilterData" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MTreatSaturation = { "MTreatSaturation" , 99 , -1 };
G__linked_taginfo G__SignalCintLN_MArrivalTimePix = { "MArrivalTimePix" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSignalCint() {
  G__SignalCintLN_TClass.tagnum = -1 ;
  G__SignalCintLN_TBuffer.tagnum = -1 ;
  G__SignalCintLN_TMemberInspector.tagnum = -1 ;
  G__SignalCintLN_TObject.tagnum = -1 ;
  G__SignalCintLN_TString.tagnum = -1 ;
  G__SignalCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SignalCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SignalCintLN_TClonesArray.tagnum = -1 ;
  G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SignalCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SignalCintLN_TIterator.tagnum = -1 ;
  G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SignalCintLN_TEnv.tagnum = -1 ;
  G__SignalCintLN_MLog.tagnum = -1 ;
  G__SignalCintLN_MParContainer.tagnum = -1 ;
  G__SignalCintLN_MGeomCam.tagnum = -1 ;
  G__SignalCintLN_MCamEvent.tagnum = -1 ;
  G__SignalCintLN_MExtractedSignalPix.tagnum = -1 ;
  G__SignalCintLN_MExtractedSignalCam.tagnum = -1 ;
  G__SignalCintLN_MExtractedSignalPINDiode.tagnum = -1 ;
  G__SignalCintLN_TArrayI.tagnum = -1 ;
  G__SignalCintLN_TArrayF.tagnum = -1 ;
  G__SignalCintLN_MInputStreamID.tagnum = -1 ;
  G__SignalCintLN_MParList.tagnum = -1 ;
  G__SignalCintLN_MTask.tagnum = -1 ;
  G__SignalCintLN_MRawEvtData.tagnum = -1 ;
  G__SignalCintLN_MRawRunHeader.tagnum = -1 ;
  G__SignalCintLN_MPedestalSubtractedEvt.tagnum = -1 ;
  G__SignalCintLN_MExtractor.tagnum = -1 ;
  G__SignalCintLN_MArrayI.tagnum = -1 ;
  G__SignalCintLN_MArrayF.tagnum = -1 ;
  G__SignalCintLN_MCalibrationBlindCam.tagnum = -1 ;
  G__SignalCintLN_MExtractedSignalBlindPixel.tagnum = -1 ;
  G__SignalCintLN_MExtractBlindPixel.tagnum = -1 ;
  G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t.tagnum = -1 ;
  G__SignalCintLN_MExtractBlindPixelcLcLDataType_t.tagnum = -1 ;
  G__SignalCintLN_TH1F.tagnum = -1 ;
  G__SignalCintLN_MExtractPINDiode.tagnum = -1 ;
  G__SignalCintLN_MArrivalTimeCam.tagnum = -1 ;
  G__SignalCintLN_MExtractTime.tagnum = -1 ;
  G__SignalCintLN_MExtractTimeAndCharge.tagnum = -1 ;
  G__SignalCintLN_MExtralgoSpline.tagnum = -1 ;
  G__SignalCintLN_MExtralgoSplinecLcLExtractionType_t.tagnum = -1 ;
  G__SignalCintLN_MExtractTimeAndChargeSpline.tagnum = -1 ;
  G__SignalCintLN_MCalibrationPattern.tagnum = -1 ;
  G__SignalCintLN_MExtractTimeAndChargeDigitalFilter.tagnum = -1 ;
  G__SignalCintLN_MExtractFACT.tagnum = -1 ;
  G__SignalCintLN_TObjArrayIter.tagnum = -1 ;
  G__SignalCintLN_MSignalPix.tagnum = -1 ;
  G__SignalCintLN_MSignalCamIter.tagnum = -1 ;
  G__SignalCintLN_MSignalCam.tagnum = -1 ;
  G__SignalCintLN_MPedestalCam.tagnum = -1 ;
  G__SignalCintLN_MSignalCalc.tagnum = -1 ;
  G__SignalCintLN_MFilterData.tagnum = -1 ;
  G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__SignalCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SignalCintLN_MTreatSaturation.tagnum = -1 ;
  G__SignalCintLN_MArrivalTimePix.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSignalCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TString);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TIterator);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MLog);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MCamEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractedSignalPix),sizeof(MExtractedSignalPix),-1,323840,"Storage Container for Extracted Signal information of one pixel",G__setup_memvarMExtractedSignalPix,G__setup_memfuncMExtractedSignalPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractedSignalCam),sizeof(MExtractedSignalCam),-1,324864,"Storage Container for extracted signals in the camera",G__setup_memvarMExtractedSignalCam,G__setup_memfuncMExtractedSignalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractedSignalPINDiode),sizeof(MExtractedSignalPINDiode),-1,323840,"Storage Container for Extracted Signal information of one pixel",G__setup_memvarMExtractedSignalPINDiode,G__setup_memfuncMExtractedSignalPINDiode);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MRawEvtData);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MPedestalSubtractedEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractor),sizeof(MExtractor),-1,323840,"Signal Extractor Base Class",G__setup_memvarMExtractor,G__setup_memfuncMExtractor);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MArrayI);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MCalibrationBlindCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractedSignalBlindPixel),sizeof(MExtractedSignalBlindPixel),-1,323840,"Storage Container for extracted signal of Blind Pixel",G__setup_memvarMExtractedSignalBlindPixel,G__setup_memfuncMExtractedSignalBlindPixel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractBlindPixel),sizeof(MExtractBlindPixel),-1,323840,"Signal Extractor for the Blind Pixel",G__setup_memvarMExtractBlindPixel,G__setup_memfuncMExtractBlindPixel);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractBlindPixelcLcLExtractionType_t);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractBlindPixelcLcLDataType_t);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractPINDiode),sizeof(MExtractPINDiode),-1,324864,"Signal Extractor for the PIN Diode",G__setup_memvarMExtractPINDiode,G__setup_memfuncMExtractPINDiode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MArrivalTimeCam),sizeof(MArrivalTimeCam),-1,324864,"Storage Container for the ArrivalTime in the camera",G__setup_memvarMArrivalTimeCam,G__setup_memfuncMArrivalTimeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractTime),sizeof(MExtractTime),-1,323840,"Arrival Time Extractor Base Class",G__setup_memvarMExtractTime,G__setup_memfuncMExtractTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractTimeAndCharge),sizeof(MExtractTimeAndCharge),-1,323840,"Time And Charge Extractor Base Class",G__setup_memvarMExtractTimeAndCharge,G__setup_memfuncMExtractTimeAndCharge);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtralgoSpline);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtralgoSplinecLcLExtractionType_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractTimeAndChargeSpline),sizeof(MExtractTimeAndChargeSpline),-1,323840,"Task to Extract Arrival Times and Charges using a Cubic Spline",G__setup_memvarMExtractTimeAndChargeSpline,G__setup_memfuncMExtractTimeAndChargeSpline);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MCalibrationPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractTimeAndChargeDigitalFilter),sizeof(MExtractTimeAndChargeDigitalFilter),-1,324864,"Hendrik's digital filter",G__setup_memvarMExtractTimeAndChargeDigitalFilter,G__setup_memfuncMExtractTimeAndChargeDigitalFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MExtractFACT),sizeof(MExtractFACT),-1,323840,"Time And Charge Extractor Base Class",G__setup_memvarMExtractFACT,G__setup_memfuncMExtractFACT);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_TObjArrayIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MSignalPix),sizeof(MSignalPix),-1,324352,"class containing information about the Cerenkov Photons in a pixel",G__setup_memvarMSignalPix,G__setup_memfuncMSignalPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MSignalCamIter),sizeof(MSignalCamIter),-1,296960,(char*)NULL,G__setup_memvarMSignalCamIter,G__setup_memfuncMSignalCamIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MSignalCam),sizeof(MSignalCam),-1,324864,"class for an event containing cerenkov photons",G__setup_memvarMSignalCam,G__setup_memfuncMSignalCam);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_MPedestalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MSignalCalc),sizeof(MSignalCalc),-1,323840,"Task to calculate cerenkov photons from raw data",G__setup_memvarMSignalCalc,G__setup_memfuncMSignalCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MFilterData),sizeof(MFilterData),-1,323840,"Class to filter the calibrated data",G__setup_memvarMFilterData,G__setup_memfuncMFilterData);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__SignalCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MTreatSaturation),sizeof(MTreatSaturation),-1,323840,"Replace saturating samples with pulse",G__setup_memvarMTreatSaturation,G__setup_memfuncMTreatSaturation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SignalCintLN_MArrivalTimePix),sizeof(MArrivalTimePix),-1,323840,"Storage Container for ArrivalTime information of one pixel",G__setup_memvarMArrivalTimePix,G__setup_memfuncMArrivalTimePix);
}
extern "C" void G__cpp_setupSignalCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupSignalCint()");
  G__set_cpp_environmentSignalCint();
  G__cpp_setup_tagtableSignalCint();

  G__cpp_setup_inheritanceSignalCint();

  G__cpp_setup_typetableSignalCint();

  G__cpp_setup_memvarSignalCint();

  G__cpp_setup_memfuncSignalCint();
  G__cpp_setup_globalSignalCint();
  G__cpp_setup_funcSignalCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSignalCint();
  return;
}
class G__cpp_setup_initSignalCint {
  public:
    G__cpp_setup_initSignalCint() { G__add_setup_func("SignalCint",(G__incsetup)(&G__cpp_setupSignalCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSignalCint() { G__remove_setup_func("SignalCint"); }
};
G__cpp_setup_initSignalCint G__cpp_setup_initializerSignalCint;

