//
// File generated by rootcint at Mon Nov 28 11:06:41 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME SimReflectorCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SimReflectorCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MReflector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReflector(void *p = 0);
   static void *newArray_MReflector(Long_t size, void *p);
   static void delete_MReflector(void *p);
   static void deleteArray_MReflector(void *p);
   static void destruct_MReflector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReflector*)
   {
      ::MReflector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReflector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReflector", ::MReflector::Class_Version(), "./MReflector.h", 16,
                  typeid(::MReflector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReflector::Dictionary, isa_proxy, 4,
                  sizeof(::MReflector) );
      instance.SetNew(&new_MReflector);
      instance.SetNewArray(&newArray_MReflector);
      instance.SetDelete(&delete_MReflector);
      instance.SetDeleteArray(&deleteArray_MReflector);
      instance.SetDestructor(&destruct_MReflector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReflector*)
   {
      return GenerateInitInstanceLocal((::MReflector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReflector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimReflector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimReflector(void *p = 0);
   static void *newArray_MSimReflector(Long_t size, void *p);
   static void delete_MSimReflector(void *p);
   static void deleteArray_MSimReflector(void *p);
   static void destruct_MSimReflector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimReflector*)
   {
      ::MSimReflector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimReflector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimReflector", ::MSimReflector::Class_Version(), "./MSimReflector.h", 17,
                  typeid(::MSimReflector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimReflector::Dictionary, isa_proxy, 4,
                  sizeof(::MSimReflector) );
      instance.SetNew(&new_MSimReflector);
      instance.SetNewArray(&newArray_MSimReflector);
      instance.SetDelete(&delete_MSimReflector);
      instance.SetDeleteArray(&deleteArray_MSimReflector);
      instance.SetDestructor(&destruct_MSimReflector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimReflector*)
   {
      return GenerateInitInstanceLocal((::MSimReflector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimReflector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimRays_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimRays(void *p = 0);
   static void *newArray_MSimRays(Long_t size, void *p);
   static void delete_MSimRays(void *p);
   static void deleteArray_MSimRays(void *p);
   static void destruct_MSimRays(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimRays*)
   {
      ::MSimRays *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimRays >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimRays", ::MSimRays::Class_Version(), "./MSimRays.h", 17,
                  typeid(::MSimRays), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimRays::Dictionary, isa_proxy, 4,
                  sizeof(::MSimRays) );
      instance.SetNew(&new_MSimRays);
      instance.SetNewArray(&newArray_MSimRays);
      instance.SetDelete(&delete_MSimRays);
      instance.SetDeleteArray(&deleteArray_MSimRays);
      instance.SetDestructor(&destruct_MSimRays);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimRays*)
   {
      return GenerateInitInstanceLocal((::MSimRays*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimRays*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirror_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MMirror(void *p);
   static void deleteArray_MMirror(void *p);
   static void destruct_MMirror(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirror*)
   {
      ::MMirror *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirror >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirror", ::MMirror::Class_Version(), "./MMirror.h", 11,
                  typeid(::MMirror), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirror::Dictionary, isa_proxy, 4,
                  sizeof(::MMirror) );
      instance.SetDelete(&delete_MMirror);
      instance.SetDeleteArray(&deleteArray_MMirror);
      instance.SetDestructor(&destruct_MMirror);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirror*)
   {
      return GenerateInitInstanceLocal((::MMirror*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirror*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirrorSquare_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMirrorSquare(void *p = 0);
   static void *newArray_MMirrorSquare(Long_t size, void *p);
   static void delete_MMirrorSquare(void *p);
   static void deleteArray_MMirrorSquare(void *p);
   static void destruct_MMirrorSquare(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirrorSquare*)
   {
      ::MMirrorSquare *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirrorSquare >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirrorSquare", ::MMirrorSquare::Class_Version(), "./MMirrorSquare.h", 9,
                  typeid(::MMirrorSquare), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirrorSquare::Dictionary, isa_proxy, 4,
                  sizeof(::MMirrorSquare) );
      instance.SetNew(&new_MMirrorSquare);
      instance.SetNewArray(&newArray_MMirrorSquare);
      instance.SetDelete(&delete_MMirrorSquare);
      instance.SetDeleteArray(&deleteArray_MMirrorSquare);
      instance.SetDestructor(&destruct_MMirrorSquare);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirrorSquare*)
   {
      return GenerateInitInstanceLocal((::MMirrorSquare*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirrorSquare*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirrorHex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMirrorHex(void *p = 0);
   static void *newArray_MMirrorHex(Long_t size, void *p);
   static void delete_MMirrorHex(void *p);
   static void deleteArray_MMirrorHex(void *p);
   static void destruct_MMirrorHex(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirrorHex*)
   {
      ::MMirrorHex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirrorHex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirrorHex", ::MMirrorHex::Class_Version(), "./MMirrorHex.h", 9,
                  typeid(::MMirrorHex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirrorHex::Dictionary, isa_proxy, 4,
                  sizeof(::MMirrorHex) );
      instance.SetNew(&new_MMirrorHex);
      instance.SetNewArray(&newArray_MMirrorHex);
      instance.SetDelete(&delete_MMirrorHex);
      instance.SetDeleteArray(&deleteArray_MMirrorHex);
      instance.SetDestructor(&destruct_MMirrorHex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirrorHex*)
   {
      return GenerateInitInstanceLocal((::MMirrorHex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirrorHex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirrorHex90_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMirrorHex90(void *p = 0);
   static void *newArray_MMirrorHex90(Long_t size, void *p);
   static void delete_MMirrorHex90(void *p);
   static void deleteArray_MMirrorHex90(void *p);
   static void destruct_MMirrorHex90(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirrorHex90*)
   {
      ::MMirrorHex90 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirrorHex90 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirrorHex90", ::MMirrorHex90::Class_Version(), "./MMirrorHex.h", 42,
                  typeid(::MMirrorHex90), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirrorHex90::Dictionary, isa_proxy, 4,
                  sizeof(::MMirrorHex90) );
      instance.SetNew(&new_MMirrorHex90);
      instance.SetNewArray(&newArray_MMirrorHex90);
      instance.SetDelete(&delete_MMirrorHex90);
      instance.SetDeleteArray(&deleteArray_MMirrorHex90);
      instance.SetDestructor(&destruct_MMirrorHex90);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirrorHex90*)
   {
      return GenerateInitInstanceLocal((::MMirrorHex90*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirrorHex90*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirrorHex15_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMirrorHex15(void *p = 0);
   static void *newArray_MMirrorHex15(Long_t size, void *p);
   static void delete_MMirrorHex15(void *p);
   static void deleteArray_MMirrorHex15(void *p);
   static void destruct_MMirrorHex15(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirrorHex15*)
   {
      ::MMirrorHex15 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirrorHex15 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirrorHex15", ::MMirrorHex15::Class_Version(), "./MMirrorHex.h", 56,
                  typeid(::MMirrorHex15), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirrorHex15::Dictionary, isa_proxy, 4,
                  sizeof(::MMirrorHex15) );
      instance.SetNew(&new_MMirrorHex15);
      instance.SetNewArray(&newArray_MMirrorHex15);
      instance.SetDelete(&delete_MMirrorHex15);
      instance.SetDeleteArray(&deleteArray_MMirrorHex15);
      instance.SetDestructor(&destruct_MMirrorHex15);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirrorHex15*)
   {
      return GenerateInitInstanceLocal((::MMirrorHex15*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirrorHex15*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMirrorDisk_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMirrorDisk(void *p = 0);
   static void *newArray_MMirrorDisk(Long_t size, void *p);
   static void delete_MMirrorDisk(void *p);
   static void deleteArray_MMirrorDisk(void *p);
   static void destruct_MMirrorDisk(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMirrorDisk*)
   {
      ::MMirrorDisk *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMirrorDisk >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMirrorDisk", ::MMirrorDisk::Class_Version(), "./MMirrorDisk.h", 9,
                  typeid(::MMirrorDisk), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMirrorDisk::Dictionary, isa_proxy, 4,
                  sizeof(::MMirrorDisk) );
      instance.SetNew(&new_MMirrorDisk);
      instance.SetNewArray(&newArray_MMirrorDisk);
      instance.SetDelete(&delete_MMirrorDisk);
      instance.SetDeleteArray(&deleteArray_MMirrorDisk);
      instance.SetDestructor(&destruct_MMirrorDisk);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMirrorDisk*)
   {
      return GenerateInitInstanceLocal((::MMirrorDisk*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMirrorDisk*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MReflector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReflector::Class_Name()
{
   return "MReflector";
}

//______________________________________________________________________________
const char *MReflector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReflector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReflector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReflector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReflector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReflector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReflector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReflector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimReflector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimReflector::Class_Name()
{
   return "MSimReflector";
}

//______________________________________________________________________________
const char *MSimReflector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReflector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimReflector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReflector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimReflector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReflector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimReflector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimReflector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimRays::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimRays::Class_Name()
{
   return "MSimRays";
}

//______________________________________________________________________________
const char *MSimRays::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRays*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimRays::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRays*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimRays::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRays*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimRays::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimRays*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirror::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirror::Class_Name()
{
   return "MMirror";
}

//______________________________________________________________________________
const char *MMirror::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirror*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirror::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirror*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirror::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirror*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirror::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirror*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirrorSquare::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirrorSquare::Class_Name()
{
   return "MMirrorSquare";
}

//______________________________________________________________________________
const char *MMirrorSquare::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorSquare*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirrorSquare::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorSquare*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirrorSquare::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorSquare*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirrorSquare::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorSquare*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirrorHex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirrorHex::Class_Name()
{
   return "MMirrorHex";
}

//______________________________________________________________________________
const char *MMirrorHex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirrorHex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirrorHex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirrorHex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirrorHex90::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirrorHex90::Class_Name()
{
   return "MMirrorHex90";
}

//______________________________________________________________________________
const char *MMirrorHex90::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex90*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirrorHex90::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex90*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirrorHex90::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex90*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirrorHex90::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex90*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirrorHex15::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirrorHex15::Class_Name()
{
   return "MMirrorHex15";
}

//______________________________________________________________________________
const char *MMirrorHex15::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex15*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirrorHex15::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex15*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirrorHex15::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex15*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirrorHex15::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorHex15*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMirrorDisk::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMirrorDisk::Class_Name()
{
   return "MMirrorDisk";
}

//______________________________________________________________________________
const char *MMirrorDisk::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorDisk*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMirrorDisk::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorDisk*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMirrorDisk::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorDisk*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMirrorDisk::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMirrorDisk*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MSimReflector::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimReflector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimReflector::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimReflector::Class(),this);
   }
}

//______________________________________________________________________________
void MSimReflector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimReflector.
      TClass *R__cl = ::MSimReflector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirror0", &fMirror0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirror1", &fMirror1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirror2", &fMirror2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirror3", &fMirror3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMirror4", &fMirror4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReflector", &fReflector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointing", &fPointing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameReflector", &fNameReflector);
      R__insp.InspectMember(fNameReflector, "fNameReflector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorFrame", &fDetectorFrame);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectorMargin", &fDetectorMargin);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimReflector(void *p) {
      return  p ? new(p) ::MSimReflector : new ::MSimReflector;
   }
   static void *newArray_MSimReflector(Long_t nElements, void *p) {
      return p ? new(p) ::MSimReflector[nElements] : new ::MSimReflector[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimReflector(void *p) {
      delete ((::MSimReflector*)p);
   }
   static void deleteArray_MSimReflector(void *p) {
      delete [] ((::MSimReflector*)p);
   }
   static void destruct_MSimReflector(void *p) {
      typedef ::MSimReflector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimReflector

//______________________________________________________________________________
void MSimRays::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimRays.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimRays::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimRays::Class(),this);
   }
}

//______________________________________________________________________________
void MSimRays::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimRays.
      TClass *R__cl = ::MSimRays::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReflector", &fReflector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSource", &fSource);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotons", &fNumPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeight", &fHeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameReflector", &fNameReflector);
      R__insp.InspectMember(fNameReflector, "fNameReflector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamePointPos", &fNamePointPos);
      R__insp.InspectMember(fNamePointPos, "fNamePointPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSource", &fNameSource);
      R__insp.InspectMember(fNameSource, "fNameSource.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimRays(void *p) {
      return  p ? new(p) ::MSimRays : new ::MSimRays;
   }
   static void *newArray_MSimRays(Long_t nElements, void *p) {
      return p ? new(p) ::MSimRays[nElements] : new ::MSimRays[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimRays(void *p) {
      delete ((::MSimRays*)p);
   }
   static void deleteArray_MSimRays(void *p) {
      delete [] ((::MSimRays*)p);
   }
   static void destruct_MSimRays(void *p) {
      typedef ::MSimRays current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimRays

//______________________________________________________________________________
void MReflector::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReflector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReflector::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReflector::Class(),this);
   }
}

//______________________________________________________________________________
void MReflector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReflector.
      TClass *R__cl = ::MReflector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMirrors", &fMirrors);
      R__insp.InspectMember(fMirrors, "fMirrors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxR", &fMaxR);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReflector(void *p) {
      return  p ? new(p) ::MReflector : new ::MReflector;
   }
   static void *newArray_MReflector(Long_t nElements, void *p) {
      return p ? new(p) ::MReflector[nElements] : new ::MReflector[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReflector(void *p) {
      delete ((::MReflector*)p);
   }
   static void deleteArray_MReflector(void *p) {
      delete [] ((::MReflector*)p);
   }
   static void destruct_MReflector(void *p) {
      typedef ::MReflector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReflector

//______________________________________________________________________________
void MMirror::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirror.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirror::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirror::Class(),this);
   }
}

//______________________________________________________________________________
void MMirror::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirror.
      TClass *R__cl = ::MMirror::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNorm", &fNorm);
      R__insp.InspectMember(fNorm, "fNorm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTilt", &fTilt);
      R__insp.InspectMember(fTilt, "fTilt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFocalLength", &fFocalLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaPSF", &fSigmaPSF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShape", &fShape);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MMirror(void *p) {
      delete ((::MMirror*)p);
   }
   static void deleteArray_MMirror(void *p) {
      delete [] ((::MMirror*)p);
   }
   static void destruct_MMirror(void *p) {
      typedef ::MMirror current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirror

//______________________________________________________________________________
void MMirrorSquare::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirrorSquare.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirrorSquare::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirrorSquare::Class(),this);
   }
}

//______________________________________________________________________________
void MMirrorSquare::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirrorSquare.
      TClass *R__cl = ::MMirrorSquare::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSideLength", &fSideLength);
      MMirror::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMirrorSquare(void *p) {
      return  p ? new(p) ::MMirrorSquare : new ::MMirrorSquare;
   }
   static void *newArray_MMirrorSquare(Long_t nElements, void *p) {
      return p ? new(p) ::MMirrorSquare[nElements] : new ::MMirrorSquare[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMirrorSquare(void *p) {
      delete ((::MMirrorSquare*)p);
   }
   static void deleteArray_MMirrorSquare(void *p) {
      delete [] ((::MMirrorSquare*)p);
   }
   static void destruct_MMirrorSquare(void *p) {
      typedef ::MMirrorSquare current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirrorSquare

//______________________________________________________________________________
void MMirrorDisk::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirrorDisk.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirrorDisk::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirrorDisk::Class(),this);
   }
}

//______________________________________________________________________________
void MMirrorDisk::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirrorDisk.
      TClass *R__cl = ::MMirrorDisk::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR", &fR);
      MMirror::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMirrorDisk(void *p) {
      return  p ? new(p) ::MMirrorDisk : new ::MMirrorDisk;
   }
   static void *newArray_MMirrorDisk(Long_t nElements, void *p) {
      return p ? new(p) ::MMirrorDisk[nElements] : new ::MMirrorDisk[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMirrorDisk(void *p) {
      delete ((::MMirrorDisk*)p);
   }
   static void deleteArray_MMirrorDisk(void *p) {
      delete [] ((::MMirrorDisk*)p);
   }
   static void destruct_MMirrorDisk(void *p) {
      typedef ::MMirrorDisk current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirrorDisk

//______________________________________________________________________________
void MMirrorHex::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirrorHex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirrorHex::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirrorHex::Class(),this);
   }
}

//______________________________________________________________________________
void MMirrorHex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirrorHex.
      TClass *R__cl = ::MMirrorHex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fD", &fD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxR", &fMaxR);
      MMirror::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMirrorHex(void *p) {
      return  p ? new(p) ::MMirrorHex : new ::MMirrorHex;
   }
   static void *newArray_MMirrorHex(Long_t nElements, void *p) {
      return p ? new(p) ::MMirrorHex[nElements] : new ::MMirrorHex[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMirrorHex(void *p) {
      delete ((::MMirrorHex*)p);
   }
   static void deleteArray_MMirrorHex(void *p) {
      delete [] ((::MMirrorHex*)p);
   }
   static void destruct_MMirrorHex(void *p) {
      typedef ::MMirrorHex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirrorHex

//______________________________________________________________________________
void MMirrorHex15::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirrorHex15.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirrorHex15::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirrorHex15::Class(),this);
   }
}

//______________________________________________________________________________
void MMirrorHex15::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirrorHex15.
      TClass *R__cl = ::MMirrorHex15::IsA();
      if (R__cl || R__insp.IsA()) { }
      MMirrorHex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMirrorHex15(void *p) {
      return  p ? new(p) ::MMirrorHex15 : new ::MMirrorHex15;
   }
   static void *newArray_MMirrorHex15(Long_t nElements, void *p) {
      return p ? new(p) ::MMirrorHex15[nElements] : new ::MMirrorHex15[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMirrorHex15(void *p) {
      delete ((::MMirrorHex15*)p);
   }
   static void deleteArray_MMirrorHex15(void *p) {
      delete [] ((::MMirrorHex15*)p);
   }
   static void destruct_MMirrorHex15(void *p) {
      typedef ::MMirrorHex15 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirrorHex15

//______________________________________________________________________________
void MMirrorHex90::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMirrorHex90.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMirrorHex90::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMirrorHex90::Class(),this);
   }
}

//______________________________________________________________________________
void MMirrorHex90::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMirrorHex90.
      TClass *R__cl = ::MMirrorHex90::IsA();
      if (R__cl || R__insp.IsA()) { }
      MMirrorHex::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMirrorHex90(void *p) {
      return  p ? new(p) ::MMirrorHex90 : new ::MMirrorHex90;
   }
   static void *newArray_MMirrorHex90(Long_t nElements, void *p) {
      return p ? new(p) ::MMirrorHex90[nElements] : new ::MMirrorHex90[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMirrorHex90(void *p) {
      delete ((::MMirrorHex90*)p);
   }
   static void deleteArray_MMirrorHex90(void *p) {
      delete [] ((::MMirrorHex90*)p);
   }
   static void destruct_MMirrorHex90(void *p) {
      typedef ::MMirrorHex90 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMirrorHex90

/********************************************************
* SimReflectorCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSimReflectorCint();

extern "C" void G__set_cpp_environmentSimReflectorCint() {
  G__cpp_reset_tagtableSimReflectorCint();
}
#include <new>
extern "C" int G__cpp_dllrevSimReflectorCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MReflector */
static int G__SimReflectorCint_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReflector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReflector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MReflector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReflector((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReflector((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MReflector[n];
       } else {
         p = new((void*) gvp) MReflector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MReflector;
       } else {
         p = new((void*) gvp) MReflector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MReflector*) G__getstructoffset())->GetFirstPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MReflector*) G__getstructoffset())->GetNumMirrors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MReflector*) G__getstructoffset())->GetMirror((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MReflector*) G__getstructoffset())->ReadFile(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MReflector*) G__getstructoffset())->ReadFile(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReflector*) G__getstructoffset())->WriteFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReflector*) G__getstructoffset())->GetMaxR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReflector*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReflector*) G__getstructoffset())->CanHit(*(MQuaternion*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MReflector*) G__getstructoffset())->ExecuteReflector(*(MQuaternion*) libp->para[0].ref, *(MQuaternion*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReflector*) G__getstructoffset())->SetSigmaPSF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReflector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReflector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReflector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReflector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReflector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReflector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReflector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReflector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_181_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReflector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReflector G__TMReflector;
static int G__SimReflectorCint_181_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReflector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReflector*) (soff+(sizeof(MReflector)*i)))->~G__TMReflector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReflector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReflector*) (soff))->~G__TMReflector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimReflector */
static int G__SimReflectorCint_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimReflector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimReflector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimReflector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimReflector((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimReflector((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimReflector[n];
       } else {
         p = new((void*) gvp) MSimReflector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimReflector;
       } else {
         p = new((void*) gvp) MSimReflector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimReflector*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimReflector*) G__getstructoffset())->SetNameGeomCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimReflector*) G__getstructoffset())->SetNameReflector((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimReflector*) G__getstructoffset())->SetNameReflector();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimReflector*) G__getstructoffset())->SetDetectorFrame((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimReflector*) G__getstructoffset())->SetDetectorFrame();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimReflector*) G__getstructoffset())->SetDetectorMargin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimReflector*) G__getstructoffset())->SetDetectorMargin();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimReflector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReflector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimReflector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimReflector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimReflector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReflector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimReflector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimReflector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_182_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimReflector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimReflector G__TMSimReflector;
static int G__SimReflectorCint_182_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimReflector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimReflector*) (soff+(sizeof(MSimReflector)*i)))->~G__TMSimReflector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimReflector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimReflector*) (soff))->~G__TMSimReflector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimRays */
static int G__SimReflectorCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimRays* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimRays((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSimRays((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimRays((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSimRays((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimRays[n];
       } else {
         p = new((void*) gvp) MSimRays[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSimRays;
       } else {
         p = new((void*) gvp) MSimRays;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimRays*) G__getstructoffset())->SetNameReflector((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimRays*) G__getstructoffset())->SetNameReflector();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimRays*) G__getstructoffset())->SetNamePointPos((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimRays*) G__getstructoffset())->SetNamePointPos();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimRays*) G__getstructoffset())->SetNameSource((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimRays*) G__getstructoffset())->SetNameSource();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MSimRays*) G__getstructoffset())->SetHeight((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MSimRays*) G__getstructoffset())->SetHeight();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimRays*) G__getstructoffset())->SetNumPhotons((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimRays::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRays::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimRays::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimRays::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimRays*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRays::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimRays::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimRays::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimRays::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimRays G__TMSimRays;
static int G__SimReflectorCint_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimRays*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimRays*) (soff+(sizeof(MSimRays)*i)))->~G__TMSimRays();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimRays*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimRays*) (soff))->~G__TMSimRays();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirror */
static int G__SimReflectorCint_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MMirror*) G__getstructoffset())->operator-(*(MQuaternion*) libp->para[0].ref);
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MMirror*) G__getstructoffset())->operator-(*(MMirror*) libp->para[0].ref);
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetSigmaPSF((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetFocalLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetPosition(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetNorm(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetShape((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->SetZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->X());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->Y());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->Z());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->Nx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->Ny());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->Nz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MMirror*) G__getstructoffset())->GetPosXY();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const MMirror*) G__getstructoffset())->GetPos();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const MMirror*) G__getstructoffset())->GetNorm();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->GetFocalLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->GetSigmaPSF());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->GetDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMirror*) G__getstructoffset())->GetShape());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->GetMaxR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirror*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MMirror*) G__getstructoffset())->SimPSF(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MMirror*) G__getstructoffset())->SimPSF(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMirror*) G__getstructoffset())->ExecuteMirror(*(MQuaternion*) libp->para[0].ref, *(MQuaternion*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMirror*) G__getstructoffset())->ExecuteReflection(*(MQuaternion*) libp->para[0].ref, *(MQuaternion*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMirror*) G__getstructoffset())->HasHit(*(MQuaternion*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMirror*) G__getstructoffset())->CanHit(*(MQuaternion*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MMirror*) G__getstructoffset())->ReadM(*(TObjArray*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MMirror*) G__getstructoffset())->WriteM(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirror::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirror::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirror::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirror::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirror*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirror::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirror::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirror::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_186_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirror::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirror G__TMMirror;
static int G__SimReflectorCint_186_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirror*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirror*) (soff+(sizeof(MMirror)*i)))->~G__TMMirror();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirror*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirror*) (soff))->~G__TMMirror();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_186_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirror* dest = (MMirror*) G__getstructoffset();
   *dest = *(MMirror*) libp->para[0].ref;
   const MMirror& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirrorSquare */
static int G__SimReflectorCint_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorSquare* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorSquare[n];
     } else {
       p = new((void*) gvp) MMirrorSquare[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorSquare;
     } else {
       p = new((void*) gvp) MMirrorSquare;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirrorSquare::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorSquare::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirrorSquare::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirrorSquare::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirrorSquare*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorSquare::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorSquare::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorSquare::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorSquare::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimReflectorCint_226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMirrorSquare* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMirrorSquare(*(MMirrorSquare*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirrorSquare G__TMMirrorSquare;
static int G__SimReflectorCint_226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirrorSquare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirrorSquare*) (soff+(sizeof(MMirrorSquare)*i)))->~G__TMMirrorSquare();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirrorSquare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirrorSquare*) (soff))->~G__TMMirrorSquare();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorSquare* dest = (MMirrorSquare*) G__getstructoffset();
   *dest = *(MMirrorSquare*) libp->para[0].ref;
   const MMirrorSquare& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirrorHex */
static int G__SimReflectorCint_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex[n];
     } else {
       p = new((void*) gvp) MMirrorHex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex;
     } else {
       p = new((void*) gvp) MMirrorHex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMirrorHex*) G__getstructoffset())->GetD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirrorHex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirrorHex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirrorHex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirrorHex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_227_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimReflectorCint_227_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMirrorHex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMirrorHex(*(MMirrorHex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirrorHex G__TMMirrorHex;
static int G__SimReflectorCint_227_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirrorHex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirrorHex*) (soff+(sizeof(MMirrorHex)*i)))->~G__TMMirrorHex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirrorHex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirrorHex*) (soff))->~G__TMMirrorHex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_227_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex* dest = (MMirrorHex*) G__getstructoffset();
   *dest = *(MMirrorHex*) libp->para[0].ref;
   const MMirrorHex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirrorHex90 */
static int G__SimReflectorCint_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex90* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex90[n];
     } else {
       p = new((void*) gvp) MMirrorHex90[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex90;
     } else {
       p = new((void*) gvp) MMirrorHex90;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirrorHex90::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex90::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirrorHex90::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirrorHex90::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirrorHex90*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex90::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex90::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex90::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex90::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimReflectorCint_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMirrorHex90* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMirrorHex90(*(MMirrorHex90*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirrorHex90 G__TMMirrorHex90;
static int G__SimReflectorCint_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirrorHex90*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirrorHex90*) (soff+(sizeof(MMirrorHex90)*i)))->~G__TMMirrorHex90();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirrorHex90*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirrorHex90*) (soff))->~G__TMMirrorHex90();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex90* dest = (MMirrorHex90*) G__getstructoffset();
   *dest = *(MMirrorHex90*) libp->para[0].ref;
   const MMirrorHex90& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirrorHex15 */
static int G__SimReflectorCint_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex15* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex15[n];
     } else {
       p = new((void*) gvp) MMirrorHex15[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorHex15;
     } else {
       p = new((void*) gvp) MMirrorHex15;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirrorHex15::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex15::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirrorHex15::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirrorHex15::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirrorHex15*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex15::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex15::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorHex15::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorHex15::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimReflectorCint_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMirrorHex15* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMirrorHex15(*(MMirrorHex15*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirrorHex15 G__TMMirrorHex15;
static int G__SimReflectorCint_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirrorHex15*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirrorHex15*) (soff+(sizeof(MMirrorHex15)*i)))->~G__TMMirrorHex15();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirrorHex15*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirrorHex15*) (soff))->~G__TMMirrorHex15();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorHex15* dest = (MMirrorHex15*) G__getstructoffset();
   *dest = *(MMirrorHex15*) libp->para[0].ref;
   const MMirrorHex15& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMirrorDisk */
static int G__SimReflectorCint_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorDisk* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorDisk[n];
     } else {
       p = new((void*) gvp) MMirrorDisk[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMirrorDisk;
     } else {
       p = new((void*) gvp) MMirrorDisk;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMirrorDisk::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorDisk::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMirrorDisk::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMirrorDisk::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMirrorDisk*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorDisk::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorDisk::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMirrorDisk::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimReflectorCint_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMirrorDisk::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimReflectorCint_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMirrorDisk* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMirrorDisk(*(MMirrorDisk*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMirrorDisk G__TMMirrorDisk;
static int G__SimReflectorCint_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMirrorDisk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMirrorDisk*) (soff+(sizeof(MMirrorDisk)*i)))->~G__TMMirrorDisk();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMirrorDisk*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMirrorDisk*) (soff))->~G__TMMirrorDisk();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimReflectorCint_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMirrorDisk* dest = (MMirrorDisk*) G__getstructoffset();
   *dest = *(MMirrorDisk*) libp->para[0].ref;
   const MMirrorDisk& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MReflector */

/* MSimReflector */

/* MSimRays */

/* MMirror */

/* MMirrorSquare */

/* MMirrorHex */

/* MMirrorHex90 */

/* MMirrorHex15 */

/* MMirrorDisk */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSimReflectorCint {
 public:
  G__Sizep2memfuncSimReflectorCint(): p(&G__Sizep2memfuncSimReflectorCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSimReflectorCint::*p)();
};

size_t G__get_sizep2memfuncSimReflectorCint()
{
  G__Sizep2memfuncSimReflectorCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSimReflectorCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector))) {
     MReflector *G__Lderived;
     G__Lderived=(MReflector*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector))) {
     MSimReflector *G__Lderived;
     G__Lderived=(MSimReflector*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays))) {
     MSimRays *G__Lderived;
     G__Lderived=(MSimRays*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays),G__get_linked_tagnum(&G__SimReflectorCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays),G__get_linked_tagnum(&G__SimReflectorCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays),G__get_linked_tagnum(&G__SimReflectorCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror))) {
     MMirror *G__Lderived;
     G__Lderived=(MMirror*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare))) {
     MMirrorSquare *G__Lderived;
     G__Lderived=(MMirrorSquare*)0x1000;
     {
       MMirror *G__Lpbase=(MMirror*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex))) {
     MMirrorHex *G__Lderived;
     G__Lderived=(MMirrorHex*)0x1000;
     {
       MMirror *G__Lpbase=(MMirror*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90))) {
     MMirrorHex90 *G__Lderived;
     G__Lderived=(MMirrorHex90*)0x1000;
     {
       MMirrorHex *G__Lpbase=(MMirrorHex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MMirror *G__Lpbase=(MMirror*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15))) {
     MMirrorHex15 *G__Lderived;
     G__Lderived=(MMirrorHex15*)0x1000;
     {
       MMirrorHex *G__Lpbase=(MMirrorHex*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MMirror *G__Lpbase=(MMirror*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk))) {
     MMirrorDisk *G__Lderived;
     G__Lderived=(MMirrorDisk*)0x1000;
     {
       MMirror *G__Lpbase=(MMirror*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk),G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk),G__get_linked_tagnum(&G__SimReflectorCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSimReflectorCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__SimReflectorCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MReflector */
static void G__setup_memvarMReflector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector));
   { MReflector *p; p=(MReflector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TObjArray),-1,-1,4,"fMirrors=",0,"6.1s   (Pointer)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaxR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimReflector */
static void G__setup_memvarMSimReflector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector));
   { MSimReflector *p; p=(MSimReflector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event  storing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fMirror0=",0,"! Event  storing the photons in the mirror plane (w/o camera shadow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fMirror1=",0,"! Event  storing the photons in the mirror plane (w/  camera shadow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fMirror2=",0,"! Event  storing the photons in the mirror plane (w/  camera shadow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fMirror3=",0,"! Event  storing the photons in the mirror plane (w/  camera shadow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fMirror4=",0,"! Event  storing the photons in the mirror plane (w/  camera shadow)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MCorsikaEvtHeader),-1,-1,4,"fEvtHeader=",0,"! Header storing event information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector),-1,-1,4,"fReflector=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPointingPos),-1,-1,4,"fPointing=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TString),-1,-1,4,"fNameGeomCam=",0,"Name of the geometry container storing the APD gemeotry");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TString),-1,-1,4,"fNameReflector=",0,"Name of the container storing the reflector geometry ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetectorFrame=",0,"A disk of radius DetectorFrame around the focal point absorbing photons");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetectorMargin=",0,"A margin around the detector (MGeomCam::HitCamera) in which photons are also stored");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimRays */
static void G__setup_memvarMSimRays(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays));
   { MSimRays *p; p=(MSimRays*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPhotonEvent),-1,-1,4,"fEvt=",0,"! Event storing the photons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector),-1,-1,4,"fReflector=",0,"! Geometry of the reflector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPointingPos),-1,-1,4,"fPointPos=",0,"! Direction the telescope is pointing to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_MPointingPos),-1,-1,4,"fSource=",0,"! Direction the rays are coming from relative to the telescope");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPhotons=",0,"Number of photons to be produced");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHeight=",0,"[km] Height of point source (<=0 means infinity)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TString),-1,-1,4,"fNameReflector=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TString),-1,-1,4,"fNamePointPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TString),-1,-1,4,"fNameSource=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirror */
static void G__setup_memvarMMirror(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror));
   { MMirror *p; p=(MMirror*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3),-1,-1,4,"fPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3),-1,-1,4,"fNorm=",0,"faster without");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TRotation),-1,-1,4,"fTilt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFocalLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaPSF=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fShape=",0,"Spherical=0, Parabolic=1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirrorSquare */
static void G__setup_memvarMMirrorSquare(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare));
   { MMirrorSquare *p; p=(MMirrorSquare*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSideLength=",0,"HALF of the side length!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirrorHex */
static void G__setup_memvarMMirrorHex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex));
   { MMirrorHex *p; p=(MMirrorHex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"fgCos30=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"fgCos60=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,2,"fgSin60=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fD=",0,"half diameter D or better distance between opposite sides");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaxR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirrorHex90 */
static void G__setup_memvarMMirrorHex90(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90));
   { MMirrorHex90 *p; p=(MMirrorHex90*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirrorHex15 */
static void G__setup_memvarMMirrorHex15(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15));
   { MMirrorHex15 *p; p=(MMirrorHex15*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMirrorDisk */
static void G__setup_memvarMMirrorDisk(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk));
   { MMirrorDisk *p; p=(MMirrorDisk*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fR=",0,"Radius of the disk");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimReflectorCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSimReflectorCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMReflector(void) {
   /* MReflector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector));
   G__memfunc_setup("InitMaxR",780,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalTokens",1020,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror), -1, 0, 2, 1, 4, 8, 
"u 'TObjArray' - 1 - arr d - 'Double_t' 0 - defpsf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReflector",1011,G__SimReflectorCint_181_0_4, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MReflector), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirstPtr",1118,G__SimReflectorCint_181_0_5, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror), -1, 2, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumMirrors",1342,G__SimReflectorCint_181_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirror",923,G__SimReflectorCint_181_0_7, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror), -1, 0, 1, 1, 1, 9, "h - 'UInt_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFile",764,G__SimReflectorCint_181_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fname d - 'Double_t' 0 '-1' defpsf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFile",907,G__SimReflectorCint_181_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,G__SimReflectorCint_181_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__SimReflectorCint_181_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanHit",567,G__SimReflectorCint_181_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteReflector",1657,G__SimReflectorCint_181_0_13, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 1 - p u 'MQuaternion' - 1 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaPSF",1030,G__SimReflectorCint_181_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - psf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_181_0_17, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReflector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_181_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReflector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_181_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReflector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_181_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReflector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_181_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_181_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReflector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_181_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReflector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_181_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReflector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_181_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReflector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MReflector", 1137, G__SimReflectorCint_181_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimReflector(void) {
   /* MSimReflector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimReflector",1308,G__SimReflectorCint_182_0_4, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MSimReflector), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__SimReflectorCint_182_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MGeomCam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameReflector",1619,G__SimReflectorCint_182_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MReflector\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorFrame",1617,G__SimReflectorCint_182_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' cm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorMargin",1732,G__SimReflectorCint_182_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' mm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimReflectorCint_182_0_9, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimReflector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_182_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReflector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_182_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimReflector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_182_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimReflector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_182_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_182_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReflector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_182_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimReflector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_182_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimReflector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_182_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimReflector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimReflector", 1434, G__SimReflectorCint_182_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimRays(void) {
   /* MSimRays */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSimRays",789,G__SimReflectorCint_183_0_4, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MSimRays), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameReflector",1619,G__SimReflectorCint_183_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MReflector\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNamePointPos",1513,G__SimReflectorCint_183_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MPointingPos\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSource",1310,G__SimReflectorCint_183_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"Source\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHeight",901,G__SimReflectorCint_183_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotons",1351,G__SimReflectorCint_183_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimReflectorCint_183_0_10, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimRays::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_183_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRays::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_183_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimRays::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_183_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimRays::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_183_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_183_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRays::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_183_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimRays::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_183_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimRays::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_183_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimRays::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MSimRays", 915, G__SimReflectorCint_183_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirror(void) {
   /* MMirror */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror));
   G__memfunc_setup("operator-",921,G__SimReflectorCint_186_0_2, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector2), -1, 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - q", "{ return TVector2(X()-q.X(), Y()-q.Y()); }", (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__SimReflectorCint_186_0_3, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector2), -1, 0, 1, 1, 1, 8, "u 'MMirror' - 11 - m", "{ return TVector2(X()-m.X(), Y()-m.Y()); }", (void*) NULL, 0);
   G__memfunc_setup("SetSigmaPSF",1030,G__SimReflectorCint_186_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - psf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFocalLength",1395,G__SimReflectorCint_186_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPosition",1153,G__SimReflectorCint_186_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNorm",712,G__SimReflectorCint_186_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShape",797,G__SimReflectorCint_186_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__SimReflectorCint_186_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("X",88,G__SimReflectorCint_186_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Y",89,G__SimReflectorCint_186_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Z",90,G__SimReflectorCint_186_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nx",198,G__SimReflectorCint_186_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Ny",199,G__SimReflectorCint_186_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nz",200,G__SimReflectorCint_186_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosXY",771,G__SimReflectorCint_186_0_16, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPos",594,G__SimReflectorCint_186_0_17, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNorm",700,G__SimReflectorCint_186_0_18, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFocalLength",1383,G__SimReflectorCint_186_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaPSF",1018,G__SimReflectorCint_186_0_20, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__SimReflectorCint_186_0_21, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShape",785,G__SimReflectorCint_186_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,G__SimReflectorCint_186_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return TMath::Max(fMaxRX, fMaxRY); }", (void*) NULL, 3);
   G__memfunc_setup("GetA",353,G__SimReflectorCint_186_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return TMath::Max(fMaxRX, fMaxRY); }", (void*) NULL, 3);
   G__memfunc_setup("SimPSF",530,G__SimReflectorCint_186_0_25, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3), -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 11 - n d - 'Double_t' 0 - F "
"d - 'Double_t' 0 - psf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SimPSF",530,G__SimReflectorCint_186_0_26, 117, G__get_linked_tagnum(&G__SimReflectorCintLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVector3' - 11 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteMirror",1358,G__SimReflectorCint_186_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 1 - p u 'MQuaternion' - 1 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteReflection",1758,G__SimReflectorCint_186_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 1 - p u 'MQuaternion' - 1 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasHit",577,G__SimReflectorCint_186_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CanHit",567,G__SimReflectorCint_186_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ReadM",457,G__SimReflectorCint_186_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - tok", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("WriteM",600,G__SimReflectorCint_186_0_32, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_186_0_34, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirror::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_186_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirror::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_186_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirror::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_186_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirror::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_186_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_186_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirror::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_186_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirror::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_186_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirror::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_186_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirror::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMirror", 838, G__SimReflectorCint_186_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_186_0_47, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirror), -1, 1, 1, 1, 1, 0, "u 'MMirror' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirrorSquare(void) {
   /* MMirrorSquare */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare));
   G__memfunc_setup("MMirrorSquare",1337,G__SimReflectorCint_226_0_1, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasHit",577,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CanHit",567,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadM",457,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - tok", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteM",600,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_226_0_10, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirrorSquare::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_226_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorSquare::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_226_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirrorSquare::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_226_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirrorSquare::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_226_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_226_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorSquare::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_226_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorSquare::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_226_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorSquare::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_226_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorSquare::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMirrorSquare", 1337, G__SimReflectorCint_226_0_22, (int) ('i'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare), -1, 0, 1, 1, 1, 0, "u 'MMirrorSquare' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMirrorSquare", 1463, G__SimReflectorCint_226_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_226_0_24, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorSquare), -1, 1, 1, 1, 1, 0, "u 'MMirrorSquare' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirrorHex(void) {
   /* MMirrorHex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex));
   G__memfunc_setup("SetD",368,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMirrorHex",1005,G__SimReflectorCint_227_0_2, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetD",356,G__SimReflectorCint_227_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CanHit",567,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasHit",577,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadM",457,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - tok", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteM",600,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_227_0_12, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirrorHex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_227_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_227_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirrorHex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_227_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirrorHex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_227_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_227_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_227_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_227_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_227_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMirrorHex", 1005, G__SimReflectorCint_227_0_24, (int) ('i'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex), -1, 0, 1, 1, 1, 0, "u 'MMirrorHex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMirrorHex", 1131, G__SimReflectorCint_227_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_227_0_26, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex), -1, 1, 1, 1, 1, 0, "u 'MMirrorHex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirrorHex90(void) {
   /* MMirrorHex90 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90));
   G__memfunc_setup("MMirrorHex90",1110,G__SimReflectorCint_228_0_1, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasHit",577,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_228_0_4, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirrorHex90::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_228_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex90::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_228_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirrorHex90::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_228_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirrorHex90::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_228_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_228_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex90::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_228_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex90::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_228_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex90::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_228_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex90::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMirrorHex90", 1110, G__SimReflectorCint_228_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90), -1, 0, 1, 1, 1, 0, "u 'MMirrorHex90' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMirrorHex90", 1236, G__SimReflectorCint_228_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_228_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex90), -1, 1, 1, 1, 1, 0, "u 'MMirrorHex90' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirrorHex15(void) {
   /* MMirrorHex15 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15));
   G__memfunc_setup("MMirrorHex15",1107,G__SimReflectorCint_229_0_1, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasHit",577,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_229_0_4, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirrorHex15::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_229_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex15::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_229_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirrorHex15::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_229_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirrorHex15::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_229_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_229_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex15::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_229_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex15::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_229_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorHex15::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_229_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorHex15::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMirrorHex15", 1107, G__SimReflectorCint_229_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15), -1, 0, 1, 1, 1, 0, "u 'MMirrorHex15' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMirrorHex15", 1233, G__SimReflectorCint_229_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_229_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorHex15), -1, 1, 1, 1, 1, 0, "u 'MMirrorHex15' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMirrorDisk(void) {
   /* MMirrorDisk */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk));
   G__memfunc_setup("MMirrorDisk",1107,G__SimReflectorCint_230_0_1, 105, G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxR",664,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CanHit",567,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HasHit",577,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MQuaternion' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadM",457,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TObjArray' - 11 - tok", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteM",600,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimReflectorCint_230_0_10, 85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMirrorDisk::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimReflectorCint_230_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorDisk::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimReflectorCint_230_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMirrorDisk::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimReflectorCint_230_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMirrorDisk::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimReflectorCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimReflectorCint_230_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimReflectorCint_230_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorDisk::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimReflectorCint_230_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorDisk::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimReflectorCint_230_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMirrorDisk::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimReflectorCint_230_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMirrorDisk::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMirrorDisk", 1107, G__SimReflectorCint_230_0_22, (int) ('i'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk), -1, 0, 1, 1, 1, 0, "u 'MMirrorDisk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMirrorDisk", 1233, G__SimReflectorCint_230_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimReflectorCint_230_0_24, (int) ('u'), G__get_linked_tagnum(&G__SimReflectorCintLN_MMirrorDisk), -1, 1, 1, 1, 1, 0, "u 'MMirrorDisk' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSimReflectorCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSimReflectorCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSimReflectorCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SimReflectorCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MPointingPos = { "MPointingPos" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MPhotonEvent = { "MPhotonEvent" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MCorsikaEvtHeader = { "MCorsikaEvtHeader" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MReflector = { "MReflector" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MSimReflector = { "MSimReflector" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MSimRays = { "MSimRays" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MQuaternion = { "MQuaternion" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirror = { "MMirror" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TRotation = { "TRotation" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirrorSquare = { "MMirrorSquare" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirrorHex = { "MMirrorHex" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirrorHex90 = { "MMirrorHex90" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirrorHex15 = { "MMirrorHex15" , 99 , -1 };
G__linked_taginfo G__SimReflectorCintLN_MMirrorDisk = { "MMirrorDisk" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSimReflectorCint() {
  G__SimReflectorCintLN_TClass.tagnum = -1 ;
  G__SimReflectorCintLN_TBuffer.tagnum = -1 ;
  G__SimReflectorCintLN_TMemberInspector.tagnum = -1 ;
  G__SimReflectorCintLN_TObject.tagnum = -1 ;
  G__SimReflectorCintLN_TString.tagnum = -1 ;
  G__SimReflectorCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SimReflectorCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimReflectorCintLN_TObjArray.tagnum = -1 ;
  G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SimReflectorCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SimReflectorCintLN_TEnv.tagnum = -1 ;
  G__SimReflectorCintLN_MParContainer.tagnum = -1 ;
  G__SimReflectorCintLN_MInputStreamID.tagnum = -1 ;
  G__SimReflectorCintLN_MParList.tagnum = -1 ;
  G__SimReflectorCintLN_MTask.tagnum = -1 ;
  G__SimReflectorCintLN_MGeomCam.tagnum = -1 ;
  G__SimReflectorCintLN_MPointingPos.tagnum = -1 ;
  G__SimReflectorCintLN_MPhotonEvent.tagnum = -1 ;
  G__SimReflectorCintLN_MCorsikaEvtHeader.tagnum = -1 ;
  G__SimReflectorCintLN_MReflector.tagnum = -1 ;
  G__SimReflectorCintLN_MSimReflector.tagnum = -1 ;
  G__SimReflectorCintLN_MSimRays.tagnum = -1 ;
  G__SimReflectorCintLN_MQuaternion.tagnum = -1 ;
  G__SimReflectorCintLN_MMirror.tagnum = -1 ;
  G__SimReflectorCintLN_TVector2.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__SimReflectorCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__SimReflectorCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__SimReflectorCintLN_TRotation.tagnum = -1 ;
  G__SimReflectorCintLN_TVector3.tagnum = -1 ;
  G__SimReflectorCintLN_MMirrorSquare.tagnum = -1 ;
  G__SimReflectorCintLN_MMirrorHex.tagnum = -1 ;
  G__SimReflectorCintLN_MMirrorHex90.tagnum = -1 ;
  G__SimReflectorCintLN_MMirrorHex15.tagnum = -1 ;
  G__SimReflectorCintLN_MMirrorDisk.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSimReflectorCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TString);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MPointingPos);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MPhotonEvent);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MCorsikaEvtHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MReflector),sizeof(MReflector),-1,323840,"Parameter container storing a collection of several mirrors (reflector)",G__setup_memvarMReflector,G__setup_memfuncMReflector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MSimReflector),sizeof(MSimReflector),-1,323840,"Task to calculate reflection on a mirror",G__setup_memvarMSimReflector,G__setup_memfuncMSimReflector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MSimRays),sizeof(MSimRays),-1,323840,"Task to simulate a source for rays",G__setup_memvarMSimRays,G__setup_memfuncMSimRays);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MQuaternion);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirror),sizeof(MMirror),-1,291078,"Base class to describe a mirror",G__setup_memvarMMirror,G__setup_memfuncMMirror);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TVector2);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TRotation);
   G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirrorSquare),sizeof(MMirrorSquare),-1,291072,"A spherical square type mirror",G__setup_memvarMMirrorSquare,G__setup_memfuncMMirrorSquare);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirrorHex),sizeof(MMirrorHex),-1,291072,"A spherical hexagon type mirror",G__setup_memvarMMirrorHex,G__setup_memfuncMMirrorHex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirrorHex90),sizeof(MMirrorHex90),-1,291072,"A spherical hexagon type mirror (MMirrorHex rotated by 90deg)",G__setup_memvarMMirrorHex90,G__setup_memfuncMMirrorHex90);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirrorHex15),sizeof(MMirrorHex15),-1,291072,"A spherical hexagon type mirror (MMirrorHex rotated by 15deg)",G__setup_memvarMMirrorHex15,G__setup_memfuncMMirrorHex15);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimReflectorCintLN_MMirrorDisk),sizeof(MMirrorDisk),-1,291072,"A spherical disk type mirror",G__setup_memvarMMirrorDisk,G__setup_memfuncMMirrorDisk);
}
extern "C" void G__cpp_setupSimReflectorCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupSimReflectorCint()");
  G__set_cpp_environmentSimReflectorCint();
  G__cpp_setup_tagtableSimReflectorCint();

  G__cpp_setup_inheritanceSimReflectorCint();

  G__cpp_setup_typetableSimReflectorCint();

  G__cpp_setup_memvarSimReflectorCint();

  G__cpp_setup_memfuncSimReflectorCint();
  G__cpp_setup_globalSimReflectorCint();
  G__cpp_setup_funcSimReflectorCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSimReflectorCint();
  return;
}
class G__cpp_setup_initSimReflectorCint {
  public:
    G__cpp_setup_initSimReflectorCint() { G__add_setup_func("SimReflectorCint",(G__incsetup)(&G__cpp_setupSimReflectorCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSimReflectorCint() { G__remove_setup_func("SimReflectorCint"); }
};
G__cpp_setup_initSimReflectorCint G__cpp_setup_initializerSimReflectorCint;

