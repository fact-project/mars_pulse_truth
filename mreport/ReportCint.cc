//
// File generated by rootcint at Mon Nov 28 11:07:34 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ReportCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ReportCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MReport_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MReport(void *p);
   static void deleteArray_MReport(void *p);
   static void destruct_MReport(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReport*)
   {
      ::MReport *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReport >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReport", ::MReport::Class_Version(), "./MReport.h", 17,
                  typeid(::MReport), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReport::Dictionary, isa_proxy, 4,
                  sizeof(::MReport) );
      instance.SetDelete(&delete_MReport);
      instance.SetDeleteArray(&deleteArray_MReport);
      instance.SetDestructor(&destruct_MReport);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReport*)
   {
      return GenerateInitInstanceLocal((::MReport*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReport*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportRec(void *p = 0);
   static void *newArray_MReportRec(Long_t size, void *p);
   static void delete_MReportRec(void *p);
   static void deleteArray_MReportRec(void *p);
   static void destruct_MReportRec(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportRec*)
   {
      ::MReportRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportRec", ::MReportRec::Class_Version(), "./MReportRec.h", 13,
                  typeid(::MReportRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportRec::Dictionary, isa_proxy, 4,
                  sizeof(::MReportRec) );
      instance.SetNew(&new_MReportRec);
      instance.SetNewArray(&newArray_MReportRec);
      instance.SetDelete(&delete_MReportRec);
      instance.SetDeleteArray(&deleteArray_MReportRec);
      instance.SetDestructor(&destruct_MReportRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportRec*)
   {
      return GenerateInitInstanceLocal((::MReportRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportWeather_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportWeather(void *p = 0);
   static void *newArray_MReportWeather(Long_t size, void *p);
   static void delete_MReportWeather(void *p);
   static void deleteArray_MReportWeather(void *p);
   static void destruct_MReportWeather(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportWeather*)
   {
      ::MReportWeather *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportWeather >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportWeather", ::MReportWeather::Class_Version(), "./MReportCC.h", 14,
                  typeid(::MReportWeather), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportWeather::Dictionary, isa_proxy, 4,
                  sizeof(::MReportWeather) );
      instance.SetNew(&new_MReportWeather);
      instance.SetNewArray(&newArray_MReportWeather);
      instance.SetDelete(&delete_MReportWeather);
      instance.SetDeleteArray(&deleteArray_MReportWeather);
      instance.SetDestructor(&destruct_MReportWeather);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportWeather*)
   {
      return GenerateInitInstanceLocal((::MReportWeather*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportWeather*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportCC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportCC(void *p = 0);
   static void *newArray_MReportCC(Long_t size, void *p);
   static void delete_MReportCC(void *p);
   static void deleteArray_MReportCC(void *p);
   static void destruct_MReportCC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportCC*)
   {
      ::MReportCC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportCC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportCC", ::MReportCC::Class_Version(), "./MReportCC.h", 36,
                  typeid(::MReportCC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportCC::Dictionary, isa_proxy, 4,
                  sizeof(::MReportCC) );
      instance.SetNew(&new_MReportCC);
      instance.SetNewArray(&newArray_MReportCC);
      instance.SetDelete(&delete_MReportCC);
      instance.SetDeleteArray(&deleteArray_MReportCC);
      instance.SetDestructor(&destruct_MReportCC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportCC*)
   {
      return GenerateInitInstanceLocal((::MReportCC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportCC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportRun_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportRun(void *p = 0);
   static void *newArray_MReportRun(Long_t size, void *p);
   static void delete_MReportRun(void *p);
   static void deleteArray_MReportRun(void *p);
   static void destruct_MReportRun(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportRun*)
   {
      ::MReportRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportRun", ::MReportRun::Class_Version(), "./MReportRun.h", 9,
                  typeid(::MReportRun), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportRun::Dictionary, isa_proxy, 4,
                  sizeof(::MReportRun) );
      instance.SetNew(&new_MReportRun);
      instance.SetNewArray(&newArray_MReportRun);
      instance.SetDelete(&delete_MReportRun);
      instance.SetDeleteArray(&deleteArray_MReportRun);
      instance.SetDestructor(&destruct_MReportRun);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportRun*)
   {
      return GenerateInitInstanceLocal((::MReportRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportDAQ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportDAQ(void *p = 0);
   static void *newArray_MReportDAQ(Long_t size, void *p);
   static void delete_MReportDAQ(void *p);
   static void deleteArray_MReportDAQ(void *p);
   static void destruct_MReportDAQ(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportDAQ*)
   {
      ::MReportDAQ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportDAQ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportDAQ", ::MReportDAQ::Class_Version(), "./MReportDAQ.h", 9,
                  typeid(::MReportDAQ), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportDAQ::Dictionary, isa_proxy, 4,
                  sizeof(::MReportDAQ) );
      instance.SetNew(&new_MReportDAQ);
      instance.SetNewArray(&newArray_MReportDAQ);
      instance.SetDelete(&delete_MReportDAQ);
      instance.SetDeleteArray(&deleteArray_MReportDAQ);
      instance.SetDestructor(&destruct_MReportDAQ);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportDAQ*)
   {
      return GenerateInitInstanceLocal((::MReportDAQ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportDAQ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportHelp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MReportHelp(void *p);
   static void deleteArray_MReportHelp(void *p);
   static void destruct_MReportHelp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportHelp*)
   {
      ::MReportHelp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportHelp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportHelp", ::MReportHelp::Class_Version(), "./MReportHelp.h", 16,
                  typeid(::MReportHelp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportHelp::Dictionary, isa_proxy, 4,
                  sizeof(::MReportHelp) );
      instance.SetDelete(&delete_MReportHelp);
      instance.SetDeleteArray(&deleteArray_MReportHelp);
      instance.SetDestructor(&destruct_MReportHelp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportHelp*)
   {
      return GenerateInitInstanceLocal((::MReportHelp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportHelp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportDrive_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportDrive(void *p = 0);
   static void *newArray_MReportDrive(Long_t size, void *p);
   static void delete_MReportDrive(void *p);
   static void deleteArray_MReportDrive(void *p);
   static void destruct_MReportDrive(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportDrive*)
   {
      ::MReportDrive *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportDrive >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportDrive", ::MReportDrive::Class_Version(), "./MReportDrive.h", 9,
                  typeid(::MReportDrive), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportDrive::Dictionary, isa_proxy, 4,
                  sizeof(::MReportDrive) );
      instance.SetNew(&new_MReportDrive);
      instance.SetNewArray(&newArray_MReportDrive);
      instance.SetDelete(&delete_MReportDrive);
      instance.SetDeleteArray(&deleteArray_MReportDrive);
      instance.SetDestructor(&destruct_MReportDrive);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportDrive*)
   {
      return GenerateInitInstanceLocal((::MReportDrive*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportDrive*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportCamera_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportCamera(void *p = 0);
   static void *newArray_MReportCamera(Long_t size, void *p);
   static void delete_MReportCamera(void *p);
   static void deleteArray_MReportCamera(void *p);
   static void destruct_MReportCamera(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportCamera*)
   {
      ::MReportCamera *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportCamera >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportCamera", ::MReportCamera::Class_Version(), "./MReportCamera.h", 19,
                  typeid(::MReportCamera), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportCamera::Dictionary, isa_proxy, 4,
                  sizeof(::MReportCamera) );
      instance.SetNew(&new_MReportCamera);
      instance.SetNewArray(&newArray_MReportCamera);
      instance.SetDelete(&delete_MReportCamera);
      instance.SetDeleteArray(&deleteArray_MReportCamera);
      instance.SetDestructor(&destruct_MReportCamera);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportCamera*)
   {
      return GenerateInitInstanceLocal((::MReportCamera*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportCamera*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportTrigger(void *p = 0);
   static void *newArray_MReportTrigger(Long_t size, void *p);
   static void delete_MReportTrigger(void *p);
   static void deleteArray_MReportTrigger(void *p);
   static void destruct_MReportTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportTrigger*)
   {
      ::MReportTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportTrigger", ::MReportTrigger::Class_Version(), "./MReportTrigger.h", 19,
                  typeid(::MReportTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::MReportTrigger) );
      instance.SetNew(&new_MReportTrigger);
      instance.SetNewArray(&newArray_MReportTrigger);
      instance.SetDelete(&delete_MReportTrigger);
      instance.SetDeleteArray(&deleteArray_MReportTrigger);
      instance.SetDestructor(&destruct_MReportTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportTrigger*)
   {
      return GenerateInitInstanceLocal((::MReportTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportCurrents_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportCurrents(void *p = 0);
   static void *newArray_MReportCurrents(Long_t size, void *p);
   static void delete_MReportCurrents(void *p);
   static void deleteArray_MReportCurrents(void *p);
   static void destruct_MReportCurrents(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportCurrents*)
   {
      ::MReportCurrents *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportCurrents >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportCurrents", ::MReportCurrents::Class_Version(), "./MReportCurrents.h", 11,
                  typeid(::MReportCurrents), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportCurrents::Dictionary, isa_proxy, 4,
                  sizeof(::MReportCurrents) );
      instance.SetNew(&new_MReportCurrents);
      instance.SetNewArray(&newArray_MReportCurrents);
      instance.SetDelete(&delete_MReportCurrents);
      instance.SetDeleteArray(&deleteArray_MReportCurrents);
      instance.SetDestructor(&destruct_MReportCurrents);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportCurrents*)
   {
      return GenerateInitInstanceLocal((::MReportCurrents*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportCurrents*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportFitsRead_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MReportFitsRead(void *p);
   static void deleteArray_MReportFitsRead(void *p);
   static void destruct_MReportFitsRead(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportFitsRead*)
   {
      ::MReportFitsRead *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportFitsRead >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportFitsRead", ::MReportFitsRead::Class_Version(), "./MReportFitsRead.h", 27,
                  typeid(::MReportFitsRead), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportFitsRead::Dictionary, isa_proxy, 4,
                  sizeof(::MReportFitsRead) );
      instance.SetDelete(&delete_MReportFitsRead);
      instance.SetDeleteArray(&deleteArray_MReportFitsRead);
      instance.SetDestructor(&destruct_MReportFitsRead);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportFitsRead*)
   {
      return GenerateInitInstanceLocal((::MReportFitsRead*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportFitsRead*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportFileRead_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MReportFileRead(void *p);
   static void deleteArray_MReportFileRead(void *p);
   static void destruct_MReportFileRead(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportFileRead*)
   {
      ::MReportFileRead *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportFileRead >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportFileRead", ::MReportFileRead::Class_Version(), "./MReportFileRead.h", 18,
                  typeid(::MReportFileRead), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportFileRead::Dictionary, isa_proxy, 4,
                  sizeof(::MReportFileRead) );
      instance.SetDelete(&delete_MReportFileRead);
      instance.SetDeleteArray(&deleteArray_MReportFileRead);
      instance.SetDestructor(&destruct_MReportFileRead);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportFileRead*)
   {
      return GenerateInitInstanceLocal((::MReportFileRead*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportFileRead*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportFileReadCC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MReportFileReadCC(void *p);
   static void deleteArray_MReportFileReadCC(void *p);
   static void destruct_MReportFileReadCC(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportFileReadCC*)
   {
      ::MReportFileReadCC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportFileReadCC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportFileReadCC", ::MReportFileReadCC::Class_Version(), "./MReportFileReadCC.h", 9,
                  typeid(::MReportFileReadCC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportFileReadCC::Dictionary, isa_proxy, 4,
                  sizeof(::MReportFileReadCC) );
      instance.SetDelete(&delete_MReportFileReadCC);
      instance.SetDeleteArray(&deleteArray_MReportFileReadCC);
      instance.SetDestructor(&destruct_MReportFileReadCC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportFileReadCC*)
   {
      return GenerateInitInstanceLocal((::MReportFileReadCC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportFileReadCC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportStarguider_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportStarguider(void *p = 0);
   static void *newArray_MReportStarguider(Long_t size, void *p);
   static void delete_MReportStarguider(void *p);
   static void deleteArray_MReportStarguider(void *p);
   static void destruct_MReportStarguider(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportStarguider*)
   {
      ::MReportStarguider *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportStarguider >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportStarguider", ::MReportStarguider::Class_Version(), "./MReportStarguider.h", 13,
                  typeid(::MReportStarguider), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportStarguider::Dictionary, isa_proxy, 4,
                  sizeof(::MReportStarguider) );
      instance.SetNew(&new_MReportStarguider);
      instance.SetNewArray(&newArray_MReportStarguider);
      instance.SetDelete(&delete_MReportStarguider);
      instance.SetDeleteArray(&deleteArray_MReportStarguider);
      instance.SetDestructor(&destruct_MReportStarguider);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportStarguider*)
   {
      return GenerateInitInstanceLocal((::MReportStarguider*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportStarguider*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportPyrometer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportPyrometer(void *p = 0);
   static void *newArray_MReportPyrometer(Long_t size, void *p);
   static void delete_MReportPyrometer(void *p);
   static void deleteArray_MReportPyrometer(void *p);
   static void destruct_MReportPyrometer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportPyrometer*)
   {
      ::MReportPyrometer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportPyrometer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportPyrometer", ::MReportPyrometer::Class_Version(), "./MReportPyrometer.h", 9,
                  typeid(::MReportPyrometer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportPyrometer::Dictionary, isa_proxy, 4,
                  sizeof(::MReportPyrometer) );
      instance.SetNew(&new_MReportPyrometer);
      instance.SetNewArray(&newArray_MReportPyrometer);
      instance.SetDelete(&delete_MReportPyrometer);
      instance.SetDeleteArray(&deleteArray_MReportPyrometer);
      instance.SetDestructor(&destruct_MReportPyrometer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportPyrometer*)
   {
      return GenerateInitInstanceLocal((::MReportPyrometer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportPyrometer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportRates_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportRates(void *p = 0);
   static void *newArray_MReportRates(Long_t size, void *p);
   static void delete_MReportRates(void *p);
   static void deleteArray_MReportRates(void *p);
   static void destruct_MReportRates(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportRates*)
   {
      ::MReportRates *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportRates >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportRates", ::MReportRates::Class_Version(), "./MReportRates.h", 9,
                  typeid(::MReportRates), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportRates::Dictionary, isa_proxy, 4,
                  sizeof(::MReportRates) );
      instance.SetNew(&new_MReportRates);
      instance.SetNewArray(&newArray_MReportRates);
      instance.SetDelete(&delete_MReportRates);
      instance.SetDeleteArray(&deleteArray_MReportRates);
      instance.SetDestructor(&destruct_MReportRates);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportRates*)
   {
      return GenerateInitInstanceLocal((::MReportRates*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportRates*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportTemperatures_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportTemperatures(void *p = 0);
   static void *newArray_MReportTemperatures(Long_t size, void *p);
   static void delete_MReportTemperatures(void *p);
   static void deleteArray_MReportTemperatures(void *p);
   static void destruct_MReportTemperatures(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportTemperatures*)
   {
      ::MReportTemperatures *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportTemperatures >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportTemperatures", ::MReportTemperatures::Class_Version(), "./MReportTemperatures.h", 9,
                  typeid(::MReportTemperatures), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportTemperatures::Dictionary, isa_proxy, 4,
                  sizeof(::MReportTemperatures) );
      instance.SetNew(&new_MReportTemperatures);
      instance.SetNewArray(&newArray_MReportTemperatures);
      instance.SetDelete(&delete_MReportTemperatures);
      instance.SetDeleteArray(&deleteArray_MReportTemperatures);
      instance.SetDestructor(&destruct_MReportTemperatures);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportTemperatures*)
   {
      return GenerateInitInstanceLocal((::MReportTemperatures*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportTemperatures*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MReportHumidity_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MReportHumidity(void *p = 0);
   static void *newArray_MReportHumidity(Long_t size, void *p);
   static void delete_MReportHumidity(void *p);
   static void deleteArray_MReportHumidity(void *p);
   static void destruct_MReportHumidity(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MReportHumidity*)
   {
      ::MReportHumidity *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MReportHumidity >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MReportHumidity", ::MReportHumidity::Class_Version(), "./MReportHumidity.h", 9,
                  typeid(::MReportHumidity), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MReportHumidity::Dictionary, isa_proxy, 4,
                  sizeof(::MReportHumidity) );
      instance.SetNew(&new_MReportHumidity);
      instance.SetNewArray(&newArray_MReportHumidity);
      instance.SetDelete(&delete_MReportHumidity);
      instance.SetDeleteArray(&deleteArray_MReportHumidity);
      instance.SetDestructor(&destruct_MReportHumidity);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MReportHumidity*)
   {
      return GenerateInitInstanceLocal((::MReportHumidity*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MReportHumidity*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MReport::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReport::Class_Name()
{
   return "MReport";
}

//______________________________________________________________________________
const char *MReport::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReport*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReport::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReport*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReport::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReport*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReport::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReport*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportRec::Class_Name()
{
   return "MReportRec";
}

//______________________________________________________________________________
const char *MReportRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportWeather::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportWeather::Class_Name()
{
   return "MReportWeather";
}

//______________________________________________________________________________
const char *MReportWeather::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportWeather*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportWeather::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportWeather*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportWeather::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportWeather*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportWeather::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportWeather*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportCC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportCC::Class_Name()
{
   return "MReportCC";
}

//______________________________________________________________________________
const char *MReportCC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportCC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportCC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportCC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportRun::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportRun::Class_Name()
{
   return "MReportRun";
}

//______________________________________________________________________________
const char *MReportRun::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportRun::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportRun::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportRun::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRun*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportDAQ::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportDAQ::Class_Name()
{
   return "MReportDAQ";
}

//______________________________________________________________________________
const char *MReportDAQ::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDAQ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportDAQ::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDAQ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportDAQ::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDAQ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportDAQ::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDAQ*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportHelp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportHelp::Class_Name()
{
   return "MReportHelp";
}

//______________________________________________________________________________
const char *MReportHelp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHelp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportHelp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHelp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportHelp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHelp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportHelp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHelp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportDrive::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportDrive::Class_Name()
{
   return "MReportDrive";
}

//______________________________________________________________________________
const char *MReportDrive::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDrive*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportDrive::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDrive*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportDrive::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDrive*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportDrive::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportDrive*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportCamera::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportCamera::Class_Name()
{
   return "MReportCamera";
}

//______________________________________________________________________________
const char *MReportCamera::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCamera*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportCamera::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCamera*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportCamera::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCamera*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportCamera::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCamera*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportTrigger::Class_Name()
{
   return "MReportTrigger";
}

//______________________________________________________________________________
const char *MReportTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportCurrents::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportCurrents::Class_Name()
{
   return "MReportCurrents";
}

//______________________________________________________________________________
const char *MReportCurrents::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCurrents*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportCurrents::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCurrents*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportCurrents::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCurrents*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportCurrents::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportCurrents*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportFitsRead::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportFitsRead::Class_Name()
{
   return "MReportFitsRead";
}

//______________________________________________________________________________
const char *MReportFitsRead::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFitsRead*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportFitsRead::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFitsRead*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportFitsRead::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFitsRead*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportFitsRead::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFitsRead*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportFileRead::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportFileRead::Class_Name()
{
   return "MReportFileRead";
}

//______________________________________________________________________________
const char *MReportFileRead::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileRead*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportFileRead::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileRead*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportFileRead::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileRead*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportFileRead::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileRead*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportFileReadCC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportFileReadCC::Class_Name()
{
   return "MReportFileReadCC";
}

//______________________________________________________________________________
const char *MReportFileReadCC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileReadCC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportFileReadCC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileReadCC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportFileReadCC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileReadCC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportFileReadCC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportFileReadCC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportStarguider::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportStarguider::Class_Name()
{
   return "MReportStarguider";
}

//______________________________________________________________________________
const char *MReportStarguider::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportStarguider*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportStarguider::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportStarguider*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportStarguider::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportStarguider*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportStarguider::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportStarguider*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportPyrometer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportPyrometer::Class_Name()
{
   return "MReportPyrometer";
}

//______________________________________________________________________________
const char *MReportPyrometer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportPyrometer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportPyrometer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportPyrometer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportPyrometer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportPyrometer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportPyrometer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportPyrometer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportRates::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportRates::Class_Name()
{
   return "MReportRates";
}

//______________________________________________________________________________
const char *MReportRates::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRates*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportRates::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRates*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportRates::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRates*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportRates::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportRates*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportTemperatures::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportTemperatures::Class_Name()
{
   return "MReportTemperatures";
}

//______________________________________________________________________________
const char *MReportTemperatures::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTemperatures*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportTemperatures::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTemperatures*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportTemperatures::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTemperatures*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportTemperatures::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportTemperatures*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MReportHumidity::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MReportHumidity::Class_Name()
{
   return "MReportHumidity";
}

//______________________________________________________________________________
const char *MReportHumidity::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHumidity*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MReportHumidity::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHumidity*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MReportHumidity::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHumidity*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MReportHumidity::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MReportHumidity*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MReport::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReport.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReport::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReport::Class(),this);
   }
}

//______________________________________________________________________________
void MReport::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReport.
      TClass *R__cl = ::MReport::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentifier", &fIdentifier);
      R__insp.InspectMember(const_cast<  TString &>( fIdentifier ), "fIdentifier.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasReportTime", &fHasReportTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fState", &fState);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MReport(void *p) {
      delete ((::MReport*)p);
   }
   static void deleteArray_MReport(void *p) {
      delete [] ((::MReport*)p);
   }
   static void destruct_MReport(void *p) {
      typedef ::MReport current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReport

//______________________________________________________________________________
void MReportCC::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportCC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportCC::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportCC::Class(),this);
   }
}

//______________________________________________________________________________
void MReportCC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportCC.
      TClass *R__cl = ::MReportCC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUPSStatus", &fUPSStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDifRubGPS", &fDifRubGPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTH", &fTH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTD", &fTD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecTemp", &fRecTemp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecRep", &fRecRep);
      MReportWeather::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportCC(void *p) {
      return  p ? new(p) ::MReportCC : new ::MReportCC;
   }
   static void *newArray_MReportCC(Long_t nElements, void *p) {
      return p ? new(p) ::MReportCC[nElements] : new ::MReportCC[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportCC(void *p) {
      delete ((::MReportCC*)p);
   }
   static void deleteArray_MReportCC(void *p) {
      delete [] ((::MReportCC*)p);
   }
   static void destruct_MReportCC(void *p) {
      typedef ::MReportCC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportCC

//______________________________________________________________________________
void MReportRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportRec.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportRec::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportRec::Class(),this);
   }
}

//______________________________________________________________________________
void MReportRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportRec.
      TClass *R__cl = ::MReportRec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTH", &fTH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTD", &fTD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecTemp", &fRecTemp);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportRec(void *p) {
      return  p ? new(p) ::MReportRec : new ::MReportRec;
   }
   static void *newArray_MReportRec(Long_t nElements, void *p) {
      return p ? new(p) ::MReportRec[nElements] : new ::MReportRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportRec(void *p) {
      delete ((::MReportRec*)p);
   }
   static void deleteArray_MReportRec(void *p) {
      delete [] ((::MReportRec*)p);
   }
   static void destruct_MReportRec(void *p) {
      typedef ::MReportRec current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportRec

//______________________________________________________________________________
void MReportRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportRun.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportRun::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportRun::Class(),this);
   }
}

//______________________________________________________________________________
void MReportRun::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportRun.
      TClass *R__cl = ::MReportRun::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNumber", &fFileNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceName", &fSourceName);
      R__insp.InspectMember(fSourceName, "fSourceName.");
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportRun(void *p) {
      return  p ? new(p) ::MReportRun : new ::MReportRun;
   }
   static void *newArray_MReportRun(Long_t nElements, void *p) {
      return p ? new(p) ::MReportRun[nElements] : new ::MReportRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportRun(void *p) {
      delete ((::MReportRun*)p);
   }
   static void deleteArray_MReportRun(void *p) {
      delete [] ((::MReportRun*)p);
   }
   static void destruct_MReportRun(void *p) {
      typedef ::MReportRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportRun

//______________________________________________________________________________
void MReportDAQ::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportDAQ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportDAQ::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportDAQ::Class(),this);
   }
}

//______________________________________________________________________________
void MReportDAQ::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportDAQ.
      TClass *R__cl = ::MReportDAQ::IsA();
      if (R__cl || R__insp.IsA()) { }
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportDAQ(void *p) {
      return  p ? new(p) ::MReportDAQ : new ::MReportDAQ;
   }
   static void *newArray_MReportDAQ(Long_t nElements, void *p) {
      return p ? new(p) ::MReportDAQ[nElements] : new ::MReportDAQ[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportDAQ(void *p) {
      delete ((::MReportDAQ*)p);
   }
   static void deleteArray_MReportDAQ(void *p) {
      delete [] ((::MReportDAQ*)p);
   }
   static void destruct_MReportDAQ(void *p) {
      typedef ::MReportDAQ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportDAQ

//______________________________________________________________________________
void MReportDrive::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportDrive.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportDrive::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportDrive::Class(),this);
   }
}

//______________________________________________________________________________
void MReportDrive::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportDrive.
      TClass *R__cl = ::MReportDrive::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMjd", &fMjd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa", &fRa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDec", &fDec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHa", &fHa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalZd", &fNominalZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalAz", &fNominalAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentZd", &fCurrentZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentAz", &fCurrentAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorZd", &fErrorZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorAz", &fErrorAz);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportDrive(void *p) {
      return  p ? new(p) ::MReportDrive : new ::MReportDrive;
   }
   static void *newArray_MReportDrive(Long_t nElements, void *p) {
      return p ? new(p) ::MReportDrive[nElements] : new ::MReportDrive[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportDrive(void *p) {
      delete ((::MReportDrive*)p);
   }
   static void deleteArray_MReportDrive(void *p) {
      delete [] ((::MReportDrive*)p);
   }
   static void destruct_MReportDrive(void *p) {
      typedef ::MReportDrive current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportDrive

//______________________________________________________________________________
void MReportStarguider::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportStarguider.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportStarguider::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportStarguider::Class(),this);
   }
}

//______________________________________________________________________________
void MReportStarguider::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportStarguider.
      TClass *R__cl = ::MReportStarguider::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevAz", &fDevAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDevZd", &fDevZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalZd", &fNominalZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNominalAz", &fNominalAz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCameraCenterX", &fCameraCenterX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCameraCenterY", &fCameraCenterY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumIdentifiedStars", &fNumIdentifiedStars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCorrelatedStars", &fNumCorrelatedStars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkyBrightness", &fSkyBrightness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMjd", &fMjd);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportStarguider(void *p) {
      return  p ? new(p) ::MReportStarguider : new ::MReportStarguider;
   }
   static void *newArray_MReportStarguider(Long_t nElements, void *p) {
      return p ? new(p) ::MReportStarguider[nElements] : new ::MReportStarguider[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportStarguider(void *p) {
      delete ((::MReportStarguider*)p);
   }
   static void deleteArray_MReportStarguider(void *p) {
      delete [] ((::MReportStarguider*)p);
   }
   static void destruct_MReportStarguider(void *p) {
      typedef ::MReportStarguider current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportStarguider

//______________________________________________________________________________
void MReportWeather::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportWeather.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportWeather::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportWeather::Class(),this);
   }
}

//______________________________________________________________________________
void MReportWeather::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportWeather.
      TClass *R__cl = ::MReportWeather::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHumidity", &fHumidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTemperature", &fTemperature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindSpeed", &fWindSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSolarRadiation", &fSolarRadiation);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportWeather(void *p) {
      return  p ? new(p) ::MReportWeather : new ::MReportWeather;
   }
   static void *newArray_MReportWeather(Long_t nElements, void *p) {
      return p ? new(p) ::MReportWeather[nElements] : new ::MReportWeather[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportWeather(void *p) {
      delete ((::MReportWeather*)p);
   }
   static void deleteArray_MReportWeather(void *p) {
      delete [] ((::MReportWeather*)p);
   }
   static void destruct_MReportWeather(void *p) {
      typedef ::MReportWeather current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportWeather

//______________________________________________________________________________
void MReportCamera::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportCamera.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportCamera::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportCamera::Class(),this);
   }
}

//______________________________________________________________________________
void MReportCamera::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportCamera.
      TClass *R__cl = ::MReportCamera::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCooling", &fCooling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLids", &fLids);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAUX", &fAUX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHV", &fHV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDC", &fDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLV", &fLV);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fActiveLoad", &fActiveLoad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibration", &fCalibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCentralPix", &fCentralPix);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportCamera(void *p) {
      return  p ? new(p) ::MReportCamera : new ::MReportCamera;
   }
   static void *newArray_MReportCamera(Long_t nElements, void *p) {
      return p ? new(p) ::MReportCamera[nElements] : new ::MReportCamera[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportCamera(void *p) {
      delete ((::MReportCamera*)p);
   }
   static void deleteArray_MReportCamera(void *p) {
      delete [] ((::MReportCamera*)p);
   }
   static void destruct_MReportCamera(void *p) {
      typedef ::MReportCamera current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportCamera

//______________________________________________________________________________
void MReportTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void MReportTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportTrigger.
      TClass *R__cl = ::MReportTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2BeforePrescaler", &fL2BeforePrescaler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2AfterPrescaler", &fL2AfterPrescaler);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTablename", &fTablename);
      R__insp.InspectMember(fTablename, "fTablename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL1Tablename", &fL1Tablename);
      R__insp.InspectMember(fL1Tablename, "fL1Tablename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fL2Tablename", &fL2Tablename);
      R__insp.InspectMember(fL2Tablename, "fL2Tablename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBit", &fBit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIPR", &fIPR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCell", &fCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPrescFactor", &fPrescFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLiveTime", &fLiveTime);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportTrigger(void *p) {
      return  p ? new(p) ::MReportTrigger : new ::MReportTrigger;
   }
   static void *newArray_MReportTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::MReportTrigger[nElements] : new ::MReportTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportTrigger(void *p) {
      delete ((::MReportTrigger*)p);
   }
   static void deleteArray_MReportTrigger(void *p) {
      delete [] ((::MReportTrigger*)p);
   }
   static void destruct_MReportTrigger(void *p) {
      typedef ::MReportTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportTrigger

//______________________________________________________________________________
void MReportCurrents::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportCurrents.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportCurrents::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportCurrents::Class(),this);
   }
}

//______________________________________________________________________________
void MReportCurrents::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportCurrents.
      TClass *R__cl = ::MReportCurrents::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus1", &fStatus1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus2", &fStatus2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDC", &fDC);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportCurrents(void *p) {
      return  p ? new(p) ::MReportCurrents : new ::MReportCurrents;
   }
   static void *newArray_MReportCurrents(Long_t nElements, void *p) {
      return p ? new(p) ::MReportCurrents[nElements] : new ::MReportCurrents[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportCurrents(void *p) {
      delete ((::MReportCurrents*)p);
   }
   static void deleteArray_MReportCurrents(void *p) {
      delete [] ((::MReportCurrents*)p);
   }
   static void destruct_MReportCurrents(void *p) {
      typedef ::MReportCurrents current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportCurrents

//______________________________________________________________________________
void MReportPyrometer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportPyrometer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportPyrometer::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportPyrometer::Class(),this);
   }
}

//______________________________________________________________________________
void MReportPyrometer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportPyrometer.
      TClass *R__cl = ::MReportPyrometer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempSky", &fTempSky);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempAir", &fTempAir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCloudiness", &fCloudiness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLidOpen", &fLidOpen);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportPyrometer(void *p) {
      return  p ? new(p) ::MReportPyrometer : new ::MReportPyrometer;
   }
   static void *newArray_MReportPyrometer(Long_t nElements, void *p) {
      return p ? new(p) ::MReportPyrometer[nElements] : new ::MReportPyrometer[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportPyrometer(void *p) {
      delete ((::MReportPyrometer*)p);
   }
   static void deleteArray_MReportPyrometer(void *p) {
      delete [] ((::MReportPyrometer*)p);
   }
   static void destruct_MReportPyrometer(void *p) {
      typedef ::MReportPyrometer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportPyrometer

//______________________________________________________________________________
void MReportRates::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportRates.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportRates::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportRates::Class(),this);
   }
}

//______________________________________________________________________________
void MReportRates::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportRates.
      TClass *R__cl = ::MReportRates::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOnTimeCounter", &fOnTimeCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerCounter", &fTriggerCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTriggerRate", &fTriggerRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBoardRate[40]", fBoardRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPatchRate[160]", fPatchRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElapsedTime", &fElapsedTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElapsedOnTime", &fElapsedOnTime);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportRates(void *p) {
      return  p ? new(p) ::MReportRates : new ::MReportRates;
   }
   static void *newArray_MReportRates(Long_t nElements, void *p) {
      return p ? new(p) ::MReportRates[nElements] : new ::MReportRates[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportRates(void *p) {
      delete ((::MReportRates*)p);
   }
   static void deleteArray_MReportRates(void *p) {
      delete [] ((::MReportRates*)p);
   }
   static void destruct_MReportRates(void *p) {
      typedef ::MReportRates current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportRates

//______________________________________________________________________________
void MReportHumidity::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportHumidity.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportHumidity::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportHumidity::Class(),this);
   }
}

//______________________________________________________________________________
void MReportHumidity::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportHumidity.
      TClass *R__cl = ::MReportHumidity::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHumidity[4]", fHumidity);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportHumidity(void *p) {
      return  p ? new(p) ::MReportHumidity : new ::MReportHumidity;
   }
   static void *newArray_MReportHumidity(Long_t nElements, void *p) {
      return p ? new(p) ::MReportHumidity[nElements] : new ::MReportHumidity[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportHumidity(void *p) {
      delete ((::MReportHumidity*)p);
   }
   static void deleteArray_MReportHumidity(void *p) {
      delete [] ((::MReportHumidity*)p);
   }
   static void destruct_MReportHumidity(void *p) {
      typedef ::MReportHumidity current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportHumidity

//______________________________________________________________________________
void MReportTemperatures::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportTemperatures.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportTemperatures::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportTemperatures::Class(),this);
   }
}

//______________________________________________________________________________
void MReportTemperatures::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportTemperatures.
      TClass *R__cl = ::MReportTemperatures::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeStamp", &fTimeStamp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempSensors[31]", fTempSensors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempCrate[8]", fTempCrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempPS[8]", fTempPS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempAux[4]", fTempAux);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempBack[4]", fTempBack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTempEthernet[4]", fTempEthernet);
      MReport::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MReportTemperatures(void *p) {
      return  p ? new(p) ::MReportTemperatures : new ::MReportTemperatures;
   }
   static void *newArray_MReportTemperatures(Long_t nElements, void *p) {
      return p ? new(p) ::MReportTemperatures[nElements] : new ::MReportTemperatures[nElements];
   }
   // Wrapper around operator delete
   static void delete_MReportTemperatures(void *p) {
      delete ((::MReportTemperatures*)p);
   }
   static void deleteArray_MReportTemperatures(void *p) {
      delete [] ((::MReportTemperatures*)p);
   }
   static void destruct_MReportTemperatures(void *p) {
      typedef ::MReportTemperatures current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportTemperatures

//______________________________________________________________________________
void MReportHelp::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportHelp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportHelp::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportHelp::Class(),this);
   }
}

//______________________________________________________________________________
void MReportHelp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportHelp.
      TClass *R__cl = ::MReportHelp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReport", &fReport);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumReports", &fNumReports);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSkipped", &fNumSkipped);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MReportHelp(void *p) {
      delete ((::MReportHelp*)p);
   }
   static void deleteArray_MReportHelp(void *p) {
      delete [] ((::MReportHelp*)p);
   }
   static void destruct_MReportHelp(void *p) {
      typedef ::MReportHelp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportHelp

//______________________________________________________________________________
void MReportFitsRead::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportFitsRead.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportFitsRead::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportFitsRead::Class(),this);
   }
}

//______________________________________________________________________________
void MReportFitsRead::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportFitsRead.
      TClass *R__cl = ::MReportFitsRead::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReportName", &fReportName);
      R__insp.InspectMember(fReportName, "fReportName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReport", &fReport);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStart", &fStart);
      R__insp.InspectMember(fStart, "fStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStop", &fStop);
      R__insp.InspectMember(fStop, "fStop.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufQos", &fBufQos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBufTime", &fBufTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMjdRef", &fMjdRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIn", &fIn);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MReportFitsRead(void *p) {
      delete ((::MReportFitsRead*)p);
   }
   static void deleteArray_MReportFitsRead(void *p) {
      delete [] ((::MReportFitsRead*)p);
   }
   static void destruct_MReportFitsRead(void *p) {
      typedef ::MReportFitsRead current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportFitsRead

//______________________________________________________________________________
void MReportFileRead::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportFileRead.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportFileRead::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportFileRead::Class(),this);
   }
}

//______________________________________________________________________________
void MReportFileRead::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportFileRead.
      TClass *R__cl = ::MReportFileRead::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fList", &fList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStart", &fStart);
      R__insp.InspectMember(fStart, "fStart.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStop", &fStop);
      R__insp.InspectMember(fStop, "fStop.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLine", &fNumLine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVersion", &fVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIn", &fIn);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MReportFileRead(void *p) {
      delete ((::MReportFileRead*)p);
   }
   static void deleteArray_MReportFileRead(void *p) {
      delete [] ((::MReportFileRead*)p);
   }
   static void destruct_MReportFileRead(void *p) {
      typedef ::MReportFileRead current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportFileRead

//______________________________________________________________________________
void MReportFileReadCC::Streamer(TBuffer &R__b)
{
   // Stream an object of class MReportFileReadCC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MReportFileReadCC::Class(),this);
   } else {
      R__b.WriteClassBuffer(MReportFileReadCC::Class(),this);
   }
}

//______________________________________________________________________________
void MReportFileReadCC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MReportFileReadCC.
      TClass *R__cl = ::MReportFileReadCC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescope", &fTelescope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNumber", &fFileNumber);
      MReportFileRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MReportFileReadCC(void *p) {
      delete ((::MReportFileReadCC*)p);
   }
   static void deleteArray_MReportFileReadCC(void *p) {
      delete [] ((::MReportFileReadCC*)p);
   }
   static void destruct_MReportFileReadCC(void *p) {
      typedef ::MReportFileReadCC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MReportFileReadCC

/********************************************************
* ReportCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableReportCint();

extern "C" void G__set_cpp_environmentReportCint() {
  G__cpp_reset_tagtableReportCint();
}
#include <new>
extern "C" int G__cpp_dllrevReportCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MReport */
static int G__ReportCint_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReport* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReport((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MReport((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReport((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReport((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReport));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MReport*) G__getstructoffset())->SetupReading(*(MParList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MReport*) G__getstructoffset())->SetupReadingFits(*(fits*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MReport*) G__getstructoffset())->InterpreteBody(*(TString*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MReport*) G__getstructoffset())->Interprete(*(TString*) libp->para[0].ref, *(MTime*) libp->para[1].ref
, *(MTime*) libp->para[2].ref, (const Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MReport*) G__getstructoffset())->InterpreteFits(*(fits*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReport*) G__getstructoffset())->CheckIdentifier(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const MReport*) G__getstructoffset())->GetIdentifier();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MReport*) G__getstructoffset())->GetState());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReport*) G__getstructoffset())->GetMjd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MReport*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReport::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReport::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReport::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReport::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReport*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReport::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReport::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReport::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_176_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReport::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_176_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReport* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReport(*(MReport*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReport));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReport G__TMReport;
static int G__ReportCint_176_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReport*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReport*) (soff+(sizeof(MReport)*i)))->~G__TMReport();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReport*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReport*) (soff))->~G__TMReport();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportRec */
static int G__ReportCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRec[n];
     } else {
       p = new((void*) gvp) MReportRec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRec;
     } else {
       p = new((void*) gvp) MReportRec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportRec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportRec(*(MReportRec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportRec G__TMReportRec;
static int G__ReportCint_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportRec*) (soff+(sizeof(MReportRec)*i)))->~G__TMReportRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportRec*) (soff))->~G__TMReportRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportWeather */
static int G__ReportCint_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportWeather* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportWeather((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReportWeather((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MReportWeather[n];
       } else {
         p = new((void*) gvp) MReportWeather[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MReportWeather;
       } else {
         p = new((void*) gvp) MReportWeather;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportWeather));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportWeather::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportWeather::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportWeather::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportWeather::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportWeather*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportWeather::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportWeather::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportWeather::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportWeather::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportWeather* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportWeather(*(MReportWeather*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportWeather));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportWeather G__TMReportWeather;
static int G__ReportCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportWeather*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportWeather*) (soff+(sizeof(MReportWeather)*i)))->~G__TMReportWeather();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportWeather*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportWeather*) (soff))->~G__TMReportWeather();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportCC */
static int G__ReportCint_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportCC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCC[n];
     } else {
       p = new((void*) gvp) MReportCC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCC;
     } else {
       p = new((void*) gvp) MReportCC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportCC*) G__getstructoffset())->GetHumidity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportCC*) G__getstructoffset())->GetTemperature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportCC*) G__getstructoffset())->GetWindSpeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportCC*) G__getstructoffset())->GetSolarRadiation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportCC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportCC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportCC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportCC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_182_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_182_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportCC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportCC(*(MReportCC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportCC G__TMReportCC;
static int G__ReportCint_182_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportCC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportCC*) (soff+(sizeof(MReportCC)*i)))->~G__TMReportCC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportCC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportCC*) (soff))->~G__TMReportCC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportRun */
static int G__ReportCint_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRun[n];
     } else {
       p = new((void*) gvp) MReportRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRun;
     } else {
       p = new((void*) gvp) MReportRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const MReportRun*) G__getstructoffset())->GetSourceName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((MReportRun*) G__getstructoffset())->GetSourceName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MReportRun*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MReportRun*) G__getstructoffset())->GetFileNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportRun* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportRun(*(MReportRun*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRun));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportRun G__TMReportRun;
static int G__ReportCint_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportRun*) (soff+(sizeof(MReportRun)*i)))->~G__TMReportRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportRun*) (soff))->~G__TMReportRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportDAQ */
static int G__ReportCint_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportDAQ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportDAQ[n];
     } else {
       p = new((void*) gvp) MReportDAQ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportDAQ;
     } else {
       p = new((void*) gvp) MReportDAQ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportDAQ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDAQ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportDAQ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportDAQ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportDAQ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDAQ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportDAQ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDAQ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportDAQ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportDAQ* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportDAQ(*(MReportDAQ*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportDAQ G__TMReportDAQ;
static int G__ReportCint_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportDAQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportDAQ*) (soff+(sizeof(MReportDAQ)*i)))->~G__TMReportDAQ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportDAQ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportDAQ*) (soff))->~G__TMReportDAQ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportHelp */
static int G__ReportCint_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportHelp* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MReportHelp((const char*) G__int(libp->para[0]), (MLog*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) MReportHelp((const char*) G__int(libp->para[0]), (MLog*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportHelp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const MReportHelp*) G__getstructoffset())->GetNumReports());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const MReportHelp*) G__getstructoffset())->GetNumSkipped());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MReportHelp*) G__getstructoffset())->GetReport());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MReportHelp*) G__getstructoffset())->Interprete(*(TString*) libp->para[0].ref, *(MTime*) libp->para[1].ref
, *(MTime*) libp->para[2].ref, (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MReportHelp*) G__getstructoffset())->SetupReading(*(MParList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportHelp*) G__getstructoffset())->AddToList(*(MParList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportHelp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHelp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportHelp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportHelp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportHelp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHelp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportHelp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHelp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_185_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportHelp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_185_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportHelp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportHelp(*(MReportHelp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportHelp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportHelp G__TMReportHelp;
static int G__ReportCint_185_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportHelp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportHelp*) (soff+(sizeof(MReportHelp)*i)))->~G__TMReportHelp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportHelp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportHelp*) (soff))->~G__TMReportHelp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReportCint_185_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportHelp* dest = (MReportHelp*) G__getstructoffset();
   *dest = *(MReportHelp*) libp->para[0].ref;
   const MReportHelp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportDrive */
static int G__ReportCint_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportDrive* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportDrive[n];
     } else {
       p = new((void*) gvp) MReportDrive[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportDrive;
     } else {
       p = new((void*) gvp) MReportDrive;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportDrive));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetMjd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetRa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetDec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetHa());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetNominalZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetNominalAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetCurrentZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetCurrentAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetErrorZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetErrorAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportDrive*) G__getstructoffset())->GetAbsError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportDrive::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDrive::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportDrive::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportDrive::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportDrive*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDrive::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportDrive::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportDrive::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportDrive::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportDrive* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportDrive(*(MReportDrive*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportDrive));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportDrive G__TMReportDrive;
static int G__ReportCint_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportDrive*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportDrive*) (soff+(sizeof(MReportDrive)*i)))->~G__TMReportDrive();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportDrive*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportDrive*) (soff))->~G__TMReportDrive();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportCamera */
static int G__ReportCint_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportCamera* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCamera[n];
     } else {
       p = new((void*) gvp) MReportCamera[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCamera;
     } else {
       p = new((void*) gvp) MReportCamera;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCamera));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MReportCamera*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportCamera::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCamera::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportCamera::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportCamera::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportCamera*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCamera::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCamera::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCamera::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_196_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCamera::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_196_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportCamera* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportCamera(*(MReportCamera*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCamera));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportCamera G__TMReportCamera;
static int G__ReportCint_196_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportCamera*) (soff+(sizeof(MReportCamera)*i)))->~G__TMReportCamera();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportCamera*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportCamera*) (soff))->~G__TMReportCamera();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportTrigger */
static int G__ReportCint_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportTrigger[n];
     } else {
       p = new((void*) gvp) MReportTrigger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportTrigger;
     } else {
       p = new((void*) gvp) MReportTrigger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportTrigger*) G__getstructoffset())->GetL2BeforePrescaler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportTrigger*) G__getstructoffset())->GetL2AfterPrescaler());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MReportTrigger*) G__getstructoffset())->GetTablename();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MReportTrigger*) G__getstructoffset())->GetL1Tablename();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MReportTrigger*) G__getstructoffset())->GetL2Tablename();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportTrigger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportTrigger(*(MReportTrigger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportTrigger G__TMReportTrigger;
static int G__ReportCint_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportTrigger*) (soff+(sizeof(MReportTrigger)*i)))->~G__TMReportTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportTrigger*) (soff))->~G__TMReportTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportCurrents */
static int G__ReportCint_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportCurrents* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCurrents[n];
     } else {
       p = new((void*) gvp) MReportCurrents[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportCurrents;
     } else {
       p = new((void*) gvp) MReportCurrents;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportCurrents::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCurrents::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportCurrents::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportCurrents::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportCurrents*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCurrents::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCurrents::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportCurrents::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportCurrents::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportCurrents* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportCurrents(*(MReportCurrents*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportCurrents G__TMReportCurrents;
static int G__ReportCint_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportCurrents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportCurrents*) (soff+(sizeof(MReportCurrents)*i)))->~G__TMReportCurrents();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportCurrents*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportCurrents*) (soff))->~G__TMReportCurrents();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportFitsRead */
static int G__ReportCint_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFitsRead* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFitsRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MReportFitsRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFitsRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MReportFitsRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFitsRead((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReportFitsRead((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFitsRead*) G__getstructoffset())->SetHasNoHeader();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFitsRead*) G__getstructoffset())->SetTimeStart(*(MTime*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFitsRead*) G__getstructoffset())->SetTimeStop(*(MTime*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFitsRead*) G__getstructoffset())->SetReportName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportFitsRead::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFitsRead::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportFitsRead::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportFitsRead::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFitsRead*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFitsRead::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFitsRead::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFitsRead::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFitsRead::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportFitsRead* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportFitsRead(*(MReportFitsRead*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportFitsRead G__TMReportFitsRead;
static int G__ReportCint_212_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportFitsRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportFitsRead*) (soff+(sizeof(MReportFitsRead)*i)))->~G__TMReportFitsRead();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportFitsRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportFitsRead*) (soff))->~G__TMReportFitsRead();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReportCint_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFitsRead* dest = (MReportFitsRead*) G__getstructoffset();
   *dest = *(MReportFitsRead*) libp->para[0].ref;
   const MReportFitsRead& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportFileRead */
static int G__ReportCint_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFileRead* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MReportFileRead(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MReportFileRead((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileRead((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReportFileRead((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileRead*) G__getstructoffset())->SetHasNoHeader();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileRead*) G__getstructoffset())->SetTimeStart(*(MTime*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileRead*) G__getstructoffset())->SetTimeStop(*(MTime*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReportFileRead*) G__getstructoffset())->AddToList((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportFileRead::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileRead::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportFileRead::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportFileRead::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileRead*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileRead::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFileRead::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileRead::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_214_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFileRead::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_214_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportFileRead* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportFileRead(*(MReportFileRead*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportFileRead G__TMReportFileRead;
static int G__ReportCint_214_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportFileRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportFileRead*) (soff+(sizeof(MReportFileRead)*i)))->~G__TMReportFileRead();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportFileRead*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportFileRead*) (soff))->~G__TMReportFileRead();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReportCint_214_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFileRead* dest = (MReportFileRead*) G__getstructoffset();
   *dest = *(MReportFileRead*) libp->para[0].ref;
   const MReportFileRead& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportFileReadCC */
static int G__ReportCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFileReadCC* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileReadCC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MReportFileReadCC(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileReadCC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MReportFileReadCC((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportFileReadCC((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MReportFileReadCC((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileReadCC*) G__getstructoffset())->SetTelescope((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileReadCC*) G__getstructoffset())->SetRunNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileReadCC*) G__getstructoffset())->SetFileNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportFileReadCC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileReadCC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportFileReadCC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportFileReadCC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportFileReadCC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileReadCC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFileReadCC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportFileReadCC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportFileReadCC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportFileReadCC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportFileReadCC(*(MReportFileReadCC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportFileReadCC G__TMReportFileReadCC;
static int G__ReportCint_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportFileReadCC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportFileReadCC*) (soff+(sizeof(MReportFileReadCC)*i)))->~G__TMReportFileReadCC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportFileReadCC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportFileReadCC*) (soff))->~G__TMReportFileReadCC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ReportCint_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportFileReadCC* dest = (MReportFileReadCC*) G__getstructoffset();
   *dest = *(MReportFileReadCC*) libp->para[0].ref;
   const MReportFileReadCC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportStarguider */
static int G__ReportCint_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportStarguider* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportStarguider[n];
     } else {
       p = new((void*) gvp) MReportStarguider[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportStarguider;
     } else {
       p = new((void*) gvp) MReportStarguider;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetDevAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetDevZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetDevAbs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MReportStarguider*) G__getstructoffset())->GetDev();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetNominalZd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetNominalAz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MReportStarguider*) G__getstructoffset())->GetNominalPos();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportStarguider*) G__getstructoffset())->GetCameraCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportStarguider*) G__getstructoffset())->GetCameraCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MReportStarguider*) G__getstructoffset())->GetCameraCenter();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MReportStarguider*) G__getstructoffset())->GetNumIdentifiedStars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MReportStarguider*) G__getstructoffset())->GetNumCorrelatedStars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetSkyBrightness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MReportStarguider*) G__getstructoffset())->GetMjd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReportStarguider*) G__getstructoffset())->IsMonitoring());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportStarguider::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportStarguider::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportStarguider::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportStarguider::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportStarguider*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportStarguider::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportStarguider::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportStarguider::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_218_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportStarguider::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_218_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportStarguider* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportStarguider(*(MReportStarguider*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportStarguider G__TMReportStarguider;
static int G__ReportCint_218_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportStarguider*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportStarguider*) (soff+(sizeof(MReportStarguider)*i)))->~G__TMReportStarguider();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportStarguider*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportStarguider*) (soff))->~G__TMReportStarguider();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportPyrometer */
static int G__ReportCint_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportPyrometer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportPyrometer[n];
     } else {
       p = new((void*) gvp) MReportPyrometer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportPyrometer;
     } else {
       p = new((void*) gvp) MReportPyrometer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportPyrometer*) G__getstructoffset())->GetTempSky());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportPyrometer*) G__getstructoffset())->GetTempAir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportPyrometer*) G__getstructoffset())->GetCloudiness());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MReportPyrometer*) G__getstructoffset())->IsLidOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportPyrometer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportPyrometer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportPyrometer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportPyrometer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportPyrometer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportPyrometer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportPyrometer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportPyrometer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportPyrometer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_220_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportPyrometer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportPyrometer(*(MReportPyrometer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportPyrometer G__TMReportPyrometer;
static int G__ReportCint_220_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportPyrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportPyrometer*) (soff+(sizeof(MReportPyrometer)*i)))->~G__TMReportPyrometer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportPyrometer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportPyrometer*) (soff))->~G__TMReportPyrometer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportRates */
static int G__ReportCint_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportRates* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRates[n];
     } else {
       p = new((void*) gvp) MReportRates[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportRates;
     } else {
       p = new((void*) gvp) MReportRates;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRates));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const MReportRates*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const MReportRates*) G__getstructoffset())->GetOnTimeCounter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MReportRates*) G__getstructoffset())->GetTriggerCounter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportRates*) G__getstructoffset())->GetTriggerRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportRates*) G__getstructoffset())->GetElapsedTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportRates*) G__getstructoffset())->GetElapsedOnTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportRates::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRates::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportRates::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportRates::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportRates*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRates::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRates::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportRates::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_221_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportRates::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_221_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportRates* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportRates(*(MReportRates*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportRates));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportRates G__TMReportRates;
static int G__ReportCint_221_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportRates*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportRates*) (soff+(sizeof(MReportRates)*i)))->~G__TMReportRates();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportRates*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportRates*) (soff))->~G__TMReportRates();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportTemperatures */
static int G__ReportCint_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportTemperatures* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportTemperatures[n];
     } else {
       p = new((void*) gvp) MReportTemperatures[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportTemperatures;
     } else {
       p = new((void*) gvp) MReportTemperatures;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportTemperatures*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportTemperatures*) G__getstructoffset())->GetTempMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportTemperatures*) G__getstructoffset())->GetTempMedian());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportTemperatures::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTemperatures::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportTemperatures::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportTemperatures::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportTemperatures*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTemperatures::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportTemperatures::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportTemperatures::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_222_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportTemperatures::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_222_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportTemperatures* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportTemperatures(*(MReportTemperatures*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportTemperatures G__TMReportTemperatures;
static int G__ReportCint_222_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportTemperatures*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportTemperatures*) (soff+(sizeof(MReportTemperatures)*i)))->~G__TMReportTemperatures();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportTemperatures*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportTemperatures*) (soff))->~G__TMReportTemperatures();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MReportHumidity */
static int G__ReportCint_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MReportHumidity* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportHumidity[n];
     } else {
       p = new((void*) gvp) MReportHumidity[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MReportHumidity;
     } else {
       p = new((void*) gvp) MReportHumidity;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportHumidity*) G__getstructoffset())->GetTimeStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MReportHumidity*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MReportHumidity::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHumidity::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MReportHumidity::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MReportHumidity::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MReportHumidity*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHumidity::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportHumidity::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MReportHumidity::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ReportCint_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MReportHumidity::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ReportCint_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MReportHumidity* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MReportHumidity(*(MReportHumidity*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MReportHumidity G__TMReportHumidity;
static int G__ReportCint_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MReportHumidity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MReportHumidity*) (soff+(sizeof(MReportHumidity)*i)))->~G__TMReportHumidity();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MReportHumidity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MReportHumidity*) (soff))->~G__TMReportHumidity();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MReport */

/* MReportRec */

/* MReportWeather */

/* MReportCC */

/* MReportRun */

/* MReportDAQ */

/* MReportHelp */

/* MReportDrive */

/* MReportCamera */

/* MReportTrigger */

/* MReportCurrents */

/* MReportFitsRead */

/* MReportFileRead */

/* MReportFileReadCC */

/* MReportStarguider */

/* MReportPyrometer */

/* MReportRates */

/* MReportTemperatures */

/* MReportHumidity */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncReportCint {
 public:
  G__Sizep2memfuncReportCint(): p(&G__Sizep2memfuncReportCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncReportCint::*p)();
};

size_t G__get_sizep2memfuncReportCint()
{
  G__Sizep2memfuncReportCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceReportCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReport))) {
     MReport *G__Lderived;
     G__Lderived=(MReport*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReport),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReport),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportRec))) {
     MReportRec *G__Lderived;
     G__Lderived=(MReportRec*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRec),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRec),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRec),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather))) {
     MReportWeather *G__Lderived;
     G__Lderived=(MReportWeather*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportCC))) {
     MReportCC *G__Lderived;
     G__Lderived=(MReportCC*)0x1000;
     {
       MReportWeather *G__Lpbase=(MReportWeather*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC),G__get_linked_tagnum(&G__ReportCintLN_MReportWeather),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportRun))) {
     MReportRun *G__Lderived;
     G__Lderived=(MReportRun*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRun),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRun),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRun),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ))) {
     MReportDAQ *G__Lderived;
     G__Lderived=(MReportDAQ*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportHelp))) {
     MReportHelp *G__Lderived;
     G__Lderived=(MReportHelp*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHelp),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive))) {
     MReportDrive *G__Lderived;
     G__Lderived=(MReportDrive*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera))) {
     MReportCamera *G__Lderived;
     G__Lderived=(MReportCamera*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger))) {
     MReportTrigger *G__Lderived;
     G__Lderived=(MReportTrigger*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents))) {
     MReportCurrents *G__Lderived;
     G__Lderived=(MReportCurrents*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead))) {
     MReportFitsRead *G__Lderived;
     G__Lderived=(MReportFitsRead*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead),G__get_linked_tagnum(&G__ReportCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead),G__get_linked_tagnum(&G__ReportCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead))) {
     MReportFileRead *G__Lderived;
     G__Lderived=(MReportFileRead*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead),G__get_linked_tagnum(&G__ReportCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead),G__get_linked_tagnum(&G__ReportCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC))) {
     MReportFileReadCC *G__Lderived;
     G__Lderived=(MReportFileReadCC*)0x1000;
     {
       MReportFileRead *G__Lpbase=(MReportFileRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC),G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC),G__get_linked_tagnum(&G__ReportCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC),G__get_linked_tagnum(&G__ReportCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider))) {
     MReportStarguider *G__Lderived;
     G__Lderived=(MReportStarguider*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer))) {
     MReportPyrometer *G__Lderived;
     G__Lderived=(MReportPyrometer*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportRates))) {
     MReportRates *G__Lderived;
     G__Lderived=(MReportRates*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRates),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRates),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRates),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures))) {
     MReportTemperatures *G__Lderived;
     G__Lderived=(MReportTemperatures*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity))) {
     MReportHumidity *G__Lderived;
     G__Lderived=(MReportHumidity*)0x1000;
     {
       MReport *G__Lpbase=(MReport*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity),G__get_linked_tagnum(&G__ReportCintLN_MReport),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity),G__get_linked_tagnum(&G__ReportCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity),G__get_linked_tagnum(&G__ReportCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableReportCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReportCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReportCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ReportCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ReportCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MReport */
static void G__setup_memvarMReport(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReport));
   { MReport *p; p=(MReport*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fIdentifier=",0,"! Identifier of the subsystem");
   G__memvar_setup((void*)0,103,0,1,-1,G__defined_typename("Bool_t"),-1,4,"fHasReportTime=",0,"! Intermediate solution for DC currents");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fState=",0,"Status of the subsystem");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTime),-1,-1,4,"fTime=",0,"! pointer to the corresponding time stamp");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportRec */
static void G__setup_memvarMReportRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRec));
   { MReportRec *p; p=(MReportRec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraTH),-1,-1,4,"fTH=",0,"! Discriminator thresholds");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraTD),-1,-1,4,"fTD=",0,"! Discriminator delays");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraRecTemp),-1,-1,4,"fRecTemp=",0,"! Receiver Board temperatures");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportWeather */
static void G__setup_memvarMReportWeather(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather));
   { MReportWeather *p; p=(MReportWeather*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHumidity=",0,"[%]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTemperature=",0,"[deg] celsius");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fWindSpeed=",0,"[km/h]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fSolarRadiation=",0,"[W/m^2] IR-Radiation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportCC */
static void G__setup_memvarMReportCC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC));
   { MReportCC *p; p=(MReportCC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUPSStatus=",0,"arbitrary units (still not properly defined)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDifRubGPS=",0,"[us] Difference between the Rubidium clock time and the time provided by the GPS receiver");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraTH),-1,-1,4,"fTH=",0,"! Discriminator thresholds");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraTD),-1,-1,4,"fTD=",0,"! Discriminator delays");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraRecTemp),-1,-1,4,"fRecTemp=",0,"! Receiver Board temperatures");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MReportRec),-1,-1,4,"fRecRep=",0,"! Pipe interpretation to MReportRec if necessary");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportRun */
static void G__setup_memvarMReportRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRun));
   { MReportRun *p; p=(MReportRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRunNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFileNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fSourceName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportDAQ */
static void G__setup_memvarMReportDAQ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ));
   { MReportDAQ *p; p=(MReportDAQ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportHelp */
static void G__setup_memvarMReportHelp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHelp));
   { MReportHelp *p; p=(MReportHelp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MReport),-1,-1,4,"fReport=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fNumReports=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fNumSkipped=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportDrive */
static void G__setup_memvarMReportDrive(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive));
   { MReportDrive *p; p=(MReportDrive*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMjd=",0,"Modified Julian Date send by the drive system");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRa=",0,"[h]   Right ascension");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDec=",0,"[deg] Declination");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHa=",0,"[h]   Hour angle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNominalZd=",0,"[deg] Nominal zenith distance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNominalAz=",0,"[deg] Nominal azimuth");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrentZd=",0,"[deg] current zenith distance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCurrentAz=",0,"[deg] current azimuth");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fErrorZd=",0,"[deg] system error in the zenith angle axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fErrorAz=",0,"[deg] sistem error in the azimuth angle axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportCamera */
static void G__setup_memvarMReportCamera(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera));
   { MReportCamera *p; p=(MReportCamera*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus=",0,"CaCo monitored status of the sentinel (0-9), Sentinel_state");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraCooling),-1,-1,4,"fCooling=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraLids),-1,-1,4,"fLids=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraAUX),-1,-1,4,"fAUX=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraHV),-1,-1,4,"fHV=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraDC),-1,-1,4,"fDC=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraLV),-1,-1,4,"fLV=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraActiveLoad),-1,-1,4,"fActiveLoad=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraCalibration),-1,-1,4,"fCalibration=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraCentralPix),-1,-1,4,"fCentralPix=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportTrigger */
static void G__setup_memvarMReportTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger));
   { MReportTrigger *p; p=(MReportTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fL2BeforePrescaler=",0,"L2 trigger rate before prescaler");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fL2AfterPrescaler=",0,"L2 trigger rate after prescaler");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fTablename=",0,"Name of the trigger table");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fL1Tablename=",0,"Name of the L1 trigger table");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fL2Tablename=",0,"Name of the L2 trigger table");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTriggerBit),-1,-1,4,"fBit=",0,"! container of the L2 prescaler rates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTriggerIPR),-1,-1,4,"fIPR=",0,"! container of the IPR");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTriggerCell),-1,-1,4,"fCell=",0,"! container of the L1 cell trigger rates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTriggerPrescFact),-1,-1,4,"fPrescFactor=",0,"! container of the L2 prescaling factors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTriggerLiveTime),-1,-1,4,"fLiveTime=",0,"! container of the scaler live-deadtime");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportCurrents */
static void G__setup_memvarMReportCurrents(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents));
   { MReportCurrents *p; p=(MReportCurrents*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus1=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fStatus2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MCameraDC),-1,-1,4,"fDC=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportFitsRead */
static void G__setup_memvarMReportFitsRead(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead));
   { MReportFitsRead *p; p=(MReportFitsRead*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fFileName=",0,"Name of the input file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fReportName=",0,"Name of the report class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_MReport),-1,-1,4,"fReport=",0,"List of possible reports to be interpreted");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTime),-1,-1,4,"fStart=",0,"Time range which should be read from file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTime),-1,-1,4,"fStop=",0,"Time range which should be read from file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBufQos=",0,"! Buffer for Quality of Service");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBufTime=",0,"! Buffer for Time");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMjdRef=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReportCintLN_MReportFitsReadcLcLdA),-1,-2,4,"kHasNoHeader=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_fits),-1,-1,2,"fIn=",0,"! buffered input stream (file to read from)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportFileRead */
static void G__setup_memvarMReportFileRead(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead));
   { MReportFileRead *p; p=(MReportFileRead*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_TString),-1,-1,4,"fFileName=",0,"Name of the input file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_THashTable),-1,-1,4,"fList=",0,"List of possible reports to be interpreted");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTime),-1,-1,4,"fStart=",0,"Time range which should be read from file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ReportCintLN_MTime),-1,-1,4,"fStop=",0,"Time range which should be read from file");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fNumLine=",0,"line counter");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVersion=",0,"File format version");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadcLcLdA),-1,-2,4,"kHasNoHeader=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ifstream"),-1,2,"fIn=",0,"! buffered input stream (file to read from)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportFileReadCC */
static void G__setup_memvarMReportFileReadCC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC));
   { MReportFileReadCC *p; p=(MReportFileReadCC*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTelescope=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRunNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFileNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportStarguider */
static void G__setup_memvarMReportStarguider(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider));
   { MReportStarguider *p; p=(MReportStarguider*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReportCintLN_MReportStarguidercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kError=%lldLL",(long long)MReportStarguider::kError).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReportCintLN_MReportStarguidercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kStandby=%lldLL",(long long)MReportStarguider::kStandby).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ReportCintLN_MReportStarguidercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kMonitoring=%lldLL",(long long)MReportStarguider::kMonitoring).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevAz=",0,"[arcmin] azimuth mispointing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDevZd=",0,"[arcmin] zenith  mispointing");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNominalZd=",0,"[deg] Nominal zenith distance");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNominalAz=",0,"[deg] Nominal azimuth");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCameraCenterX=",0,"[CCD pix] PMT Camera center found");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCameraCenterY=",0,"[CCD pix] PMT Camera center found");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumIdentifiedStars=",0,"Number of stars identified by starguider algorithm");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumCorrelatedStars=",0,"Number of correlated stars identified by starguider algorithm");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSkyBrightness=",0,"[au] Sky Brightness as calcualted from the CCD image");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMjd=",0,"Modified Julian Date matching the nominal position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportPyrometer */
static void G__setup_memvarMReportPyrometer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer));
   { MReportPyrometer *p; p=(MReportPyrometer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempSky=",0,"[K] Temperature Sky");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempAir=",0,"[K] Tempareture Air");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCloudiness=",0,"[%] Cloudiness");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fLidOpen=",0,"Lid Status");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportRates */
static void G__setup_memvarMReportRates(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRates));
   { MReportRates *p; p=(MReportRates*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fTimeStamp=",0,"[us] Time in microseconds, since trigger enabled or disabled");
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"fOnTimeCounter=",0,"[us] Effective on-time, i.e. FTM processes triggers (e.g. No FAD busy)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTriggerCounter=",0,"Counter of camera trigers (events) since trigger enabled or disabled\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTriggerRate=",0,"[Hz] Trigger rate\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBoardRate[40]=",0,"[Hz] Board rates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPatchRate[160]=",0,"[Hz] Patch rates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElapsedTime=",0,"[s]  Time elapsed since previous report");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElapsedOnTime=",0,"[s]  On-time elapsed since previous report");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportTemperatures */
static void G__setup_memvarMReportTemperatures(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures));
   { MReportTemperatures *p; p=(MReportTemperatures*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeStamp=",0,"[s] FSC uptime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempSensors[31]=",0,"[deg C] Sensor compartment temperatures");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempCrate[8]=",0,"[deg C] Temperatures crate 0 (back/front), 1 (back/front), 2 (back/front), 3 (back/front)\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempPS[8]=",0,"[deg C] Temperatures power supplies crate 0 (back/front), 1 (back/front), 2 (back/front), 3 (back/front)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempAux[4]=",0,"[deg C] Auxiliary power supply temperatures FTM (top/bottom), FSC (top/bottom)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempBack[4]=",0,"[deg C] FTM backpanel temperatures FTM (top/bottom), FSC (top/bottom)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTempEthernet[4]=",0,"[deg C] Ethernet switches temperatures top (front/back), bottom (front/back)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MReportHumidity */
static void G__setup_memvarMReportHumidity(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity));
   { MReportHumidity *p; p=(MReportHumidity*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeStamp=",0,"[s] FSC uptime");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHumidity[4]=",0,"H[%] Humidity sensors readout");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ReportCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarReportCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMReport(void) {
   /* MReport */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReport));
   G__memfunc_setup("Hash",388,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteHeader",1643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckTag",762,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 8, 
"u 'TString' - 1 - str C - - 10 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReport",713,G__ReportCint_176_0_5, 105, G__get_linked_tagnum(&G__ReportCintLN_MReport), -1, 0, 2, 1, 1, 0, 
"C - - 10 - id g - 'Bool_t' 0 'kTRUE' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupReading",1227,G__ReportCint_176_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupReadingFits",1633,G__ReportCint_176_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'fits' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteBody",1456,G__ReportCint_176_0_8, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Interprete",1058,G__ReportCint_176_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'TString' - 1 - str u 'MTime' - 11 - start "
"u 'MTime' - 11 - stop i - 'Int_t' 10 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteFits",1464,G__ReportCint_176_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'fits' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckIdentifier",1505,G__ReportCint_176_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__ReportCint_176_0_12, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetState",801,G__ReportCint_176_0_13, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMjd",571,G__ReportCint_176_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__ReportCint_176_0_15, 85, G__get_linked_tagnum(&G__ReportCintLN_MTime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_176_0_16, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReport::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_176_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReport::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_176_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReport::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_176_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReport::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_176_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_176_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReport::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_176_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReport::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_176_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReport::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_176_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReport::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReport", 713, G__ReportCint_176_0_28, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReport), -1, 0, 1, 1, 1, 0, "u 'MReport' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReport", 839, G__ReportCint_176_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportRec(void) {
   /* MReportRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRec));
   G__memfunc_setup("SetupReading",1227,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteTH",1214,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteTD",1210,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteRecTemp",1746,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteRec",1340,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver "
"u 'MCameraTH' - 1 - th u 'MCameraTD' - 1 - td "
"u 'MCameraRecTemp' - 1 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportRec",995,G__ReportCint_177_0_7, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportRec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_177_0_8, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_177_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_177_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_177_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_177_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_177_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_177_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_177_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_177_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportRec", 995, G__ReportCint_177_0_20, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportRec), -1, 0, 1, 1, 1, 0, "u 'MReportRec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportRec", 1121, G__ReportCint_177_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportWeather(void) {
   /* MReportWeather */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportWeather));
   G__memfunc_setup("SetupReadingFits",1633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'fits' - 1 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportWeather",1433,G__ReportCint_181_0_2, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportWeather), -1, 0, 1, 1, 1, 0, "C - - 10 '\"WEATHER-REPORT\"' rep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_181_0_4, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportWeather::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_181_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportWeather::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_181_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportWeather::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_181_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportWeather::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_181_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_181_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportWeather::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_181_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportWeather::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_181_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportWeather::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_181_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportWeather::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportWeather", 1433, G__ReportCint_181_0_16, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportWeather), -1, 0, 1, 1, 1, 0, "u 'MReportWeather' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportWeather", 1559, G__ReportCint_181_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportCC(void) {
   /* MReportCC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCC));
   G__memfunc_setup("SetupReading",1227,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteCC",1192,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteSchedule",1871,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteStatusM2",1829,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportCC",847,G__ReportCint_182_0_6, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportCC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHumidity",1133,G__ReportCint_182_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTemperature",1454,G__ReportCint_182_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWindSpeed",1187,G__ReportCint_182_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSolarRadiation",1724,G__ReportCint_182_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_182_0_11, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportCC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_182_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_182_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportCC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_182_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportCC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_182_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_182_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_182_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_182_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_182_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportCC", 847, G__ReportCint_182_0_23, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportCC), -1, 0, 1, 1, 1, 0, "u 'MReportCC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportCC", 973, G__ReportCint_182_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportRun(void) {
   /* MReportRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRun));
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportRun",1022,G__ReportCint_183_0_2, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceName",1298,G__ReportCint_183_0_3, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceName",1298,G__ReportCint_183_0_4, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__ReportCint_183_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileNumber",1289,G__ReportCint_183_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_183_0_7, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_183_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_183_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_183_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_183_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_183_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_183_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_183_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_183_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRun::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportRun", 1022, G__ReportCint_183_0_19, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportRun), -1, 0, 1, 1, 1, 0, "u 'MReportRun' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportRun", 1148, G__ReportCint_183_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportDAQ(void) {
   /* MReportDAQ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ));
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportDAQ",927,G__ReportCint_184_0_2, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_184_0_3, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportDAQ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_184_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDAQ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_184_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportDAQ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_184_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportDAQ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_184_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_184_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDAQ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_184_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportDAQ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_184_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDAQ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_184_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportDAQ::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportDAQ", 927, G__ReportCint_184_0_15, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportDAQ), -1, 0, 1, 1, 1, 0, "u 'MReportDAQ' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportDAQ", 1053, G__ReportCint_184_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportHelp(void) {
   /* MReportHelp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHelp));
   G__memfunc_setup("MReportHelp",1106,G__ReportCint_185_0_1, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportHelp), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name U 'MLog' - 0 - fLog", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumReports",1343,G__ReportCint_185_0_3, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSkipped",1312,G__ReportCint_185_0_4, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hash",388,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetReport",924,G__ReportCint_185_0_6, 85, G__get_linked_tagnum(&G__ReportCintLN_MReport), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Interprete",1058,G__ReportCint_185_0_7, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'TString' - 1 - str u 'MTime' - 11 - start "
"u 'MTime' - 11 - stop i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupReading",1227,G__ReportCint_185_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddToList",872,G__ReportCint_185_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_185_0_10, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportHelp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_185_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHelp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_185_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportHelp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_185_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportHelp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_185_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_185_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHelp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_185_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportHelp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_185_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHelp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_185_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportHelp::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportHelp", 1106, G__ReportCint_185_0_22, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportHelp), -1, 0, 1, 1, 1, 0, "u 'MReportHelp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportHelp", 1232, G__ReportCint_185_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReportCint_185_0_24, (int) ('u'), G__get_linked_tagnum(&G__ReportCintLN_MReportHelp), -1, 1, 1, 1, 1, 0, "u 'MReportHelp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportDrive(void) {
   /* MReportDrive */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportDrive));
   G__memfunc_setup("SetupReadingFits",1633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'fits' - 1 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteFits",1464,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'fits' - 11 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportDrive",1219,G__ReportCint_186_0_4, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportDrive), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMjd",571,G__ReportCint_186_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRa",467,G__ReportCint_186_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDec",556,G__ReportCint_186_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHa",457,G__ReportCint_186_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNominalZd",1196,G__ReportCint_186_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNominalAz",1193,G__ReportCint_186_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentZd",1217,G__ReportCint_186_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentAz",1214,G__ReportCint_186_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorZd",1000,G__ReportCint_186_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorAz",997,G__ReportCint_186_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsError",1088,G__ReportCint_186_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_186_0_17, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportDrive::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_186_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDrive::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_186_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportDrive::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_186_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportDrive::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_186_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_186_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDrive::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_186_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportDrive::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_186_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportDrive::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_186_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportDrive::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportDrive", 1219, G__ReportCint_186_0_29, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportDrive), -1, 0, 1, 1, 1, 0, "u 'MReportDrive' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportDrive", 1345, G__ReportCint_186_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportCamera(void) {
   /* MReportCamera */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCamera));
   G__memfunc_setup("SetupReading",1227,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteCamera",1643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteDC",1193,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteHV",1216,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteCOOL",1359,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteLID",1275,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteHVPS",1379,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteLV",1220,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteAUX",1296,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteCAL",1266,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteHOT",1293,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteActiveLoad",2046,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteCentralPix",2076,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteCHTEMP",1507,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteHVFIL",1435,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpretePSSEN",1451,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteLIQ",1288,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportCamera",1298,G__ReportCint_196_0_19, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportCamera), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__ReportCint_196_0_20, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_196_0_21, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportCamera::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_196_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCamera::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_196_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportCamera::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_196_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportCamera::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_196_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_196_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCamera::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_196_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCamera::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_196_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCamera::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_196_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCamera::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportCamera", 1298, G__ReportCint_196_0_33, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportCamera), -1, 0, 1, 1, 1, 0, "u 'MReportCamera' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportCamera", 1424, G__ReportCint_196_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportTrigger(void) {
   /* MReportTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger));
   G__memfunc_setup("SetupReading",1227,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteIPR",1293,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteCell",1442,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteBit",1345,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpretePrescFact",1949,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteLiveTime",1857,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteDummy",1582,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteL1L2Table",1797,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteOldBody",1743,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TString' - 1 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MReportTrigger",1437,G__ReportCint_204_0_11, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2BeforePrescaler",1938,G__ReportCint_204_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2AfterPrescaler",1841,G__ReportCint_204_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTablename",1193,G__ReportCint_204_0_14, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL1Tablename",1318,G__ReportCint_204_0_15, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL2Tablename",1319,G__ReportCint_204_0_16, 117, G__get_linked_tagnum(&G__ReportCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_204_0_17, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_204_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_204_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_204_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_204_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_204_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_204_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_204_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_204_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportTrigger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportTrigger", 1437, G__ReportCint_204_0_29, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportTrigger), -1, 0, 1, 1, 1, 0, "u 'MReportTrigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportTrigger", 1563, G__ReportCint_204_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportCurrents(void) {
   /* MReportCurrents */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents));
   G__memfunc_setup("SetupReading",1227,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 1 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportCurrents",1567,G__ReportCint_205_0_3, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_205_0_4, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportCurrents::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_205_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCurrents::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_205_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportCurrents::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_205_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportCurrents::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_205_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_205_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCurrents::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_205_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCurrents::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_205_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportCurrents::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_205_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportCurrents::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportCurrents", 1567, G__ReportCint_205_0_16, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportCurrents), -1, 0, 1, 1, 1, 0, "u 'MReportCurrents' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportCurrents", 1693, G__ReportCint_205_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportFitsRead(void) {
   /* MReportFitsRead */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckFileHeader",1447,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportFitsRead",1499,G__ReportCint_212_0_5, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead), -1, 0, 3, 1, 1, 0, 
"C - - 10 - filename C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHasNoHeader",1358,G__ReportCint_212_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStart",1225,G__ReportCint_212_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MTime' - 11 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStop",1121,G__ReportCint_212_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MTime' - 11 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReportName",1321,G__ReportCint_212_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_212_0_10, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportFitsRead::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_212_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFitsRead::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_212_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportFitsRead::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_212_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportFitsRead::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_212_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_212_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFitsRead::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_212_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFitsRead::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_212_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFitsRead::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_212_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFitsRead::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportFitsRead", 1499, G__ReportCint_212_0_22, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead), -1, 0, 1, 1, 1, 0, "u 'MReportFitsRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportFitsRead", 1625, G__ReportCint_212_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReportCint_212_0_24, (int) ('u'), G__get_linked_tagnum(&G__ReportCintLN_MReportFitsRead), -1, 1, 1, 1, 1, 0, "u 'MReportFitsRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportFileRead(void) {
   /* MReportFileRead */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckFileHeader",1447,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetReport",924,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ReportCintLN_MReport), -1, 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReport",924,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ReportCintLN_MReport), -1, 0, 1, 1, 4, 8, "U 'MReportHelp' - 0 - help", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReportHelp",1317,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ReportCintLN_MReportHelp), -1, 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MReportFileRead",1477,G__ReportCint_214_0_9, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead), -1, 0, 3, 1, 1, 0, 
"C - - 10 - filename C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHasNoHeader",1358,G__ReportCint_214_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStart",1225,G__ReportCint_214_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MTime' - 11 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeStop",1121,G__ReportCint_214_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MTime' - 11 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddToList",872,G__ReportCint_214_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_214_0_14, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportFileRead::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_214_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileRead::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_214_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportFileRead::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_214_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportFileRead::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_214_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_214_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileRead::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_214_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFileRead::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_214_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileRead::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_214_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFileRead::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportFileRead", 1477, G__ReportCint_214_0_26, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead), -1, 0, 1, 1, 1, 0, "u 'MReportFileRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportFileRead", 1603, G__ReportCint_214_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReportCint_214_0_28, (int) ('u'), G__get_linked_tagnum(&G__ReportCintLN_MReportFileRead), -1, 1, 1, 1, 1, 0, "u 'MReportFileRead' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportFileReadCC(void) {
   /* MReportFileReadCC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC));
   G__memfunc_setup("GetRunNumber",1214,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescope",1220,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileNumber",1289,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckFileHeader",1447,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportFileReadCC",1611,G__ReportCint_216_0_6, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC), -1, 0, 3, 1, 1, 0, 
"C - - 10 - filename C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTelescope",1232,G__ReportCint_216_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__ReportCint_216_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileNumber",1301,G__ReportCint_216_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_216_0_10, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportFileReadCC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_216_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileReadCC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_216_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportFileReadCC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_216_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportFileReadCC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_216_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_216_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileReadCC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_216_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFileReadCC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_216_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportFileReadCC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_216_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportFileReadCC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportFileReadCC", 1611, G__ReportCint_216_0_22, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC), -1, 0, 1, 1, 1, 0, "u 'MReportFileReadCC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportFileReadCC", 1737, G__ReportCint_216_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ReportCint_216_0_24, (int) ('u'), G__get_linked_tagnum(&G__ReportCintLN_MReportFileReadCC), -1, 1, 1, 1, 1, 0, "u 'MReportFileReadCC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportStarguider(void) {
   /* MReportStarguider */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider));
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportStarguider",1763,G__ReportCint_218_0_2, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDevAz",762,G__ReportCint_218_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevZd",765,G__ReportCint_218_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevAbs",853,G__ReportCint_218_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDev",575,G__ReportCint_218_0_7, 117, G__get_linked_tagnum(&G__ReportCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNominalZd",1196,G__ReportCint_218_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNominalAz",1193,G__ReportCint_218_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNominalPos",1312,G__ReportCint_218_0_10, 117, G__get_linked_tagnum(&G__ReportCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCameraCenterX",1570,G__ReportCint_218_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCameraCenterY",1571,G__ReportCint_218_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCameraCenter",1482,G__ReportCint_218_0_13, 117, G__get_linked_tagnum(&G__ReportCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumIdentifiedStars",2130,G__ReportCint_218_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumCorrelatedStars",2146,G__ReportCint_218_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSkyBrightness",1648,G__ReportCint_218_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMjd",571,G__ReportCint_218_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsMonitoring",1250,G__ReportCint_218_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_218_0_20, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportStarguider::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_218_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportStarguider::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_218_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportStarguider::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_218_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportStarguider::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_218_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_218_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportStarguider::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_218_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportStarguider::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_218_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportStarguider::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_218_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportStarguider::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportStarguider", 1763, G__ReportCint_218_0_32, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportStarguider), -1, 0, 1, 1, 1, 0, "u 'MReportStarguider' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportStarguider", 1889, G__ReportCint_218_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportPyrometer(void) {
   /* MReportPyrometer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer));
   G__memfunc_setup("InterpreteBody",1456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 1 - str i - 'Int_t' 0 - ver", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportPyrometer",1680,G__ReportCint_220_0_2, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempSky",1005,G__ReportCint_220_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempAir",978,G__ReportCint_220_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCloudiness",1337,G__ReportCint_220_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLidOpen",871,G__ReportCint_220_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ReportCint_220_0_7, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportPyrometer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_220_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportPyrometer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_220_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportPyrometer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_220_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportPyrometer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_220_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_220_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportPyrometer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_220_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportPyrometer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_220_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportPyrometer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_220_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportPyrometer::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportPyrometer", 1680, G__ReportCint_220_0_19, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportPyrometer), -1, 0, 1, 1, 1, 0, "u 'MReportPyrometer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportPyrometer", 1806, G__ReportCint_220_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportRates(void) {
   /* MReportRates */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportRates));
   G__memfunc_setup("SetupReadingFits",1633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'fits' - 1 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteFits",1464,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'fits' - 11 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportRates",1224,G__ReportCint_221_0_3, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportRates), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__ReportCint_221_0_4, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOnTimeCounter",1612,G__ReportCint_221_0_5, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerCounter",1748,G__ReportCint_221_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerRate",1408,G__ReportCint_221_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElapsedTime",1389,G__ReportCint_221_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetElapsedOnTime",1578,G__ReportCint_221_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_221_0_11, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportRates::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_221_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRates::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_221_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportRates::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_221_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportRates::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_221_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_221_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRates::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_221_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRates::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_221_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportRates::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_221_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportRates::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportRates", 1224, G__ReportCint_221_0_23, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportRates), -1, 0, 1, 1, 1, 0, "u 'MReportRates' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportRates", 1350, G__ReportCint_221_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportTemperatures(void) {
   /* MReportTemperatures */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures));
   G__memfunc_setup("SetupReadingFits",1633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'fits' - 1 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteFits",1464,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'fits' - 11 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportTemperatures",1994,G__ReportCint_222_0_3, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__ReportCint_222_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempMean",1079,G__ReportCint_222_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTempMedian",1284,G__ReportCint_222_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_222_0_8, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportTemperatures::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_222_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTemperatures::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_222_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportTemperatures::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_222_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportTemperatures::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_222_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_222_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTemperatures::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_222_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportTemperatures::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_222_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportTemperatures::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_222_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportTemperatures::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportTemperatures", 1994, G__ReportCint_222_0_20, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportTemperatures), -1, 0, 1, 1, 1, 0, "u 'MReportTemperatures' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportTemperatures", 2120, G__ReportCint_222_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMReportHumidity(void) {
   /* MReportHumidity */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity));
   G__memfunc_setup("SetupReadingFits",1633,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'fits' - 1 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterpreteFits",1464,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'fits' - 11 - fits", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MReportHumidity",1558,G__ReportCint_223_0_3, 105, G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__ReportCint_223_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__ReportCint_223_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ReportCint_223_0_7, 85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MReportHumidity::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ReportCint_223_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHumidity::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ReportCint_223_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MReportHumidity::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ReportCint_223_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MReportHumidity::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ReportCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ReportCint_223_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ReportCint_223_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHumidity::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ReportCint_223_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportHumidity::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ReportCint_223_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MReportHumidity::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ReportCint_223_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MReportHumidity::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MReportHumidity", 1558, G__ReportCint_223_0_19, (int) ('i'), G__get_linked_tagnum(&G__ReportCintLN_MReportHumidity), -1, 0, 1, 1, 1, 0, "u 'MReportHumidity' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MReportHumidity", 1684, G__ReportCint_223_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncReportCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalReportCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcReportCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ReportCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ReportCintLN_fits = { "fits" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MLog = { "MLog" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReport = { "MReport" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportRec = { "MReportRec" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraTH = { "MCameraTH" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraTD = { "MCameraTD" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraRecTemp = { "MCameraRecTemp" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportWeather = { "MReportWeather" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportCC = { "MReportCC" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportRun = { "MReportRun" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportDAQ = { "MReportDAQ" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportHelp = { "MReportHelp" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportDrive = { "MReportDrive" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraCooling = { "MCameraCooling" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraLids = { "MCameraLids" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraHV = { "MCameraHV" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraDC = { "MCameraDC" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraLV = { "MCameraLV" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraAUX = { "MCameraAUX" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraCalibration = { "MCameraCalibration" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraActiveLoad = { "MCameraActiveLoad" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MCameraCentralPix = { "MCameraCentralPix" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportCamera = { "MReportCamera" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTriggerIPR = { "MTriggerIPR" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTriggerCell = { "MTriggerCell" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTriggerBit = { "MTriggerBit" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTriggerPrescFact = { "MTriggerPrescFact" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTriggerLiveTime = { "MTriggerLiveTime" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportTrigger = { "MReportTrigger" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportCurrents = { "MReportCurrents" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportFitsRead = { "MReportFitsRead" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportFitsReadcLcLdA = { "MReportFitsRead::$" , 101 , -1 };
G__linked_taginfo G__ReportCintLN_MReportFileRead = { "MReportFileRead" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportFileReadcLcLdA = { "MReportFileRead::$" , 101 , -1 };
G__linked_taginfo G__ReportCintLN_MReportFileReadCC = { "MReportFileReadCC" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportStarguider = { "MReportStarguider" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportStarguidercLcLdA = { "MReportStarguider::$" , 101 , -1 };
G__linked_taginfo G__ReportCintLN_MReportPyrometer = { "MReportPyrometer" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportRates = { "MReportRates" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportTemperatures = { "MReportTemperatures" , 99 , -1 };
G__linked_taginfo G__ReportCintLN_MReportHumidity = { "MReportHumidity" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableReportCint() {
  G__ReportCintLN_TClass.tagnum = -1 ;
  G__ReportCintLN_TBuffer.tagnum = -1 ;
  G__ReportCintLN_TMemberInspector.tagnum = -1 ;
  G__ReportCintLN_TObject.tagnum = -1 ;
  G__ReportCintLN_TString.tagnum = -1 ;
  G__ReportCintLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ReportCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ReportCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ReportCintLN_fits.tagnum = -1 ;
  G__ReportCintLN_MLog.tagnum = -1 ;
  G__ReportCintLN_MParContainer.tagnum = -1 ;
  G__ReportCintLN_MTime.tagnum = -1 ;
  G__ReportCintLN_MParList.tagnum = -1 ;
  G__ReportCintLN_MReport.tagnum = -1 ;
  G__ReportCintLN_MReportRec.tagnum = -1 ;
  G__ReportCintLN_MCameraTH.tagnum = -1 ;
  G__ReportCintLN_MCameraTD.tagnum = -1 ;
  G__ReportCintLN_MCameraRecTemp.tagnum = -1 ;
  G__ReportCintLN_MReportWeather.tagnum = -1 ;
  G__ReportCintLN_MReportCC.tagnum = -1 ;
  G__ReportCintLN_MReportRun.tagnum = -1 ;
  G__ReportCintLN_MReportDAQ.tagnum = -1 ;
  G__ReportCintLN_MReportHelp.tagnum = -1 ;
  G__ReportCintLN_MReportDrive.tagnum = -1 ;
  G__ReportCintLN_MCameraCooling.tagnum = -1 ;
  G__ReportCintLN_MCameraLids.tagnum = -1 ;
  G__ReportCintLN_MCameraHV.tagnum = -1 ;
  G__ReportCintLN_MCameraDC.tagnum = -1 ;
  G__ReportCintLN_MCameraLV.tagnum = -1 ;
  G__ReportCintLN_MCameraAUX.tagnum = -1 ;
  G__ReportCintLN_MCameraCalibration.tagnum = -1 ;
  G__ReportCintLN_MCameraActiveLoad.tagnum = -1 ;
  G__ReportCintLN_MCameraCentralPix.tagnum = -1 ;
  G__ReportCintLN_MReportCamera.tagnum = -1 ;
  G__ReportCintLN_MTriggerIPR.tagnum = -1 ;
  G__ReportCintLN_MTriggerCell.tagnum = -1 ;
  G__ReportCintLN_MTriggerBit.tagnum = -1 ;
  G__ReportCintLN_MTriggerPrescFact.tagnum = -1 ;
  G__ReportCintLN_MTriggerLiveTime.tagnum = -1 ;
  G__ReportCintLN_MReportTrigger.tagnum = -1 ;
  G__ReportCintLN_MReportCurrents.tagnum = -1 ;
  G__ReportCintLN_MInputStreamID.tagnum = -1 ;
  G__ReportCintLN_MTask.tagnum = -1 ;
  G__ReportCintLN_THashTable.tagnum = -1 ;
  G__ReportCintLN_MReportFitsRead.tagnum = -1 ;
  G__ReportCintLN_MReportFitsReadcLcLdA.tagnum = -1 ;
  G__ReportCintLN_MReportFileRead.tagnum = -1 ;
  G__ReportCintLN_MReportFileReadcLcLdA.tagnum = -1 ;
  G__ReportCintLN_MReportFileReadCC.tagnum = -1 ;
  G__ReportCintLN_TVector2.tagnum = -1 ;
  G__ReportCintLN_MReportStarguider.tagnum = -1 ;
  G__ReportCintLN_MReportStarguidercLcLdA.tagnum = -1 ;
  G__ReportCintLN_MReportPyrometer.tagnum = -1 ;
  G__ReportCintLN_MReportRates.tagnum = -1 ;
  G__ReportCintLN_MReportTemperatures.tagnum = -1 ;
  G__ReportCintLN_MReportHumidity.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableReportCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TString);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_fits);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MLog);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTime);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MParList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReport),sizeof(MReport),-1,323584,"Base class for control reports",G__setup_memvarMReport,G__setup_memfuncMReport);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportRec),sizeof(MReportRec),-1,323840,"Class for REC-REPORT information",G__setup_memvarMReportRec,G__setup_memfuncMReportRec);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraTH);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraTD);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraRecTemp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportWeather),sizeof(MReportWeather),-1,323840,"Class for Weather information",G__setup_memvarMReportWeather,G__setup_memfuncMReportWeather);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportCC),sizeof(MReportCC),-1,323840,"Class for CC-REPORT information",G__setup_memvarMReportCC,G__setup_memfuncMReportCC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportRun),sizeof(MReportRun),-1,323840,"Class for RUN-REPORT information",G__setup_memvarMReportRun,G__setup_memfuncMReportRun);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportDAQ),sizeof(MReportDAQ),-1,323840,"Class for DAQ-REPORT information",G__setup_memvarMReportDAQ,G__setup_memfuncMReportDAQ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportHelp),sizeof(MReportHelp),-1,324608,"Wrapper class for MReport to speed up finding the correct MReport-class",G__setup_memvarMReportHelp,G__setup_memfuncMReportHelp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportDrive),sizeof(MReportDrive),-1,323840,"Class for DRIVE-REPORT information",G__setup_memvarMReportDrive,G__setup_memfuncMReportDrive);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraCooling);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraLids);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraHV);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraDC);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraLV);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraAUX);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraCalibration);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraActiveLoad);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MCameraCentralPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportCamera),sizeof(MReportCamera),-1,323840,"Class for CAMERA-REPORT information",G__setup_memvarMReportCamera,G__setup_memfuncMReportCamera);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTriggerIPR);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTriggerCell);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTriggerBit);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTriggerPrescFact);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTriggerLiveTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportTrigger),sizeof(MReportTrigger),-1,323840,"Class for TRIGGER-REPORT information",G__setup_memvarMReportTrigger,G__setup_memfuncMReportTrigger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportCurrents),sizeof(MReportCurrents),-1,323840,"Class for DC-REPORT information",G__setup_memvarMReportCurrents,G__setup_memfuncMReportCurrents);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_THashTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportFitsRead),sizeof(MReportFitsRead),-1,324608,"Task to read general report file",G__setup_memvarMReportFitsRead,G__setup_memfuncMReportFitsRead);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportFitsReadcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportFileRead),sizeof(MReportFileRead),-1,324608,"Task to read general report file",G__setup_memvarMReportFileRead,G__setup_memfuncMReportFileRead);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportFileReadcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportFileReadCC),sizeof(MReportFileReadCC),-1,323584,"Task to read the central control report file",G__setup_memvarMReportFileReadCC,G__setup_memfuncMReportFileReadCC);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_TVector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportStarguider),sizeof(MReportStarguider),-1,323840,"Class for STARG-REPORT information",G__setup_memvarMReportStarguider,G__setup_memfuncMReportStarguider);
   G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportStarguidercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportPyrometer),sizeof(MReportPyrometer),-1,323840,"Class for PYRO-REPORT information",G__setup_memvarMReportPyrometer,G__setup_memfuncMReportPyrometer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportRates),sizeof(MReportRates),-1,323840,"Class for FTM_CONTROL/TRIGGER_RATES",G__setup_memvarMReportRates,G__setup_memfuncMReportRates);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportTemperatures),sizeof(MReportTemperatures),-1,323840,"Class for FTM_CONTROL/TRIGGER_RATES",G__setup_memvarMReportTemperatures,G__setup_memfuncMReportTemperatures);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ReportCintLN_MReportHumidity),sizeof(MReportHumidity),-1,323840,"Class for FTM_CONTROL/TRIGGER_RATES",G__setup_memvarMReportHumidity,G__setup_memfuncMReportHumidity);
}
extern "C" void G__cpp_setupReportCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupReportCint()");
  G__set_cpp_environmentReportCint();
  G__cpp_setup_tagtableReportCint();

  G__cpp_setup_inheritanceReportCint();

  G__cpp_setup_typetableReportCint();

  G__cpp_setup_memvarReportCint();

  G__cpp_setup_memfuncReportCint();
  G__cpp_setup_globalReportCint();
  G__cpp_setup_funcReportCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncReportCint();
  return;
}
class G__cpp_setup_initReportCint {
  public:
    G__cpp_setup_initReportCint() { G__add_setup_func("ReportCint",(G__incsetup)(&G__cpp_setupReportCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initReportCint() { G__remove_setup_func("ReportCint"); }
};
G__cpp_setup_initReportCint G__cpp_setup_initializerReportCint;

