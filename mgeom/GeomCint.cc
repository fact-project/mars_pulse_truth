//
// File generated by rootcint at Mon Nov 28 11:06:27 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME GeomCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GeomCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MGeomCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCam(void *p = 0);
   static void *newArray_MGeomCam(Long_t size, void *p);
   static void delete_MGeomCam(void *p);
   static void deleteArray_MGeomCam(void *p);
   static void destruct_MGeomCam(void *p);
   static void streamer_MGeomCam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCam*)
   {
      ::MGeomCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCam", ::MGeomCam::Class_Version(), "./MGeomCam.h", 25,
                  typeid(::MGeomCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCam::Dictionary, isa_proxy, 1,
                  sizeof(::MGeomCam) );
      instance.SetNew(&new_MGeomCam);
      instance.SetNewArray(&newArray_MGeomCam);
      instance.SetDelete(&delete_MGeomCam);
      instance.SetDeleteArray(&deleteArray_MGeomCam);
      instance.SetDestructor(&destruct_MGeomCam);
      instance.SetStreamerFunc(&streamer_MGeomCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCam*)
   {
      return GenerateInitInstanceLocal((::MGeomCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeom_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MGeom(void *p);
   static void deleteArray_MGeom(void *p);
   static void destruct_MGeom(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeom*)
   {
      ::MGeom *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeom >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeom", ::MGeom::Class_Version(), "./MGeom.h", 15,
                  typeid(::MGeom), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeom::Dictionary, isa_proxy, 4,
                  sizeof(::MGeom) );
      instance.SetDelete(&delete_MGeom);
      instance.SetDeleteArray(&deleteArray_MGeom);
      instance.SetDestructor(&destruct_MGeom);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeom*)
   {
      return GenerateInitInstanceLocal((::MGeom*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeom*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomPix(void *p = 0);
   static void *newArray_MGeomPix(Long_t size, void *p);
   static void delete_MGeomPix(void *p);
   static void deleteArray_MGeomPix(void *p);
   static void destruct_MGeomPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomPix*)
   {
      ::MGeomPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomPix", ::MGeomPix::Class_Version(), "./MGeomPix.h", 9,
                  typeid(::MGeomPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomPix::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomPix) );
      instance.SetNew(&new_MGeomPix);
      instance.SetNewArray(&newArray_MGeomPix);
      instance.SetDelete(&delete_MGeomPix);
      instance.SetDeleteArray(&deleteArray_MGeomPix);
      instance.SetDestructor(&destruct_MGeomPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomPix*)
   {
      return GenerateInitInstanceLocal((::MGeomPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomRectangle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomRectangle(void *p = 0);
   static void *newArray_MGeomRectangle(Long_t size, void *p);
   static void delete_MGeomRectangle(void *p);
   static void deleteArray_MGeomRectangle(void *p);
   static void destruct_MGeomRectangle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomRectangle*)
   {
      ::MGeomRectangle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomRectangle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomRectangle", ::MGeomRectangle::Class_Version(), "./MGeomRectangle.h", 9,
                  typeid(::MGeomRectangle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomRectangle::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomRectangle) );
      instance.SetNew(&new_MGeomRectangle);
      instance.SetNewArray(&newArray_MGeomRectangle);
      instance.SetDelete(&delete_MGeomRectangle);
      instance.SetDeleteArray(&deleteArray_MGeomRectangle);
      instance.SetDestructor(&destruct_MGeomRectangle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomRectangle*)
   {
      return GenerateInitInstanceLocal((::MGeomRectangle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomRectangle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamDwarf_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamDwarf(void *p = 0);
   static void *newArray_MGeomCamDwarf(Long_t size, void *p);
   static void delete_MGeomCamDwarf(void *p);
   static void deleteArray_MGeomCamDwarf(void *p);
   static void destruct_MGeomCamDwarf(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamDwarf*)
   {
      ::MGeomCamDwarf *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamDwarf >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamDwarf", ::MGeomCamDwarf::Class_Version(), "./MGeomCamDwarf.h", 9,
                  typeid(::MGeomCamDwarf), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamDwarf::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamDwarf) );
      instance.SetNew(&new_MGeomCamDwarf);
      instance.SetNewArray(&newArray_MGeomCamDwarf);
      instance.SetDelete(&delete_MGeomCamDwarf);
      instance.SetDeleteArray(&deleteArray_MGeomCamDwarf);
      instance.SetDestructor(&destruct_MGeomCamDwarf);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamDwarf*)
   {
      return GenerateInitInstanceLocal((::MGeomCamDwarf*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamDwarf*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamCT1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamCT1(void *p = 0);
   static void *newArray_MGeomCamCT1(Long_t size, void *p);
   static void delete_MGeomCamCT1(void *p);
   static void deleteArray_MGeomCamCT1(void *p);
   static void destruct_MGeomCamCT1(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamCT1*)
   {
      ::MGeomCamCT1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamCT1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamCT1", ::MGeomCamCT1::Class_Version(), "./MGeomCamCT1.h", 9,
                  typeid(::MGeomCamCT1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamCT1::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamCT1) );
      instance.SetNew(&new_MGeomCamCT1);
      instance.SetNewArray(&newArray_MGeomCamCT1);
      instance.SetDelete(&delete_MGeomCamCT1);
      instance.SetDeleteArray(&deleteArray_MGeomCamCT1);
      instance.SetDestructor(&destruct_MGeomCamCT1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamCT1*)
   {
      return GenerateInitInstanceLocal((::MGeomCamCT1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamCT1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamFact(void *p = 0);
   static void *newArray_MGeomCamFact(Long_t size, void *p);
   static void delete_MGeomCamFact(void *p);
   static void deleteArray_MGeomCamFact(void *p);
   static void destruct_MGeomCamFact(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamFact*)
   {
      ::MGeomCamFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamFact", ::MGeomCamFact::Class_Version(), "./MGeomCamFact.h", 9,
                  typeid(::MGeomCamFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamFact::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamFact) );
      instance.SetNew(&new_MGeomCamFact);
      instance.SetNewArray(&newArray_MGeomCamFact);
      instance.SetDelete(&delete_MGeomCamFact);
      instance.SetDeleteArray(&deleteArray_MGeomCamFact);
      instance.SetDestructor(&destruct_MGeomCamFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamFact*)
   {
      return GenerateInitInstanceLocal((::MGeomCamFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamFACT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamFACT(void *p = 0);
   static void *newArray_MGeomCamFACT(Long_t size, void *p);
   static void delete_MGeomCamFACT(void *p);
   static void deleteArray_MGeomCamFACT(void *p);
   static void destruct_MGeomCamFACT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamFACT*)
   {
      ::MGeomCamFACT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamFACT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamFACT", ::MGeomCamFACT::Class_Version(), "./MGeomCamFACT.h", 9,
                  typeid(::MGeomCamFACT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamFACT::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamFACT) );
      instance.SetNew(&new_MGeomCamFACT);
      instance.SetNewArray(&newArray_MGeomCamFACT);
      instance.SetDelete(&delete_MGeomCamFACT);
      instance.SetDeleteArray(&deleteArray_MGeomCamFACT);
      instance.SetDestructor(&destruct_MGeomCamFACT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamFACT*)
   {
      return GenerateInitInstanceLocal((::MGeomCamFACT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamFACT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamMagic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamMagic(void *p = 0);
   static void *newArray_MGeomCamMagic(Long_t size, void *p);
   static void delete_MGeomCamMagic(void *p);
   static void deleteArray_MGeomCamMagic(void *p);
   static void destruct_MGeomCamMagic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamMagic*)
   {
      ::MGeomCamMagic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamMagic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamMagic", ::MGeomCamMagic::Class_Version(), "./MGeomCamMagic.h", 9,
                  typeid(::MGeomCamMagic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamMagic::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamMagic) );
      instance.SetNew(&new_MGeomCamMagic);
      instance.SetNewArray(&newArray_MGeomCamMagic);
      instance.SetDelete(&delete_MGeomCamMagic);
      instance.SetDeleteArray(&deleteArray_MGeomCamMagic);
      instance.SetDestructor(&destruct_MGeomCamMagic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamMagic*)
   {
      return GenerateInitInstanceLocal((::MGeomCamMagic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamMagic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamMagicII_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamMagicII(void *p = 0);
   static void *newArray_MGeomCamMagicII(Long_t size, void *p);
   static void delete_MGeomCamMagicII(void *p);
   static void deleteArray_MGeomCamMagicII(void *p);
   static void destruct_MGeomCamMagicII(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamMagicII*)
   {
      ::MGeomCamMagicII *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamMagicII >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamMagicII", ::MGeomCamMagicII::Class_Version(), "./MGeomCamMagic.h", 24,
                  typeid(::MGeomCamMagicII), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamMagicII::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamMagicII) );
      instance.SetNew(&new_MGeomCamMagicII);
      instance.SetNewArray(&newArray_MGeomCamMagicII);
      instance.SetDelete(&delete_MGeomCamMagicII);
      instance.SetDeleteArray(&deleteArray_MGeomCamMagicII);
      instance.SetDestructor(&destruct_MGeomCamMagicII);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamMagicII*)
   {
      return GenerateInitInstanceLocal((::MGeomCamMagicII*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamMagicII*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCamSquare_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCamSquare(void *p = 0);
   static void *newArray_MGeomCamSquare(Long_t size, void *p);
   static void delete_MGeomCamSquare(void *p);
   static void deleteArray_MGeomCamSquare(void *p);
   static void destruct_MGeomCamSquare(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCamSquare*)
   {
      ::MGeomCamSquare *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCamSquare >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCamSquare", ::MGeomCamSquare::Class_Version(), "./MGeomCamSquare.h", 9,
                  typeid(::MGeomCamSquare), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCamSquare::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCamSquare) );
      instance.SetNew(&new_MGeomCamSquare);
      instance.SetNewArray(&newArray_MGeomCamSquare);
      instance.SetDelete(&delete_MGeomCamSquare);
      instance.SetDeleteArray(&deleteArray_MGeomCamSquare);
      instance.SetDestructor(&destruct_MGeomCamSquare);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCamSquare*)
   {
      return GenerateInitInstanceLocal((::MGeomCamSquare*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCamSquare*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomCorsikaCT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomCorsikaCT(void *p = 0);
   static void *newArray_MGeomCorsikaCT(Long_t size, void *p);
   static void delete_MGeomCorsikaCT(void *p);
   static void deleteArray_MGeomCorsikaCT(void *p);
   static void destruct_MGeomCorsikaCT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomCorsikaCT*)
   {
      ::MGeomCorsikaCT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomCorsikaCT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomCorsikaCT", ::MGeomCorsikaCT::Class_Version(), "./MGeomCorsikaCT.h", 9,
                  typeid(::MGeomCorsikaCT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomCorsikaCT::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomCorsikaCT) );
      instance.SetNew(&new_MGeomCorsikaCT);
      instance.SetNewArray(&newArray_MGeomCorsikaCT);
      instance.SetDelete(&delete_MGeomCorsikaCT);
      instance.SetDeleteArray(&deleteArray_MGeomCorsikaCT);
      instance.SetDestructor(&destruct_MGeomCorsikaCT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomCorsikaCT*)
   {
      return GenerateInitInstanceLocal((::MGeomCorsikaCT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomCorsikaCT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomMirror_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomMirror(void *p = 0);
   static void *newArray_MGeomMirror(Long_t size, void *p);
   static void delete_MGeomMirror(void *p);
   static void deleteArray_MGeomMirror(void *p);
   static void destruct_MGeomMirror(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomMirror*)
   {
      ::MGeomMirror *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomMirror >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomMirror", ::MGeomMirror::Class_Version(), "./MGeomMirror.h", 18,
                  typeid(::MGeomMirror), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomMirror::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomMirror) );
      instance.SetNew(&new_MGeomMirror);
      instance.SetNewArray(&newArray_MGeomMirror);
      instance.SetDelete(&delete_MGeomMirror);
      instance.SetDeleteArray(&deleteArray_MGeomMirror);
      instance.SetDestructor(&destruct_MGeomMirror);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomMirror*)
   {
      return GenerateInitInstanceLocal((::MGeomMirror*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomMirror*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MGeomPMT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomPMT(void *p = 0);
   static void *newArray_MGeomPMT(Long_t size, void *p);
   static void delete_MGeomPMT(void *p);
   static void deleteArray_MGeomPMT(void *p);
   static void destruct_MGeomPMT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomPMT*)
   {
      ::MGeomPMT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomPMT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomPMT", ::MGeomPMT::Class_Version(), "./MGeomPMT.h", 12,
                  typeid(::MGeomPMT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomPMT::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomPMT) );
      instance.SetNew(&new_MGeomPMT);
      instance.SetNewArray(&newArray_MGeomPMT);
      instance.SetDelete(&delete_MGeomPMT);
      instance.SetDeleteArray(&deleteArray_MGeomPMT);
      instance.SetDestructor(&destruct_MGeomPMT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomPMT*)
   {
      return GenerateInitInstanceLocal((::MGeomPMT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomPMT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MGeomCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCam::Class_Name()
{
   return "MGeomCam";
}

//______________________________________________________________________________
const char *MGeomCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeom::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeom::Class_Name()
{
   return "MGeom";
}

//______________________________________________________________________________
const char *MGeom::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeom*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeom::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeom*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeom::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeom*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeom::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeom*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomPix::Class_Name()
{
   return "MGeomPix";
}

//______________________________________________________________________________
const char *MGeomPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomRectangle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomRectangle::Class_Name()
{
   return "MGeomRectangle";
}

//______________________________________________________________________________
const char *MGeomRectangle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomRectangle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomRectangle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomRectangle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomRectangle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomRectangle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomRectangle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomRectangle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamDwarf::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamDwarf::Class_Name()
{
   return "MGeomCamDwarf";
}

//______________________________________________________________________________
const char *MGeomCamDwarf::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamDwarf*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamDwarf::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamDwarf*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamDwarf::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamDwarf*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamDwarf::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamDwarf*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamCT1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamCT1::Class_Name()
{
   return "MGeomCamCT1";
}

//______________________________________________________________________________
const char *MGeomCamCT1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamCT1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamCT1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamCT1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamCT1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamCT1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamCT1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamCT1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamFact::Class_Name()
{
   return "MGeomCamFact";
}

//______________________________________________________________________________
const char *MGeomCamFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamFACT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamFACT::Class_Name()
{
   return "MGeomCamFACT";
}

//______________________________________________________________________________
const char *MGeomCamFACT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFACT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamFACT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFACT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamFACT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFACT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamFACT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamFACT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamMagic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamMagic::Class_Name()
{
   return "MGeomCamMagic";
}

//______________________________________________________________________________
const char *MGeomCamMagic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamMagic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamMagic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamMagic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamMagicII::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamMagicII::Class_Name()
{
   return "MGeomCamMagicII";
}

//______________________________________________________________________________
const char *MGeomCamMagicII::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagicII*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamMagicII::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagicII*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamMagicII::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagicII*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamMagicII::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamMagicII*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCamSquare::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCamSquare::Class_Name()
{
   return "MGeomCamSquare";
}

//______________________________________________________________________________
const char *MGeomCamSquare::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamSquare*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCamSquare::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamSquare*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCamSquare::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamSquare*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCamSquare::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCamSquare*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomCorsikaCT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomCorsikaCT::Class_Name()
{
   return "MGeomCorsikaCT";
}

//______________________________________________________________________________
const char *MGeomCorsikaCT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCorsikaCT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomCorsikaCT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCorsikaCT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomCorsikaCT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCorsikaCT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomCorsikaCT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomCorsikaCT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomMirror::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomMirror::Class_Name()
{
   return "MGeomMirror";
}

//______________________________________________________________________________
const char *MGeomMirror::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomMirror*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomMirror::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomMirror*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomMirror::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomMirror*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomMirror::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomMirror*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MGeomPMT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomPMT::Class_Name()
{
   return "MGeomPMT";
}

//______________________________________________________________________________
const char *MGeomPMT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPMT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomPMT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPMT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomPMT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPMT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomPMT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomPMT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MGeom::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeom.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeom::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeom::Class(),this);
   }
}

//______________________________________________________________________________
void MGeom::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeom.
      TClass *R__cl = ::MGeom::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAidx", &fAidx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumNeighbors", &fNumNeighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNeighbors[6]", fNeighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserBits", &fUserBits);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MGeom(void *p) {
      delete ((::MGeom*)p);
   }
   static void deleteArray_MGeom(void *p) {
      delete [] ((::MGeom*)p);
   }
   static void destruct_MGeom(void *p) {
      typedef ::MGeom current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeom

//______________________________________________________________________________
void MGeomPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomPix::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomPix.
      TClass *R__cl = ::MGeomPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fD", &fD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosPhi", &fCosPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSinPhi", &fSinPhi);
      MGeom::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomPix(void *p) {
      return  p ? new(p) ::MGeomPix : new ::MGeomPix;
   }
   static void *newArray_MGeomPix(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomPix[nElements] : new ::MGeomPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomPix(void *p) {
      delete ((::MGeomPix*)p);
   }
   static void deleteArray_MGeomPix(void *p) {
      delete [] ((::MGeomPix*)p);
   }
   static void destruct_MGeomPix(void *p) {
      typedef ::MGeomPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomPix

//______________________________________________________________________________
void MGeomRectangle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomRectangle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomRectangle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomRectangle::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomRectangle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomRectangle.
      TClass *R__cl = ::MGeomRectangle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fW", &fW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH", &fH);
      MGeom::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomRectangle(void *p) {
      return  p ? new(p) ::MGeomRectangle : new ::MGeomRectangle;
   }
   static void *newArray_MGeomRectangle(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomRectangle[nElements] : new ::MGeomRectangle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomRectangle(void *p) {
      delete ((::MGeomRectangle*)p);
   }
   static void deleteArray_MGeomRectangle(void *p) {
      delete [] ((::MGeomRectangle*)p);
   }
   static void destruct_MGeomRectangle(void *p) {
      typedef ::MGeomRectangle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomRectangle

//______________________________________________________________________________
void MGeomCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCam.
      TClass *R__cl = ::MGeomCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCamDist", &fCamDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConvMm2Deg", &fConvMm2Deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixels", &fPixels);
      R__insp.InspectMember(fPixels, "fPixels.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRadius", &fMaxRadius);
      R__insp.InspectMember(fMaxRadius, "fMaxRadius.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinRadius", &fMinRadius);
      R__insp.InspectMember(fMinRadius, "fMinRadius.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixRatio", &fPixRatio);
      R__insp.InspectMember(fPixRatio, "fPixRatio.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixRatioSqrt", &fPixRatioSqrt);
      R__insp.InspectMember(fPixRatioSqrt, "fPixRatioSqrt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixInSector", &fNumPixInSector);
      R__insp.InspectMember(fNumPixInSector, "fNumPixInSector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixWithAidx", &fNumPixWithAidx);
      R__insp.InspectMember(fNumPixWithAidx, "fNumPixWithAidx.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCam(void *p) {
      return  p ? new(p) ::MGeomCam : new ::MGeomCam;
   }
   static void *newArray_MGeomCam(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCam[nElements] : new ::MGeomCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCam(void *p) {
      delete ((::MGeomCam*)p);
   }
   static void deleteArray_MGeomCam(void *p) {
      delete [] ((::MGeomCam*)p);
   }
   static void destruct_MGeomCam(void *p) {
      typedef ::MGeomCam current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_MGeomCam(TBuffer &buf, void *obj) {
      ((::MGeomCam*)obj)->::MGeomCam::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::MGeomCam

//______________________________________________________________________________
void MGeomPMT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomPMT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomPMT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomPMT::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomPMT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomPMT.
      TClass *R__cl = ::MGeomPMT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPMTId", &fPMTId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWavelength", &fWavelength);
      R__insp.InspectMember(fWavelength, "fWavelength.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQE", &fQE);
      R__insp.InspectMember(fQE, "fQE.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomPMT(void *p) {
      return  p ? new(p) ::MGeomPMT : new ::MGeomPMT;
   }
   static void *newArray_MGeomPMT(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomPMT[nElements] : new ::MGeomPMT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomPMT(void *p) {
      delete ((::MGeomPMT*)p);
   }
   static void deleteArray_MGeomPMT(void *p) {
      delete [] ((::MGeomPMT*)p);
   }
   static void destruct_MGeomPMT(void *p) {
      typedef ::MGeomPMT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomPMT

//______________________________________________________________________________
void MGeomMirror::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomMirror.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomMirror::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomMirror::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomMirror::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomMirror.
      TClass *R__cl = ::MGeomMirror::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMirrorId", &fMirrorId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFocalDist", &fFocalDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSX", &fSX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSY", &fSY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaN", &fThetaN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiN", &fPhiN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXN", &fXN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYN", &fYN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZN", &fZN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeviationX", &fDeviationX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeviationY", &fDeviationY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWavelength", &fWavelength);
      R__insp.InspectMember(fWavelength, "fWavelength.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReflectivity", &fReflectivity);
      R__insp.InspectMember(fReflectivity, "fReflectivity.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReflector", &fReflector);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomMirror(void *p) {
      return  p ? new(p) ::MGeomMirror : new ::MGeomMirror;
   }
   static void *newArray_MGeomMirror(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomMirror[nElements] : new ::MGeomMirror[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomMirror(void *p) {
      delete ((::MGeomMirror*)p);
   }
   static void deleteArray_MGeomMirror(void *p) {
      delete [] ((::MGeomMirror*)p);
   }
   static void destruct_MGeomMirror(void *p) {
      typedef ::MGeomMirror current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomMirror

//______________________________________________________________________________
void MGeomCorsikaCT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCorsikaCT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCorsikaCT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCorsikaCT::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCorsikaCT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCorsikaCT.
      TClass *R__cl = ::MGeomCorsikaCT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTx", &fCTx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTy", &fCTy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTz", &fCTz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTtheta", &fCTtheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTphi", &fCTphi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTdiam", &fCTdiam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCTfocal", &fCTfocal);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCorsikaCT(void *p) {
      return  p ? new(p) ::MGeomCorsikaCT : new ::MGeomCorsikaCT;
   }
   static void *newArray_MGeomCorsikaCT(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCorsikaCT[nElements] : new ::MGeomCorsikaCT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCorsikaCT(void *p) {
      delete ((::MGeomCorsikaCT*)p);
   }
   static void deleteArray_MGeomCorsikaCT(void *p) {
      delete [] ((::MGeomCorsikaCT*)p);
   }
   static void destruct_MGeomCorsikaCT(void *p) {
      typedef ::MGeomCorsikaCT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCorsikaCT

//______________________________________________________________________________
void MGeomCamCT1::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamCT1.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamCT1::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamCT1::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamCT1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamCT1.
      TClass *R__cl = ::MGeomCamCT1::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCamDwarf::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamCT1(void *p) {
      return  p ? new(p) ::MGeomCamCT1 : new ::MGeomCamCT1;
   }
   static void *newArray_MGeomCamCT1(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamCT1[nElements] : new ::MGeomCamCT1[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamCT1(void *p) {
      delete ((::MGeomCamCT1*)p);
   }
   static void deleteArray_MGeomCamCT1(void *p) {
      delete [] ((::MGeomCamCT1*)p);
   }
   static void destruct_MGeomCamCT1(void *p) {
      typedef ::MGeomCamCT1 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamCT1

//______________________________________________________________________________
void MGeomCamDwarf::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamDwarf.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamDwarf::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamDwarf::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamDwarf::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamDwarf.
      TClass *R__cl = ::MGeomCamDwarf::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamDwarf(void *p) {
      return  p ? new(p) ::MGeomCamDwarf : new ::MGeomCamDwarf;
   }
   static void *newArray_MGeomCamDwarf(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamDwarf[nElements] : new ::MGeomCamDwarf[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamDwarf(void *p) {
      delete ((::MGeomCamDwarf*)p);
   }
   static void deleteArray_MGeomCamDwarf(void *p) {
      delete [] ((::MGeomCamDwarf*)p);
   }
   static void destruct_MGeomCamDwarf(void *p) {
      typedef ::MGeomCamDwarf current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamDwarf

//______________________________________________________________________________
void MGeomCamFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamFact.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamFact::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamFact::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamFact.
      TClass *R__cl = ::MGeomCamFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamFact(void *p) {
      return  p ? new(p) ::MGeomCamFact : new ::MGeomCamFact;
   }
   static void *newArray_MGeomCamFact(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamFact[nElements] : new ::MGeomCamFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamFact(void *p) {
      delete ((::MGeomCamFact*)p);
   }
   static void deleteArray_MGeomCamFact(void *p) {
      delete [] ((::MGeomCamFact*)p);
   }
   static void destruct_MGeomCamFact(void *p) {
      typedef ::MGeomCamFact current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamFact

//______________________________________________________________________________
void MGeomCamFACT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamFACT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamFACT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamFACT::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamFACT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamFACT.
      TClass *R__cl = ::MGeomCamFACT::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamFACT(void *p) {
      return  p ? new(p) ::MGeomCamFACT : new ::MGeomCamFACT;
   }
   static void *newArray_MGeomCamFACT(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamFACT[nElements] : new ::MGeomCamFACT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamFACT(void *p) {
      delete ((::MGeomCamFACT*)p);
   }
   static void deleteArray_MGeomCamFACT(void *p) {
      delete [] ((::MGeomCamFACT*)p);
   }
   static void destruct_MGeomCamFACT(void *p) {
      typedef ::MGeomCamFACT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamFACT

//______________________________________________________________________________
void MGeomCamMagic::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamMagic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamMagic::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamMagic::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamMagic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamMagic.
      TClass *R__cl = ::MGeomCamMagic::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamMagic(void *p) {
      return  p ? new(p) ::MGeomCamMagic : new ::MGeomCamMagic;
   }
   static void *newArray_MGeomCamMagic(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamMagic[nElements] : new ::MGeomCamMagic[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamMagic(void *p) {
      delete ((::MGeomCamMagic*)p);
   }
   static void deleteArray_MGeomCamMagic(void *p) {
      delete [] ((::MGeomCamMagic*)p);
   }
   static void destruct_MGeomCamMagic(void *p) {
      typedef ::MGeomCamMagic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamMagic

//______________________________________________________________________________
void MGeomCamMagicII::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamMagicII.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamMagicII::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamMagicII::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamMagicII::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamMagicII.
      TClass *R__cl = ::MGeomCamMagicII::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCamDwarf::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamMagicII(void *p) {
      return  p ? new(p) ::MGeomCamMagicII : new ::MGeomCamMagicII;
   }
   static void *newArray_MGeomCamMagicII(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamMagicII[nElements] : new ::MGeomCamMagicII[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamMagicII(void *p) {
      delete ((::MGeomCamMagicII*)p);
   }
   static void deleteArray_MGeomCamMagicII(void *p) {
      delete [] ((::MGeomCamMagicII*)p);
   }
   static void destruct_MGeomCamMagicII(void *p) {
      typedef ::MGeomCamMagicII current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamMagicII

//______________________________________________________________________________
void MGeomCamSquare::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomCamSquare.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomCamSquare::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomCamSquare::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomCamSquare::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomCamSquare.
      TClass *R__cl = ::MGeomCamSquare::IsA();
      if (R__cl || R__insp.IsA()) { }
      MGeomCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomCamSquare(void *p) {
      return  p ? new(p) ::MGeomCamSquare : new ::MGeomCamSquare;
   }
   static void *newArray_MGeomCamSquare(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomCamSquare[nElements] : new ::MGeomCamSquare[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomCamSquare(void *p) {
      delete ((::MGeomCamSquare*)p);
   }
   static void deleteArray_MGeomCamSquare(void *p) {
      delete [] ((::MGeomCamSquare*)p);
   }
   static void destruct_MGeomCamSquare(void *p) {
      typedef ::MGeomCamSquare current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomCamSquare

/********************************************************
* GeomCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGeomCint();

extern "C" void G__set_cpp_environmentGeomCint() {
  G__cpp_reset_tagtableGeomCint();
}
#include <new>
extern "C" int G__cpp_dllrevGeomCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MGeomCam */
static int G__GeomCint_107_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCam(
(UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCam(
(UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCam(
(UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCam(
(UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCam((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCam((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCam((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCam((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCam[n];
       } else {
         p = new((void*) gvp) MGeomCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCam;
       } else {
         p = new((void*) gvp) MGeomCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MGeomCam(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MGeomCam(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCam*) G__getstructoffset())->CalcPixRatio();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCam*) G__getstructoffset())->StreamerWorkaround();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCam*) G__getstructoffset())->InitGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetCameraDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetConvMm2Deg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MGeomCam*) G__getstructoffset())->GetNumPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetMaxRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetMinRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetMaxRadius((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetMinRadius((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetDist((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetDist((UShort_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetAngle((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetAngle((UShort_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetPixRatio((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomCam*) G__getstructoffset())->GetPixRatioSqrt((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MGeomCam*) G__getstructoffset())->GetNumSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MGeomCam*) G__getstructoffset())->GetNumAreas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MGeomCam*) G__getstructoffset())->GetNumPixInSector((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MGeomCam*) G__getstructoffset())->GetNumPixWithAidx((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeom& obj = ((MGeomCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MGeom& obj = ((const MGeomCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetPixelIdx(*(TVector2*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetPixelIdxDeg(*(TVector2*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetPixelIdxXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetPixelIdxXYdeg((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MGeomCam*) G__getstructoffset())->GetNeighbors(*(TArrayI*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MGeomCam*) G__getstructoffset())->GetNeighbors(*(TList*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MGeomCam*) G__getstructoffset())->GetNeighbors(*(TArrayI*) libp->para[0].ref, *(MGeom*) libp->para[1].ref
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MGeomCam*) G__getstructoffset())->GetNeighbors(*(TList*) libp->para[0].ref, *(MGeom*) libp->para[1].ref
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetDirection((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomCam*) G__getstructoffset())->GetNeighbor((UInt_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MGeomCam*) G__getstructoffset())->HitFrame(*((MQuaternion*) G__int(libp->para[0])), *(MQuaternion*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MGeomCam*) G__getstructoffset())->HitFrame(*((MQuaternion*) G__int(libp->para[0])), *(MQuaternion*) libp->para[1].ref
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const MGeomCam*) G__getstructoffset())->HitDetector(*(MQuaternion*) libp->para[0].ref, (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const MGeomCam*) G__getstructoffset())->HitDetector(*(MQuaternion*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCam*) G__getstructoffset())->SetAt((UInt_t) G__int(libp->para[0]), *(MGeom*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_107_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCam G__TMGeomCam;
static int G__GeomCint_107_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCam*) (soff+(sizeof(MGeomCam)*i)))->~G__TMGeomCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCam*) (soff))->~G__TMGeomCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeom */
static int G__GeomCint_111_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MGeom*) G__getstructoffset())->Set((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MGeom*) G__getstructoffset())->Set((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MGeom*) G__getstructoffset())->Set((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeom*) G__getstructoffset())->SetP((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeom*) G__getstructoffset())->SetP(*(TVector2*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, (Short_t) G__int(libp->para[4]), (Short_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3])
, (Short_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]), (Short_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Short_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MGeom*) G__getstructoffset())->SetNeighbors((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MGeom*) G__getstructoffset())->SetNeighbors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeom*) G__getstructoffset())->CheckOuterRing(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MGeom*) G__getstructoffset())->GetSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MGeom*) G__getstructoffset())->GetP();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetDist(*(MGeom*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetDist2(*(MGeom*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetAngle(*(MGeom*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeom*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeom*) G__getstructoffset())->GetAidx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MGeom*) G__getstructoffset())->GetNumNeighbors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MGeom*) G__getstructoffset())->GetNeighbor((Byte_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MGeom*) G__getstructoffset())->IsInOutermostRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MGeom*) G__getstructoffset())->IsInOuterRing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MGeom*) G__getstructoffset())->IsInside((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeom*) G__getstructoffset())->GetDirection(*(MGeom*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const MGeom*) G__getstructoffset())->PaintPrimitive(*(TAttLine*) libp->para[0].ref, *(TAttFill*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const MGeom*) G__getstructoffset())->PaintPrimitive(*(TAttLine*) libp->para[0].ref, *(TAttFill*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MGeom*) G__getstructoffset())->PaintPrimitive(*(TAttLine*) libp->para[0].ref, *(TAttFill*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeom::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeom::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeom::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeom::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeom*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeom::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeom::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeom::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_111_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeom::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeom G__TMGeom;
static int G__GeomCint_111_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeom*) (soff+(sizeof(MGeom)*i)))->~G__TMGeom();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeom*) (soff))->~G__TMGeom();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeomCint_111_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeom* dest = (MGeom*) G__getstructoffset();
   *dest = *(MGeom*) libp->para[0].ref;
   const MGeom& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomPix */
static int G__GeomCint_113_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) MGeomPix::CalcXY((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomPix(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPix((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomPix((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPix((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomPix((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomPix[n];
       } else {
         p = new((void*) gvp) MGeomPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomPix;
       } else {
         p = new((void*) gvp) MGeomPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MGeomPix*) G__getstructoffset())->SetD((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MGeomPix*) G__getstructoffset())->SetD();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MGeomPix*) G__getstructoffset())->SetPhi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MGeomPix*) G__getstructoffset())->SetPhi();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomPix*) G__getstructoffset())->GetD());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomPix*) G__getstructoffset())->GetDx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomPix*) G__getstructoffset())->GetDy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_113_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeomCint_113_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MGeomPix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MGeomPix(*(MGeomPix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomPix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomPix G__TMGeomPix;
static int G__GeomCint_113_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomPix*) (soff+(sizeof(MGeomPix)*i)))->~G__TMGeomPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomPix*) (soff))->~G__TMGeomPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeomCint_113_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomPix* dest = (MGeomPix*) G__getstructoffset();
   *dest = *(MGeomPix*) libp->para[0].ref;
   const MGeomPix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomRectangle */
static int G__GeomCint_115_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomRectangle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (UInt_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomRectangle(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomRectangle((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomRectangle((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomRectangle((Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomRectangle[n];
       } else {
         p = new((void*) gvp) MGeomRectangle[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomRectangle;
       } else {
         p = new((void*) gvp) MGeomRectangle;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MGeomRectangle*) G__getstructoffset())->SetSize((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MGeomRectangle*) G__getstructoffset())->SetSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomRectangle*) G__getstructoffset())->GetW());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MGeomRectangle*) G__getstructoffset())->GetH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomRectangle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomRectangle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomRectangle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomRectangle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomRectangle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomRectangle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomRectangle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomRectangle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_115_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomRectangle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__GeomCint_115_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MGeomRectangle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MGeomRectangle(*(MGeomRectangle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomRectangle G__TMGeomRectangle;
static int G__GeomCint_115_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomRectangle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomRectangle*) (soff+(sizeof(MGeomRectangle)*i)))->~G__TMGeomRectangle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomRectangle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomRectangle*) (soff))->~G__TMGeomRectangle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GeomCint_115_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomRectangle* dest = (MGeomRectangle*) G__getstructoffset();
   *dest = *(MGeomRectangle*) libp->para[0].ref;
   const MGeomRectangle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamDwarf */
static int G__GeomCint_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamDwarf* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf((Double_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamDwarf* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamDwarf* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamDwarf((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamDwarf((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamDwarf[n];
       } else {
         p = new((void*) gvp) MGeomCamDwarf[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamDwarf;
       } else {
         p = new((void*) gvp) MGeomCamDwarf;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamDwarf::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamDwarf::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamDwarf::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamDwarf::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamDwarf*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamDwarf::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamDwarf::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamDwarf::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamDwarf::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamDwarf G__TMGeomCamDwarf;
static int G__GeomCint_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamDwarf*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamDwarf*) (soff+(sizeof(MGeomCamDwarf)*i)))->~G__TMGeomCamDwarf();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamDwarf*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamDwarf*) (soff))->~G__TMGeomCamDwarf();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamCT1 */
static int G__GeomCint_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamCT1* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamCT1((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamCT1((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamCT1[n];
       } else {
         p = new((void*) gvp) MGeomCamCT1[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamCT1;
       } else {
         p = new((void*) gvp) MGeomCamCT1;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamCT1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamCT1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamCT1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamCT1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamCT1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamCT1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamCT1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamCT1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamCT1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamCT1 G__TMGeomCamCT1;
static int G__GeomCint_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamCT1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamCT1*) (soff+(sizeof(MGeomCamCT1)*i)))->~G__TMGeomCamCT1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamCT1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamCT1*) (soff))->~G__TMGeomCamCT1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamFact */
static int G__GeomCint_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCamFact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCamFact(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamFact((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamFact((Double_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCamFact(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCamFact(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamFact((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamFact((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFact((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamFact((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamFact[n];
       } else {
         p = new((void*) gvp) MGeomCamFact[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamFact;
       } else {
         p = new((void*) gvp) MGeomCamFact;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamFact G__TMGeomCamFact;
static int G__GeomCint_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamFact*) (soff+(sizeof(MGeomCamFact)*i)))->~G__TMGeomCamFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamFact*) (soff))->~G__TMGeomCamFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamFACT */
static int G__GeomCint_226_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamFACT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFACT((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamFACT((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamFACT[n];
       } else {
         p = new((void*) gvp) MGeomCamFACT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamFACT;
       } else {
         p = new((void*) gvp) MGeomCamFACT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamFACT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFACT((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamFACT((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamFACT((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamFACT((Double_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamFACT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFACT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamFACT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamFACT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamFACT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFACT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamFACT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamFACT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamFACT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamFACT G__TMGeomCamFACT;
static int G__GeomCint_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamFACT*) (soff+(sizeof(MGeomCamFACT)*i)))->~G__TMGeomCamFACT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamFACT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamFACT*) (soff))->~G__TMGeomCamFACT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamMagic */
static int G__GeomCint_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagic((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamMagic((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamMagic[n];
       } else {
         p = new((void*) gvp) MGeomCamMagic[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamMagic;
       } else {
         p = new((void*) gvp) MGeomCamMagic;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagic((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamMagic((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagic((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamMagic((Double_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamMagic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamMagic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamMagic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamMagic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamMagic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamMagic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamMagic G__TMGeomCamMagic;
static int G__GeomCint_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamMagic*) (soff+(sizeof(MGeomCamMagic)*i)))->~G__TMGeomCamMagic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamMagic*) (soff))->~G__TMGeomCamMagic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamMagicII */
static int G__GeomCint_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamMagicII* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagicII((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamMagicII((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamMagicII[n];
       } else {
         p = new((void*) gvp) MGeomCamMagicII[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamMagicII;
       } else {
         p = new((void*) gvp) MGeomCamMagicII;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamMagicII* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagicII((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamMagicII((Double_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamMagicII((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamMagicII((Double_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamMagicII::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagicII::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamMagicII::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamMagicII::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamMagicII*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagicII::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamMagicII::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamMagicII::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamMagicII::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamMagicII G__TMGeomCamMagicII;
static int G__GeomCint_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamMagicII*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamMagicII*) (soff+(sizeof(MGeomCamMagicII)*i)))->~G__TMGeomCamMagicII();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamMagicII*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamMagicII*) (soff))->~G__TMGeomCamMagicII();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCamSquare */
static int G__GeomCint_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamSquare* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomCamSquare(
(Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamSquare((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCamSquare((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCamSquare* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCamSquare((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCamSquare((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamSquare[n];
       } else {
         p = new((void*) gvp) MGeomCamSquare[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCamSquare;
       } else {
         p = new((void*) gvp) MGeomCamSquare;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCamSquare::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamSquare::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCamSquare::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCamSquare::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCamSquare*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamSquare::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamSquare::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCamSquare::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCamSquare::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCamSquare G__TMGeomCamSquare;
static int G__GeomCint_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCamSquare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCamSquare*) (soff+(sizeof(MGeomCamSquare)*i)))->~G__TMGeomCamSquare();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCamSquare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCamSquare*) (soff))->~G__TMGeomCamSquare();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomCorsikaCT */
static int G__GeomCint_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomCorsikaCT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCorsikaCT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomCorsikaCT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomCorsikaCT((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomCorsikaCT((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCorsikaCT[n];
       } else {
         p = new((void*) gvp) MGeomCorsikaCT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomCorsikaCT;
       } else {
         p = new((void*) gvp) MGeomCorsikaCT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCorsikaCT*) G__getstructoffset())->Fill(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MGeomCorsikaCT*) G__getstructoffset())->GetCTx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MGeomCorsikaCT*) G__getstructoffset())->GetCTy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((MGeomCorsikaCT*) G__getstructoffset())->GetCTz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomCorsikaCT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCorsikaCT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomCorsikaCT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomCorsikaCT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomCorsikaCT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCorsikaCT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCorsikaCT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomCorsikaCT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomCorsikaCT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomCorsikaCT G__TMGeomCorsikaCT;
static int G__GeomCint_231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomCorsikaCT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomCorsikaCT*) (soff+(sizeof(MGeomCorsikaCT)*i)))->~G__TMGeomCorsikaCT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomCorsikaCT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomCorsikaCT*) (soff))->~G__TMGeomCorsikaCT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomMirror */
static int G__GeomCint_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomMirror* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomMirror(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomMirror(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomMirror((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomMirror((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomMirror((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomMirror((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomMirror[n];
       } else {
         p = new((void*) gvp) MGeomMirror[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomMirror;
       } else {
         p = new((void*) gvp) MGeomMirror;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomMirror*) G__getstructoffset())->GetMirrorId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomMirror*) G__getstructoffset())->SetMirrorContent(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomMirror*) G__getstructoffset())->SetMirrorDeviations((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomMirror*) G__getstructoffset())->SetReflectivity(*(TArrayF*) libp->para[0].ref, *(TArrayF*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomMirror*) G__getstructoffset())->SetArraySize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MGeomMirror*) G__getstructoffset())->GetMirrorCenter();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const MGeomMirror*) G__getstructoffset())->GetMirrorNorm();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         TVector3* pobj;
         TVector3 xobj = ((MGeomMirror*) G__getstructoffset())->GetReflection(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TVector3* pobj;
         TVector3 xobj = ((MGeomMirror*) G__getstructoffset())->GetReflection(*(TVector3*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomMirror::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomMirror::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomMirror::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomMirror::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomMirror*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomMirror::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomMirror::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomMirror::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_232_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomMirror::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomMirror G__TMGeomMirror;
static int G__GeomCint_232_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomMirror*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomMirror*) (soff+(sizeof(MGeomMirror)*i)))->~G__TMGeomMirror();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomMirror*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomMirror*) (soff))->~G__TMGeomMirror();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MGeomPMT */
static int G__GeomCint_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomPMT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPMT(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MGeomPMT(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPMT((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomPMT((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomPMT((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomPMT((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomPMT[n];
       } else {
         p = new((void*) gvp) MGeomPMT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomPMT;
       } else {
         p = new((void*) gvp) MGeomPMT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MGeomPMT*) G__getstructoffset())->GetPMTId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomPMT*) G__getstructoffset())->SetArraySize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomPMT*) G__getstructoffset())->SetPMTContent((Int_t) G__int(libp->para[0]), *(TArrayF*) libp->para[1].ref
, *(TArrayF*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomPMT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPMT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomPMT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomPMT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomPMT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPMT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomPMT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomPMT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GeomCint_233_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomPMT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomPMT G__TMGeomPMT;
static int G__GeomCint_233_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomPMT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomPMT*) (soff+(sizeof(MGeomPMT)*i)))->~G__TMGeomPMT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomPMT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomPMT*) (soff))->~G__TMGeomPMT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MGeomCam */

/* MGeom */

/* MGeomPix */

/* MGeomRectangle */

/* MGeomCamDwarf */

/* MGeomCamCT1 */

/* MGeomCamFact */

/* MGeomCamFACT */

/* MGeomCamMagic */

/* MGeomCamMagicII */

/* MGeomCamSquare */

/* MGeomCorsikaCT */

/* MGeomMirror */

/* MGeomPMT */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGeomCint {
 public:
  G__Sizep2memfuncGeomCint(): p(&G__Sizep2memfuncGeomCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGeomCint::*p)();
};

size_t G__get_sizep2memfuncGeomCint()
{
  G__Sizep2memfuncGeomCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGeomCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCam))) {
     MGeomCam *G__Lderived;
     G__Lderived=(MGeomCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeom))) {
     MGeom *G__Lderived;
     G__Lderived=(MGeom*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeom),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomPix))) {
     MGeomPix *G__Lderived;
     G__Lderived=(MGeomPix*)0x1000;
     {
       MGeom *G__Lpbase=(MGeom*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPix),G__get_linked_tagnum(&G__GeomCintLN_MGeom),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPix),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle))) {
     MGeomRectangle *G__Lderived;
     G__Lderived=(MGeomRectangle*)0x1000;
     {
       MGeom *G__Lpbase=(MGeom*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle),G__get_linked_tagnum(&G__GeomCintLN_MGeom),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MParContainer))) {
     MParContainer *G__Lderived;
     G__Lderived=(MParContainer*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MParContainer),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf))) {
     MGeomCamDwarf *G__Lderived;
     G__Lderived=(MGeomCamDwarf*)0x1000;
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1))) {
     MGeomCamCT1 *G__Lderived;
     G__Lderived=(MGeomCamCT1*)0x1000;
     {
       MGeomCamDwarf *G__Lpbase=(MGeomCamDwarf*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1),G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact))) {
     MGeomCamFact *G__Lderived;
     G__Lderived=(MGeomCamFact*)0x1000;
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT))) {
     MGeomCamFACT *G__Lderived;
     G__Lderived=(MGeomCamFACT*)0x1000;
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic))) {
     MGeomCamMagic *G__Lderived;
     G__Lderived=(MGeomCamMagic*)0x1000;
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII))) {
     MGeomCamMagicII *G__Lderived;
     G__Lderived=(MGeomCamMagicII*)0x1000;
     {
       MGeomCamDwarf *G__Lpbase=(MGeomCamDwarf*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII),G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare))) {
     MGeomCamSquare *G__Lderived;
     G__Lderived=(MGeomCamSquare*)0x1000;
     {
       MGeomCam *G__Lpbase=(MGeomCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare),G__get_linked_tagnum(&G__GeomCintLN_MGeomCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT))) {
     MGeomCorsikaCT *G__Lderived;
     G__Lderived=(MGeomCorsikaCT*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror))) {
     MGeomMirror *G__Lderived;
     G__Lderived=(MGeomMirror*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT))) {
     MGeomPMT *G__Lderived;
     G__Lderived=(MGeomPMT*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT),G__get_linked_tagnum(&G__GeomCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT),G__get_linked_tagnum(&G__GeomCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGeomCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GeomCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GeomCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GeomCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GeomCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__GeomCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MGeomCam */
static void G__setup_memvarMGeomCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCam));
   { MGeomCam *p; p=(MGeomCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,"Number of pixels in this camera");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCamDist=",0,"[m] Average distance of the camera from the mirror");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConvMm2Deg=",0,"conversion factor to convert mm in the camera plain into degrees");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TObjArray),-1,-1,4,"fPixels=",0,"Array of singel pixels storing the geometry");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fMaxRadius=",0,"maximum radius of the part of the camera with the same pixel size (eg. for GUI layout)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fMinRadius=",0,"minimum radius of the part of the camera with the same pixel size (eg. for GUI layout)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fPixRatio=",0,"Array storing the ratio between size of pixel 0 and pixel idx (for speed reasons)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fPixRatioSqrt=",0,"Array storing the square root ratio between size of pixel 0 and pixel idx (for speed reasons)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayS),-1,-1,4,"fNumPixInSector=",0,"Number of pixels in sector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayS),-1,-1,4,"fNumPixWithAidx=",0,"Number of pixels with one pixel sizes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeom */
static void G__setup_memvarMGeom(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeom));
   { MGeom *p; p=(MGeom*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRightTop=%lldLL",(long long)MGeom::kRightTop).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRight=%lldLL",(long long)MGeom::kRight).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kRightBottom=%lldLL",(long long)MGeom::kRightBottom).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kLeftBottom=%lldLL",(long long)MGeom::kLeftBottom).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kLeft=%lldLL",(long long)MGeom::kLeft).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kLeftTop=%lldLL",(long long)MGeom::kLeftTop).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kTop=%lldLL",(long long)MGeom::kTop).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBottom=%lldLL",(long long)MGeom::kBottom).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,4,"kIsInOutermostRing=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomcLcLdA),-1,-2,4,"kIsInOuterRing=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX=",0,"[mm]   the x coordinate of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY=",0,"[mm]   the y coordinate of the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fA=",0,"[mm^2] Area of the pixel");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fSector=",0,"Number of sector the pixels corresponds to");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fAidx=",0,"Area index of the pixel");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fNumNeighbors=",0,"number of valid neighbors");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"fNeighbors[6]=",0,"the IDs of the pixel next to it (we are assuming an hexagonal geometry)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fUserBits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomPix */
static void G__setup_memvarMGeomPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPix));
   { MGeomPix *p; p=(MGeomPix*)0x1000; if (p) { }
   G__memvar_setup((void*)(&MGeomPix::gsTan60),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gsTan60=",0,"tan(60/kRad2Deg);");
   G__memvar_setup((void*)(&MGeomPix::gsTan30),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gsTan30=",0,"tan(30/kRad2Deg);");
   G__memvar_setup((void*)(&MGeomPix::gsCos60),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gsCos60=",0,"cos(60/kRad2Deg);");
   G__memvar_setup((void*)(&MGeomPix::gsSin60),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gsSin60=",0,"sin(30/kRad2Deg);");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fD=",0,"[mm]   the d coordinate of the pixel (dist between two parallel sides)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCosPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSinPhi=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirCenter=%lldLL",(long long)MGeomPix::kDirCenter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirNE=%lldLL",(long long)MGeomPix::kDirNE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirN=%lldLL",(long long)MGeomPix::kDirN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirNW=%lldLL",(long long)MGeomPix::kDirNW).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirSW=%lldLL",(long long)MGeomPix::kDirSW).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirS=%lldLL",(long long)MGeomPix::kDirS).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomPixcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDirSE=%lldLL",(long long)MGeomPix::kDirSE).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomRectangle */
static void G__setup_memvarMGeomRectangle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle));
   { MGeomRectangle *p; p=(MGeomRectangle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fW=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fH=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamDwarf */
static void G__setup_memvarMGeomCamDwarf(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf));
   { MGeomCamDwarf *p; p=(MGeomCamDwarf*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamCT1 */
static void G__setup_memvarMGeomCamCT1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1));
   { MGeomCamCT1 *p; p=(MGeomCamCT1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamFact */
static void G__setup_memvarMGeomCamFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact));
   { MGeomCamFact *p; p=(MGeomCamFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamFACT */
static void G__setup_memvarMGeomCamFACT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT));
   { MGeomCamFACT *p; p=(MGeomCamFACT*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirCenter=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirNE=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirNW=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirW=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirSW=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirSE=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACTcLcLdA),-1,-2,4,"kDirE=6LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamMagic */
static void G__setup_memvarMGeomCamMagic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic));
   { MGeomCamMagic *p; p=(MGeomCamMagic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamMagicII */
static void G__setup_memvarMGeomCamMagicII(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII));
   { MGeomCamMagicII *p; p=(MGeomCamMagicII*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCamSquare */
static void G__setup_memvarMGeomCamSquare(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare));
   { MGeomCamSquare *p; p=(MGeomCamSquare*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomCorsikaCT */
static void G__setup_memvarMGeomCorsikaCT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT));
   { MGeomCorsikaCT *p; p=(MGeomCorsikaCT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTx=",0,"X position of the CT center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTy=",0,"Y position of the CT center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTz=",0,"Z above high position of the CT center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTtheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTphi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTdiam=",0,"Diameter where the Cph are stored at MMCs level");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCTfocal=",0,"Focal of the CT");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomMirror */
static void G__setup_memvarMGeomMirror(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror));
   { MGeomMirror *p; p=(MGeomMirror*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMirrorId=",0,"the Mirror Id");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFocalDist=",0,"[cm] focal distance of that mirror");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSX=",0,"[cm] curvilinear coordinate of mirror's center in X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSY=",0,"[cm] curvilinear coordinate of mirror's center in Y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"[cm] x coordinate of the center of the mirror");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"[cm] y coordinate of the center of the mirror");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZ=",0,"[cm] z coordinate of the center of the mirror");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThetaN=",0,"polar theta angle of the direction where the mirror points to");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhiN=",0,"polar phi angle of the direction where the mirror points to");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXN=",0,"xn coordinate of the normal vector in the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYN=",0,"yn coordinate of the normal vector in the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZN=",0,"zn coordinate of the normal vector in the center");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDeviationX=",0,"[cm] deviation in x of the spot of a single mirror on the camera plane");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDeviationY=",0,"[cm] deviation in y of the spot of a single mirror on the camera plane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fWavelength=",0,"List of wavelength");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fReflectivity=",0,"Mirror reflectivity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TRotation),-1,-1,4,"fReflector=",0,"! Store this for acceleration");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MGeomPMT */
static void G__setup_memvarMGeomPMT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT));
   { MGeomPMT *p; p=(MGeomPMT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPMTId=",0,"the PMT Id");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fWavelength=",0,"List of wavelength");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__GeomCintLN_TArrayF),-1,-1,4,"fQE=",0,"QE values");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__GeomCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGeomCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMGeomCam(void) {
   /* MGeomCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCam));
   G__memfunc_setup("CalcMaxRadius",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcNumSectors",1414,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcNumAreas",1167,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitOuterRing",1331,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNN",752,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SortNeighbors",1353,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCam",742,G__GeomCint_107_0_7, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCam), -1, 0, 4, 1, 1, 0, 
"h - 'UInt_t' 0 '0' npix f - 'Float_t' 0 '1' dist "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCam",742,G__GeomCint_107_0_8, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCam), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcPixRatio",1187,G__GeomCint_107_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamerWorkaround",1903,G__GeomCint_107_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGeometry",1248,G__GeomCint_107_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCameraDist",1277,G__GeomCint_107_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvMm2Deg",1202,G__GeomCint_107_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixels",1221,G__GeomCint_107_0_16, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRadius",1198,G__GeomCint_107_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinRadius",1196,G__GeomCint_107_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxRadius",1198,G__GeomCint_107_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinRadius",1196,G__GeomCint_107_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__GeomCint_107_0_21, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"r - 'UShort_t' 0 - i r - 'UShort_t' 0 '0' j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__GeomCint_107_0_22, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"r - 'UShort_t' 0 - i r - 'UShort_t' 0 '0' j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__GeomCint_107_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixRatio",1104,G__GeomCint_107_0_24, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixRatioSqrt",1530,G__GeomCint_107_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSectors",1331,G__GeomCint_107_0_26, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAreas",1084,G__GeomCint_107_0_27, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixInSector",1704,G__GeomCint_107_0_28, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixWithAidx",1699,G__GeomCint_107_0_29, 114, -1, G__defined_typename("UShort_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GeomCint_107_0_30, 117, G__get_linked_tagnum(&G__GeomCintLN_MGeom), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__GeomCint_107_0_31, 117, G__get_linked_tagnum(&G__GeomCintLN_MGeom), -1, 1, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelIdx",1095,G__GeomCint_107_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelIdxDeg",1367,G__GeomCint_107_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelIdxXY",1272,G__GeomCint_107_0_34, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelIdxXYdeg",1576,G__GeomCint_107_0_35, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbors",1217,G__GeomCint_107_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TArrayI' - 1 - arr h - 'UInt_t' 0 - idx "
"f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbors",1217,G__GeomCint_107_0_37, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TList' - 1 - arr h - 'UInt_t' 0 - idx "
"f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbors",1217,G__GeomCint_107_0_38, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TArrayI' - 1 - arr u 'MGeom' - 11 - pix "
"f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbors",1217,G__GeomCint_107_0_39, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TList' - 1 - arr u 'MGeom' - 11 - pix "
"f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,G__GeomCint_107_0_40, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - p1 h - 'UInt_t' 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbor",1102,G__GeomCint_107_0_41, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 8, 
"h - 'UInt_t' 0 - idx i - 'Int_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,G__GeomCint_107_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - - u 'MQuaternion' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HitFrame",784,G__GeomCint_107_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u "
"d - 'Double_t' 0 - margin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitDetector",1119,G__GeomCint_107_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 11 - p d - 'Double_t' 0 '0' offset", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAt",481,G__GeomCint_107_0_46, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i u 'MGeom' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeomCint_107_0_47, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_107_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_107_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_107_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_107_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_107_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_107_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_107_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_107_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCam", 868, G__GeomCint_107_0_59, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeom(void) {
   /* MGeom */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeom));
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set",300,G__GeomCint_111_0_4, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"h - 'UInt_t' 0 '0' s h - 'UInt_t' 0 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetP",380,G__GeomCint_111_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetP",380,G__GeomCint_111_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector2' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeighbors",1229,G__GeomCint_111_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"s - 'Short_t' 0 '-1' i0 s - 'Short_t' 0 '-1' i1 "
"s - 'Short_t' 0 '-1' i2 s - 'Short_t' 0 '-1' i3 "
"s - 'Short_t' 0 '-1' i4 s - 'Short_t' 0 '-1' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckOuterRing",1405,G__GeomCint_111_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__GeomCint_111_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__GeomCint_111_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetL",364,G__GeomCint_111_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Length of a side to a neighbor", (void*) NULL, 3);
   G__memfunc_setup("GetT",372,G__GeomCint_111_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Maximum elongation", (void*) NULL, 3);
   G__memfunc_setup("GetSector",912,G__GeomCint_111_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetP",368,G__GeomCint_111_0_14, 117, G__get_linked_tagnum(&G__GeomCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__GeomCint_111_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__GeomCint_111_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "u 'MGeom' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist2",742,G__GeomCint_111_0_17, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "u 'MGeom' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAngle",775,G__GeomCint_111_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "u 'MGeom' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__GeomCint_111_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAidx",678,G__GeomCint_111_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumNeighbors",1521,G__GeomCint_111_0_21, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNeighbor",1102,G__GeomCint_111_0_22, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "b - 'Byte_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInOutermostRing",1749,G__GeomCint_111_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInOuterRing",1298,G__GeomCint_111_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,G__GeomCint_111_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetDirection",1217,G__GeomCint_111_0_26, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'MGeom' - 11 - pix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintPrimitive",1461,G__GeomCint_111_0_28, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'TAttLine' - 11 - line u 'TAttFill' - 11 - fill "
"d - 'Double_t' 0 '1' scalexy d - 'Double_t' 0 '1' scaled", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__GeomCint_111_0_29, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeom::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_111_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeom::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_111_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeom::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_111_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeom::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_111_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_111_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeom::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_111_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeom::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_111_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeom::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_111_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeom::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeom", 595, G__GeomCint_111_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeomCint_111_0_42, (int) ('u'), G__get_linked_tagnum(&G__GeomCintLN_MGeom), -1, 1, 1, 1, 1, 0, "u 'MGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomPix(void) {
   /* MGeomPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPix));
   G__memfunc_setup("CalcXY",548,G__GeomCint_113_0_1, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - dir i - 'Int_t' 0 - ring "
"i - 'Int_t' 0 - i d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - y", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t, Int_t, Double_t&, Double_t&))(&MGeomPix::CalcXY) ), 0);
   G__memfunc_setup("MGeomPix",774,G__GeomCint_113_0_2, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomPix), -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 '0' x f - 'Float_t' 0 '0' y "
"f - 'Float_t' 0 '1' d h - 'UInt_t' 0 '0' s "
"h - 'UInt_t' 0 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetD",368,G__GeomCint_113_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '1' d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhi",589,G__GeomCint_113_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetD",356,G__GeomCint_113_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Distance between two parallel sides", (void*) NULL, 0);
   G__memfunc_setup("GetL",364,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Length of one of the parallel sides", (void*) NULL, 1);
   G__memfunc_setup("GetT",372,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Half distance between two opposite edges (traverse)", (void*) NULL, 1);
   G__memfunc_setup("GetDx",476,G__GeomCint_113_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Distance of two rows in x-direction (without rotation)", (void*) NULL, 0);
   G__memfunc_setup("GetDy",477,G__GeomCint_113_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", "Distance of two rows in y-direction (without rotation)", (void*) NULL, 0);
   G__memfunc_setup("IsInside",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintPrimitive",1461,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"u 'TAttLine' - 11 - line u 'TAttFill' - 11 - fill "
"d - 'Double_t' 0 '1' scalexy d - 'Double_t' 0 '1' scaled", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_113_0_14, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_113_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_113_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_113_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_113_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_113_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_113_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_113_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_113_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomPix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MGeomPix", 774, G__GeomCint_113_0_26, (int) ('i'), G__get_linked_tagnum(&G__GeomCintLN_MGeomPix), -1, 0, 1, 1, 1, 0, "u 'MGeomPix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MGeomPix", 900, G__GeomCint_113_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeomCint_113_0_28, (int) ('u'), G__get_linked_tagnum(&G__GeomCintLN_MGeomPix), -1, 1, 1, 1, 1, 0, "u 'MGeomPix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomRectangle(void) {
   /* MGeomRectangle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle));
   G__memfunc_setup("MGeomRectangle",1386,G__GeomCint_115_0_1, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle), -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 '0' x f - 'Float_t' 0 '0' y "
"f - 'Float_t' 0 '1' w f - 'Float_t' 0 '-1' h "
"h - 'UInt_t' 0 '0' s h - 'UInt_t' 0 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSize",711,G__GeomCint_115_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - w f - 'Float_t' 0 '-1' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetW",375,G__GeomCint_115_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH",360,G__GeomCint_115_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetT",372,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetL",364,(G__InterfaceMethod) NULL,102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsInside",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PaintPrimitive",1461,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 8, 
"u 'TAttLine' - 11 - line u 'TAttFill' - 11 - fill "
"d - 'Double_t' 0 '1' scalexy d - 'Double_t' 0 '1' scaled", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_115_0_11, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomRectangle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_115_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomRectangle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_115_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomRectangle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_115_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomRectangle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_115_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_115_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomRectangle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_115_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomRectangle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_115_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomRectangle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_115_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomRectangle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MGeomRectangle", 1386, G__GeomCint_115_0_23, (int) ('i'), G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle), -1, 0, 1, 1, 1, 0, "u 'MGeomRectangle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MGeomRectangle", 1512, G__GeomCint_115_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GeomCint_115_0_25, (int) ('u'), G__get_linked_tagnum(&G__GeomCintLN_MGeomRectangle), -1, 1, 1, 1, 1, 0, "u 'MGeomRectangle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamDwarf(void) {
   /* MGeomCamDwarf */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf));
   G__memfunc_setup("CalcNumPix",980,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 4, 0, "d - 'Double_t' 0 - rad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcNumPix",980,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 4, 0, "i - 'Int_t' 0 - rings", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCam",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - diameter d - 'Double_t' 0 - rad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCam",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - diameter i - 'Int_t' 0 - rings", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamDwarf",1242,G__GeomCint_223_0_5, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - rad d - 'Double_t' 0 '16' diameter "
"d - 'Double_t' 0 '4.92' dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamDwarf",1242,G__GeomCint_223_0_6, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - rings d - 'Double_t' 0 '16' diameter "
"d - 'Double_t' 0 '4.92' dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamDwarf",1242,G__GeomCint_223_0_7, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamDwarf), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_223_0_9, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamDwarf::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_223_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamDwarf::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_223_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamDwarf::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_223_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamDwarf::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_223_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_223_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamDwarf::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_223_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamDwarf::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_223_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamDwarf::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_223_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamDwarf::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamDwarf", 1368, G__GeomCint_223_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamCT1(void) {
   /* MGeomCamCT1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1));
   G__memfunc_setup("MGeomCamCT1",942,G__GeomCint_224_0_1, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamCT1), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeomCint_224_0_2, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamCT1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_224_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamCT1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_224_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamCT1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_224_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamCT1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_224_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_224_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamCT1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_224_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamCT1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_224_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamCT1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_224_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamCT1::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamCT1", 1068, G__GeomCint_224_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamFact(void) {
   /* MGeomCamFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact));
   G__memfunc_setup("CreateGeometry",1440,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'MGeomCam' - 11 - hex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamFact",1124,G__GeomCint_225_0_2, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - rad d - 'Double_t' 0 '16' diameter "
"d - 'Double_t' 0 '4.92' dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamFact",1124,G__GeomCint_225_0_3, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - rings d - 'Double_t' 0 '16' diameter "
"d - 'Double_t' 0 '4.92' dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamFact",1124,G__GeomCint_225_0_4, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFact), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_225_0_6, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_225_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_225_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_225_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_225_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_225_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_225_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_225_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_225_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamFact", 1250, G__GeomCint_225_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamFACT(void) {
   /* MGeomCamFACT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT));
   G__memfunc_setup("CalcXY",548,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 4, 0, 
"i - 'Int_t' 0 - dir i - 'Int_t' 0 - ring "
"i - 'Int_t' 0 - i d - 'Double_t' 1 - x "
"d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCam",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamFACT",1028,G__GeomCint_226_0_3, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamFACT",1028,G__GeomCint_226_0_4, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamFACT), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_226_0_6, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamFACT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_226_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFACT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_226_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamFACT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_226_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamFACT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_226_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_226_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFACT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_226_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamFACT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_226_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamFACT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_226_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamFACT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamFACT", 1154, G__GeomCint_226_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamMagic(void) {
   /* MGeomCamMagic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic));
   G__memfunc_setup("CreateCam",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNN",752,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MGeomCamMagic",1223,G__GeomCint_228_0_3, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamMagic",1223,G__GeomCint_228_0_4, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagic), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_228_0_6, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamMagic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_228_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_228_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamMagic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_228_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamMagic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_228_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_228_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_228_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamMagic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_228_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_228_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamMagic::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamMagic", 1349, G__GeomCint_228_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamMagicII(void) {
   /* MGeomCamMagicII */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII));
   G__memfunc_setup("Rotate",623,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamMagicII",1369,G__GeomCint_229_0_2, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamMagicII",1369,G__GeomCint_229_0_3, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamMagicII), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - dist C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_229_0_5, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamMagicII::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_229_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagicII::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_229_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamMagicII::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_229_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamMagicII::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_229_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_229_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagicII::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_229_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamMagicII::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_229_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamMagicII::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_229_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamMagicII::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamMagicII", 1495, G__GeomCint_229_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCamSquare(void) {
   /* MGeomCamSquare */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare));
   G__memfunc_setup("CreateCam",869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"s - 'Short_t' 0 - x s - 'Short_t' 0 - y "
"d - 'Double_t' 0 - diameter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamSquare",1367,G__GeomCint_230_0_2, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare), -1, 0, 5, 1, 1, 0, 
"s - 'Short_t' 0 - x s - 'Short_t' 0 - y "
"d - 'Double_t' 0 '7' diameter d - 'Double_t' 0 '4.92' dist "
"C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MGeomCamSquare",1367,G__GeomCint_230_0_3, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCamSquare), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HitFrame",784,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'MQuaternion' - 0 - p u 'MQuaternion' - 11 - u", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__GeomCint_230_0_5, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCamSquare::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_230_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamSquare::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_230_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCamSquare::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_230_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCamSquare::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_230_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_230_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamSquare::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_230_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamSquare::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_230_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCamSquare::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_230_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCamSquare::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCamSquare", 1493, G__GeomCint_230_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomCorsikaCT(void) {
   /* MGeomCorsikaCT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT));
   G__memfunc_setup("MGeomCorsikaCT",1336,G__GeomCint_231_0_1, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomCorsikaCT), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__GeomCint_231_0_3, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - ctx f - 'Float_t' 0 - cty "
"f - 'Float_t' 0 - ctz f - 'Float_t' 0 - cttheta "
"f - 'Float_t' 0 - ctphi f - 'Float_t' 0 - ctdiam "
"f - 'Float_t' 0 - ctfocal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCTx",559,G__GeomCint_231_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCTy",560,G__GeomCint_231_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCTz",561,G__GeomCint_231_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeomCint_231_0_7, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomCorsikaCT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_231_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCorsikaCT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_231_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomCorsikaCT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_231_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomCorsikaCT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_231_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_231_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCorsikaCT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_231_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCorsikaCT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_231_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomCorsikaCT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_231_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomCorsikaCT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomCorsikaCT", 1462, G__GeomCint_231_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomMirror(void) {
   /* MGeomMirror */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror));
   G__memfunc_setup("MGeomMirror",1104,G__GeomCint_232_0_1, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomMirror), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '-1' mir C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirrorId",1096,G__GeomCint_232_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMirrorContent",1666,G__GeomCint_232_0_3, 121, -1, -1, 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - mir f - 'Float_t' 0 - focal "
"f - 'Float_t' 0 - curv_x f - 'Float_t' 0 - curv_y "
"f - 'Float_t' 0 - lin_x f - 'Float_t' 0 - lin_y "
"f - 'Float_t' 0 - lin_z f - 'Float_t' 0 - theta "
"f - 'Float_t' 0 - phi f - 'Float_t' 0 - x_n "
"f - 'Float_t' 0 - y_n f - 'Float_t' 0 - z_n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMirrorDeviations",1981,G__GeomCint_232_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - dev_x f - 'Float_t' 0 - dev_y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReflectivity",1574,G__GeomCint_232_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TArrayF' - 11 - wav u 'TArrayF' - 11 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArraySize",1222,G__GeomCint_232_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirrorCenter",1532,G__GeomCint_232_0_7, 117, G__get_linked_tagnum(&G__GeomCintLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMirrorNorm",1335,G__GeomCint_232_0_8, 117, G__get_linked_tagnum(&G__GeomCintLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReflection",1323,G__GeomCint_232_0_9, 117, G__get_linked_tagnum(&G__GeomCintLN_TVector3), -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - star d - 'Double_t' 0 '-1' dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeomCint_232_0_10, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomMirror::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_232_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomMirror::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_232_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomMirror::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_232_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomMirror::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_232_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_232_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomMirror::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_232_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomMirror::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_232_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomMirror::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_232_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomMirror::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomMirror", 1230, G__GeomCint_232_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMGeomPMT(void) {
   /* MGeomPMT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT));
   G__memfunc_setup("MGeomPMT",710,G__GeomCint_233_0_1, 105, G__get_linked_tagnum(&G__GeomCintLN_MGeomPMT), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '-1' pmt C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMTId",702,G__GeomCint_233_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArraySize",1222,G__GeomCint_233_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPMTContent",1272,G__GeomCint_233_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - pmt u 'TArrayF' - 11 - wav "
"u 'TArrayF' - 11 - qe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__GeomCint_233_0_5, 85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomPMT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__GeomCint_233_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPMT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__GeomCint_233_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomPMT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__GeomCint_233_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomPMT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__GeomCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__GeomCint_233_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__GeomCint_233_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPMT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__GeomCint_233_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomPMT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__GeomCint_233_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomPMT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__GeomCint_233_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomPMT::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MGeomPMT", 836, G__GeomCint_233_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGeomCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGeomCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGeomCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GeomCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeom = { "MGeom" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomcLcLdA = { "MGeom::$" , 101 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomPix = { "MGeomPix" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomPixcLcLdA = { "MGeomPix::$" , 101 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomRectangle = { "MGeomRectangle" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__GeomCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TArrayS = { "TArrayS" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TRotation = { "TRotation" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MQuaternion = { "MQuaternion" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamDwarf = { "MGeomCamDwarf" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamCT1 = { "MGeomCamCT1" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamFact = { "MGeomCamFact" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamFACT = { "MGeomCamFACT" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamFACTcLcLdA = { "MGeomCamFACT::$" , 101 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamMagic = { "MGeomCamMagic" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamMagicII = { "MGeomCamMagicII" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCamSquare = { "MGeomCamSquare" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomCorsikaCT = { "MGeomCorsikaCT" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomMirror = { "MGeomMirror" , 99 , -1 };
G__linked_taginfo G__GeomCintLN_MGeomPMT = { "MGeomPMT" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGeomCint() {
  G__GeomCintLN_TClass.tagnum = -1 ;
  G__GeomCintLN_TBuffer.tagnum = -1 ;
  G__GeomCintLN_TMemberInspector.tagnum = -1 ;
  G__GeomCintLN_TObject.tagnum = -1 ;
  G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GeomCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GeomCintLN_TList.tagnum = -1 ;
  G__GeomCintLN_TObjArray.tagnum = -1 ;
  G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GeomCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GeomCintLN_MGeomCam.tagnum = -1 ;
  G__GeomCintLN_TAttLine.tagnum = -1 ;
  G__GeomCintLN_TAttFill.tagnum = -1 ;
  G__GeomCintLN_TVector2.tagnum = -1 ;
  G__GeomCintLN_MGeom.tagnum = -1 ;
  G__GeomCintLN_MGeomcLcLdA.tagnum = -1 ;
  G__GeomCintLN_MGeomPix.tagnum = -1 ;
  G__GeomCintLN_MGeomPixcLcLdA.tagnum = -1 ;
  G__GeomCintLN_MGeomRectangle.tagnum = -1 ;
  G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__GeomCintLN_MParContainer.tagnum = -1 ;
  G__GeomCintLN_TArrayF.tagnum = -1 ;
  G__GeomCintLN_TArrayS.tagnum = -1 ;
  G__GeomCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__GeomCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__GeomCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__GeomCintLN_TRotation.tagnum = -1 ;
  G__GeomCintLN_TVector3.tagnum = -1 ;
  G__GeomCintLN_MQuaternion.tagnum = -1 ;
  G__GeomCintLN_TArrayI.tagnum = -1 ;
  G__GeomCintLN_MGeomCamDwarf.tagnum = -1 ;
  G__GeomCintLN_MGeomCamCT1.tagnum = -1 ;
  G__GeomCintLN_MGeomCamFact.tagnum = -1 ;
  G__GeomCintLN_MGeomCamFACT.tagnum = -1 ;
  G__GeomCintLN_MGeomCamFACTcLcLdA.tagnum = -1 ;
  G__GeomCintLN_MGeomCamMagic.tagnum = -1 ;
  G__GeomCintLN_MGeomCamMagicII.tagnum = -1 ;
  G__GeomCintLN_MGeomCamSquare.tagnum = -1 ;
  G__GeomCintLN_MGeomCorsikaCT.tagnum = -1 ;
  G__GeomCintLN_MGeomMirror.tagnum = -1 ;
  G__GeomCintLN_MGeomPMT.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGeomCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TList);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCam),sizeof(MGeomCam),-1,127744,"Geometry base class for the camera",G__setup_memvarMGeomCam,G__setup_memfuncMGeomCam);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TVector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeom),sizeof(MGeom),-1,291076,"Geometry class describing the basics of a pixel",G__setup_memvarMGeom,G__setup_memfuncMGeom);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomPix),sizeof(MGeomPix),-1,291072,"Geometry class describing the geometry of one pixel",G__setup_memvarMGeomPix,G__setup_memfuncMGeomPix);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomPixcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomRectangle),sizeof(MGeomRectangle),-1,291072,"Geometry class describing the rectangular geometry of one pixel",G__setup_memvarMGeomRectangle,G__setup_memfuncMGeomRectangle);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TArrayS);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TRotation);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TVector3);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_MQuaternion);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_TArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamDwarf),sizeof(MGeomCamDwarf),-1,323840,"Geometry class for the Dwarf camera",G__setup_memvarMGeomCamDwarf,G__setup_memfuncMGeomCamDwarf);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamCT1),sizeof(MGeomCamCT1),-1,323840,"Geometry class for the CT1 camera",G__setup_memvarMGeomCamCT1,G__setup_memfuncMGeomCamCT1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamFact),sizeof(MGeomCamFact),-1,323840,"Geometry class for the Fact camera",G__setup_memvarMGeomCamFact,G__setup_memfuncMGeomCamFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamFACT),sizeof(MGeomCamFACT),-1,323840,"Geometry class for the final FACT camera",G__setup_memvarMGeomCamFACT,G__setup_memfuncMGeomCamFACT);
   G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamFACTcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamMagic),sizeof(MGeomCamMagic),-1,323840,"Geometry class for the Magic camera",G__setup_memvarMGeomCamMagic,G__setup_memfuncMGeomCamMagic);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamMagicII),sizeof(MGeomCamMagicII),-1,323840,"Geometry class for the Magic camera",G__setup_memvarMGeomCamMagicII,G__setup_memfuncMGeomCamMagicII);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCamSquare),sizeof(MGeomCamSquare),-1,323840,"Geometry class for a square pixel camera",G__setup_memvarMGeomCamSquare,G__setup_memfuncMGeomCamSquare);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomCorsikaCT),sizeof(MGeomCorsikaCT),-1,323840,"class containing information about CTelescope",G__setup_memvarMGeomCorsikaCT,G__setup_memfuncMGeomCorsikaCT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomMirror),sizeof(MGeomMirror),-1,323840,"geometry class describing one mirror",G__setup_memvarMGeomMirror,G__setup_memfuncMGeomMirror);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GeomCintLN_MGeomPMT),sizeof(MGeomPMT),-1,323840,"class containing information about PMTs",G__setup_memvarMGeomPMT,G__setup_memfuncMGeomPMT);
}
extern "C" void G__cpp_setupGeomCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupGeomCint()");
  G__set_cpp_environmentGeomCint();
  G__cpp_setup_tagtableGeomCint();

  G__cpp_setup_inheritanceGeomCint();

  G__cpp_setup_typetableGeomCint();

  G__cpp_setup_memvarGeomCint();

  G__cpp_setup_memfuncGeomCint();
  G__cpp_setup_globalGeomCint();
  G__cpp_setup_funcGeomCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGeomCint();
  return;
}
class G__cpp_setup_initGeomCint {
  public:
    G__cpp_setup_initGeomCint() { G__add_setup_func("GeomCint",(G__incsetup)(&G__cpp_setupGeomCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGeomCint() { G__remove_setup_func("GeomCint"); }
};
G__cpp_setup_initGeomCint G__cpp_setup_initializerGeomCint;

