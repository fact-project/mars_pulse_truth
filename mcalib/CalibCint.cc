//
// File generated by rootcint at Mon Nov 28 11:06:32 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME CalibCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "CalibCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MCalibrationPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationPix(void *p = 0);
   static void *newArray_MCalibrationPix(Long_t size, void *p);
   static void delete_MCalibrationPix(void *p);
   static void deleteArray_MCalibrationPix(void *p);
   static void destruct_MCalibrationPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationPix*)
   {
      ::MCalibrationPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationPix", ::MCalibrationPix::Class_Version(), "./MCalibrationPix.h", 9,
                  typeid(::MCalibrationPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationPix) );
      instance.SetNew(&new_MCalibrationPix);
      instance.SetNewArray(&newArray_MCalibrationPix);
      instance.SetDelete(&delete_MCalibrationPix);
      instance.SetDeleteArray(&deleteArray_MCalibrationPix);
      instance.SetDestructor(&destruct_MCalibrationPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationPix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationCam(void *p = 0);
   static void *newArray_MCalibrationCam(Long_t size, void *p);
   static void delete_MCalibrationCam(void *p);
   static void deleteArray_MCalibrationCam(void *p);
   static void destruct_MCalibrationCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationCam*)
   {
      ::MCalibrationCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationCam", ::MCalibrationCam::Class_Version(), "./MCalibrationCam.h", 25,
                  typeid(::MCalibrationCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationCam) );
      instance.SetNew(&new_MCalibrationCam);
      instance.SetNewArray(&newArray_MCalibrationCam);
      instance.SetDelete(&delete_MCalibrationCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationCam);
      instance.SetDestructor(&destruct_MCalibrationCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationPattern_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationPattern(void *p = 0);
   static void *newArray_MCalibrationPattern(Long_t size, void *p);
   static void delete_MCalibrationPattern(void *p);
   static void deleteArray_MCalibrationPattern(void *p);
   static void destruct_MCalibrationPattern(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationPattern*)
   {
      ::MCalibrationPattern *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationPattern >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationPattern", ::MCalibrationPattern::Class_Version(), "./MCalibrationPattern.h", 13,
                  typeid(::MCalibrationPattern), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationPattern::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationPattern) );
      instance.SetNew(&new_MCalibrationPattern);
      instance.SetNewArray(&newArray_MCalibrationPattern);
      instance.SetDelete(&delete_MCalibrationPattern);
      instance.SetDeleteArray(&deleteArray_MCalibrationPattern);
      instance.SetDestructor(&destruct_MCalibrationPattern);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationPattern*)
   {
      return GenerateInitInstanceLocal((::MCalibrationPattern*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationPattern*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibColorSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibColorSet(void *p = 0);
   static void *newArray_MCalibColorSet(Long_t size, void *p);
   static void delete_MCalibColorSet(void *p);
   static void deleteArray_MCalibColorSet(void *p);
   static void destruct_MCalibColorSet(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibColorSet*)
   {
      ::MCalibColorSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibColorSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibColorSet", ::MCalibColorSet::Class_Version(), "./MCalibColorSet.h", 17,
                  typeid(::MCalibColorSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibColorSet::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibColorSet) );
      instance.SetNew(&new_MCalibColorSet);
      instance.SetNewArray(&newArray_MCalibColorSet);
      instance.SetDelete(&delete_MCalibColorSet);
      instance.SetDeleteArray(&deleteArray_MCalibColorSet);
      instance.SetDestructor(&destruct_MCalibColorSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibColorSet*)
   {
      return GenerateInitInstanceLocal((::MCalibColorSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibColorSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationChargeCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationChargeCalc(void *p = 0);
   static void *newArray_MCalibrationChargeCalc(Long_t size, void *p);
   static void delete_MCalibrationChargeCalc(void *p);
   static void deleteArray_MCalibrationChargeCalc(void *p);
   static void destruct_MCalibrationChargeCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationChargeCalc*)
   {
      ::MCalibrationChargeCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationChargeCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationChargeCalc", ::MCalibrationChargeCalc::Class_Version(), "./MCalibrationChargeCalc.h", 36,
                  typeid(::MCalibrationChargeCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationChargeCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationChargeCalc) );
      instance.SetNew(&new_MCalibrationChargeCalc);
      instance.SetNewArray(&newArray_MCalibrationChargeCalc);
      instance.SetDelete(&delete_MCalibrationChargeCalc);
      instance.SetDeleteArray(&deleteArray_MCalibrationChargeCalc);
      instance.SetDestructor(&destruct_MCalibrationChargeCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationChargeCalc*)
   {
      return GenerateInitInstanceLocal((::MCalibrationChargeCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationChargeCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationChargeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationChargeCam(void *p = 0);
   static void *newArray_MCalibrationChargeCam(Long_t size, void *p);
   static void delete_MCalibrationChargeCam(void *p);
   static void deleteArray_MCalibrationChargeCam(void *p);
   static void destruct_MCalibrationChargeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationChargeCam*)
   {
      ::MCalibrationChargeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationChargeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationChargeCam", ::MCalibrationChargeCam::Class_Version(), "./MCalibrationChargeCam.h", 10,
                  typeid(::MCalibrationChargeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationChargeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationChargeCam) );
      instance.SetNew(&new_MCalibrationChargeCam);
      instance.SetNewArray(&newArray_MCalibrationChargeCam);
      instance.SetDelete(&delete_MCalibrationChargeCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationChargeCam);
      instance.SetDestructor(&destruct_MCalibrationChargeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationChargeCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationChargeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationChargeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationRelTimeCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationRelTimeCalc(void *p = 0);
   static void *newArray_MCalibrationRelTimeCalc(Long_t size, void *p);
   static void delete_MCalibrationRelTimeCalc(void *p);
   static void deleteArray_MCalibrationRelTimeCalc(void *p);
   static void destruct_MCalibrationRelTimeCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationRelTimeCalc*)
   {
      ::MCalibrationRelTimeCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationRelTimeCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationRelTimeCalc", ::MCalibrationRelTimeCalc::Class_Version(), "./MCalibrationRelTimeCalc.h", 26,
                  typeid(::MCalibrationRelTimeCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationRelTimeCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationRelTimeCalc) );
      instance.SetNew(&new_MCalibrationRelTimeCalc);
      instance.SetNewArray(&newArray_MCalibrationRelTimeCalc);
      instance.SetDelete(&delete_MCalibrationRelTimeCalc);
      instance.SetDeleteArray(&deleteArray_MCalibrationRelTimeCalc);
      instance.SetDestructor(&destruct_MCalibrationRelTimeCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationRelTimeCalc*)
   {
      return GenerateInitInstanceLocal((::MCalibrationRelTimeCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationRelTimeCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationRelTimeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationRelTimeCam(void *p = 0);
   static void *newArray_MCalibrationRelTimeCam(Long_t size, void *p);
   static void delete_MCalibrationRelTimeCam(void *p);
   static void deleteArray_MCalibrationRelTimeCam(void *p);
   static void destruct_MCalibrationRelTimeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationRelTimeCam*)
   {
      ::MCalibrationRelTimeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationRelTimeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationRelTimeCam", ::MCalibrationRelTimeCam::Class_Version(), "./MCalibrationRelTimeCam.h", 9,
                  typeid(::MCalibrationRelTimeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationRelTimeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationRelTimeCam) );
      instance.SetNew(&new_MCalibrationRelTimeCam);
      instance.SetNewArray(&newArray_MCalibrationRelTimeCam);
      instance.SetDelete(&delete_MCalibrationRelTimeCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationRelTimeCam);
      instance.SetDestructor(&destruct_MCalibrationRelTimeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationRelTimeCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationRelTimeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationRelTimeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationBlindCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationBlindCam(void *p = 0);
   static void *newArray_MCalibrationBlindCam(Long_t size, void *p);
   static void delete_MCalibrationBlindCam(void *p);
   static void deleteArray_MCalibrationBlindCam(void *p);
   static void destruct_MCalibrationBlindCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationBlindCam*)
   {
      ::MCalibrationBlindCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationBlindCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationBlindCam", ::MCalibrationBlindCam::Class_Version(), "./MCalibrationBlindCam.h", 9,
                  typeid(::MCalibrationBlindCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationBlindCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationBlindCam) );
      instance.SetNew(&new_MCalibrationBlindCam);
      instance.SetNewArray(&newArray_MCalibrationBlindCam);
      instance.SetDelete(&delete_MCalibrationBlindCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationBlindCam);
      instance.SetDestructor(&destruct_MCalibrationBlindCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationBlindCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationBlindCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationBlindCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationQECam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationQECam(void *p = 0);
   static void *newArray_MCalibrationQECam(Long_t size, void *p);
   static void delete_MCalibrationQECam(void *p);
   static void deleteArray_MCalibrationQECam(void *p);
   static void destruct_MCalibrationQECam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationQECam*)
   {
      ::MCalibrationQECam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationQECam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationQECam", ::MCalibrationQECam::Class_Version(), "./MCalibrationQECam.h", 19,
                  typeid(::MCalibrationQECam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationQECam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationQECam) );
      instance.SetNew(&new_MCalibrationQECam);
      instance.SetNewArray(&newArray_MCalibrationQECam);
      instance.SetDelete(&delete_MCalibrationQECam);
      instance.SetDeleteArray(&deleteArray_MCalibrationQECam);
      instance.SetDestructor(&destruct_MCalibrationQECam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationQECam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationQECam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationQECam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibColorSteer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibColorSteer(void *p = 0);
   static void *newArray_MCalibColorSteer(Long_t size, void *p);
   static void delete_MCalibColorSteer(void *p);
   static void deleteArray_MCalibColorSteer(void *p);
   static void destruct_MCalibColorSteer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibColorSteer*)
   {
      ::MCalibColorSteer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibColorSteer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibColorSteer", ::MCalibColorSteer::Class_Version(), "./MCalibColorSteer.h", 26,
                  typeid(::MCalibColorSteer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibColorSteer::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibColorSteer) );
      instance.SetNew(&new_MCalibColorSteer);
      instance.SetNewArray(&newArray_MCalibColorSteer);
      instance.SetDelete(&delete_MCalibColorSteer);
      instance.SetDeleteArray(&deleteArray_MCalibColorSteer);
      instance.SetDestructor(&destruct_MCalibColorSteer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibColorSteer*)
   {
      return GenerateInitInstanceLocal((::MCalibColorSteer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibColorSteer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrateData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrateData(void *p = 0);
   static void *newArray_MCalibrateData(Long_t size, void *p);
   static void delete_MCalibrateData(void *p);
   static void deleteArray_MCalibrateData(void *p);
   static void destruct_MCalibrateData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrateData*)
   {
      ::MCalibrateData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrateData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrateData", ::MCalibrateData::Class_Version(), "./MCalibrateData.h", 24,
                  typeid(::MCalibrateData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrateData::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrateData) );
      instance.SetNew(&new_MCalibrateData);
      instance.SetNewArray(&newArray_MCalibrateData);
      instance.SetDelete(&delete_MCalibrateData);
      instance.SetDeleteArray(&deleteArray_MCalibrateData);
      instance.SetDestructor(&destruct_MCalibrateData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrateData*)
   {
      return GenerateInitInstanceLocal((::MCalibrateData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrateData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibCalcFromPast_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibCalcFromPast(void *p = 0);
   static void *newArray_MCalibCalcFromPast(Long_t size, void *p);
   static void delete_MCalibCalcFromPast(void *p);
   static void deleteArray_MCalibCalcFromPast(void *p);
   static void destruct_MCalibCalcFromPast(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibCalcFromPast*)
   {
      ::MCalibCalcFromPast *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibCalcFromPast >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibCalcFromPast", ::MCalibCalcFromPast::Class_Version(), "./MCalibCalcFromPast.h", 26,
                  typeid(::MCalibCalcFromPast), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibCalcFromPast::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibCalcFromPast) );
      instance.SetNew(&new_MCalibCalcFromPast);
      instance.SetNewArray(&newArray_MCalibCalcFromPast);
      instance.SetDelete(&delete_MCalibCalcFromPast);
      instance.SetDeleteArray(&deleteArray_MCalibCalcFromPast);
      instance.SetDestructor(&destruct_MCalibCalcFromPast);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibCalcFromPast*)
   {
      return GenerateInitInstanceLocal((::MCalibCalcFromPast*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibCalcFromPast*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibConstCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibConstCam(void *p = 0);
   static void *newArray_MCalibConstCam(Long_t size, void *p);
   static void delete_MCalibConstCam(void *p);
   static void deleteArray_MCalibConstCam(void *p);
   static void destruct_MCalibConstCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibConstCam*)
   {
      ::MCalibConstCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibConstCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibConstCam", ::MCalibConstCam::Class_Version(), "./MCalibConstCam.h", 20,
                  typeid(::MCalibConstCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibConstCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibConstCam) );
      instance.SetNew(&new_MCalibConstCam);
      instance.SetNewArray(&newArray_MCalibConstCam);
      instance.SetDelete(&delete_MCalibConstCam);
      instance.SetDeleteArray(&deleteArray_MCalibConstCam);
      instance.SetDestructor(&destruct_MCalibConstCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibConstCam*)
   {
      return GenerateInitInstanceLocal((::MCalibConstCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibConstCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrateFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrateFact(void *p = 0);
   static void *newArray_MCalibrateFact(Long_t size, void *p);
   static void delete_MCalibrateFact(void *p);
   static void deleteArray_MCalibrateFact(void *p);
   static void destruct_MCalibrateFact(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrateFact*)
   {
      ::MCalibrateFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrateFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrateFact", ::MCalibrateFact::Class_Version(), "./MCalibrateFact.h", 17,
                  typeid(::MCalibrateFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrateFact::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrateFact) );
      instance.SetNew(&new_MCalibrateFact);
      instance.SetNewArray(&newArray_MCalibrateFact);
      instance.SetDelete(&delete_MCalibrateFact);
      instance.SetDeleteArray(&deleteArray_MCalibrateFact);
      instance.SetDestructor(&destruct_MCalibrateFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrateFact*)
   {
      return GenerateInitInstanceLocal((::MCalibrateFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrateFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibConstPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibConstPix(void *p = 0);
   static void *newArray_MCalibConstPix(Long_t size, void *p);
   static void delete_MCalibConstPix(void *p);
   static void deleteArray_MCalibConstPix(void *p);
   static void destruct_MCalibConstPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibConstPix*)
   {
      ::MCalibConstPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibConstPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibConstPix", ::MCalibConstPix::Class_Version(), "./MCalibConstPix.h", 9,
                  typeid(::MCalibConstPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibConstPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibConstPix) );
      instance.SetNew(&new_MCalibConstPix);
      instance.SetNewArray(&newArray_MCalibConstPix);
      instance.SetDelete(&delete_MCalibConstPix);
      instance.SetDeleteArray(&deleteArray_MCalibConstPix);
      instance.SetDestructor(&destruct_MCalibConstPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibConstPix*)
   {
      return GenerateInitInstanceLocal((::MCalibConstPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibConstPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationPatternDecode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationPatternDecode(void *p = 0);
   static void *newArray_MCalibrationPatternDecode(Long_t size, void *p);
   static void delete_MCalibrationPatternDecode(void *p);
   static void deleteArray_MCalibrationPatternDecode(void *p);
   static void destruct_MCalibrationPatternDecode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationPatternDecode*)
   {
      ::MCalibrationPatternDecode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationPatternDecode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationPatternDecode", ::MCalibrationPatternDecode::Class_Version(), "./MCalibrationPatternDecode.h", 14,
                  typeid(::MCalibrationPatternDecode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationPatternDecode::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationPatternDecode) );
      instance.SetNew(&new_MCalibrationPatternDecode);
      instance.SetNewArray(&newArray_MCalibrationPatternDecode);
      instance.SetDelete(&delete_MCalibrationPatternDecode);
      instance.SetDeleteArray(&deleteArray_MCalibrationPatternDecode);
      instance.SetDestructor(&destruct_MCalibrationPatternDecode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationPatternDecode*)
   {
      return GenerateInitInstanceLocal((::MCalibrationPatternDecode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationPatternDecode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrateRelTimes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrateRelTimes(void *p = 0);
   static void *newArray_MCalibrateRelTimes(Long_t size, void *p);
   static void delete_MCalibrateRelTimes(void *p);
   static void deleteArray_MCalibrateRelTimes(void *p);
   static void destruct_MCalibrateRelTimes(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrateRelTimes*)
   {
      ::MCalibrateRelTimes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrateRelTimes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrateRelTimes", ::MCalibrateRelTimes::Class_Version(), "./MCalibrateRelTimes.h", 16,
                  typeid(::MCalibrateRelTimes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrateRelTimes::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrateRelTimes) );
      instance.SetNew(&new_MCalibrateRelTimes);
      instance.SetNewArray(&newArray_MCalibrateRelTimes);
      instance.SetDelete(&delete_MCalibrateRelTimes);
      instance.SetDeleteArray(&deleteArray_MCalibrateRelTimes);
      instance.SetDestructor(&destruct_MCalibrateRelTimes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrateRelTimes*)
   {
      return GenerateInitInstanceLocal((::MCalibrateRelTimes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrateRelTimes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationPulseTimeCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationPulseTimeCam(void *p = 0);
   static void *newArray_MCalibrationPulseTimeCam(Long_t size, void *p);
   static void delete_MCalibrationPulseTimeCam(void *p);
   static void deleteArray_MCalibrationPulseTimeCam(void *p);
   static void destruct_MCalibrationPulseTimeCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationPulseTimeCam*)
   {
      ::MCalibrationPulseTimeCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationPulseTimeCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationPulseTimeCam", ::MCalibrationPulseTimeCam::Class_Version(), "./MCalibrationPulseTimeCam.h", 9,
                  typeid(::MCalibrationPulseTimeCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationPulseTimeCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationPulseTimeCam) );
      instance.SetNew(&new_MCalibrationPulseTimeCam);
      instance.SetNewArray(&newArray_MCalibrationPulseTimeCam);
      instance.SetDelete(&delete_MCalibrationPulseTimeCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationPulseTimeCam);
      instance.SetDestructor(&destruct_MCalibrationPulseTimeCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationPulseTimeCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationPulseTimeCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationPulseTimeCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationRelTimePix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationRelTimePix(void *p = 0);
   static void *newArray_MCalibrationRelTimePix(Long_t size, void *p);
   static void delete_MCalibrationRelTimePix(void *p);
   static void deleteArray_MCalibrationRelTimePix(void *p);
   static void destruct_MCalibrationRelTimePix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationRelTimePix*)
   {
      ::MCalibrationRelTimePix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationRelTimePix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationRelTimePix", ::MCalibrationRelTimePix::Class_Version(), "./MCalibrationRelTimePix.h", 9,
                  typeid(::MCalibrationRelTimePix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationRelTimePix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationRelTimePix) );
      instance.SetNew(&new_MCalibrationRelTimePix);
      instance.SetNewArray(&newArray_MCalibrationRelTimePix);
      instance.SetDelete(&delete_MCalibrationRelTimePix);
      instance.SetDeleteArray(&deleteArray_MCalibrationRelTimePix);
      instance.SetDestructor(&destruct_MCalibrationRelTimePix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationRelTimePix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationRelTimePix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationRelTimePix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationQECamMagic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationQECamMagic(void *p = 0);
   static void *newArray_MCalibrationQECamMagic(Long_t size, void *p);
   static void delete_MCalibrationQECamMagic(void *p);
   static void deleteArray_MCalibrationQECamMagic(void *p);
   static void destruct_MCalibrationQECamMagic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationQECamMagic*)
   {
      ::MCalibrationQECamMagic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationQECamMagic >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationQECamMagic", ::MCalibrationQECamMagic::Class_Version(), "./MCalibrationQECamMagic.h", 9,
                  typeid(::MCalibrationQECamMagic), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationQECamMagic::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationQECamMagic) );
      instance.SetNew(&new_MCalibrationQECamMagic);
      instance.SetNewArray(&newArray_MCalibrationQECamMagic);
      instance.SetDelete(&delete_MCalibrationQECamMagic);
      instance.SetDeleteArray(&deleteArray_MCalibrationQECamMagic);
      instance.SetDestructor(&destruct_MCalibrationQECamMagic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationQECamMagic*)
   {
      return GenerateInitInstanceLocal((::MCalibrationQECamMagic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationQECamMagic*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationQEPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationQEPix(void *p = 0);
   static void *newArray_MCalibrationQEPix(Long_t size, void *p);
   static void delete_MCalibrationQEPix(void *p);
   static void deleteArray_MCalibrationQEPix(void *p);
   static void destruct_MCalibrationQEPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationQEPix*)
   {
      ::MCalibrationQEPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationQEPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationQEPix", ::MCalibrationQEPix::Class_Version(), "./MCalibrationQEPix.h", 21,
                  typeid(::MCalibrationQEPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationQEPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationQEPix) );
      instance.SetNew(&new_MCalibrationQEPix);
      instance.SetNewArray(&newArray_MCalibrationQEPix);
      instance.SetDelete(&delete_MCalibrationQEPix);
      instance.SetDeleteArray(&deleteArray_MCalibrationQEPix);
      instance.SetDestructor(&destruct_MCalibrationQEPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationQEPix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationQEPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationQEPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationTestCam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationTestCam(void *p = 0);
   static void *newArray_MCalibrationTestCam(Long_t size, void *p);
   static void delete_MCalibrationTestCam(void *p);
   static void deleteArray_MCalibrationTestCam(void *p);
   static void destruct_MCalibrationTestCam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationTestCam*)
   {
      ::MCalibrationTestCam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationTestCam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationTestCam", ::MCalibrationTestCam::Class_Version(), "./MCalibrationTestCam.h", 9,
                  typeid(::MCalibrationTestCam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationTestCam::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationTestCam) );
      instance.SetNew(&new_MCalibrationTestCam);
      instance.SetNewArray(&newArray_MCalibrationTestCam);
      instance.SetDelete(&delete_MCalibrationTestCam);
      instance.SetDeleteArray(&deleteArray_MCalibrationTestCam);
      instance.SetDestructor(&destruct_MCalibrationTestCam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationTestCam*)
   {
      return GenerateInitInstanceLocal((::MCalibrationTestCam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationTestCam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationTestCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationTestCalc(void *p = 0);
   static void *newArray_MCalibrationTestCalc(Long_t size, void *p);
   static void delete_MCalibrationTestCalc(void *p);
   static void deleteArray_MCalibrationTestCalc(void *p);
   static void destruct_MCalibrationTestCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationTestCalc*)
   {
      ::MCalibrationTestCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationTestCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationTestCalc", ::MCalibrationTestCalc::Class_Version(), "./MCalibrationTestCalc.h", 27,
                  typeid(::MCalibrationTestCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationTestCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationTestCalc) );
      instance.SetNew(&new_MCalibrationTestCalc);
      instance.SetNewArray(&newArray_MCalibrationTestCalc);
      instance.SetDelete(&delete_MCalibrationTestCalc);
      instance.SetDeleteArray(&deleteArray_MCalibrationTestCalc);
      instance.SetDestructor(&destruct_MCalibrationTestCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationTestCalc*)
   {
      return GenerateInitInstanceLocal((::MCalibrationTestCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationTestCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationTestPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationTestPix(void *p = 0);
   static void *newArray_MCalibrationTestPix(Long_t size, void *p);
   static void delete_MCalibrationTestPix(void *p);
   static void deleteArray_MCalibrationTestPix(void *p);
   static void destruct_MCalibrationTestPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationTestPix*)
   {
      ::MCalibrationTestPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationTestPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationTestPix", ::MCalibrationTestPix::Class_Version(), "./MCalibrationTestPix.h", 9,
                  typeid(::MCalibrationTestPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationTestPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationTestPix) );
      instance.SetNew(&new_MCalibrationTestPix);
      instance.SetNewArray(&newArray_MCalibrationTestPix);
      instance.SetDelete(&delete_MCalibrationTestPix);
      instance.SetDeleteArray(&deleteArray_MCalibrationTestPix);
      instance.SetDestructor(&destruct_MCalibrationTestPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationTestPix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationTestPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationTestPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationChargePINDiode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationChargePINDiode(void *p = 0);
   static void *newArray_MCalibrationChargePINDiode(Long_t size, void *p);
   static void delete_MCalibrationChargePINDiode(void *p);
   static void deleteArray_MCalibrationChargePINDiode(void *p);
   static void destruct_MCalibrationChargePINDiode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationChargePINDiode*)
   {
      ::MCalibrationChargePINDiode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationChargePINDiode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationChargePINDiode", ::MCalibrationChargePINDiode::Class_Version(), "./MCalibrationChargePINDiode.h", 13,
                  typeid(::MCalibrationChargePINDiode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationChargePINDiode::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationChargePINDiode) );
      instance.SetNew(&new_MCalibrationChargePINDiode);
      instance.SetNewArray(&newArray_MCalibrationChargePINDiode);
      instance.SetDelete(&delete_MCalibrationChargePINDiode);
      instance.SetDeleteArray(&deleteArray_MCalibrationChargePINDiode);
      instance.SetDestructor(&destruct_MCalibrationChargePINDiode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationChargePINDiode*)
   {
      return GenerateInitInstanceLocal((::MCalibrationChargePINDiode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationChargePINDiode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationChargePix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationChargePix(void *p = 0);
   static void *newArray_MCalibrationChargePix(Long_t size, void *p);
   static void delete_MCalibrationChargePix(void *p);
   static void deleteArray_MCalibrationChargePix(void *p);
   static void destruct_MCalibrationChargePix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationChargePix*)
   {
      ::MCalibrationChargePix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationChargePix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationChargePix", ::MCalibrationChargePix::Class_Version(), "./MCalibrationChargePix.h", 9,
                  typeid(::MCalibrationChargePix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationChargePix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationChargePix) );
      instance.SetNew(&new_MCalibrationChargePix);
      instance.SetNewArray(&newArray_MCalibrationChargePix);
      instance.SetDelete(&delete_MCalibrationChargePix);
      instance.SetDeleteArray(&deleteArray_MCalibrationChargePix);
      instance.SetDestructor(&destruct_MCalibrationChargePix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationChargePix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationChargePix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationChargePix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationBlindPix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationBlindPix(void *p = 0);
   static void *newArray_MCalibrationBlindPix(Long_t size, void *p);
   static void delete_MCalibrationBlindPix(void *p);
   static void deleteArray_MCalibrationBlindPix(void *p);
   static void destruct_MCalibrationBlindPix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationBlindPix*)
   {
      ::MCalibrationBlindPix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationBlindPix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationBlindPix", ::MCalibrationBlindPix::Class_Version(), "./MCalibrationBlindPix.h", 17,
                  typeid(::MCalibrationBlindPix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationBlindPix::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationBlindPix) );
      instance.SetNew(&new_MCalibrationBlindPix);
      instance.SetNewArray(&newArray_MCalibrationBlindPix);
      instance.SetDelete(&delete_MCalibrationBlindPix);
      instance.SetDeleteArray(&deleteArray_MCalibrationBlindPix);
      instance.SetDestructor(&destruct_MCalibrationBlindPix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationBlindPix*)
   {
      return GenerateInitInstanceLocal((::MCalibrationBlindPix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationBlindPix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationBlindCamOneOldStyle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationBlindCamOneOldStyle(void *p = 0);
   static void *newArray_MCalibrationBlindCamOneOldStyle(Long_t size, void *p);
   static void delete_MCalibrationBlindCamOneOldStyle(void *p);
   static void deleteArray_MCalibrationBlindCamOneOldStyle(void *p);
   static void destruct_MCalibrationBlindCamOneOldStyle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationBlindCamOneOldStyle*)
   {
      ::MCalibrationBlindCamOneOldStyle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationBlindCamOneOldStyle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationBlindCamOneOldStyle", ::MCalibrationBlindCamOneOldStyle::Class_Version(), "./MCalibrationBlindCamOneOldStyle.h", 9,
                  typeid(::MCalibrationBlindCamOneOldStyle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationBlindCamOneOldStyle::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationBlindCamOneOldStyle) );
      instance.SetNew(&new_MCalibrationBlindCamOneOldStyle);
      instance.SetNewArray(&newArray_MCalibrationBlindCamOneOldStyle);
      instance.SetDelete(&delete_MCalibrationBlindCamOneOldStyle);
      instance.SetDeleteArray(&deleteArray_MCalibrationBlindCamOneOldStyle);
      instance.SetDestructor(&destruct_MCalibrationBlindCamOneOldStyle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationBlindCamOneOldStyle*)
   {
      return GenerateInitInstanceLocal((::MCalibrationBlindCamOneOldStyle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationBlindCamOneOldStyle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationBlindCamTwoNewStyle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationBlindCamTwoNewStyle(void *p = 0);
   static void *newArray_MCalibrationBlindCamTwoNewStyle(Long_t size, void *p);
   static void delete_MCalibrationBlindCamTwoNewStyle(void *p);
   static void deleteArray_MCalibrationBlindCamTwoNewStyle(void *p);
   static void destruct_MCalibrationBlindCamTwoNewStyle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationBlindCamTwoNewStyle*)
   {
      ::MCalibrationBlindCamTwoNewStyle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationBlindCamTwoNewStyle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationBlindCamTwoNewStyle", ::MCalibrationBlindCamTwoNewStyle::Class_Version(), "./MCalibrationBlindCamTwoNewStyle.h", 9,
                  typeid(::MCalibrationBlindCamTwoNewStyle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationBlindCamTwoNewStyle::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationBlindCamTwoNewStyle) );
      instance.SetNew(&new_MCalibrationBlindCamTwoNewStyle);
      instance.SetNewArray(&newArray_MCalibrationBlindCamTwoNewStyle);
      instance.SetDelete(&delete_MCalibrationBlindCamTwoNewStyle);
      instance.SetDeleteArray(&deleteArray_MCalibrationBlindCamTwoNewStyle);
      instance.SetDestructor(&destruct_MCalibrationBlindCamTwoNewStyle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationBlindCamTwoNewStyle*)
   {
      return GenerateInitInstanceLocal((::MCalibrationBlindCamTwoNewStyle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationBlindCamTwoNewStyle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrationBlindCamThreeNewStyle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrationBlindCamThreeNewStyle(void *p = 0);
   static void *newArray_MCalibrationBlindCamThreeNewStyle(Long_t size, void *p);
   static void delete_MCalibrationBlindCamThreeNewStyle(void *p);
   static void deleteArray_MCalibrationBlindCamThreeNewStyle(void *p);
   static void destruct_MCalibrationBlindCamThreeNewStyle(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrationBlindCamThreeNewStyle*)
   {
      ::MCalibrationBlindCamThreeNewStyle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrationBlindCamThreeNewStyle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrationBlindCamThreeNewStyle", ::MCalibrationBlindCamThreeNewStyle::Class_Version(), "./MCalibrationBlindCamThreeNewStyle.h", 9,
                  typeid(::MCalibrationBlindCamThreeNewStyle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrationBlindCamThreeNewStyle::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrationBlindCamThreeNewStyle) );
      instance.SetNew(&new_MCalibrationBlindCamThreeNewStyle);
      instance.SetNewArray(&newArray_MCalibrationBlindCamThreeNewStyle);
      instance.SetDelete(&delete_MCalibrationBlindCamThreeNewStyle);
      instance.SetDeleteArray(&deleteArray_MCalibrationBlindCamThreeNewStyle);
      instance.SetDestructor(&destruct_MCalibrationBlindCamThreeNewStyle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrationBlindCamThreeNewStyle*)
   {
      return GenerateInitInstanceLocal((::MCalibrationBlindCamThreeNewStyle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrationBlindCamThreeNewStyle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationPix::Class_Name()
{
   return "MCalibrationPix";
}

//______________________________________________________________________________
const char *MCalibrationPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationCam::Class_Name()
{
   return "MCalibrationCam";
}

//______________________________________________________________________________
const char *MCalibrationCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationPattern::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationPattern::Class_Name()
{
   return "MCalibrationPattern";
}

//______________________________________________________________________________
const char *MCalibrationPattern::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPattern*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationPattern::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPattern*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationPattern::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPattern*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationPattern::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPattern*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibColorSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibColorSet::Class_Name()
{
   return "MCalibColorSet";
}

//______________________________________________________________________________
const char *MCalibColorSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibColorSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibColorSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibColorSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationChargeCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationChargeCalc::Class_Name()
{
   return "MCalibrationChargeCalc";
}

//______________________________________________________________________________
const char *MCalibrationChargeCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationChargeCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationChargeCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationChargeCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationChargeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationChargeCam::Class_Name()
{
   return "MCalibrationChargeCam";
}

//______________________________________________________________________________
const char *MCalibrationChargeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationChargeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationChargeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationChargeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationRelTimeCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationRelTimeCalc::Class_Name()
{
   return "MCalibrationRelTimeCalc";
}

//______________________________________________________________________________
const char *MCalibrationRelTimeCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationRelTimeCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationRelTimeCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationRelTimeCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationRelTimeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationRelTimeCam::Class_Name()
{
   return "MCalibrationRelTimeCam";
}

//______________________________________________________________________________
const char *MCalibrationRelTimeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationRelTimeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationRelTimeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationRelTimeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationBlindCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationBlindCam::Class_Name()
{
   return "MCalibrationBlindCam";
}

//______________________________________________________________________________
const char *MCalibrationBlindCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationBlindCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationBlindCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationBlindCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationQECam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationQECam::Class_Name()
{
   return "MCalibrationQECam";
}

//______________________________________________________________________________
const char *MCalibrationQECam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationQECam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationQECam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationQECam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibColorSteer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibColorSteer::Class_Name()
{
   return "MCalibColorSteer";
}

//______________________________________________________________________________
const char *MCalibColorSteer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSteer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibColorSteer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSteer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibColorSteer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSteer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibColorSteer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibColorSteer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrateData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrateData::Class_Name()
{
   return "MCalibrateData";
}

//______________________________________________________________________________
const char *MCalibrateData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrateData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrateData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrateData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibCalcFromPast::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibCalcFromPast::Class_Name()
{
   return "MCalibCalcFromPast";
}

//______________________________________________________________________________
const char *MCalibCalcFromPast::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibCalcFromPast*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibCalcFromPast::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibCalcFromPast*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibCalcFromPast::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibCalcFromPast*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibCalcFromPast::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibCalcFromPast*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibConstCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibConstCam::Class_Name()
{
   return "MCalibConstCam";
}

//______________________________________________________________________________
const char *MCalibConstCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibConstCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibConstCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibConstCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrateFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrateFact::Class_Name()
{
   return "MCalibrateFact";
}

//______________________________________________________________________________
const char *MCalibrateFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrateFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrateFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrateFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibConstPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibConstPix::Class_Name()
{
   return "MCalibConstPix";
}

//______________________________________________________________________________
const char *MCalibConstPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibConstPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibConstPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibConstPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibConstPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationPatternDecode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationPatternDecode::Class_Name()
{
   return "MCalibrationPatternDecode";
}

//______________________________________________________________________________
const char *MCalibrationPatternDecode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPatternDecode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationPatternDecode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPatternDecode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationPatternDecode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPatternDecode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationPatternDecode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPatternDecode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrateRelTimes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrateRelTimes::Class_Name()
{
   return "MCalibrateRelTimes";
}

//______________________________________________________________________________
const char *MCalibrateRelTimes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateRelTimes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrateRelTimes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateRelTimes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrateRelTimes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateRelTimes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrateRelTimes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateRelTimes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationPulseTimeCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationPulseTimeCam::Class_Name()
{
   return "MCalibrationPulseTimeCam";
}

//______________________________________________________________________________
const char *MCalibrationPulseTimeCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPulseTimeCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationPulseTimeCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPulseTimeCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationPulseTimeCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPulseTimeCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationPulseTimeCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationPulseTimeCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationRelTimePix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationRelTimePix::Class_Name()
{
   return "MCalibrationRelTimePix";
}

//______________________________________________________________________________
const char *MCalibrationRelTimePix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimePix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationRelTimePix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimePix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationRelTimePix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimePix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationRelTimePix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationRelTimePix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationQECamMagic::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationQECamMagic::Class_Name()
{
   return "MCalibrationQECamMagic";
}

//______________________________________________________________________________
const char *MCalibrationQECamMagic::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECamMagic*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationQECamMagic::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECamMagic*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationQECamMagic::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECamMagic*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationQECamMagic::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQECamMagic*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationQEPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationQEPix::Class_Name()
{
   return "MCalibrationQEPix";
}

//______________________________________________________________________________
const char *MCalibrationQEPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQEPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationQEPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQEPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationQEPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQEPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationQEPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationQEPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationTestCam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationTestCam::Class_Name()
{
   return "MCalibrationTestCam";
}

//______________________________________________________________________________
const char *MCalibrationTestCam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationTestCam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationTestCam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationTestCam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationTestCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationTestCalc::Class_Name()
{
   return "MCalibrationTestCalc";
}

//______________________________________________________________________________
const char *MCalibrationTestCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationTestCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationTestCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationTestCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationTestPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationTestPix::Class_Name()
{
   return "MCalibrationTestPix";
}

//______________________________________________________________________________
const char *MCalibrationTestPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationTestPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationTestPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationTestPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationTestPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationChargePINDiode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationChargePINDiode::Class_Name()
{
   return "MCalibrationChargePINDiode";
}

//______________________________________________________________________________
const char *MCalibrationChargePINDiode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePINDiode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationChargePINDiode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePINDiode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationChargePINDiode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePINDiode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationChargePINDiode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePINDiode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationChargePix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationChargePix::Class_Name()
{
   return "MCalibrationChargePix";
}

//______________________________________________________________________________
const char *MCalibrationChargePix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationChargePix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationChargePix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationChargePix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationChargePix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationBlindPix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationBlindPix::Class_Name()
{
   return "MCalibrationBlindPix";
}

//______________________________________________________________________________
const char *MCalibrationBlindPix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindPix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationBlindPix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindPix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationBlindPix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindPix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationBlindPix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindPix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationBlindCamOneOldStyle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationBlindCamOneOldStyle::Class_Name()
{
   return "MCalibrationBlindCamOneOldStyle";
}

//______________________________________________________________________________
const char *MCalibrationBlindCamOneOldStyle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamOneOldStyle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationBlindCamOneOldStyle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamOneOldStyle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationBlindCamOneOldStyle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamOneOldStyle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationBlindCamOneOldStyle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamOneOldStyle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationBlindCamTwoNewStyle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationBlindCamTwoNewStyle::Class_Name()
{
   return "MCalibrationBlindCamTwoNewStyle";
}

//______________________________________________________________________________
const char *MCalibrationBlindCamTwoNewStyle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamTwoNewStyle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationBlindCamTwoNewStyle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamTwoNewStyle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationBlindCamTwoNewStyle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamTwoNewStyle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationBlindCamTwoNewStyle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamTwoNewStyle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrationBlindCamThreeNewStyle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrationBlindCamThreeNewStyle::Class_Name()
{
   return "MCalibrationBlindCamThreeNewStyle";
}

//______________________________________________________________________________
const char *MCalibrationBlindCamThreeNewStyle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamThreeNewStyle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrationBlindCamThreeNewStyle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamThreeNewStyle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrationBlindCamThreeNewStyle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamThreeNewStyle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrationBlindCamThreeNewStyle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrationBlindCamThreeNewStyle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MCalibColorSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibColorSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibColorSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibColorSet::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibColorSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibColorSet.
      TClass *R__cl = ::MCalibColorSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPattern", &fPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColor", &fColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrength", &fStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsValid", &fIsValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsExplicitColor", &fIsExplicitColor);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibColorSet(void *p) {
      return  p ? new(p) ::MCalibColorSet : new ::MCalibColorSet;
   }
   static void *newArray_MCalibColorSet(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibColorSet[nElements] : new ::MCalibColorSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibColorSet(void *p) {
      delete ((::MCalibColorSet*)p);
   }
   static void deleteArray_MCalibColorSet(void *p) {
      delete [] ((::MCalibColorSet*)p);
   }
   static void destruct_MCalibColorSet(void *p) {
      typedef ::MCalibColorSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibColorSet

//______________________________________________________________________________
void MCalibColorSteer::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibColorSteer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibColorSteer::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibColorSteer::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibColorSteer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibColorSteer.
      TClass *R__cl = ::MCalibColorSteer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibPattern", &fCalibPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParList", &fParList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRelTimeCam", &fRelTimeCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlindCam", &fBlindCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQECam", &fQECam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBad", &fBad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargeCalc", &fChargeCalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRelTimeCalc", &fRelTimeCalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColor", &fColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrength", &fStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistCopy", &fHistCopy);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibColorSteer(void *p) {
      return  p ? new(p) ::MCalibColorSteer : new ::MCalibColorSteer;
   }
   static void *newArray_MCalibColorSteer(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibColorSteer[nElements] : new ::MCalibColorSteer[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibColorSteer(void *p) {
      delete ((::MCalibColorSteer*)p);
   }
   static void deleteArray_MCalibColorSteer(void *p) {
      delete [] ((::MCalibColorSteer*)p);
   }
   static void destruct_MCalibColorSteer(void *p) {
      typedef ::MCalibColorSteer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibColorSteer

//______________________________________________________________________________
void MCalibCalcFromPast::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibCalcFromPast.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibCalcFromPast::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibCalcFromPast::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibCalcFromPast::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibCalcFromPast.
      TClass *R__cl = ::MCalibCalcFromPast::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParList", &fParList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlindCam", &fBlindCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQECam", &fQECam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargeCalc", &fChargeCalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRelTimeCalc", &fRelTimeCalc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibrate", &fCalibrate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCam", &fNumCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEventsDump", &fNumEventsDump);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhesDump", &fNumPhesDump);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhes", &fNumPhes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPhes", &fMeanPhes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPhesRelVar", &fMeanPhesRelVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpdateWithFFactorMethod", &fUpdateWithFFactorMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpdateNumPhes", &fUpdateNumPhes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhes", &fPhes);
      R__insp.InspectMember(fPhes, "fPhes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhesVar", &fPhesVar);
      R__insp.InspectMember(fPhesVar, "fPhesVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFails", &fNumFails);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibCalcFromPast(void *p) {
      return  p ? new(p) ::MCalibCalcFromPast : new ::MCalibCalcFromPast;
   }
   static void *newArray_MCalibCalcFromPast(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibCalcFromPast[nElements] : new ::MCalibCalcFromPast[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibCalcFromPast(void *p) {
      delete ((::MCalibCalcFromPast*)p);
   }
   static void deleteArray_MCalibCalcFromPast(void *p) {
      delete [] ((::MCalibCalcFromPast*)p);
   }
   static void destruct_MCalibCalcFromPast(void *p) {
      typedef ::MCalibCalcFromPast current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibCalcFromPast

//______________________________________________________________________________
void MCalibrationPattern::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationPattern.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationPattern::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationPattern::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationPattern::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationPattern.
      TClass *R__cl = ::MCalibrationPattern::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCLStrength", &fCLStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCLColor", &fCLColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulserStrength", &fPulserStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulserColor", &fPulserColor);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationPattern(void *p) {
      return  p ? new(p) ::MCalibrationPattern : new ::MCalibrationPattern;
   }
   static void *newArray_MCalibrationPattern(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationPattern[nElements] : new ::MCalibrationPattern[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationPattern(void *p) {
      delete ((::MCalibrationPattern*)p);
   }
   static void deleteArray_MCalibrationPattern(void *p) {
      delete [] ((::MCalibrationPattern*)p);
   }
   static void destruct_MCalibrationPattern(void *p) {
      typedef ::MCalibrationPattern current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationPattern

//______________________________________________________________________________
void MCalibrationPatternDecode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationPatternDecode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationPatternDecode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationPatternDecode::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationPatternDecode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationPatternDecode.
      TClass *R__cl = ::MCalibrationPatternDecode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPattern", &fPattern);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationPatternDecode(void *p) {
      return  p ? new(p) ::MCalibrationPatternDecode : new ::MCalibrationPatternDecode;
   }
   static void *newArray_MCalibrationPatternDecode(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationPatternDecode[nElements] : new ::MCalibrationPatternDecode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationPatternDecode(void *p) {
      delete ((::MCalibrationPatternDecode*)p);
   }
   static void deleteArray_MCalibrationPatternDecode(void *p) {
      delete [] ((::MCalibrationPatternDecode*)p);
   }
   static void destruct_MCalibrationPatternDecode(void *p) {
      typedef ::MCalibrationPatternDecode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationPatternDecode

//______________________________________________________________________________
void MCalibrateData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrateData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrateData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrateData::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrateData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrateData.
      TClass *R__cl = ::MCalibrateData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibConvMinLimit", &fCalibConvMinLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibConvMaxLimit", &fCalibConvMaxLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibrations", &fCalibrations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQEs", &fQEs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignals", &fSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCerPhotEvt", &fCerPhotEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibConstCam", &fCalibConstCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibrationMode", &fCalibrationMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestalFlag", &fPedestalFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignalType", &fSignalType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRenormFactor", &fRenormFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleFactor", &fScaleFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileNameScale", &fFileNameScale);
      R__insp.InspectMember(fFileNameScale, "fFileNameScale.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamesPedestal", &fNamesPedestal);
      R__insp.InspectMember(fNamesPedestal, "fNamesPedestal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestalCams", &fPedestalCams);
      R__insp.InspectMember(fPedestalCams, "fPedestalCams.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedPhotCams", &fPedPhotCams);
      R__insp.InspectMember(fPedPhotCams, "fPedPhotCams.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibConsts", &fCalibConsts);
      R__insp.InspectMember(fCalibConsts, "fCalibConsts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibFFactors", &fCalibFFactors);
      R__insp.InspectMember(fCalibFFactors, "fCalibFFactors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiLoConv", &fHiLoConv);
      R__insp.InspectMember(fHiLoConv, "fHiLoConv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiLoConvErr", &fHiLoConvErr);
      R__insp.InspectMember(fHiLoConvErr, "fHiLoConvErr.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrateData(void *p) {
      return  p ? new(p) ::MCalibrateData : new ::MCalibrateData;
   }
   static void *newArray_MCalibrateData(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrateData[nElements] : new ::MCalibrateData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrateData(void *p) {
      delete ((::MCalibrateData*)p);
   }
   static void deleteArray_MCalibrateData(void *p) {
      delete [] ((::MCalibrateData*)p);
   }
   static void destruct_MCalibrateData(void *p) {
      typedef ::MCalibrateData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrateData

//______________________________________________________________________________
void MCalibrateFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrateFact.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrateFact::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrateFact::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrateFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrateFact.
      TClass *R__cl = ::MCalibrateFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIn", &fIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOut", &fOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameExtractedSignalCam", &fNameExtractedSignalCam);
      R__insp.InspectMember(fNameExtractedSignalCam, "fNameExtractedSignalCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalCam", &fNameSignalCam);
      R__insp.InspectMember(fNameSignalCam, "fNameSignalCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibConst", &fCalibConst);
      R__insp.InspectMember(fCalibConst, "fCalibConst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale", &fScale);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrateFact(void *p) {
      return  p ? new(p) ::MCalibrateFact : new ::MCalibrateFact;
   }
   static void *newArray_MCalibrateFact(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrateFact[nElements] : new ::MCalibrateFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrateFact(void *p) {
      delete ((::MCalibrateFact*)p);
   }
   static void deleteArray_MCalibrateFact(void *p) {
      delete [] ((::MCalibrateFact*)p);
   }
   static void destruct_MCalibrateFact(void *p) {
      typedef ::MCalibrateFact current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrateFact

//______________________________________________________________________________
void MCalibrateRelTimes::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrateRelTimes.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrateRelTimes::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrateRelTimes::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrateRelTimes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrateRelTimes.
      TClass *R__cl = ::MCalibrateRelTimes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibrations", &fCalibrations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignals", &fSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArrivalTime", &fArrivalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreq", &fFreq);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrateRelTimes(void *p) {
      return  p ? new(p) ::MCalibrateRelTimes : new ::MCalibrateRelTimes;
   }
   static void *newArray_MCalibrateRelTimes(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrateRelTimes[nElements] : new ::MCalibrateRelTimes[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrateRelTimes(void *p) {
      delete ((::MCalibrateRelTimes*)p);
   }
   static void deleteArray_MCalibrateRelTimes(void *p) {
      delete [] ((::MCalibrateRelTimes*)p);
   }
   static void destruct_MCalibrateRelTimes(void *p) {
      typedef ::MCalibrateRelTimes current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrateRelTimes

//______________________________________________________________________________
void MCalibConstCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibConstCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibConstCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibConstCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibConstCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibConstCam.
      TClass *R__cl = ::MCalibConstCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageAreas", &fAverageAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageSectors", &fAverageSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibConstCam(void *p) {
      return  p ? new(p) ::MCalibConstCam : new ::MCalibConstCam;
   }
   static void *newArray_MCalibConstCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibConstCam[nElements] : new ::MCalibConstCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibConstCam(void *p) {
      delete ((::MCalibConstCam*)p);
   }
   static void deleteArray_MCalibConstCam(void *p) {
      delete [] ((::MCalibConstCam*)p);
   }
   static void destruct_MCalibConstCam(void *p) {
      typedef ::MCalibConstCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibConstCam

//______________________________________________________________________________
void MCalibConstPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibConstPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibConstPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibConstPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibConstPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibConstPix.
      TClass *R__cl = ::MCalibConstPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibConst", &fCalibConst);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibFFactor", &fCalibFFactor);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibConstPix(void *p) {
      return  p ? new(p) ::MCalibConstPix : new ::MCalibConstPix;
   }
   static void *newArray_MCalibConstPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibConstPix[nElements] : new ::MCalibConstPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibConstPix(void *p) {
      delete ((::MCalibConstPix*)p);
   }
   static void deleteArray_MCalibConstPix(void *p) {
      delete [] ((::MCalibConstPix*)p);
   }
   static void destruct_MCalibConstPix(void *p) {
      typedef ::MCalibConstPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibConstPix

//______________________________________________________________________________
void MCalibrationCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationCam.
      TClass *R__cl = ::MCalibrationCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUnsuitable", &fNumUnsuitable);
      R__insp.InspectMember(fNumUnsuitable, "fNumUnsuitable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUnreliable", &fNumUnreliable);
      R__insp.InspectMember(fNumUnreliable, "fNumUnreliable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainFADCSlices", &fNumHiGainFADCSlices);
      R__insp.InspectMember(fNumHiGainFADCSlices, "fNumHiGainFADCSlices.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainFADCSlices", &fNumLoGainFADCSlices);
      R__insp.InspectMember(fNumLoGainFADCSlices, "fNumLoGainFADCSlices.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulserColor", &fPulserColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPixels", &fPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageAreas", &fAverageAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageSectors", &fAverageSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageBadAreas", &fAverageBadAreas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAverageBadSectors", &fAverageBadSectors);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationCam(void *p) {
      return  p ? new(p) ::MCalibrationCam : new ::MCalibrationCam;
   }
   static void *newArray_MCalibrationCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationCam[nElements] : new ::MCalibrationCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationCam(void *p) {
      delete ((::MCalibrationCam*)p);
   }
   static void deleteArray_MCalibrationCam(void *p) {
      delete [] ((::MCalibrationCam*)p);
   }
   static void destruct_MCalibrationCam(void *p) {
      typedef ::MCalibrationCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationCam

//______________________________________________________________________________
void MCalibrationPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationPix.
      TClass *R__cl = ::MCalibrationPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixId", &fPixId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainMean", &fHiGainMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainMeanVar", &fHiGainMeanVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainNumBlackout", &fHiGainNumBlackout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainNumPickup", &fHiGainNumPickup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainRms", &fHiGainRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainSigma", &fHiGainSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainSigmaVar", &fHiGainSigmaVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHiGainProb", &fHiGainProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainMean", &fLoGainMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainMeanVar", &fLoGainMeanVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainNumBlackout", &fLoGainNumBlackout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainNumPickup", &fLoGainNumPickup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainRms", &fLoGainRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainSigma", &fLoGainSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainSigmaVar", &fLoGainSigmaVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainProb", &fLoGainProb);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationPix(void *p) {
      return  p ? new(p) ::MCalibrationPix : new ::MCalibrationPix;
   }
   static void *newArray_MCalibrationPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationPix[nElements] : new ::MCalibrationPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationPix(void *p) {
      delete ((::MCalibrationPix*)p);
   }
   static void deleteArray_MCalibrationPix(void *p) {
      delete [] ((::MCalibrationPix*)p);
   }
   static void destruct_MCalibrationPix(void *p) {
      typedef ::MCalibrationPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationPix

//______________________________________________________________________________
void MCalibrationRelTimeCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationRelTimeCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationRelTimeCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationRelTimeCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationRelTimeCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationRelTimeCalc.
      TClass *R__cl = ::MCalibrationRelTimeCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRelTimeResolutionLimit", &fRelTimeResolutionLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCheckFlags", &fCheckFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationRelTimeCalc(void *p) {
      return  p ? new(p) ::MCalibrationRelTimeCalc : new ::MCalibrationRelTimeCalc;
   }
   static void *newArray_MCalibrationRelTimeCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationRelTimeCalc[nElements] : new ::MCalibrationRelTimeCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationRelTimeCalc(void *p) {
      delete ((::MCalibrationRelTimeCalc*)p);
   }
   static void deleteArray_MCalibrationRelTimeCalc(void *p) {
      delete [] ((::MCalibrationRelTimeCalc*)p);
   }
   static void destruct_MCalibrationRelTimeCalc(void *p) {
      typedef ::MCalibrationRelTimeCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationRelTimeCalc

//______________________________________________________________________________
void MCalibrationRelTimeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationRelTimeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationRelTimeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationRelTimeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationRelTimeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationRelTimeCam.
      TClass *R__cl = ::MCalibrationRelTimeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationRelTimeCam(void *p) {
      return  p ? new(p) ::MCalibrationRelTimeCam : new ::MCalibrationRelTimeCam;
   }
   static void *newArray_MCalibrationRelTimeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationRelTimeCam[nElements] : new ::MCalibrationRelTimeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationRelTimeCam(void *p) {
      delete ((::MCalibrationRelTimeCam*)p);
   }
   static void deleteArray_MCalibrationRelTimeCam(void *p) {
      delete [] ((::MCalibrationRelTimeCam*)p);
   }
   static void destruct_MCalibrationRelTimeCam(void *p) {
      typedef ::MCalibrationRelTimeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationRelTimeCam

//______________________________________________________________________________
void MCalibrationRelTimePix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationRelTimePix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationRelTimePix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationRelTimePix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationRelTimePix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationRelTimePix.
      TClass *R__cl = ::MCalibrationRelTimePix::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationRelTimePix(void *p) {
      return  p ? new(p) ::MCalibrationRelTimePix : new ::MCalibrationRelTimePix;
   }
   static void *newArray_MCalibrationRelTimePix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationRelTimePix[nElements] : new ::MCalibrationRelTimePix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationRelTimePix(void *p) {
      delete ((::MCalibrationRelTimePix*)p);
   }
   static void deleteArray_MCalibrationRelTimePix(void *p) {
      delete [] ((::MCalibrationRelTimePix*)p);
   }
   static void destruct_MCalibrationRelTimePix(void *p) {
      typedef ::MCalibrationRelTimePix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationRelTimePix

//______________________________________________________________________________
void MCalibrationPulseTimeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationPulseTimeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationPulseTimeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationPulseTimeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationPulseTimeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationPulseTimeCam.
      TClass *R__cl = ::MCalibrationPulseTimeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationPulseTimeCam(void *p) {
      return  p ? new(p) ::MCalibrationPulseTimeCam : new ::MCalibrationPulseTimeCam;
   }
   static void *newArray_MCalibrationPulseTimeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationPulseTimeCam[nElements] : new ::MCalibrationPulseTimeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationPulseTimeCam(void *p) {
      delete ((::MCalibrationPulseTimeCam*)p);
   }
   static void deleteArray_MCalibrationPulseTimeCam(void *p) {
      delete [] ((::MCalibrationPulseTimeCam*)p);
   }
   static void destruct_MCalibrationPulseTimeCam(void *p) {
      typedef ::MCalibrationPulseTimeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationPulseTimeCam

//______________________________________________________________________________
void MCalibrationQECamMagic::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationQECamMagic.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationQECamMagic::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationQECamMagic::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationQECamMagic::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationQECamMagic.
      TClass *R__cl = ::MCalibrationQECamMagic::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationQECam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationQECamMagic(void *p) {
      return  p ? new(p) ::MCalibrationQECamMagic : new ::MCalibrationQECamMagic;
   }
   static void *newArray_MCalibrationQECamMagic(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationQECamMagic[nElements] : new ::MCalibrationQECamMagic[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationQECamMagic(void *p) {
      delete ((::MCalibrationQECamMagic*)p);
   }
   static void deleteArray_MCalibrationQECamMagic(void *p) {
      delete [] ((::MCalibrationQECamMagic*)p);
   }
   static void destruct_MCalibrationQECamMagic(void *p) {
      typedef ::MCalibrationQECamMagic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationQECamMagic

//______________________________________________________________________________
void MCalibrationQECam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationQECam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationQECam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationQECam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationQECam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationQECam.
      TClass *R__cl = ::MCalibrationQECam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.InspectMember(fFlags, "fFlags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorningBlues", &fCorningBlues);
      R__insp.InspectMember(fCorningBlues, "fCorningBlues.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorningReds", &fCorningReds);
      R__insp.InspectMember(fCorningReds, "fCorningReds.");
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationQECam(void *p) {
      return  p ? new(p) ::MCalibrationQECam : new ::MCalibrationQECam;
   }
   static void *newArray_MCalibrationQECam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationQECam[nElements] : new ::MCalibrationQECam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationQECam(void *p) {
      delete ((::MCalibrationQECam*)p);
   }
   static void deleteArray_MCalibrationQECam(void *p) {
      delete [] ((::MCalibrationQECam*)p);
   }
   static void destruct_MCalibrationQECam(void *p) {
      typedef ::MCalibrationQECam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationQECam

//______________________________________________________________________________
void MCalibrationQEPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationQEPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationQEPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationQEPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationQEPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationQEPix.
      TClass *R__cl = ::MCalibrationQEPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEBlindPixel", &fQEBlindPixel);
      R__insp.InspectMember(fQEBlindPixel, "fQEBlindPixel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEBlindPixelVar", &fQEBlindPixelVar);
      R__insp.InspectMember(fQEBlindPixelVar, "fQEBlindPixelVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQECombined", &fQECombined);
      R__insp.InspectMember(fQECombined, "fQECombined.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQECombinedVar", &fQECombinedVar);
      R__insp.InspectMember(fQECombinedVar, "fQECombinedVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEFFactor", &fQEFFactor);
      R__insp.InspectMember(fQEFFactor, "fQEFFactor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEFFactorVar", &fQEFFactorVar);
      R__insp.InspectMember(fQEFFactorVar, "fQEFFactorVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEPINDiode", &fQEPINDiode);
      R__insp.InspectMember(fQEPINDiode, "fQEPINDiode.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEPINDiodeVar", &fQEPINDiodeVar);
      R__insp.InspectMember(fQEPINDiodeVar, "fQEPINDiodeVar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormBlindPixel", &fAvNormBlindPixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormBlindPixelVar", &fAvNormBlindPixelVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormCombined", &fAvNormCombined);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormCombinedVar", &fAvNormCombinedVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormFFactor", &fAvNormFFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormFFactorVar", &fAvNormFFactorVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormPINDiode", &fAvNormPINDiode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvNormPINDiodeVar", &fAvNormPINDiodeVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageQE", &fAverageQE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValidFlags", &fValidFlags);
      R__insp.InspectMember(fValidFlags, "fValidFlags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAvailableFlags", &fAvailableFlags);
      MCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationQEPix(void *p) {
      return  p ? new(p) ::MCalibrationQEPix : new ::MCalibrationQEPix;
   }
   static void *newArray_MCalibrationQEPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationQEPix[nElements] : new ::MCalibrationQEPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationQEPix(void *p) {
      delete ((::MCalibrationQEPix*)p);
   }
   static void deleteArray_MCalibrationQEPix(void *p) {
      delete [] ((::MCalibrationQEPix*)p);
   }
   static void destruct_MCalibrationQEPix(void *p) {
      typedef ::MCalibrationQEPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationQEPix

//______________________________________________________________________________
void MCalibrationTestCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationTestCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationTestCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationTestCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationTestCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationTestCalc.
      TClass *R__cl = ::MCalibrationTestCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotErrLimit", &fPhotErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputPath", &fOutputPath);
      R__insp.InspectMember(fOutputPath, "fOutputPath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputFile", &fOutputFile);
      R__insp.InspectMember(fOutputFile, "fOutputFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHTestCam", &fHTestCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationTestCalc(void *p) {
      return  p ? new(p) ::MCalibrationTestCalc : new ::MCalibrationTestCalc;
   }
   static void *newArray_MCalibrationTestCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationTestCalc[nElements] : new ::MCalibrationTestCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationTestCalc(void *p) {
      delete ((::MCalibrationTestCalc*)p);
   }
   static void deleteArray_MCalibrationTestCalc(void *p) {
      delete [] ((::MCalibrationTestCalc*)p);
   }
   static void destruct_MCalibrationTestCalc(void *p) {
      typedef ::MCalibrationTestCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationTestCalc

//______________________________________________________________________________
void MCalibrationTestCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationTestCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationTestCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationTestCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationTestCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationTestCam.
      TClass *R__cl = ::MCalibrationTestCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUninterpolated", &fNumUninterpolated);
      R__insp.InspectMember(fNumUninterpolated, "fNumUninterpolated.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUninterpolatedInMaxCluster", &fNumUninterpolatedInMaxCluster);
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationTestCam(void *p) {
      return  p ? new(p) ::MCalibrationTestCam : new ::MCalibrationTestCam;
   }
   static void *newArray_MCalibrationTestCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationTestCam[nElements] : new ::MCalibrationTestCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationTestCam(void *p) {
      delete ((::MCalibrationTestCam*)p);
   }
   static void deleteArray_MCalibrationTestCam(void *p) {
      delete [] ((::MCalibrationTestCam*)p);
   }
   static void destruct_MCalibrationTestCam(void *p) {
      typedef ::MCalibrationTestCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationTestCam

//______________________________________________________________________________
void MCalibrationTestPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationTestPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationTestPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationTestPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationTestPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationTestPix.
      TClass *R__cl = ::MCalibrationTestPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPixId", &fPixId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExcluded", &fExcluded);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotons", &fNumPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsErr", &fNumPhotonsErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsPerArea", &fNumPhotonsPerArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsPerAreaErr", &fNumPhotonsPerAreaErr);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationTestPix(void *p) {
      return  p ? new(p) ::MCalibrationTestPix : new ::MCalibrationTestPix;
   }
   static void *newArray_MCalibrationTestPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationTestPix[nElements] : new ::MCalibrationTestPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationTestPix(void *p) {
      delete ((::MCalibrationTestPix*)p);
   }
   static void deleteArray_MCalibrationTestPix(void *p) {
      delete [] ((::MCalibrationTestPix*)p);
   }
   static void destruct_MCalibrationTestPix(void *p) {
      typedef ::MCalibrationTestPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationTestPix

//______________________________________________________________________________
void MCalibrationChargeCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationChargeCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationChargeCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationChargeCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationChargeCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationChargeCalc.
      TClass *R__cl = ::MCalibrationChargeCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrTimeRmsLimit", &fArrTimeRmsLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimit", &fChargeLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeErrLimit", &fChargeErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeRelErrLimit", &fChargeRelErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFFactorErrLimit", &fFFactorErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaCheckLimit", &fLambdaCheckLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaErrLimit", &fLambdaErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumHiGainSamples", &fNumHiGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumLoGainSamples", &fNumLoGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheErrLowerLimit", &fPheErrLowerLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheErrUpperLimit", &fPheErrUpperLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqrtHiGainSamples", &fSqrtHiGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqrtLoGainSamples", &fSqrtLoGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnsuitablesLimit", &fUnsuitablesLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnreliablesLimit", &fUnreliablesLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExternalNumPhes", &fExternalNumPhes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExternalNumPhesRelVar", &fExternalNumPhesRelVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPulserColor", &fPulserColor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrength", &fStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumInnerFFactorMethodUsed", &fNumInnerFFactorMethodUsed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamePedestalCam", &fNamePedestalCam);
      R__insp.InspectMember(fNamePedestalCam, "fNamePedestalCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumProcessed", &fNumProcessed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContinousCalibration", &fContinousCalibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHCam", &fHCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBlindCam", &fBlindCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHBlindCam", &fHBlindCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPINDiode", &fPINDiode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQECam", &fQECam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibPattern", &fCalibPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPedestals", &fPedestals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fExtractor", &fExtractor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCheckFlags", &fCheckFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResultFlags", &fResultFlags);
      R__insp.InspectMember(fResultFlags, "fResultFlags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBlindPixelFlags", &fBlindPixelFlags);
      R__insp.InspectMember(fBlindPixelFlags, "fBlindPixelFlags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPINDiodeFlags", &fPINDiodeFlags);
      R__insp.InspectMember(fPINDiodeFlags, "fPINDiodeFlags.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationChargeCalc(void *p) {
      return  p ? new(p) ::MCalibrationChargeCalc : new ::MCalibrationChargeCalc;
   }
   static void *newArray_MCalibrationChargeCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationChargeCalc[nElements] : new ::MCalibrationChargeCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationChargeCalc(void *p) {
      delete ((::MCalibrationChargeCalc*)p);
   }
   static void deleteArray_MCalibrationChargeCalc(void *p) {
      delete [] ((::MCalibrationChargeCalc*)p);
   }
   static void destruct_MCalibrationChargeCalc(void *p) {
      typedef ::MCalibrationChargeCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationChargeCalc

//______________________________________________________________________________
void MCalibrationChargeCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationChargeCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationChargeCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationChargeCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationChargeCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationChargeCam.
      TClass *R__cl = ::MCalibrationChargeCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsBlindPixelMethod", &fNumPhotonsBlindPixelMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsFFactorMethod", &fNumPhotonsFFactorMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsPINDiodeMethod", &fNumPhotonsPINDiodeMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsBlindPixelMethodErr", &fNumPhotonsBlindPixelMethodErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsFFactorMethodErr", &fNumPhotonsFFactorMethodErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsPINDiodeMethodErr", &fNumPhotonsPINDiodeMethodErr);
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationChargeCam(void *p) {
      return  p ? new(p) ::MCalibrationChargeCam : new ::MCalibrationChargeCam;
   }
   static void *newArray_MCalibrationChargeCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationChargeCam[nElements] : new ::MCalibrationChargeCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationChargeCam(void *p) {
      delete ((::MCalibrationChargeCam*)p);
   }
   static void deleteArray_MCalibrationChargeCam(void *p) {
      delete [] ((::MCalibrationChargeCam*)p);
   }
   static void destruct_MCalibrationChargeCam(void *p) {
      typedef ::MCalibrationChargeCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationChargeCam

//______________________________________________________________________________
void MCalibrationChargePix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationChargePix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationChargePix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationChargePix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationChargePix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationChargePix.
      TClass *R__cl = ::MCalibrationChargePix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeMean", &fAbsTimeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeRms", &fAbsTimeRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibFlags", &fCalibFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConversionHiLo", &fConversionHiLo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConversionHiLoVar", &fConversionHiLoVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConversionHiLoSigma", &fConversionHiLoSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConvFFactorRelVarLimit", &fConvFFactorRelVarLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainPedRmsSquare", &fLoGainPedRmsSquare);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoGainPedRmsSquareVar", &fLoGainPedRmsSquareVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanConvFADC2Phe", &fMeanConvFADC2Phe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanConvFADC2PheStatVar", &fMeanConvFADC2PheStatVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanConvFADC2PheSystVar", &fMeanConvFADC2PheSystVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanFFactorFADC2Phot", &fMeanFFactorFADC2Phot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanFFactorFADC2PhotVar", &fMeanFFactorFADC2PhotVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedVar", &fPedVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedRms", &fPedRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedRmsVar", &fPedRmsVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheFFactorMethod", &fPheFFactorMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheFFactorMethodStatVar", &fPheFFactorMethodStatVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheFFactorMethodSystVar", &fPheFFactorMethodSystVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPheFFactorMethodLimit", &fPheFFactorMethodLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSigmaSquare", &fRSigmaSquare);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRSigmaSquareVar", &fRSigmaSquareVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSaturated", &fNumSaturated);
      MCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationChargePix(void *p) {
      return  p ? new(p) ::MCalibrationChargePix : new ::MCalibrationChargePix;
   }
   static void *newArray_MCalibrationChargePix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationChargePix[nElements] : new ::MCalibrationChargePix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationChargePix(void *p) {
      delete ((::MCalibrationChargePix*)p);
   }
   static void deleteArray_MCalibrationChargePix(void *p) {
      delete [] ((::MCalibrationChargePix*)p);
   }
   static void destruct_MCalibrationChargePix(void *p) {
      typedef ::MCalibrationChargePix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationChargePix

//______________________________________________________________________________
void MCalibrationBlindCam::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationBlindCam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationBlindCam::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationBlindCam::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationBlindCam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationBlindCam.
      TClass *R__cl = ::MCalibrationBlindCam::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationBlindCam(void *p) {
      return  p ? new(p) ::MCalibrationBlindCam : new ::MCalibrationBlindCam;
   }
   static void *newArray_MCalibrationBlindCam(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationBlindCam[nElements] : new ::MCalibrationBlindCam[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationBlindCam(void *p) {
      delete ((::MCalibrationBlindCam*)p);
   }
   static void deleteArray_MCalibrationBlindCam(void *p) {
      delete [] ((::MCalibrationBlindCam*)p);
   }
   static void destruct_MCalibrationBlindCam(void *p) {
      typedef ::MCalibrationBlindCam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationBlindCam

//______________________________________________________________________________
void MCalibrationBlindPix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationBlindPix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationBlindPix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationBlindPix::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationBlindPix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationBlindPix.
      TClass *R__cl = ::MCalibrationBlindPix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArea", &fArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAreaErr", &fAreaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAtt", &fAtt);
      R__insp.InspectMember(fAtt, "fAtt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAttErr", &fAttErr);
      R__insp.InspectMember(fAttErr, "fAttErr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQE", &fQE);
      R__insp.InspectMember(fQE, "fQE.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQEErr", &fQEErr);
      R__insp.InspectMember(fQEErr, "fQEErr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollEff", &fCollEff);
      R__insp.InspectMember(fCollEff, "fCollEff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCollEffErr", &fCollEffErr);
      R__insp.InspectMember(fCollEffErr, "fCollEffErr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambda", &fLambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaCheck", &fLambdaCheck);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaCheckErr", &fLambdaCheckErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambdaVar", &fLambdaVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFluxInsidePlexiglass", &fFluxInsidePlexiglass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFluxInsidePlexiglassVar", &fFluxInsidePlexiglassVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu0", &fMu0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu0Err", &fMu0Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu1", &fMu1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu1Err", &fMu1Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma0", &fSigma0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma0Err", &fSigma0Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma1", &fSigma1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma1Err", &fSigma1Err);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColor", &fColor);
      MCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationBlindPix(void *p) {
      return  p ? new(p) ::MCalibrationBlindPix : new ::MCalibrationBlindPix;
   }
   static void *newArray_MCalibrationBlindPix(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationBlindPix[nElements] : new ::MCalibrationBlindPix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationBlindPix(void *p) {
      delete ((::MCalibrationBlindPix*)p);
   }
   static void deleteArray_MCalibrationBlindPix(void *p) {
      delete [] ((::MCalibrationBlindPix*)p);
   }
   static void destruct_MCalibrationBlindPix(void *p) {
      typedef ::MCalibrationBlindPix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationBlindPix

//______________________________________________________________________________
void MCalibrationBlindCamOneOldStyle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationBlindCamOneOldStyle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationBlindCamOneOldStyle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationBlindCamOneOldStyle::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationBlindCamOneOldStyle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationBlindCamOneOldStyle.
      TClass *R__cl = ::MCalibrationBlindCamOneOldStyle::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationBlindCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationBlindCamOneOldStyle(void *p) {
      return  p ? new(p) ::MCalibrationBlindCamOneOldStyle : new ::MCalibrationBlindCamOneOldStyle;
   }
   static void *newArray_MCalibrationBlindCamOneOldStyle(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationBlindCamOneOldStyle[nElements] : new ::MCalibrationBlindCamOneOldStyle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationBlindCamOneOldStyle(void *p) {
      delete ((::MCalibrationBlindCamOneOldStyle*)p);
   }
   static void deleteArray_MCalibrationBlindCamOneOldStyle(void *p) {
      delete [] ((::MCalibrationBlindCamOneOldStyle*)p);
   }
   static void destruct_MCalibrationBlindCamOneOldStyle(void *p) {
      typedef ::MCalibrationBlindCamOneOldStyle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationBlindCamOneOldStyle

//______________________________________________________________________________
void MCalibrationBlindCamTwoNewStyle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationBlindCamTwoNewStyle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationBlindCamTwoNewStyle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationBlindCamTwoNewStyle::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationBlindCamTwoNewStyle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationBlindCamTwoNewStyle.
      TClass *R__cl = ::MCalibrationBlindCamTwoNewStyle::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationBlindCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationBlindCamTwoNewStyle(void *p) {
      return  p ? new(p) ::MCalibrationBlindCamTwoNewStyle : new ::MCalibrationBlindCamTwoNewStyle;
   }
   static void *newArray_MCalibrationBlindCamTwoNewStyle(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationBlindCamTwoNewStyle[nElements] : new ::MCalibrationBlindCamTwoNewStyle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationBlindCamTwoNewStyle(void *p) {
      delete ((::MCalibrationBlindCamTwoNewStyle*)p);
   }
   static void deleteArray_MCalibrationBlindCamTwoNewStyle(void *p) {
      delete [] ((::MCalibrationBlindCamTwoNewStyle*)p);
   }
   static void destruct_MCalibrationBlindCamTwoNewStyle(void *p) {
      typedef ::MCalibrationBlindCamTwoNewStyle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationBlindCamTwoNewStyle

//______________________________________________________________________________
void MCalibrationBlindCamThreeNewStyle::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationBlindCamThreeNewStyle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationBlindCamThreeNewStyle::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationBlindCamThreeNewStyle::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationBlindCamThreeNewStyle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationBlindCamThreeNewStyle.
      TClass *R__cl = ::MCalibrationBlindCamThreeNewStyle::IsA();
      if (R__cl || R__insp.IsA()) { }
      MCalibrationBlindCam::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationBlindCamThreeNewStyle(void *p) {
      return  p ? new(p) ::MCalibrationBlindCamThreeNewStyle : new ::MCalibrationBlindCamThreeNewStyle;
   }
   static void *newArray_MCalibrationBlindCamThreeNewStyle(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationBlindCamThreeNewStyle[nElements] : new ::MCalibrationBlindCamThreeNewStyle[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationBlindCamThreeNewStyle(void *p) {
      delete ((::MCalibrationBlindCamThreeNewStyle*)p);
   }
   static void deleteArray_MCalibrationBlindCamThreeNewStyle(void *p) {
      delete [] ((::MCalibrationBlindCamThreeNewStyle*)p);
   }
   static void destruct_MCalibrationBlindCamThreeNewStyle(void *p) {
      typedef ::MCalibrationBlindCamThreeNewStyle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationBlindCamThreeNewStyle

//______________________________________________________________________________
void MCalibrationChargePINDiode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrationChargePINDiode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrationChargePINDiode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrationChargePINDiode::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrationChargePINDiode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrationChargePINDiode.
      TClass *R__cl = ::MCalibrationChargePINDiode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeMean", &fAbsTimeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbsTimeRms", &fAbsTimeRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalibFlags", &fCalibFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeLimit", &fChargeLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeErrLimit", &fChargeErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeRelErrLimit", &fChargeRelErrLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeToPhotons", &fChargeToPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeToPhotonsVar", &fChargeToPhotonsVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotons", &fNumPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPhotonsVar", &fNumPhotonsVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFluxOutsidePlexiglass", &fFluxOutsidePlexiglass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFluxOutsidePlexiglassVar", &fFluxOutsidePlexiglassVar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedRms", &fPedRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeMean", &fRmsChargeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeMeanErr", &fRmsChargeMeanErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeSigma", &fRmsChargeSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsChargeSigmaErr", &fRmsChargeSigmaErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColor", &fColor);
      MCalibrationPix::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrationChargePINDiode(void *p) {
      return  p ? new(p) ::MCalibrationChargePINDiode : new ::MCalibrationChargePINDiode;
   }
   static void *newArray_MCalibrationChargePINDiode(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrationChargePINDiode[nElements] : new ::MCalibrationChargePINDiode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrationChargePINDiode(void *p) {
      delete ((::MCalibrationChargePINDiode*)p);
   }
   static void deleteArray_MCalibrationChargePINDiode(void *p) {
      delete [] ((::MCalibrationChargePINDiode*)p);
   }
   static void destruct_MCalibrationChargePINDiode(void *p) {
      typedef ::MCalibrationChargePINDiode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrationChargePINDiode

/********************************************************
* CalibCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableCalibCint();

extern "C" void G__set_cpp_environmentCalibCint() {
  G__cpp_reset_tagtableCalibCint();
}
#include <new>
extern "C" int G__cpp_dllrevCalibCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MCalibrationPix */
static int G__CalibCint_183_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPix[n];
       } else {
         p = new((void*) gvp) MCalibrationPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPix;
       } else {
         p = new((void*) gvp) MCalibrationPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetPixId((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainMeanVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainNumBlackout((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainNumPickup((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainProb((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainRms((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainSigma((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainSigmaVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainMeanVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainNumBlackout((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainNumPickup((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainProb((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainRms((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainSigma((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetLoGainSigmaVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetMeanVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetNumBlackout((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetNumPickup((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetProb((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetSigma((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->SetSigmaVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationPix*) G__getstructoffset())->SetDebug((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationPix*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationPix*) G__getstructoffset())->SetExcluded((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationPix*) G__getstructoffset())->SetExcluded();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainSaturation((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationPix*) G__getstructoffset())->SetHiGainSaturation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationPix*) G__getstructoffset())->SetValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationPix*) G__getstructoffset())->SetValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainMeanVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainMeanRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainSigmaVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainNumPickup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiGainNumBlackout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiLoMeansDivided());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiLoMeansDividedErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiLoSigmasDivided());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetHiLoSigmasDividedErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainMeanVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainMeanRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainSigmaVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainNumPickup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetLoGainNumBlackout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetMeanRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetMeanSquare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetProb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetSigmaRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetNumPickup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPix*) G__getstructoffset())->GetNumBlackout());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationPix*) G__getstructoffset())->GetPixId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationPix*) G__getstructoffset())->IsHiGainSaturation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationPix*) G__getstructoffset())->IsDebug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationPix*) G__getstructoffset())->IsExcluded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationPix*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_183_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationPix G__TMCalibrationPix;
static int G__CalibCint_183_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationPix*) (soff+(sizeof(MCalibrationPix)*i)))->~G__TMCalibrationPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationPix*) (soff))->~G__TMCalibrationPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationCam */
static int G__CalibCint_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationCam[n];
       } else {
         p = new((void*) gvp) MCalibrationCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationCam;
       } else {
         p = new((void*) gvp) MCalibrationCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetAverageAreas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((MCalibrationCam*) G__getstructoffset())->GetAverageArea((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((const MCalibrationCam*) G__getstructoffset())->GetAverageArea((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MBadPixelsPix& obj = ((MCalibrationCam*) G__getstructoffset())->GetAverageBadArea((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MBadPixelsPix& obj = ((const MCalibrationCam*) G__getstructoffset())->GetAverageBadArea((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetAverageSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((MCalibrationCam*) G__getstructoffset())->GetAverageSector((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((const MCalibrationCam*) G__getstructoffset())->GetAverageSector((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MBadPixelsPix& obj = ((MCalibrationCam*) G__getstructoffset())->GetAverageBadSector((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MBadPixelsPix& obj = ((const MCalibrationCam*) G__getstructoffset())->GetAverageBadSector((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MCalibrationCam*) G__getstructoffset())->GetNumHiGainFADCSlices((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MCalibrationCam*) G__getstructoffset())->GetNumHiGainFADCSlices());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const MCalibrationCam*) G__getstructoffset())->GetNumLoGainFADCSlices((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const MCalibrationCam*) G__getstructoffset())->GetNumLoGainFADCSlices());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetNumUnsuitable((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetNumUnsuitable());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetNumUnreliable((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetNumUnreliable());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetPulserColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetRunNumer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationCam*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((MCalibrationCam*) G__getstructoffset())->operator[]((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibrationPix& obj = ((const MCalibrationCam*) G__getstructoffset())->operator[]((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = MCalibrationCam::GetPulserColorStr((MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MCalibrationCam*) G__getstructoffset())->SetNumHiGainFADCSlices((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MCalibrationCam*) G__getstructoffset())->SetNumHiGainFADCSlices((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MCalibrationCam*) G__getstructoffset())->SetNumLoGainFADCSlices((const Float_t) G__double(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MCalibrationCam*) G__getstructoffset())->SetNumLoGainFADCSlices((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationCam*) G__getstructoffset())->SetNumUnsuitable((const UInt_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationCam*) G__getstructoffset())->SetNumUnreliable((const UInt_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationCam*) G__getstructoffset())->SetPulserColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationCam*) G__getstructoffset())->SetPulserColor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationCam*) G__getstructoffset())->SetRunNumber((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_186_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationCam G__TMCalibrationCam;
static int G__CalibCint_186_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationCam*) (soff+(sizeof(MCalibrationCam)*i)))->~G__TMCalibrationCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationCam*) (soff))->~G__TMCalibrationCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationPattern */
static int G__CalibCint_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPattern((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationPattern((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPattern[n];
       } else {
         p = new((void*) gvp) MCalibrationPattern[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPattern;
       } else {
         p = new((void*) gvp) MCalibrationPattern;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MCalibrationPattern*) G__getstructoffset())->GetCLStrength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationPattern*) G__getstructoffset())->GetCLColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationPattern*) G__getstructoffset())->GetPulserStrength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationPattern*) G__getstructoffset())->GetPulserColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MCalibrationPattern*) G__getstructoffset())->GetPulserColorStr();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPattern*) G__getstructoffset())->SetPulserColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPattern*) G__getstructoffset())->SetPulserStrength((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationPattern::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPattern::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationPattern::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationPattern::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPattern*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPattern::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPattern::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPattern::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_188_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPattern::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationPattern G__TMCalibrationPattern;
static int G__CalibCint_188_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationPattern*) (soff+(sizeof(MCalibrationPattern)*i)))->~G__TMCalibrationPattern();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationPattern*) (soff))->~G__TMCalibrationPattern();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibColorSet */
static int G__CalibCint_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibColorSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibColorSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibColorSet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibColorSet((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibColorSet((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibColorSet[n];
       } else {
         p = new((void*) gvp) MCalibColorSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibColorSet;
       } else {
         p = new((void*) gvp) MCalibColorSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibColorSet*) G__getstructoffset())->SetExplicitColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibColorSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibColorSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibColorSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibColorSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibColorSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibColorSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibColorSet G__TMCalibColorSet;
static int G__CalibCint_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibColorSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibColorSet*) (soff+(sizeof(MCalibColorSet)*i)))->~G__TMCalibColorSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibColorSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibColorSet*) (soff))->~G__TMCalibColorSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationChargeCalc */
static int G__CalibCint_192_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationChargeCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargeCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationChargeCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargeCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationChargeCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargeCalc[n];
       } else {
         p = new((void*) gvp) MCalibrationChargeCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargeCalc;
       } else {
         p = new((void*) gvp) MCalibrationChargeCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCalc*) G__getstructoffset())->ResetNumProcessed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCalibrationChargeCalc*) G__getstructoffset())->Finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeRelErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetChargeRelErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckArrivalTimes((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckArrivalTimes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckDeadPixels((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckDeadPixels();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckDeviatingBehavior((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckDeviatingBehavior();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckExtractionWindow((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckExtractionWindow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckHistOverflow((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckHistOverflow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckOscillations((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetCheckOscillations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetDebug((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseExtractorRes((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseExtractorRes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseUnreliables((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseUnreliables();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseExternalNumPhes((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUseExternalNumPhes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetContinousCalibration((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetContinousCalibration();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPedestals((MPedestalCam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetExtractor((MExtractor*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetArrTimeRmsLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetArrTimeRmsLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetFFactorErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetFFactorErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetLambdaErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetLambdaErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetLambdaCheckLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetLambdaCheckLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUnsuitablesLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUnsuitablesLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUnreliablesLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetUnreliablesLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetExternalNumPhes((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetExternalNumPhes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetExternalNumPhesRelVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetExternalNumPhesRelVar();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetNamePedestalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetNamePedestalCam();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPheErrLowerLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPheErrLowerLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPheErrUpperLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPheErrUpperLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCalc*) G__getstructoffset())->SetPulserColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationChargeCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationChargeCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationChargeCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargeCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_192_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargeCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationChargeCalc G__TMCalibrationChargeCalc;
static int G__CalibCint_192_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationChargeCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationChargeCalc*) (soff+(sizeof(MCalibrationChargeCalc)*i)))->~G__TMCalibrationChargeCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationChargeCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationChargeCalc*) (soff))->~G__TMCalibrationChargeCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationChargeCam */
static int G__CalibCint_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationChargeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationChargeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationChargeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargeCam[n];
       } else {
         p = new((void*) gvp) MCalibrationChargeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargeCam;
       } else {
         p = new((void*) gvp) MCalibrationChargeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationChargeCam*) G__getstructoffset())->GetConversionFactorFFactor((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsBlindPixelMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsFFactorMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsPINDiodeMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsBlindPixelMethodErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsFFactorMethodErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargeCam*) G__getstructoffset())->GetNumPhotonsPINDiodeMethodErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargeCam*) G__getstructoffset())->IsFFactorMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]), (MBadPixelsCam*) G__int(libp->para[3]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhePerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]), (MBadPixelsCam*) G__int(libp->para[3]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhePerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhePerArea(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerSector(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]), (MBadPixelsCam*) G__int(libp->para[3]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerSector(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref
, (const UInt_t) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedConvFADC2PhotPerSector(*(MGeomCam*) libp->para[0].ref, *(MCalibrationQECam*) libp->para[1].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerArea(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1])
, (MBadPixelsCam*) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerArea(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerArea(*(MGeomCam*) libp->para[0].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerSector(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1])
, (MBadPixelsCam*) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerSector(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeMeanPerSector(*(MGeomCam*) libp->para[0].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerArea(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1])
, (MBadPixelsCam*) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerArea(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerArea(*(MGeomCam*) libp->para[0].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerSector(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1])
, (MBadPixelsCam*) G__int(libp->para[2]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerSector(*(MGeomCam*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1]));
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TArrayF* pobj;
         TArrayF xobj = ((MCalibrationChargeCam*) G__getstructoffset())->GetAveragedArrivalTimeRmsPerSector(*(MGeomCam*) libp->para[0].ref);
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargeCam*) G__getstructoffset())->MergeHiLoConversionFactors(*(MCalibrationChargeCam*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargeCam*) G__getstructoffset())->SetFFactorMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargeCam*) G__getstructoffset())->SetFFactorMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsBlindPixelMethod((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsFFactorMethod((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsPINDiodeMethod((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsBlindPixelMethodErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsFFactorMethodErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->SetNumPhotonsPINDiodeMethodErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationChargeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationChargeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationChargeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_193_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationChargeCam G__TMCalibrationChargeCam;
static int G__CalibCint_193_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationChargeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationChargeCam*) (soff+(sizeof(MCalibrationChargeCam)*i)))->~G__TMCalibrationChargeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationChargeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationChargeCam*) (soff))->~G__TMCalibrationChargeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationRelTimeCalc */
static int G__CalibCint_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationRelTimeCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimeCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimeCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimeCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimeCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimeCalc[n];
       } else {
         p = new((void*) gvp) MCalibrationRelTimeCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimeCalc;
       } else {
         p = new((void*) gvp) MCalibrationRelTimeCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCalibrationRelTimeCalc*) G__getstructoffset())->Finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationRelTimeCalc*) G__getstructoffset())->IsDebug());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetRelTimeResolutionLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetRelTimeResolutionLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckFitResults((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckFitResults();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckDeviatingBehavior((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckDeviatingBehavior();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckHistOverflow((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckHistOverflow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckOscillations((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetCheckOscillations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetDebug((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->SetDebug();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationRelTimeCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationRelTimeCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationRelTimeCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationRelTimeCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimeCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_194_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimeCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationRelTimeCalc G__TMCalibrationRelTimeCalc;
static int G__CalibCint_194_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationRelTimeCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationRelTimeCalc*) (soff+(sizeof(MCalibrationRelTimeCalc)*i)))->~G__TMCalibrationRelTimeCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationRelTimeCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationRelTimeCalc*) (soff))->~G__TMCalibrationRelTimeCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationRelTimeCam */
static int G__CalibCint_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationRelTimeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimeCam[n];
       } else {
         p = new((void*) gvp) MCalibrationRelTimeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimeCam;
       } else {
         p = new((void*) gvp) MCalibrationRelTimeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationRelTimeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationRelTimeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationRelTimeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationRelTimeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationRelTimeCam G__TMCalibrationRelTimeCam;
static int G__CalibCint_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationRelTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationRelTimeCam*) (soff+(sizeof(MCalibrationRelTimeCam)*i)))->~G__TMCalibrationRelTimeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationRelTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationRelTimeCam*) (soff))->~G__TMCalibrationRelTimeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationBlindCam */
static int G__CalibCint_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationBlindCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCam(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCam(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCam((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCam((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCam((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCam((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCam[n];
       } else {
         p = new((void*) gvp) MCalibrationBlindCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCam;
       } else {
         p = new((void*) gvp) MCalibrationBlindCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindCam*) G__getstructoffset())->IsFluxInsidePlexiglassAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindCam*) G__getstructoffset())->GetFluxInsidePlexiglass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindCam*) G__getstructoffset())->GetFluxInsidePlexiglassVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindCam*) G__getstructoffset())->GetFluxInsidePlexiglassRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationBlindCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationBlindCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationBlindCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationBlindCam G__TMCalibrationBlindCam;
static int G__CalibCint_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationBlindCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationBlindCam*) (soff+(sizeof(MCalibrationBlindCam)*i)))->~G__TMCalibrationBlindCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationBlindCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationBlindCam*) (soff))->~G__TMCalibrationBlindCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationQECam */
static int G__CalibCint_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationQECam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQECam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationQECam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQECam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationQECam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQECam[n];
       } else {
         p = new((void*) gvp) MCalibrationQECam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQECam;
       } else {
         p = new((void*) gvp) MCalibrationQECam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetGraphQEvsCorningBlues());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetGraphQEvsCorningReds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningBlues((const Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])
, (const Axis_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningBlues((const Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningBlues((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningBlues());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningReds((const Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])
, (const Axis_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningReds((const Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningReds((const Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const MCalibrationQECam*) G__getstructoffset())->GetHistQEvsCorningReds());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQECam*) G__getstructoffset())->GetPlexiglassQE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQECam*) G__getstructoffset())->GetPlexiglassQERelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayD& obj = ((const MCalibrationQECam*) G__getstructoffset())->GetCorningBlues();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MArrayD& obj = ((const MCalibrationQECam*) G__getstructoffset())->GetCorningReds();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsBlindPixelMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsFFactorMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsCombinedMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsPINDiodeMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsBlindPixelMethodValid((MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsFFactorMethodValid((MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsCombinedMethodValid((MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQECam*) G__getstructoffset())->IsPINDiodeMethodValid((MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQECam*) G__getstructoffset())->SetBlindPixelMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQECam*) G__getstructoffset())->SetBlindPixelMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECam*) G__getstructoffset())->SetBlindPixelMethodValid((const Bool_t) G__int(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQECam*) G__getstructoffset())->SetCombinedMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQECam*) G__getstructoffset())->SetCombinedMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECam*) G__getstructoffset())->SetCombinedMethodValid((const Bool_t) G__int(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQECam*) G__getstructoffset())->SetFFactorMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQECam*) G__getstructoffset())->SetFFactorMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECam*) G__getstructoffset())->SetFFactorMethodValid((const Bool_t) G__int(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQECam*) G__getstructoffset())->SetPINDiodeMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQECam*) G__getstructoffset())->SetPINDiodeMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECam*) G__getstructoffset())->SetPINDiodeMethodValid((const Bool_t) G__int(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationQECam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationQECam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationQECam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQECam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_197_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQECam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationQECam G__TMCalibrationQECam;
static int G__CalibCint_197_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationQECam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationQECam*) (soff+(sizeof(MCalibrationQECam)*i)))->~G__TMCalibrationQECam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationQECam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationQECam*) (soff))->~G__TMCalibrationQECam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibColorSteer */
static int G__CalibCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibColorSteer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibColorSteer((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibColorSteer((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibColorSteer((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibColorSteer((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibColorSteer[n];
       } else {
         p = new((void*) gvp) MCalibColorSteer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibColorSteer;
       } else {
         p = new((void*) gvp) MCalibColorSteer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibColorSteer*) G__getstructoffset())->SetHistCopy((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibColorSteer*) G__getstructoffset())->SetHistCopy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibColorSteer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSteer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibColorSteer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibColorSteer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibColorSteer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSteer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibColorSteer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibColorSteer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibColorSteer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibColorSteer G__TMCalibColorSteer;
static int G__CalibCint_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibColorSteer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibColorSteer*) (soff+(sizeof(MCalibColorSteer)*i)))->~G__TMCalibColorSteer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibColorSteer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibColorSteer*) (soff))->~G__TMCalibColorSteer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrateData */
static int G__CalibCint_200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrateData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateData(
(MCalibrateData::CalibrationMode_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MCalibrateData(
(MCalibrateData::CalibrationMode_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateData((MCalibrateData::CalibrationMode_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrateData((MCalibrateData::CalibrationMode_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateData((MCalibrateData::CalibrationMode_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrateData((MCalibrateData::CalibrationMode_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateData[n];
       } else {
         p = new((void*) gvp) MCalibrateData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateData;
       } else {
         p = new((void*) gvp) MCalibrateData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->AddPedestal((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->AddPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateData*) G__getstructoffset())->AddPedestal((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateData*) G__getstructoffset())->EnablePedestalType((MCalibrateData::PedestalType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetPedestalFlag((MCalibrateData::PedestalType_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetPedestalFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrateData*) G__getstructoffset())->TestPedestalFlag((MCalibrateData::PedestalType_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetCalibrationMode((MCalibrateData::CalibrationMode_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetCalibrationMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetSignalType((MCalibrateData::SignalType_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetSignalType();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetCalibConvMinLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetCalibConvMinLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetCalibConvMaxLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetCalibConvMaxLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateData*) G__getstructoffset())->SetScaleFactor((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateData*) G__getstructoffset())->SetScaleFactor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MCalibrateData*) G__getstructoffset())->UpdateConversionFactors((MCalibrationChargeCam*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MCalibrateData*) G__getstructoffset())->UpdateConversionFactors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrateData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrateData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrateData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_200_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrateData G__TMCalibrateData;
static int G__CalibCint_200_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrateData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrateData*) (soff+(sizeof(MCalibrateData)*i)))->~G__TMCalibrateData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrateData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrateData*) (soff))->~G__TMCalibrateData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibCalcFromPast */
static int G__CalibCint_201_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibCalcFromPast* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibCalcFromPast((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibCalcFromPast((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibCalcFromPast((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibCalcFromPast((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibCalcFromPast[n];
       } else {
         p = new((void*) gvp) MCalibCalcFromPast[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibCalcFromPast;
       } else {
         p = new((void*) gvp) MCalibCalcFromPast;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MCalibCalcFromPast*) G__getstructoffset())->GetNumEventsDump());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetNumEventsDump((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetNumEventsDump();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetNumPhesDump((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetNumPhesDump();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibCalcFromPast*) G__getstructoffset())->SetCalibrate((MCalibrateData*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibCalcFromPast*) G__getstructoffset())->SetChargeCalc((MCalibrationChargeCalc*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibCalcFromPast*) G__getstructoffset())->SetRelTimeCalc((MCalibrationRelTimeCalc*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetUpdateNumPhes((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetUpdateNumPhes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetUpdateWithFFactorMethod((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibCalcFromPast*) G__getstructoffset())->SetUpdateWithFFactorMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibCalcFromPast::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibCalcFromPast::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibCalcFromPast::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibCalcFromPast::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibCalcFromPast*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibCalcFromPast::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibCalcFromPast::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibCalcFromPast::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_201_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibCalcFromPast::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibCalcFromPast G__TMCalibCalcFromPast;
static int G__CalibCint_201_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibCalcFromPast*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibCalcFromPast*) (soff+(sizeof(MCalibCalcFromPast)*i)))->~G__TMCalibCalcFromPast();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibCalcFromPast*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibCalcFromPast*) (soff))->~G__TMCalibCalcFromPast();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibConstCam */
static int G__CalibCint_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibConstCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibConstCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibConstCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibConstCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibConstCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibConstCam[n];
       } else {
         p = new((void*) gvp) MCalibConstCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibConstCam;
       } else {
         p = new((void*) gvp) MCalibConstCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((MCalibConstCam*) G__getstructoffset())->GetAverageArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((const MCalibConstCam*) G__getstructoffset())->GetAverageArea((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibConstCam*) G__getstructoffset())->GetNumAverageArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((MCalibConstCam*) G__getstructoffset())->GetAverageSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((const MCalibConstCam*) G__getstructoffset())->GetAverageSector((UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibConstCam*) G__getstructoffset())->GetNumAverageSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibConstCam*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((MCalibConstCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MCalibConstPix& obj = ((const MCalibConstCam*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstCam*) G__getstructoffset())->InitAverageAreas((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstCam*) G__getstructoffset())->InitAverageSectors((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstCam*) G__getstructoffset())->SetBadPixels((MBadPixelsCam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibConstCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibConstCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibConstCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibConstCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_207_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibConstCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibConstCam G__TMCalibConstCam;
static int G__CalibCint_207_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibConstCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibConstCam*) (soff+(sizeof(MCalibConstCam)*i)))->~G__TMCalibConstCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibConstCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibConstCam*) (soff))->~G__TMCalibConstCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrateFact */
static int G__CalibCint_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrateFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateFact((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrateFact((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateFact((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrateFact((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateFact[n];
       } else {
         p = new((void*) gvp) MCalibrateFact[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateFact;
       } else {
         p = new((void*) gvp) MCalibrateFact;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateFact*) G__getstructoffset())->SetCalibConst(*(MArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateFact*) G__getstructoffset())->SetScale(*(Double_t*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrateFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrateFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrateFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrateFact G__TMCalibrateFact;
static int G__CalibCint_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrateFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrateFact*) (soff+(sizeof(MCalibrateFact)*i)))->~G__TMCalibrateFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrateFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrateFact*) (soff))->~G__TMCalibrateFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibConstPix */
static int G__CalibCint_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibConstPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibConstPix[n];
     } else {
       p = new((void*) gvp) MCalibConstPix[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibConstPix;
     } else {
       p = new((void*) gvp) MCalibConstPix;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibConstPix*) G__getstructoffset())->GetCalibConst());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibConstPix*) G__getstructoffset())->GetCalibFFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstPix*) G__getstructoffset())->SetCalibConst((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstPix*) G__getstructoffset())->SetCalibFFactor((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibConstPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibConstPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibConstPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibConstPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibConstPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibConstPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibConstPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibConstPix G__TMCalibConstPix;
static int G__CalibCint_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibConstPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibConstPix*) (soff+(sizeof(MCalibConstPix)*i)))->~G__TMCalibConstPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibConstPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibConstPix*) (soff))->~G__TMCalibConstPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationPatternDecode */
static int G__CalibCint_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationPatternDecode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPatternDecode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationPatternDecode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPatternDecode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationPatternDecode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPatternDecode[n];
       } else {
         p = new((void*) gvp) MCalibrationPatternDecode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPatternDecode;
       } else {
         p = new((void*) gvp) MCalibrationPatternDecode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationPatternDecode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPatternDecode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationPatternDecode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationPatternDecode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPatternDecode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPatternDecode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPatternDecode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPatternDecode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPatternDecode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationPatternDecode G__TMCalibrationPatternDecode;
static int G__CalibCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationPatternDecode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationPatternDecode*) (soff+(sizeof(MCalibrationPatternDecode)*i)))->~G__TMCalibrationPatternDecode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationPatternDecode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationPatternDecode*) (soff))->~G__TMCalibrationPatternDecode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrateRelTimes */
static int G__CalibCint_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrateRelTimes* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateRelTimes((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrateRelTimes((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateRelTimes((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrateRelTimes((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateRelTimes[n];
       } else {
         p = new((void*) gvp) MCalibrateRelTimes[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateRelTimes;
       } else {
         p = new((void*) gvp) MCalibrateRelTimes;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrateRelTimes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateRelTimes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrateRelTimes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrateRelTimes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateRelTimes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateRelTimes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateRelTimes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateRelTimes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateRelTimes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrateRelTimes G__TMCalibrateRelTimes;
static int G__CalibCint_221_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrateRelTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrateRelTimes*) (soff+(sizeof(MCalibrateRelTimes)*i)))->~G__TMCalibrateRelTimes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrateRelTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrateRelTimes*) (soff))->~G__TMCalibrateRelTimes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationPulseTimeCam */
static int G__CalibCint_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationPulseTimeCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPulseTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationPulseTimeCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationPulseTimeCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationPulseTimeCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPulseTimeCam[n];
       } else {
         p = new((void*) gvp) MCalibrationPulseTimeCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationPulseTimeCam;
       } else {
         p = new((void*) gvp) MCalibrationPulseTimeCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationPulseTimeCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPulseTimeCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationPulseTimeCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationPulseTimeCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationPulseTimeCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPulseTimeCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPulseTimeCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationPulseTimeCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationPulseTimeCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationPulseTimeCam G__TMCalibrationPulseTimeCam;
static int G__CalibCint_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationPulseTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationPulseTimeCam*) (soff+(sizeof(MCalibrationPulseTimeCam)*i)))->~G__TMCalibrationPulseTimeCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationPulseTimeCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationPulseTimeCam*) (soff))->~G__TMCalibrationPulseTimeCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationRelTimePix */
static int G__CalibCint_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationRelTimePix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationRelTimePix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationRelTimePix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimePix[n];
       } else {
         p = new((void*) gvp) MCalibrationRelTimePix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationRelTimePix;
       } else {
         p = new((void*) gvp) MCalibrationRelTimePix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationRelTimePix*) G__getstructoffset())->GetTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationRelTimePix*) G__getstructoffset())->GetTimeOffsetErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationRelTimePix*) G__getstructoffset())->GetTimePrecision());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationRelTimePix*) G__getstructoffset())->GetTimePrecisionErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationRelTimePix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimePix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationRelTimePix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationRelTimePix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationRelTimePix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimePix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimePix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationRelTimePix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationRelTimePix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationRelTimePix G__TMCalibrationRelTimePix;
static int G__CalibCint_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationRelTimePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationRelTimePix*) (soff+(sizeof(MCalibrationRelTimePix)*i)))->~G__TMCalibrationRelTimePix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationRelTimePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationRelTimePix*) (soff))->~G__TMCalibrationRelTimePix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationQECamMagic */
static int G__CalibCint_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationQECamMagic* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQECamMagic((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationQECamMagic((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQECamMagic((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationQECamMagic((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQECamMagic[n];
       } else {
         p = new((void*) gvp) MCalibrationQECamMagic[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQECamMagic;
       } else {
         p = new((void*) gvp) MCalibrationQECamMagic;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationQECamMagic::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECamMagic::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationQECamMagic::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationQECamMagic::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQECamMagic*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECamMagic::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQECamMagic::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQECamMagic::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_234_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQECamMagic::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationQECamMagic G__TMCalibrationQECamMagic;
static int G__CalibCint_234_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationQECamMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationQECamMagic*) (soff+(sizeof(MCalibrationQECamMagic)*i)))->~G__TMCalibrationQECamMagic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationQECamMagic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationQECamMagic*) (soff))->~G__TMCalibrationQECamMagic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationQEPix */
static int G__CalibCint_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationQEPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQEPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationQEPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationQEPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationQEPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQEPix[n];
       } else {
         p = new((void*) gvp) MCalibrationQEPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationQEPix;
       } else {
         p = new((void*) gvp) MCalibrationQEPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetAverageQE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetAverageQERelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetDefaultQE((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetDefaultQERelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetLightGuidesEff((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetLightGuidesEffRelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetLightGuidesEff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetLightGuidesEffRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEBlindPixel((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEBlindPixelErr((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEBlindPixelRelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesBlindPixel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesBlindPixelErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesBlindPixelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesCombined());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesCombinedErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesCombinedVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesFFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesFFactorErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesFFactorVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesPINDiode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesPINDiodeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECascadesPINDiodeVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECombined((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECombinedErr((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQECombinedRelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEFFactor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEFFactorErr((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEFFactorRelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEPINDiode((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEPINDiodeErr((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetQEPINDiodeRelVar((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetPMTCollectionEff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationQEPix*) G__getstructoffset())->GetPMTCollectionEffRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsAverageQEBlindPixelAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsAverageQECombinedAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsAverageQEFFactorAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsAverageQEPINDiodeAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsBlindPixelMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsBlindPixelMethodValid((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsCombinedMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsCombinedMethodValid((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsFFactorMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsFFactorMethodValid((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsPINDiodeMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationQEPix*) G__getstructoffset())->IsPINDiodeMethodValid((const MCalibrationCam::PulserColor_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQE((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormBlindPixel((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormBlindPixelVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormCombined((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormCombinedVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormFFactor((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormFFactorVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormPINDiode((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetAvNormPINDiodeVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEBlindPixelAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEBlindPixelAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQECombinedAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQECombinedAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEFFactorAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEFFactorAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEPINDiodeAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationQEPix*) G__getstructoffset())->SetAverageQEPINDiodeAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetBlindPixelMethodValid((const Bool_t) G__int(libp->para[0]), (const MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetCombinedMethodValid((const Bool_t) G__int(libp->para[0]), (const MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetFFactorMethodValid((const Bool_t) G__int(libp->para[0]), (const MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetPINDiodeMethodValid((const Bool_t) G__int(libp->para[0]), (const MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEBlindPixel((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEBlindPixelVar((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQECombined((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQECombinedVar((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEFFactor((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEFFactorVar((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEPINDiode((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->SetQEPINDiodeVar((Float_t) G__double(libp->para[0]), (MCalibrationCam::PulserColor_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationQEPix*) G__getstructoffset())->UpdateBlindPixelMethod((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationQEPix*) G__getstructoffset())->UpdateCombinedMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationQEPix*) G__getstructoffset())->UpdateFFactorMethod((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationQEPix*) G__getstructoffset())->UpdatePINDiodeMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationQEPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQEPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationQEPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationQEPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationQEPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQEPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQEPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationQEPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_235_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationQEPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationQEPix G__TMCalibrationQEPix;
static int G__CalibCint_235_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationQEPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationQEPix*) (soff+(sizeof(MCalibrationQEPix)*i)))->~G__TMCalibrationQEPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationQEPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationQEPix*) (soff))->~G__TMCalibrationQEPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationTestCam */
static int G__CalibCint_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationTestCam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationTestCam((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestCam((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationTestCam((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestCam[n];
       } else {
         p = new((void*) gvp) MCalibrationTestCam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestCam;
       } else {
         p = new((void*) gvp) MCalibrationTestCam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationTestCam*) G__getstructoffset())->GetNumUninterpolated((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationTestCam*) G__getstructoffset())->GetNumUninterplatedInMaxCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestCam*) G__getstructoffset())->SetNumUninterpolated((const UInt_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestCam*) G__getstructoffset())->SetNumUninterpolatedInMaxCluster((const UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationTestCam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationTestCam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationTestCam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestCam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestCam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_238_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestCam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationTestCam G__TMCalibrationTestCam;
static int G__CalibCint_238_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationTestCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationTestCam*) (soff+(sizeof(MCalibrationTestCam)*i)))->~G__TMCalibrationTestCam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationTestCam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationTestCam*) (soff))->~G__TMCalibrationTestCam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationTestCalc */
static int G__CalibCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationTestCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationTestCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationTestCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestCalc[n];
       } else {
         p = new((void*) gvp) MCalibrationTestCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestCalc;
       } else {
         p = new((void*) gvp) MCalibrationTestCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetOutputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetOutputFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetOutputPath(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetOutputPath();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetPhotErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationTestCalc*) G__getstructoffset())->SetPhotErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationTestCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationTestCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationTestCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_239_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationTestCalc G__TMCalibrationTestCalc;
static int G__CalibCint_239_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationTestCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationTestCalc*) (soff+(sizeof(MCalibrationTestCalc)*i)))->~G__TMCalibrationTestCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationTestCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationTestCalc*) (soff))->~G__TMCalibrationTestCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationTestPix */
static int G__CalibCint_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationTestPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationTestPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationTestPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationTestPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestPix[n];
       } else {
         p = new((void*) gvp) MCalibrationTestPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationTestPix;
       } else {
         p = new((void*) gvp) MCalibrationTestPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationTestPix*) G__getstructoffset())->GetNumPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationTestPix*) G__getstructoffset())->GetNumPhotonsErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationTestPix*) G__getstructoffset())->GetNumPhotonsPerArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationTestPix*) G__getstructoffset())->GetNumPhotonsPerAreaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationTestPix*) G__getstructoffset())->GetPixId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationTestPix*) G__getstructoffset())->IsExcluded());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->SetPixId((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationTestPix*) G__getstructoffset())->SetExcluded((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationTestPix*) G__getstructoffset())->SetExcluded();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->SetNumPhotons((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->SetNumPhotonsErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->SetNumPhotonsPerArea((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->SetNumPhotonsPerAreaErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationTestPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationTestPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationTestPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationTestPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationTestPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_240_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationTestPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationTestPix G__TMCalibrationTestPix;
static int G__CalibCint_240_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationTestPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationTestPix*) (soff+(sizeof(MCalibrationTestPix)*i)))->~G__TMCalibrationTestPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationTestPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationTestPix*) (soff))->~G__TMCalibrationTestPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationChargePINDiode */
static int G__CalibCint_242_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationChargePINDiode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargePINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationChargePINDiode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargePINDiode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationChargePINDiode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargePINDiode[n];
       } else {
         p = new((void*) gvp) MCalibrationChargePINDiode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargePINDiode;
       } else {
         p = new((void*) gvp) MCalibrationChargePINDiode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationChargePINDiode*) G__getstructoffset())->CalcFluxOutsidePlexiglass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetAbsTimeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetAbsTimeRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetFluxOutsidePlexiglass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetFluxOutsidePlexiglassErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetFluxOutsidePlexiglassRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetNumPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetNumPhotonsErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetNumPhotonsRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePINDiode*) G__getstructoffset())->GetPedRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargePINDiode*) G__getstructoffset())->IsChargeFitValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargePINDiode*) G__getstructoffset())->IsTimeFitValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargePINDiode*) G__getstructoffset())->IsOscillating());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargePINDiode*) G__getstructoffset())->IsFluxOutsidePlexiglassAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetAbsTimeMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetAbsTimeRms((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeToPhotons((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeToPhotons();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeToPhotonsErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeToPhotonsErr();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetPedestal((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetRmsChargeMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetRmsChargeMeanErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetRmsChargeSigma((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetRmsChargeSigmaErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetOscillating((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetOscillating();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeFitValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetChargeFitValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetTimeFitValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetTimeFitValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetFluxOutsidePlexiglassAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePINDiode*) G__getstructoffset())->SetFluxOutsidePlexiglassAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationChargePINDiode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePINDiode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationChargePINDiode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationChargePINDiode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePINDiode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePINDiode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargePINDiode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePINDiode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_242_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargePINDiode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationChargePINDiode G__TMCalibrationChargePINDiode;
static int G__CalibCint_242_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationChargePINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationChargePINDiode*) (soff+(sizeof(MCalibrationChargePINDiode)*i)))->~G__TMCalibrationChargePINDiode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationChargePINDiode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationChargePINDiode*) (soff))->~G__TMCalibrationChargePINDiode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationChargePix */
static int G__CalibCint_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationChargePix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationChargePix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationChargePix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationChargePix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargePix[n];
       } else {
         p = new((void*) gvp) MCalibrationChargePix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationChargePix;
       } else {
         p = new((void*) gvp) MCalibrationChargePix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetFFactorMethodValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetFFactorMethodValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPedestal((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPed((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPedRMS((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetAbsTimeMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetAbsTimeRms((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLo((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLoErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLoErr();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLoSigma((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConversionHiLoSigma();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConvFFactorRelErrLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetConvFFactorRelErrLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetMeanConvFADC2Phe((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetMeanConvFADC2PheVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetMeanConvFADC2PheSystVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetMeanFFactorFADC2Phot((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetNumSaturated((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPheFFactorMethod((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPheFFactorMethodVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->SetPheFFactorMethodSystVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationChargePix*) G__getstructoffset())->SetPheFFactorMethodLimit((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationChargePix*) G__getstructoffset())->SetPheFFactorMethodLimit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetAbsTimeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetAbsTimeRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConversionHiLo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConversionHiLoErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConversionHiLoSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedMeanErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedRSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedRSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetConvertedRSigmaSquare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2Phe());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2PheErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2PheSystErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2PheTotErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetFFactorFADC2Phe());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2PheVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanConvFADC2PheSystVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanFFactorFADC2Phot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanFFactorFADC2PhotErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetMeanFFactorFADC2PhotVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationChargePix*) G__getstructoffset())->GetNumSaturated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPedErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPedRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPedRmsErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodSystErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodTotErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodSystVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetPheFFactorMethodRelSystVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetRSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetRSigmaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetRSigmaRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetRSigmaPerCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationChargePix*) G__getstructoffset())->GetRSigmaPerChargeErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationChargePix*) G__getstructoffset())->IsFFactorMethodValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->CalcLoGainPedestal((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MCalibrationChargePix*) G__getstructoffset())->CalcReducedSigma((const Float_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MCalibrationChargePix*) G__getstructoffset())->CalcReducedSigma());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationChargePix*) G__getstructoffset())->CalcFFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationChargePix*) G__getstructoffset())->CalcConvFFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationChargePix*) G__getstructoffset())->CalcMeanFFactor((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationChargePix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationChargePix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationChargePix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationChargePix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargePix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationChargePix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_244_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationChargePix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationChargePix G__TMCalibrationChargePix;
static int G__CalibCint_244_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationChargePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationChargePix*) (soff+(sizeof(MCalibrationChargePix)*i)))->~G__TMCalibrationChargePix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationChargePix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationChargePix*) (soff))->~G__TMCalibrationChargePix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationBlindPix */
static int G__CalibCint_252_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationBlindPix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrationBlindPix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindPix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationBlindPix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindPix[n];
       } else {
         p = new((void*) gvp) MCalibrationBlindPix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindPix;
       } else {
         p = new((void*) gvp) MCalibrationBlindPix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCalibrationBlindPix*) G__getstructoffset())->CalcFluxInsidePlexiglass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetAreaRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetAtt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetAttRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetQE());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetQERelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetCollEff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetCollEffRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->GetColor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetLambda());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetLambdaErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetLambdaRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetLambdaCheck());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetLambdaCheckErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetFluxInsidePlexiglass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetFluxInsidePlexiglassErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetFluxInsidePlexiglassRelVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetMu0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetMu0Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetMu1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetMu1Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetSigma0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetSigma0Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetSigma1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MCalibrationBlindPix*) G__getstructoffset())->GetSigma1Err());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->IsOscillating());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->IsChargeFitValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->IsPedestalFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->IsSinglePheFitOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MCalibrationBlindPix*) G__getstructoffset())->IsFluxInsidePlexiglassAvailable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetArea((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetAreaErr((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetAtt((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetAttErr((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetQE((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetQEErr((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetCollEff((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetCollEffErr((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetColor((const MCalibrationCam::PulserColor_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetLambda((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetLambdaVar((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetLambdaCheck((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetLambdaCheckErr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetMu0((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetMu0Err((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetMu1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetMu1Err((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSigma0((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSigma0Err((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSigma1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSigma1Err((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetOscillating((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetOscillating();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetChargeFitValid((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetChargeFitValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetPedestalFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetPedestalFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSinglePheFitOK((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetSinglePheFitOK();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetFluxInsidePlexiglassAvailable((const Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrationBlindPix*) G__getstructoffset())->SetFluxInsidePlexiglassAvailable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationBlindPix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindPix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationBlindPix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationBlindPix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindPix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindPix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindPix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindPix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_252_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindPix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationBlindPix G__TMCalibrationBlindPix;
static int G__CalibCint_252_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationBlindPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationBlindPix*) (soff+(sizeof(MCalibrationBlindPix)*i)))->~G__TMCalibrationBlindPix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationBlindPix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationBlindPix*) (soff))->~G__TMCalibrationBlindPix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationBlindCamOneOldStyle */
static int G__CalibCint_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationBlindCamOneOldStyle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCamOneOldStyle((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCamOneOldStyle((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamOneOldStyle[n];
       } else {
         p = new((void*) gvp) MCalibrationBlindCamOneOldStyle[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamOneOldStyle;
       } else {
         p = new((void*) gvp) MCalibrationBlindCamOneOldStyle;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationBlindCamOneOldStyle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamOneOldStyle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationBlindCamOneOldStyle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationBlindCamOneOldStyle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindCamOneOldStyle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamOneOldStyle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamOneOldStyle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamOneOldStyle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamOneOldStyle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationBlindCamOneOldStyle G__TMCalibrationBlindCamOneOldStyle;
static int G__CalibCint_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationBlindCamOneOldStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationBlindCamOneOldStyle*) (soff+(sizeof(MCalibrationBlindCamOneOldStyle)*i)))->~G__TMCalibrationBlindCamOneOldStyle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationBlindCamOneOldStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationBlindCamOneOldStyle*) (soff))->~G__TMCalibrationBlindCamOneOldStyle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationBlindCamTwoNewStyle */
static int G__CalibCint_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationBlindCamTwoNewStyle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCamTwoNewStyle((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCamTwoNewStyle((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamTwoNewStyle[n];
       } else {
         p = new((void*) gvp) MCalibrationBlindCamTwoNewStyle[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamTwoNewStyle;
       } else {
         p = new((void*) gvp) MCalibrationBlindCamTwoNewStyle;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationBlindCamTwoNewStyle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamTwoNewStyle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationBlindCamTwoNewStyle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationBlindCamTwoNewStyle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindCamTwoNewStyle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamTwoNewStyle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamTwoNewStyle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamTwoNewStyle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_255_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamTwoNewStyle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationBlindCamTwoNewStyle G__TMCalibrationBlindCamTwoNewStyle;
static int G__CalibCint_255_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationBlindCamTwoNewStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationBlindCamTwoNewStyle*) (soff+(sizeof(MCalibrationBlindCamTwoNewStyle)*i)))->~G__TMCalibrationBlindCamTwoNewStyle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationBlindCamTwoNewStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationBlindCamTwoNewStyle*) (soff))->~G__TMCalibrationBlindCamTwoNewStyle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrationBlindCamThreeNewStyle */
static int G__CalibCint_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrationBlindCamThreeNewStyle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrationBlindCamThreeNewStyle((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrationBlindCamThreeNewStyle((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamThreeNewStyle[n];
       } else {
         p = new((void*) gvp) MCalibrationBlindCamThreeNewStyle[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrationBlindCamThreeNewStyle;
       } else {
         p = new((void*) gvp) MCalibrationBlindCamThreeNewStyle;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrationBlindCamThreeNewStyle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamThreeNewStyle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrationBlindCamThreeNewStyle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrationBlindCamThreeNewStyle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrationBlindCamThreeNewStyle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamThreeNewStyle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamThreeNewStyle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrationBlindCamThreeNewStyle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__CalibCint_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrationBlindCamThreeNewStyle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrationBlindCamThreeNewStyle G__TMCalibrationBlindCamThreeNewStyle;
static int G__CalibCint_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrationBlindCamThreeNewStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrationBlindCamThreeNewStyle*) (soff+(sizeof(MCalibrationBlindCamThreeNewStyle)*i)))->~G__TMCalibrationBlindCamThreeNewStyle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrationBlindCamThreeNewStyle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrationBlindCamThreeNewStyle*) (soff))->~G__TMCalibrationBlindCamThreeNewStyle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MCalibrationPix */

/* MCalibrationCam */

/* MCalibrationPattern */

/* MCalibColorSet */

/* MCalibrationChargeCalc */

/* MCalibrationChargeCam */

/* MCalibrationRelTimeCalc */

/* MCalibrationRelTimeCam */

/* MCalibrationBlindCam */

/* MCalibrationQECam */

/* MCalibColorSteer */

/* MCalibrateData */

/* MCalibCalcFromPast */

/* MCalibConstCam */

/* MCalibrateFact */

/* MCalibConstPix */

/* MCalibrationPatternDecode */

/* MCalibrateRelTimes */

/* MCalibrationPulseTimeCam */

/* MCalibrationRelTimePix */

/* MCalibrationQECamMagic */

/* MCalibrationQEPix */

/* MCalibrationTestCam */

/* MCalibrationTestCalc */

/* MCalibrationTestPix */

/* MCalibrationChargePINDiode */

/* MCalibrationChargePix */

/* MCalibrationBlindPix */

/* MCalibrationBlindCamOneOldStyle */

/* MCalibrationBlindCamTwoNewStyle */

/* MCalibrationBlindCamThreeNewStyle */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncCalibCint {
 public:
  G__Sizep2memfuncCalibCint(): p(&G__Sizep2memfuncCalibCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncCalibCint::*p)();
};

size_t G__get_sizep2memfuncCalibCint()
{
  G__Sizep2memfuncCalibCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceCalibCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix))) {
     MCalibrationPix *G__Lderived;
     G__Lderived=(MCalibrationPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam))) {
     MCalibrationCam *G__Lderived;
     G__Lderived=(MCalibrationCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern))) {
     MCalibrationPattern *G__Lderived;
     G__Lderived=(MCalibrationPattern*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet))) {
     MCalibColorSet *G__Lderived;
     G__Lderived=(MCalibColorSet*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc))) {
     MCalibrationChargeCalc *G__Lderived;
     G__Lderived=(MCalibrationChargeCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam))) {
     MCalibrationChargeCam *G__Lderived;
     G__Lderived=(MCalibrationChargeCam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc))) {
     MCalibrationRelTimeCalc *G__Lderived;
     G__Lderived=(MCalibrationRelTimeCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam))) {
     MCalibrationRelTimeCam *G__Lderived;
     G__Lderived=(MCalibrationRelTimeCam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam))) {
     MCalibrationBlindCam *G__Lderived;
     G__Lderived=(MCalibrationBlindCam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam))) {
     MCalibrationQECam *G__Lderived;
     G__Lderived=(MCalibrationQECam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer))) {
     MCalibColorSteer *G__Lderived;
     G__Lderived=(MCalibColorSteer*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData))) {
     MCalibrateData *G__Lderived;
     G__Lderived=(MCalibrateData*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast))) {
     MCalibCalcFromPast *G__Lderived;
     G__Lderived=(MCalibCalcFromPast*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam))) {
     MCalibConstCam *G__Lderived;
     G__Lderived=(MCalibConstCam*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact))) {
     MCalibrateFact *G__Lderived;
     G__Lderived=(MCalibrateFact*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix))) {
     MCalibConstPix *G__Lderived;
     G__Lderived=(MCalibConstPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode))) {
     MCalibrationPatternDecode *G__Lderived;
     G__Lderived=(MCalibrationPatternDecode*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes))) {
     MCalibrateRelTimes *G__Lderived;
     G__Lderived=(MCalibrateRelTimes*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam))) {
     MCalibrationPulseTimeCam *G__Lderived;
     G__Lderived=(MCalibrationPulseTimeCam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix))) {
     MCalibrationRelTimePix *G__Lderived;
     G__Lderived=(MCalibrationRelTimePix*)0x1000;
     {
       MCalibrationPix *G__Lpbase=(MCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic))) {
     MCalibrationQECamMagic *G__Lderived;
     G__Lderived=(MCalibrationQECamMagic*)0x1000;
     {
       MCalibrationQECam *G__Lpbase=(MCalibrationQECam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix))) {
     MCalibrationQEPix *G__Lderived;
     G__Lderived=(MCalibrationQEPix*)0x1000;
     {
       MCalibrationPix *G__Lpbase=(MCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam))) {
     MCalibrationTestCam *G__Lderived;
     G__Lderived=(MCalibrationTestCam*)0x1000;
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc))) {
     MCalibrationTestCalc *G__Lderived;
     G__Lderived=(MCalibrationTestCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc),G__get_linked_tagnum(&G__CalibCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc),G__get_linked_tagnum(&G__CalibCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix))) {
     MCalibrationTestPix *G__Lderived;
     G__Lderived=(MCalibrationTestPix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode))) {
     MCalibrationChargePINDiode *G__Lderived;
     G__Lderived=(MCalibrationChargePINDiode*)0x1000;
     {
       MCalibrationPix *G__Lpbase=(MCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix))) {
     MCalibrationChargePix *G__Lderived;
     G__Lderived=(MCalibrationChargePix*)0x1000;
     {
       MCalibrationPix *G__Lpbase=(MCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix))) {
     MCalibrationBlindPix *G__Lderived;
     G__Lderived=(MCalibrationBlindPix*)0x1000;
     {
       MCalibrationPix *G__Lpbase=(MCalibrationPix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle))) {
     MCalibrationBlindCamOneOldStyle *G__Lderived;
     G__Lderived=(MCalibrationBlindCamOneOldStyle*)0x1000;
     {
       MCalibrationBlindCam *G__Lpbase=(MCalibrationBlindCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle))) {
     MCalibrationBlindCamTwoNewStyle *G__Lderived;
     G__Lderived=(MCalibrationBlindCamTwoNewStyle*)0x1000;
     {
       MCalibrationBlindCam *G__Lpbase=(MCalibrationBlindCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle))) {
     MCalibrationBlindCamThreeNewStyle *G__Lderived;
     G__Lderived=(MCalibrationBlindCamThreeNewStyle*)0x1000;
     {
       MCalibrationBlindCam *G__Lpbase=(MCalibrationBlindCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MCalibrationCam *G__Lpbase=(MCalibrationCam*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),G__get_linked_tagnum(&G__CalibCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),G__get_linked_tagnum(&G__CalibCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableCalibCint() {

   /* Setting up typedef entry */
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__CalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__CalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MCalibrationPix */
static void G__setup_memvarMCalibrationPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix));
   { MCalibrationPix *p; p=(MCalibrationPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPixId=",0,"Software PixId (needed to get Id in calls to Next())");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fFlags=",0,"Flag for the set bits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainMean=",0,"Mean from fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainMeanVar=",0,"Error of mean from fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainNumBlackout=",0,"Number blackout events in high-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainNumPickup=",0,"Number pickup events in high-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainRms=",0,"Histogram RMS of the high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainSigma=",0,"Sigma from fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainSigmaVar=",0,"Error of sigma from fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fHiGainProb=",0,"Probability of fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainMean=",0,"Mean from fit to high gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainMeanVar=",0,"Error of mean from fit to low gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainNumBlackout=",0,"Number blackout events in low-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainNumPickup=",0,"Number pickup events in low-gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainRms=",0,"Histogram RMS of the low-gain values  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainSigma=",0,"Sigma of from fit to low gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainSigmaVar=",0,"Error of sigma from fit to low gain values");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fLoGainProb=",0,"Probability of fit to low gain values");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPixcLcLdA),-1,-2,2,"kHiGainSaturation=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPixcLcLdA),-1,-2,2,"kExcluded=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPixcLcLdA),-1,-2,2,"kValid=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPixcLcLdA),-1,-2,2,"kDebug=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationCam */
static void G__setup_memvarMCalibrationCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam));
   { MCalibrationCam *p; p=(MCalibrationCam*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCT1=%lldLL",(long long)MCalibrationCam::kCT1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-2,1,G__FastAllocString(2048).Format("kGREEN=%lldLL",(long long)MCalibrationCam::kGREEN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-2,1,G__FastAllocString(2048).Format("kBLUE=%lldLL",(long long)MCalibrationCam::kBLUE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-2,1,G__FastAllocString(2048).Format("kUV=%lldLL",(long long)MCalibrationCam::kUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-2,1,G__FastAllocString(2048).Format("kNONE=%lldLL",(long long)MCalibrationCam::kNONE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(2048).Format("gkNumPulserColors=%lldLL",(long long)MCalibrationCam::gkNumPulserColors).data(),0,"! Number of Pulser colours (now set to: 4)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayI),-1,-1,2,"fNumUnsuitable=",0,"Number uncalibrated Pixels per area index ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayI),-1,-1,2,"fNumUnreliable=",0,"Number unreliable   Pixels per area index ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayF),-1,-1,2,"fNumHiGainFADCSlices=",0,"Number High-Gain FADC slices used by extractor      ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayF),-1,-1,2,"fNumLoGainFADCSlices=",0,"Number Low -Gain FADC slices used by extractor");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRunNumber=",0,"Store run number for interlaced calib. events");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,2,"fPulserColor=",0,"Colour of the pulsed LEDs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TOrdCollection),-1,-1,2,"fPixels=",0,"-> Array of MCalibrationPix, one per pixel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TOrdCollection),-1,-1,2,"fAverageAreas=",0,"Array of MCalibrationPix, one per pixel area");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TOrdCollection),-1,-1,2,"fAverageSectors=",0,"Array of MCalibrationPix, one per camera sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TOrdCollection),-1,-1,2,"fAverageBadAreas=",0,"Array of MBadPixelsPix,   one per pixel area");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TOrdCollection),-1,-1,2,"fAverageBadSectors=",0,"Array of MBadPixelsPix,   one per camera sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationPattern */
static void G__setup_memvarMCalibrationPattern(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern));
   { MCalibrationPattern *p; p=(MCalibrationPattern*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLUV=%lldLL",(long long)MCalibrationPattern::kCLUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLGreen=%lldLL",(long long)MCalibrationPattern::kCLGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmber=%lldLL",(long long)MCalibrationPattern::kCLAmber).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRed=%lldLL",(long long)MCalibrationPattern::kCLRed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedAmber=%lldLL",(long long)MCalibrationPattern::kCLRedAmber).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedGreen=%lldLL",(long long)MCalibrationPattern::kCLRedGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedUV=%lldLL",(long long)MCalibrationPattern::kCLRedUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberGreen=%lldLL",(long long)MCalibrationPattern::kCLAmberGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberUV=%lldLL",(long long)MCalibrationPattern::kCLAmberUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLGreenUV=%lldLL",(long long)MCalibrationPattern::kCLGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedAmberGreen=%lldLL",(long long)MCalibrationPattern::kCLRedAmberGreen).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLRedGreenUV=%lldLL",(long long)MCalibrationPattern::kCLRedGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAmberGreenUV=%lldLL",(long long)MCalibrationPattern::kCLAmberGreenUV).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLAll=%lldLL",(long long)MCalibrationPattern::kCLAll).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-2,1,G__FastAllocString(2048).Format("kCLNone=%lldLL",(long long)MCalibrationPattern::kCLNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCLStrength=",0,"Continuous light strenth  ");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t),-1,-1,4,"fCLColor=",0,"Color (combinations) of the continuous light");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPulserStrength=",0,"Strength of the pulsed light (in nr. of equiv. LEDs)");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fPulserColor=",0,"Colour of the pulsed light");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibColorSet */
static void G__setup_memvarMCalibColorSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet));
   { MCalibColorSet *p; p=(MCalibColorSet*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gkIFAEBoxInaugurationRun=0LL",0,"! Run number of first IFAE box calibration (set to: 20113)");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"gkFirstRunWithFinalBits=0ULL",0,"! Run number of first functionning digital modules ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),-1,-1,4,"fPattern=",0,"! Calibration Pattern with the pulse pattern information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MRawEvtHeader),-1,-1,4,"fHeader=",0,"! Event header with the project name");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fColor=",0,"Pulser Color to be set");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fStrength=",0,"Pulser Strength to be set");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsValid=",0,"Have to set the pulse pattern?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsExplicitColor=",0,"Is colour set explicitely from outside (for MC)? ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationChargeCalc */
static void G__setup_memvarMCalibrationChargeCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc));
   { MCalibrationChargeCalc *p; p=(MCalibrationChargeCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgChargeLimit=",0,"! Default for fChargeLimit        (now set to: 2.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgChargeErrLimit=",0,"! Default for fChargeErrLimit     (now set to: 0.)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgChargeRelErrLimit=",0,"! Default for fChargeRelErrLimit  (now set to: 1.)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLambdaCheckLimit=",0,"! Default for fLambdaCheckLimit   (now set to: 0.2)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgLambdaErrLimit=",0,"! Default for fLabmdaErrLimit     (now set to: 0.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgPheErrLowerLimit=",0,"! Default for fPheErrLowerLimit   (now set to: 9.0)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgPheErrUpperLimit=",0,"! Default for fPheErrUpperLimit   (now set to: 4.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgFFactorErrLimit=",0,"! Default for fFFactorErrLimit    (now set to: 4.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgArrTimeRmsLimit=",0,"! Default for fArrTimeRmsLimit    (now set to: 3.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgUnsuitablesLimit=",0,"! Default for fUnsuitableLimit    (now set to: 0.1)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgUnreliablesLimit=",0,"! Default for fUnreliableLimit    (now set to: 0.3)");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-2,4,"fgNamePedestalCam=",0,"! \"MPedestalCam\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArrTimeRmsLimit=",0,"Limit acceptance RMS of absolute arrival times");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeLimit=",0,"Limit acceptance mean charge  (in units of PedRMS)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeErrLimit=",0,"Limit acceptance charge error (in abs. numbers)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeRelErrLimit=",0,"Limit acceptance rel. error mean (in abs. numbers)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFFactorErrLimit=",0,"Limit acceptance F-Factor w.r.t. area idx mean");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambdaCheckLimit=",0,"Limit rel. diff. lambda and lambdacheck in Blind Pixel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambdaErrLimit=",0,"Limit acceptance lambda error in Blind Pixel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumHiGainSamples=",0,"Number High-Gain FADC slices used by extractor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumLoGainSamples=",0,"Number Low -Gain FADC slices used by extractor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheErrLowerLimit=",0,"Lower limit acceptance nr. phe's w.r.t. area idx mean (in sigmas)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheErrUpperLimit=",0,"Upper limit acceptance nr. phe's w.r.t. area idx mean (in sigmas)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSqrtHiGainSamples=",0,"Square root nr. High-Gain FADC slices used by extractor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSqrtLoGainSamples=",0,"Square root nr. Low -Gain FADC slices used by extractor ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUnsuitablesLimit=",0,"Limit for relative number of unsuitable pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUnreliablesLimit=",0,"Limit for relative number of unreliable pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExternalNumPhes=",0,"External mean number of photo-electrons set from outside");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fExternalNumPhesRelVar=",0,"External rel. var. number of photo-electrons set from outside  ");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fPulserColor=",0,"Calibration LEDs colour ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fStrength=",0,"Calibration LEDs strength ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumInnerFFactorMethodUsed=",0,"Number of inner pixels used for F-Factor Method calibration");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fNamePedestalCam=",0,"Name of the 'MPedestalCam' container");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumProcessed=",0,"Number of processed events (for Intensity calibration)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fContinousCalibration=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"!  Bad Pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),-1,-1,4,"fCam=",0,"!  Calibrated Charges results of all pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MHCalibrationChargeCam),-1,-1,4,"fHCam=",0,"!  Charges histograms of all pixels   ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),-1,-1,4,"fBlindCam=",0,"!  Calibrated Charges of the Blind Pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MHCalibrationChargeBlindCam),-1,-1,4,"fHBlindCam=",0,"!  Charges histograms of the Blind Pixels  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode),-1,-1,4,"fPINDiode=",0,"!  Calibrated Charges of the PIN Diode");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),-1,-1,4,"fQECam=",0,"!  Calibrated Quantum Efficiencies of all pixels ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"!  Camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MExtractedSignalCam),-1,-1,4,"fSignal=",0,"! Extracted Signal");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),-1,-1,4,"fCalibPattern=",0,"! Calibration DM pattern");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MPedestalCam),-1,-1,4,"fPedestals=",0,"! Pedestals all pixels (calculated previously from ped.file)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MExtractor),-1,-1,4,"fExtractor=",0,"! Signal Extractor");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckDeadPixels=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckExtractionWindow=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckHistOverflow=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckDeviatingBehavior=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckOscillations=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t),-1,-2,4,"kCheckArrivalTimes=5LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCheckFlags=",0,"Bit-field to hold the possible check flags");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t),-1,-2,4,"kPheFitOK=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t),-1,-2,4,"kFFactorFitOK=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t),-1,-2,4,"kBlindPixelFitOK=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t),-1,-2,4,"kBlindPixelPedFitOK=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t),-1,-2,4,"kPINDiodeFitOK=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayC),-1,-1,4,"fResultFlags=",0,"Bit-fields for the fitting results   (one field per area index)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayC),-1,-1,4,"fBlindPixelFlags=",0,"Bit-fields for the blind pixel flags (one field per blind pixel)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayC),-1,-1,4,"fPINDiodeFlags=",0,"Bit-fields for the PIN Diode flags   (one field per PIN Diode  )");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLdA),-1,-2,4,"kDebug=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLdA),-1,-2,4,"kUseExtractorRes=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLdA),-1,-2,4,"kUseUnreliables=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalccLcLdA),-1,-2,4,"kUseExternalNumPhes=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFlags=",0,"Bit-field to hold the general flags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationChargeCam */
static void G__setup_memvarMCalibrationChargeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam));
   { MCalibrationChargeCam *p; p=(MCalibrationChargeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFlags=",0,"Bit-field to hold the flags");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsBlindPixelMethod=",0,"Average nr. photons from Blind Pixel Method (Inner Pixel)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsFFactorMethod=",0,"Average nr. photons from F-Factor Method (Inner Pixel)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsPINDiodeMethod=",0,"Average nr. photons from PIN Diode Method (Inner Pixel)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsBlindPixelMethodErr=",0,"Error av. nr. photons from Blind Pixel Method");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsFFactorMethodErr=",0,"Error av. nr. photons from F-Factor Method");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsPINDiodeMethodErr=",0,"Error av. nr. photons from PIN Diode Method");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCamcLcLdA),-1,-2,4,"kFFactorMethodValid=0LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationRelTimeCalc */
static void G__setup_memvarMCalibrationRelTimeCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc));
   { MCalibrationRelTimeCalc *p; p=(MCalibrationRelTimeCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgRelTimeResolutionLimit=",0,"! Default for fRelTimeResolutionLimit (now set to: 0.75)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRelTimeResolutionLimit=",0,"Limit acceptance rel. time resolution (in FADC slices)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"Bad Pixels ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),-1,-1,4,"fCam=",0,"Calibrated RelTimes of all pixels ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geometry");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t),-1,-2,4,"kCheckHistOverflow=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t),-1,-2,4,"kCheckDeviatingBehavior=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t),-1,-2,4,"kCheckOscillations=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t),-1,-2,4,"kCheckFitResults=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCheckFlags=",0,"Bit-field to hold the possible check flags");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalccLcLdA),-1,-2,4,"kDebug=0LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fFlags=",0,"Bit-field for the general flags");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationRelTimeCam */
static void G__setup_memvarMCalibrationRelTimeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam));
   { MCalibrationRelTimeCam *p; p=(MCalibrationRelTimeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationBlindCam */
static void G__setup_memvarMCalibrationBlindCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam));
   { MCalibrationBlindCam *p; p=(MCalibrationBlindCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationQECam */
static void G__setup_memvarMCalibrationQECam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam));
   { MCalibrationQECam *p; p=(MCalibrationQECam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPlexiglassQE=",0,"! Quantum Efficiency Plexiglass (now set to: 0.96)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPlexiglassQEErr=",0,"! Uncertainty QE Plexiglass     (now set to: 0.01)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayC),-1,-1,4,"fFlags=",0,"Contains validity bits ");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamcLcLdA),-1,-2,4,"kBlindPixelMethodValid=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamcLcLdA),-1,-2,4,"kFFactorMethodValid=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamcLcLdA),-1,-2,4,"kPINDiodeMethodValid=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamcLcLdA),-1,-2,4,"kCombinedMethodValid=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayD),-1,-1,2,"fCorningBlues=",0,"Corning blues of the pixels (if available) ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayD),-1,-1,2,"fCorningReds=",0,"Corning reds  of the pixels (if available) ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibColorSteer */
static void G__setup_memvarMCalibColorSteer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer));
   { MCalibColorSteer *p; p=(MCalibColorSteer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),-1,-1,4,"fCalibPattern=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MParList),-1,-1,4,"fParList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),-1,-1,4,"fCharge=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),-1,-1,4,"fRelTimeCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),-1,-1,4,"fBlindCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),-1,-1,4,"fQECam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBad=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),-1,-1,4,"fChargeCalc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),-1,-1,4,"fRelTimeCalc=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fColor=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fStrength=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHistCopy=",0,"Decide whether MHCalibrationCams will get copied");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrateData */
static void G__setup_memvarMCalibrateData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData));
   { MCalibrateData *p; p=(MCalibrateData*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kSkip=%lldLL",(long long)MCalibrateData::kSkip).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kNone=%lldLL",(long long)MCalibrateData::kNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kFlatCharge=%lldLL",(long long)MCalibrateData::kFlatCharge).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kBlindPixel=%lldLL",(long long)MCalibrateData::kBlindPixel).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kFfactor=%lldLL",(long long)MCalibrateData::kFfactor).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kPinDiode=%lldLL",(long long)MCalibrateData::kPinDiode).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kCombined=%lldLL",(long long)MCalibrateData::kCombined).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kDummy=%lldLL",(long long)MCalibrateData::kDummy).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLPedestalType_t),-1,-2,1,G__FastAllocString(2048).Format("kNo=%lldLL",(long long)MCalibrateData::kNo).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLPedestalType_t),-1,-2,1,G__FastAllocString(2048).Format("kRun=%lldLL",(long long)MCalibrateData::kRun).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLPedestalType_t),-1,-2,1,G__FastAllocString(2048).Format("kEvent=%lldLL",(long long)MCalibrateData::kEvent).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLSignalType_t),-1,-2,1,G__FastAllocString(2048).Format("kPhe=%lldLL",(long long)MCalibrateData::kPhe).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLSignalType_t),-1,-2,1,G__FastAllocString(2048).Format("kPhot=%lldLL",(long long)MCalibrateData::kPhot).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-2,1,G__FastAllocString(2048).Format("gkDefault=%lldLL",(long long)MCalibrateData::gkDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkCalibConvMinLimit=",0,"! Minimum limit for conv. factor");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkCalibConvMaxLimit=",0,"! Maximum limit for conv. factor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCalibConvMinLimit=",0,"Minimum limit for conv. factor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCalibConvMaxLimit=",0,"Maximum limit for conv. factor");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"! Camera geometry container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"! Bad Pixels information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),-1,-1,4,"fCalibrations=",0,"! Calibration constants");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),-1,-1,4,"fQEs=",0,"! Quantum efficiencies");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MExtractedSignalCam),-1,-1,4,"fSignals=",0,"! Integrated charge in FADCs counts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MSignalCam),-1,-1,4,"fCerPhotEvt=",0,"! Cerenkov Photon Event used for calculation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam),-1,-1,4,"fCalibConstCam=",0,"! Temporary calib consts storage");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t),-1,-1,4,"fCalibrationMode=",0,"Flag defining the calibration mode (CalibrationMode_t)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fPedestalFlag=",0,"Flags defining to calibrate the pedestal each event or each run");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fSignalType=",0,"Flag defining the signal type (kphot or kphe)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRenormFactor=",0,"Possible renormalization factor for signals (-> phes)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fScaleFactor=",0,"Possible scale factor for signals");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fFileNameScale=",0,"File name for list of scale factors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TList),-1,-1,4,"fNamesPedestal=",0,"Names of input and output pedestal conatainer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TList),-1,-1,4,"fPedestalCams=",0,"! List of pointers to input MPedestalCam");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TList),-1,-1,4,"fPedPhotCams=",0,"! List of pointers to corresponding output MPedPhotCam");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fCalibConsts=",0,"! Array of calibration constants for each pixel, calculated only once!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fCalibFFactors=",0,"! Array of calibration F-Factors for each pixel, calculated only once!  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fHiLoConv=",0,"! Array of calibration constants for each pixel, calculated only once!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fHiLoConvErr=",0,"! Array of calibration F-Factors for each pixel, calculated only once!  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibCalcFromPast */
static void G__setup_memvarMCalibCalcFromPast(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast));
   { MCalibCalcFromPast *p; p=(MCalibCalcFromPast*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgNumEventsDump=0ULL",0,"! Default for fNumEventsDump");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgNumPhesDump=0ULL",0,"! Default for fNumPhesDump");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera Geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MParList),-1,-1,4,"fParList=",0,"! Parameter List");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Run header storing the run number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam),-1,-1,4,"fCharge=",0,"! Intensity Charge Cam (to be created)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam),-1,-1,4,"fBlindCam=",0,"! Blind  Cam");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam),-1,-1,4,"fQECam=",0,"! QE Cam");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"! Bad Pixels Cam");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc),-1,-1,4,"fChargeCalc=",0,"! Charge Calibration Task");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc),-1,-1,4,"fRelTimeCalc=",0,"! Rel. Times Calibratio Task");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData),-1,-1,4,"fCalibrate=",0,"! Data Calibration Task");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumCam=",0,"! Number of currently used Calibration Cam");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEventsDump=",0,"Number of event after which the MCalibrationCams gets updated");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"! Event counter only for calibration events");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPhesDump=",0,"Number of cams after which the number of phes gets averaged");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPhes=",0,"! Event counter for photo-electron updates");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanPhes=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanPhesRelVar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUpdateWithFFactorMethod=",0,"Update the interlaced calib events with the full F-Factor method");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUpdateNumPhes=",0,"Update the number of photo-electrons only after fNumPhesDump number of Cams");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayF),-1,-1,4,"fPhes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayF),-1,-1,4,"fPhesVar=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumFails=",0,"! How often got the update skipped?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibConstCam */
static void G__setup_memvarMCalibConstCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam));
   { MCalibConstCam *p; p=(MCalibConstCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClonesArray),-1,-1,4,"fArray=",0,"-> Array of MCalibConstPix, one per pixel");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClonesArray),-1,-1,4,"fAverageAreas=",0,"-> Array of MCalibConstPix, one per pixel area");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClonesArray),-1,-1,4,"fAverageSectors=",0,"-> Array of MCalibConstPix, one per camera sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrateFact */
static void G__setup_memvarMCalibrateFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact));
   { MCalibrateFact *p; p=(MCalibrateFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MExtractedSignalCam),-1,-1,4,"fIn=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MSignalCam),-1,-1,4,"fOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fNameExtractedSignalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fNameSignalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayD),-1,-1,4,"fCalibConst=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScale=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibConstPix */
static void G__setup_memvarMCalibConstPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix));
   { MCalibConstPix *p; p=(MCalibConstPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCalibConst=",0,"conversion factor (modified after each interlaced cal. update)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCalibFFactor=",0,"global F-Factor   (modified after each interlaced cal. update)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationPatternDecode */
static void G__setup_memvarMCalibrationPatternDecode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode));
   { MCalibrationPatternDecode *p; p=(MCalibrationPatternDecode*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot1Green=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot2Green=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot3Blue=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot4UV=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot5UV=16LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot6Blue=32LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot7Blue=64LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot8Blue=128LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot9AttBlue=256LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot10Blue=512LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot11Blue=1024LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot12UV=2048LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot13UV=4096LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot14Blue=8192LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot15Green=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kSlot16AttGreen=32768LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kAnyGreen=49155LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kAnyUV=6168LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kAnyBlue=10212LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kGreenAndBlue=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kBlueAndUV=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kGreenAndUV=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t),-1,-2,4,"kIFAEPulser=65535LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MRawEvtHeader),-1,-1,4,"fEvtHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern),-1,-1,4,"fPattern=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrateRelTimes */
static void G__setup_memvarMCalibrateRelTimes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes));
   { MCalibrateRelTimes *p; p=(MCalibrateRelTimes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam),-1,-1,4,"fCalibrations=",0,"Calibration rel. time constants");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"Bad Pixels information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrivalTimeCam),-1,-1,4,"fSignals=",0,"Extracted Arrival Time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MSignalCam),-1,-1,4,"fArrivalTime=",0,"Calibrated arrival times");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fFreq=",0,"! [MHz] Sampling Frequency");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationPulseTimeCam */
static void G__setup_memvarMCalibrationPulseTimeCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam));
   { MCalibrationPulseTimeCam *p; p=(MCalibrationPulseTimeCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationRelTimePix */
static void G__setup_memvarMCalibrationRelTimePix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix));
   { MCalibrationRelTimePix *p; p=(MCalibrationRelTimePix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationQECamMagic */
static void G__setup_memvarMCalibrationQECamMagic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic));
   { MCalibrationQECamMagic *p; p=(MCalibrationQECamMagic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationQEPix */
static void G__setup_memvarMCalibrationQEPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix));
   { MCalibrationQEPix *p; p=(MCalibrationQEPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEGreen=",0,"! Default QE at 520 nm (now set to: 0.192)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEBlue=",0,"! Default QE at 460 nm (now set to: 0.27 )");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEUV=",0,"! Default QE at 370 nm (now set to: 0.285)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQECT1=",0,"! Default QE at 370 nm (now set to: 0.285)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEGreenErr=",0,"! Uncertainty Def. QE  at 520 nm (now set to: 0.05)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEBlueErr=",0,"! Uncertainty Def. QE  at 460 nm (now set to: 0.07)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQEUVErr=",0,"! Uncertainty Def. QE  at 370 nm (now set to: 0.07)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkDefaultQECT1Err=",0,"! Uncertainty Def. QE  at 370 nm (now set to: 0.07)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffGreen=",0,"! Default Light guides efficiency at 520 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffGreenErr=",0,"! Uncertainty Def. Light guides efficiency at 520 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffBlue=",0,"! Default Light guides efficiency at 460 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffBlueErr=",0,"! Uncertainty Def. Light guides efficiency at 460 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffUV=",0,"! Default Light guides efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffUVErr=",0,"! Uncertainty Def. Light guides efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffCT1=",0,"! Default Light guides efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkLightGuidesEffCT1Err=",0,"! Uncertainty Def. Light guides efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPMTCollectionEff=",0,"! Default Collection efficiency of the PMTs");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPMTCollectionEffErr=",0,"! Uncertainty Def. Collection efficiency of the PMTs (0.01)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEBlindPixel=",0,"Calibrated QEs    (Blind Pixel Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEBlindPixelVar=",0,"Variance cal. QEs (Blind Pixel Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQECombined=",0,"Calibrated QEs    (Combined Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQECombinedVar=",0,"Variance cal. QEs (Combined Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEFFactor=",0,"Calibrated QEs    (F-Factor Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEFFactorVar=",0,"Variance cal. QEs (F-Factor Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEPINDiode=",0,"Calibrated QEs    (PIN Diode Method)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEPINDiodeVar=",0,"Variance cal. QEs (PIN Diode Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormBlindPixel=",0,"Normalization w.r.t. default QE (Blind Pixel Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormBlindPixelVar=",0,"Variance norm. w.r.t. def. QE (Blind Pixel Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormCombined=",0,"Normalization w.r.t. default QE (Combined Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormCombinedVar=",0,"Variance norm. w.r.t. def. QE (Combined Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormFFactor=",0,"Normalization w.r.t. default QE (F-Factor Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormFFactorVar=",0,"Variance norm. w.r.t. def. QE (F-Factor Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormPINDiode=",0,"Normalization w.r.t. default QE (PIN Diode Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAvNormPINDiodeVar=",0,"Variance norm. w.r.t. def. QE (PIN Diode Method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAverageQE=",0,"Average QE for Cascade spectrum (default 0.18)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayC),-1,-1,4,"fValidFlags=",0,"Bit-field for valid flags, one array entry for each color");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fAvailableFlags=",0,"Bit-field for available flags");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kBlindPixelMethodValid=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kFFactorMethodValid=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kPINDiodeMethodValid=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kCombinedMethodValid=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kAverageQEBlindPixelAvailable=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kAverageQEFFactorAvailable=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kAverageQEPINDiodeAvailable=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPixcLcLdA),-1,-2,4,"kAverageQECombinedAvailable=7LL",0,(char*)NULL);
   G__memvar_setup((void*)(&MCalibrationQEPix::gkDefaultAverageQE),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gkDefaultAverageQE=",0,"! Default QE folded into Cascade spectrum (now set to: 0.18)");
   G__memvar_setup((void*)(&MCalibrationQEPix::gkDefaultAverageQEErr),102,0,1,-1,G__defined_typename("Float_t"),-2,1,"gkDefaultAverageQEErr=",0,"! Uncertainty Def. QE Cascade spectrum    (now set to: 0.02)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationTestCam */
static void G__setup_memvarMCalibrationTestCam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam));
   { MCalibrationTestCam *p; p=(MCalibrationTestCam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TArrayI),-1,-1,4,"fNumUninterpolated=",0,"Number uninterpolated Pixels per area index ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumUninterpolatedInMaxCluster=",0,"Number of not interpolateable pixels in biggest cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationTestCalc */
static void G__setup_memvarMCalibrationTestCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc));
   { MCalibrationTestCalc *p; p=(MCalibrationTestCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgPhotErrLimit=",0,"! Default for fPhotErrLimit (now set to: 4.)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhotErrLimit=",0,"Limit acceptance nr. cal. phots w.r.t. area idx mean (in sigmas)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fOutputPath=",0,"Path to the output file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_TString),-1,-1,4,"fOutputFile=",0,"Name of the output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"! Bad Pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MHCalibrationTestCam),-1,-1,4,"fHTestCam=",0,"! Calibrated Photons in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam),-1,-1,4,"fCam=",0,"! Storage Calibrated Photons in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationTestPix */
static void G__setup_memvarMCalibrationTestPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix));
   { MCalibrationTestPix *p; p=(MCalibrationTestPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPixId=",0,"Software PixId (needed to get Id in calls to Next())");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fExcluded=",0,"If pixels is excluded or not (not interpolateable)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotons=",0,"Number of calibrated photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsErr=",0,"Error Number of calibrated photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsPerArea=",0,"Number of calibrated photons per mm^2     ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsPerAreaErr=",0,"Error Number of calibrated photons per mm^2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationChargePINDiode */
static void G__setup_memvarMCalibrationChargePINDiode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode));
   { MCalibrationChargePINDiode *p; p=(MCalibrationChargePINDiode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgChargeToPhotons=",0,"! Default for fChargeToPhotons");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgChargeToPhotonsErr=",0,"! Default for fChargeToPhotonsVar");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEGreen=",0,"! Quantum Efficiency at 520 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEBlue=",0,"! Quantum Efficiency at 460 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEUV=",0,"! Quantum Efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQECT1=",0,"! Quantum Efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEGreenErr=",0,"! Uncertainty QE at 520 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEBlueErr=",0,"! Uncertainty QE at 460 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQEUVErr=",0,"! Uncertainty QE at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkPINDiodeQECT1Err=",0,"! Uncertainty QE at 370 nmu");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkAbsorptionWindow=",0,"! Absorption of the protection window (incl. EMS-wires)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkSolidAngleRatio=",0,"! Solid angles ratio PIN Diode - inner pixel");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkSolidAngleRatioErr=",0,"! Error solid angle ratio PIN Diode - inn. pix.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsTimeMean=",0,"Mean Absolute Arrival Time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsTimeRms=",0,"RMS Mean Absolute Arrival Time");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCalibFlags=",0,"Bit-field for the class-own bits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeLimit=",0,"Limit (in units of PedRMS) for acceptance fitted mean charge");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeErrLimit=",0,"Limit (in units of PedRMS) for acceptance fitted charge sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeRelErrLimit=",0,"Limit (in units of Error of fitted charge) for acceptance fitted mean  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeToPhotons=",0,"Mean conv. PIN Diode charge to number of incident photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeToPhotonsVar=",0,"Variance of mean conv. PIN Diode charge to nr. incident photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotons=",0,"Number photons incidident on PIN Diode");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNumPhotonsVar=",0,"Variance nr. photons incid. on PIN Diode");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFluxOutsidePlexiglass=",0,"Mean number photons in INNER PIXEL outside plexiglass");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFluxOutsidePlexiglassVar=",0,"Error on nr. photons in INNER PIXEL outside plexiglass");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPed=",0,"Mean pedestal (from MPedestalPix)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedRms=",0,"Pedestal  RMS (from MPedestalPix)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeMean=",0,"Mean of RMS of summed FADC slices distribution ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeMeanErr=",0,"Error on Mean RMS summed FADC slices distribution ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeSigma=",0,"Sigma of RMS of summed FADC slices distribution    ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsChargeSigmaErr=",0,"Error on Sigma RMS summed FADC slices distribution ");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fColor=",0,"Colour of the pulsed LEDs");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiodecLcLdA),-1,-2,4,"kOscillating=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiodecLcLdA),-1,-2,4,"kChargeFitValid=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiodecLcLdA),-1,-2,4,"kTimeFitValid=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiodecLcLdA),-1,-2,4,"kFluxOutsidePlexiglassAvailable=3LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationChargePix */
static void G__setup_memvarMCalibrationChargePix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix));
   { MCalibrationChargePix *p; p=(MCalibrationChargePix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkElectronicPedRms=",0,"! Electronic component of ped. RMS from opt. receiver on (now set to: 1.)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkElectronicPedRmsErr=",0,"! Error Electr. component ped. RMS (now set to: 0.35)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkFFactor=",0,"! Laboratory F-factor PMTs         (now set to: 1.15)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gkFFactorErr=",0,"! Laboratory F-factor Error PMTs   (now set to: 0.02)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgConversionHiLo=",0,"! Default fConversionHiLo          (now set to: 10.)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgConversionHiLoErr=",0,"! Default fConversionHiLoVar       (now set to: 2.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgConversionHiLoSigma=",0,"! Default fConversionHiLoSigma     (now set to: 2.5)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgPheFFactorMethodLimit=",0,"! Default fPheFFactorMethodLimit   (now set to: 5.)");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgConvFFactorRelErrLimit=",0,"! Default fConvFFactorRelErrLimit  (now set to: 0.35)  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsTimeMean=",0,"Mean Absolute Arrival Time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAbsTimeRms=",0,"RMS Mean Absolute Arrival Time");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fCalibFlags=",0,"Bit-field for the class-own bits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConversionHiLo=",0,"Conversion factor betw. Hi Gain and Lo Gain  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConversionHiLoVar=",0,"Variance Conversion factor betw. Hi and Lo Gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConversionHiLoSigma=",0,"Sigma of conversion factor betw. Hi and Lo Gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConvFFactorRelVarLimit=",0,"Limit for acceptance rel. variance Conversion FADC2Phe");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLoGainPedRmsSquare=",0,"Pedestal RMS square of Low Gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLoGainPedRmsSquareVar=",0,"Pedestal RMS square Variance of Low Gain");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanConvFADC2Phe=",0,"Conversion factor (F-factor method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanConvFADC2PheStatVar=",0,"Variance conversion factor, only stat. error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanConvFADC2PheSystVar=",0,"Variance conversion factor, only syst. error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanFFactorFADC2Phot=",0,"Total mean F-Factor to photons (F-factor method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanFFactorFADC2PhotVar=",0,"Variance mean F-Factor photons, only stat. error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPed=",0,"Pedestal (from MPedestalPix) times number FADC slices");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedVar=",0,"Variance of pedestal ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedRms=",0,"Pedestal RMS (from MPedestalPix) times sqrt nr. FADC slices");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPedRmsVar=",0,"Pedestal RMS (from MPedestalPix) times sqrt nr. FADC slices");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheFFactorMethod=",0,"Number Phe's calculated  with F-factor method)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheFFactorMethodStatVar=",0,"Variance number of Phe's, only stat. error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheFFactorMethodSystVar=",0,"Variance number of Phe's, only syst. error");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPheFFactorMethodLimit=",0,"Min. number Photo-electrons for pix to be accepted.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRSigmaSquare=",0,"Square of Reduced sigma");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRSigmaSquareVar=",0,"Variance Reduced sigma");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumSaturated=",0,"Number of (high-gain) saturated events");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePixcLcLdA),-1,-2,4,"kFFactorMethodValid=0LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationBlindPix */
static void G__setup_memvarMCalibrationBlindPix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix));
   { MCalibrationBlindPix *p; p=(MCalibrationBlindPix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgArea=",0,"! The Blind Pixel area in mm^2");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgAttGreen=",0,"! Attenuation Filter at 520 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgAttBlue=",0,"! Attenuation Filter at 460 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgAttUV=",0,"! Attenuation Filter at 370 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgAttCT1=",0,"! Attenuation Filter at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgAttErr=",0,"! Error Att. Filter at all w.l.");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEGreen=",0,"! Quantum Efficiency at 520 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEBlue=",0,"! Quantum Efficiency at 460 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEUV=",0,"! Quantum Efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQECT1=",0,"! Quantum Efficiency at 370 nm");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEErrGreen=",0,"! Uncertainty QEUnCoated at 520 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEErrBlue=",0,"! Uncertainty QEUnCoated at 460 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEErrUV=",0,"! Uncertainty QEUnCoated at 370 nm ");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgQEErrCT1=",0,"! Uncertainty QEUnCoated at 370 nmu");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgCollEffGreen=",0,"! Collecttion Efficiency");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgCollEffBlue=",0,"! Collecttion Efficiency");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgCollEffUV=",0,"! Collecttion Efficiency");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgCollEffCT1=",0,"! Collecttion Efficiency");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgCollEffErr=",0,"! Uncertainty Collection Efficiency");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArea=",0,"Blind Pixel Area");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAreaErr=",0,"Blind Pixel Area Error");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fAtt=",0,"Attenuation filter (per color)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fAttErr=",0,"Error attnuation filter (per color)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQE=",0,"Quantum eff. (per color)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fQEErr=",0,"Error Quantum eff. (per color)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fCollEff=",0,"Coll eff. (per color)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__CalibCintLN_MArrayF),-1,-1,4,"fCollEffErr=",0,"Error coll. eff. (per color)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambda=",0,"Mean Poisson fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambdaCheck=",0,"Mean Pedestal Check (Gauss) fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambdaCheckErr=",0,"Error mean pedestal Check fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLambdaVar=",0,"Variance lambda Poisson fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFluxInsidePlexiglass=",0,"Number photons in INNER PIXEL inside the plexiglass");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFluxInsidePlexiglassVar=",0,"Variance number of photons in INNER PIXEL ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMu0=",0,"Position pedestal peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMu0Err=",0,"Error pos. pedestal-peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMu1=",0,"Position first photo-electron peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMu1Err=",0,"Error pos. first photo-electon peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma0=",0,"Width pedestal peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma0Err=",0,"Error width pedestal peak");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma1=",0,"Width first photo-electron peak  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma1Err=",0,"Error width first photo-electron peak  ");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPixcLcLdA),-1,-2,4,"kOscillating=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPixcLcLdA),-1,-2,4,"kPedestalFitOK=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPixcLcLdA),-1,-2,4,"kSinglePheFitOK=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPixcLcLdA),-1,-2,4,"kChargeFitValid=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPixcLcLdA),-1,-2,4,"kFluxInsidePlexiglassAvailable=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t),-1,-1,4,"fColor=",0,"Colour of the used pulser light");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationBlindCamOneOldStyle */
static void G__setup_memvarMCalibrationBlindCamOneOldStyle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle));
   { MCalibrationBlindCamOneOldStyle *p; p=(MCalibrationBlindCamOneOldStyle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationBlindCamTwoNewStyle */
static void G__setup_memvarMCalibrationBlindCamTwoNewStyle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle));
   { MCalibrationBlindCamTwoNewStyle *p; p=(MCalibrationBlindCamTwoNewStyle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrationBlindCamThreeNewStyle */
static void G__setup_memvarMCalibrationBlindCamThreeNewStyle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle));
   { MCalibrationBlindCamThreeNewStyle *p; p=(MCalibrationBlindCamThreeNewStyle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__CalibCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarCalibCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMCalibrationPix(void) {
   /* MCalibrationPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix));
   G__memfunc_setup("MCalibrationPix",1510,G__CalibCint_183_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPixId",778,G__CalibCint_183_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainMean",1245,G__CalibCint_183_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainMeanVar",1542,G__CalibCint_183_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainNumBlackout",1985,G__CalibCint_183_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainNumPickup",1784,G__CalibCint_183_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainProb",1263,G__CalibCint_183_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainRms",1166,G__CalibCint_183_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainSigma",1357,G__CalibCint_183_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainSigmaVar",1654,G__CalibCint_183_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainMean",1255,G__CalibCint_183_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainMeanVar",1552,G__CalibCint_183_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainNumBlackout",1995,G__CalibCint_183_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainNumPickup",1794,G__CalibCint_183_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainProb",1273,G__CalibCint_183_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainRms",1176,G__CalibCint_183_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainSigma",1367,G__CalibCint_183_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLoGainSigmaVar",1664,G__CalibCint_183_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMean",685,G__CalibCint_183_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanVar",982,G__CalibCint_183_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumBlackout",1425,G__CalibCint_183_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPickup",1224,G__CalibCint_183_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProb",703,G__CalibCint_183_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma",797,G__CalibCint_183_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigmaVar",1094,G__CalibCint_183_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__CalibCint_183_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExcluded",1114,G__CalibCint_183_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHiGainSaturation",1926,G__CalibCint_183_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValid",796,G__CalibCint_183_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainMean",1233,G__CalibCint_183_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainMeanErr",1530,G__CalibCint_183_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainMeanVar",1530,G__CalibCint_183_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainMeanRelVar",1821,G__CalibCint_183_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainProb",1251,G__CalibCint_183_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainRms",1154,G__CalibCint_183_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainSigma",1345,G__CalibCint_183_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainSigmaErr",1642,G__CalibCint_183_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainSigmaVar",1642,G__CalibCint_183_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainNumPickup",1772,G__CalibCint_183_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiGainNumBlackout",1973,G__CalibCint_183_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiLoMeansDivided",1849,G__CalibCint_183_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiLoMeansDividedErr",2146,G__CalibCint_183_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiLoSigmasDivided",1961,G__CalibCint_183_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHiLoSigmasDividedErr",2258,G__CalibCint_183_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLoGainMean",1243,G__CalibCint_183_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainMeanErr",1540,G__CalibCint_183_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainMeanVar",1540,G__CalibCint_183_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainMeanRelVar",1831,G__CalibCint_183_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainProb",1261,G__CalibCint_183_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainRms",1164,G__CalibCint_183_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainSigma",1355,G__CalibCint_183_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainSigmaErr",1652,G__CalibCint_183_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainSigmaVar",1652,G__CalibCint_183_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainNumPickup",1782,G__CalibCint_183_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLoGainNumBlackout",1983,G__CalibCint_183_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMean",673,G__CalibCint_183_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanErr",970,G__CalibCint_183_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanRelVar",1261,G__CalibCint_183_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanSquare",1298,G__CalibCint_183_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRms",594,G__CalibCint_183_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProb",691,G__CalibCint_183_0_63, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma",785,G__CalibCint_183_0_64, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaErr",1082,G__CalibCint_183_0_65, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigmaRelVar",1373,G__CalibCint_183_0_66, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPickup",1212,G__CalibCint_183_0_67, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBlackout",1413,G__CalibCint_183_0_68, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixId",766,G__CalibCint_183_0_69, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHiGainSaturation",1814,G__CalibCint_183_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDebug",675,G__CalibCint_183_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExcluded",1002,G__CalibCint_183_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__CalibCint_183_0_73, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_183_0_74, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_183_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_183_0_76, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_183_0_77, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_183_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_183_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_183_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_183_0_84, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_183_0_85, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationPix", 1636, G__CalibCint_183_0_86, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationCam(void) {
   /* MCalibrationCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddArea",642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSector",889,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitAverageSectors",1842,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitAverageAreas",1595,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationCam",1478,G__CalibCint_186_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAverageAreas",1479,G__CalibCint_186_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageArea",1364,G__CalibCint_186_0_11, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageArea",1364,G__CalibCint_186_0_12, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageBadArea",1627,G__CalibCint_186_0_13, 117, G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageBadArea",1627,G__CalibCint_186_0_14, 117, G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSectors",1726,G__CalibCint_186_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSector",1611,G__CalibCint_186_0_16, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSector",1611,G__CalibCint_186_0_17, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageBadSector",1874,G__CalibCint_186_0_18, 117, G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageBadSector",1874,G__CalibCint_186_0_19, 117, G__get_linked_tagnum(&G__CalibCintLN_MBadPixelsPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumHiGainFADCSlices",2033,G__CalibCint_186_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLoGainFADCSlices",2043,G__CalibCint_186_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUnsuitable",1644,G__CalibCint_186_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '-1' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUnreliable",1619,G__CalibCint_186_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 '-1' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPulserColor",1434,G__CalibCint_186_0_25, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumer",1116,G__CalibCint_186_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__CalibCint_186_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CalibCint_186_0_28, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CalibCint_186_0_29, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulserColorStr",1747,G__CalibCint_186_0_30, 117, G__get_linked_tagnum(&G__CalibCintLN_TString), -1, 0, 1, 3, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) G__func2void( (TString (*)(MCalibrationCam::PulserColor_t))(&MCalibrationCam::GetPulserColorStr) ), 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSize",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumHiGainFADCSlices",2045,G__CalibCint_186_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumLoGainFADCSlices",2055,G__CalibCint_186_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - f i - 'Int_t' 10 '0' aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumUnsuitable",1656,G__CalibCint_186_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - i i - 'Int_t' 10 - aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumUnreliable",1631,G__CalibCint_186_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - i i - 'Int_t' 10 - aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserColor",1446,G__CalibCint_186_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 'kCT1' col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRunNumber",1226,G__CalibCint_186_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_186_0_39, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_186_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_186_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_186_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_186_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_186_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_186_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_186_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_186_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationCam", 1604, G__CalibCint_186_0_51, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationPattern(void) {
   /* MCalibrationPattern */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern));
   G__memfunc_setup("MCalibrationPattern",1939,G__CalibCint_188_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPattern), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCLStrength",1278,G__CalibCint_188_0_3, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCLColor",942,G__CalibCint_188_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulserStrength",1770,G__CalibCint_188_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulserColor",1434,G__CalibCint_188_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulserColorStr",1747,G__CalibCint_188_0_7, 117, G__get_linked_tagnum(&G__CalibCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserColor",1446,G__CalibCint_188_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserStrength",1782,G__CalibCint_188_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - strength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_188_0_10, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationPattern::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_188_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPattern::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_188_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationPattern::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_188_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationPattern::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_188_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_188_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPattern::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_188_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPattern::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_188_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPattern::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_188_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPattern::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationPattern", 2065, G__CalibCint_188_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibColorSet(void) {
   /* MCalibColorSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet));
   G__memfunc_setup("CheckAndSet",1053,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'TString' - 11 - str C - - 10 - regexp "
"i 'MCalibrationCam::PulserColor_t' - 0 - col f - 'Float_t' 0 - strength", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibColorSet",1363,G__CalibCint_190_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSet), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExplicitColor",1645,G__CalibCint_190_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_190_0_9, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibColorSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_190_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_190_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibColorSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_190_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibColorSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_190_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_190_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_190_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibColorSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_190_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_190_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibColorSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibColorSet", 1489, G__CalibCint_190_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationChargeCalc(void) {
   /* MCalibrationChargeCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc));
   G__memfunc_setup("FinalizeBadPixels",1710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeBlindCam",1580,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeBlindPixelQECam",2244,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeCharges",1519,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 0, 
"u 'MCalibrationChargePix' - 1 - cal u 'MBadPixelsPix' - 1 - bad "
"C - - 10 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeCombinedQECam",2042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeFFactorQECam",1918,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeFFactorMethod",2104,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizePedestals",1751,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'MPedestalPix' - 11 - ped u 'MCalibrationChargePix' - 1 - cal "
"i - 'Int_t' 10 - aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizePINDiode",1534,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizePINDiodeQECam",1957,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeUnsuitablePixels",2499,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeAbsTimes",1610,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputFile",1329,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckDeadPixels",1661,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckDeviatingBehavior",2405,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckExtractionWindow",2355,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckHistOverflow",1926,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckOscillations",1934,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckArrivalTimes",1901,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDebug",675,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUseExtractorRes",1743,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUseUnreliables",1631,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUseExternalNumPhes",2028,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintUncalibrated",1755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - typ C - - 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheFitOK",1030,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - aidx g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFactorFitOK",1422,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - aidx g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixelFitOK",1748,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - idx g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixelPedFitOK",2029,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - idx g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPINDiodeFitOK",1461,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - idx g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationChargeCalc",2162,G__CalibCint_192_0_35, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetNumProcessed",1755,G__CalibCint_192_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finalize",818,G__CalibCint_192_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeLimit",1397,G__CalibCint_192_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgChargeLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeErrLimit",1694,G__CalibCint_192_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgChargeErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeRelErrLimit",1985,G__CalibCint_192_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgChargeRelErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckArrivalTimes",2013,G__CalibCint_192_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckDeadPixels",1773,G__CalibCint_192_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckDeviatingBehavior",2517,G__CalibCint_192_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckExtractionWindow",2467,G__CalibCint_192_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckHistOverflow",2038,G__CalibCint_192_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckOscillations",2046,G__CalibCint_192_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__CalibCint_192_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseExtractorRes",1855,G__CalibCint_192_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseUnreliables",1743,G__CalibCint_192_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseExternalNumPhes",2140,G__CalibCint_192_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetContinousCalibration",2390,G__CalibCint_192_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestals",1233,G__CalibCint_192_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MPedestalCam' - 0 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExtractor",1256,G__CalibCint_192_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MExtractor' - 0 - ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArrTimeRmsLimit",1809,G__CalibCint_192_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgArrTimeRmsLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFactorErrLimit",1785,G__CalibCint_192_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgFFactorErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambdaErrLimit",1685,G__CalibCint_192_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgLambdaErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambdaCheckLimit",1866,G__CalibCint_192_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgLambdaCheckLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnsuitablesLimit",1978,G__CalibCint_192_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgUnsuitablesLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnreliablesLimit",1953,G__CalibCint_192_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgUnreliablesLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExternalNumPhes",1839,G__CalibCint_192_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 '0.' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExternalNumPhesRelVar",2427,G__CalibCint_192_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 '0.' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNamePedestalCam",1776,G__CalibCint_192_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 'fgNamePedestalCam' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheErrLowerLimit",1914,G__CalibCint_192_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgPheErrLowerLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheErrUpperLimit",1917,G__CalibCint_192_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgPheErrUpperLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserColor",1446,G__CalibCint_192_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_192_0_67, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationChargeCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_192_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_192_0_69, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationChargeCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_192_0_70, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationChargeCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_192_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_192_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_192_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargeCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_192_0_77, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_192_0_78, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargeCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationChargeCalc", 2288, G__CalibCint_192_0_79, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationChargeCam(void) {
   /* MCalibrationChargeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddArea",642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSector",889,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationChargeCam",2064,G__CalibCint_193_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConversionFactorFFactor",2634,G__CalibCint_193_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - ipx f - 'Float_t' 1 - mean "
"f - 'Float_t' 1 - err f - 'Float_t' 1 - ffactor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumPhotonsBlindPixelMethod",2951,G__CalibCint_193_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsFFactorMethod",2625,G__CalibCint_193_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsPINDiodeMethod",2664,G__CalibCint_193_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsBlindPixelMethodErr",3248,G__CalibCint_193_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsFFactorMethodErr",2922,G__CalibCint_193_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsPINDiodeMethodErr",2961,G__CalibCint_193_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_193_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedConvFADC2PhotPerArea",2896,G__CalibCint_193_0_15, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 4, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MCalibrationQECam' - 11 - qecam "
"h - 'UInt_t' 10 '0' ai U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedConvFADC2PhePerArea",2770,G__CalibCint_193_0_16, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 4, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MCalibrationQECam' - 11 - qecam "
"h - 'UInt_t' 10 '0' ai U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedConvFADC2PhotPerSector",3143,G__CalibCint_193_0_17, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 4, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MCalibrationQECam' - 11 - qecam "
"h - 'UInt_t' 10 '0' sec U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedArrivalTimeMeanPerArea",3264,G__CalibCint_193_0_18, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom h - 'UInt_t' 10 '0' ai "
"U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedArrivalTimeMeanPerSector",3511,G__CalibCint_193_0_19, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom h - 'UInt_t' 10 '0' sec "
"U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedArrivalTimeRmsPerArea",3185,G__CalibCint_193_0_20, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom h - 'UInt_t' 10 '0' ai "
"U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAveragedArrivalTimeRmsPerSector",3432,G__CalibCint_193_0_21, 117, G__get_linked_tagnum(&G__CalibCintLN_TArrayF), -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom h - 'UInt_t' 10 '0' sec "
"U 'MBadPixelsCam' - 0 '0' bad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MergeHiLoConversionFactors",2644,G__CalibCint_193_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'MCalibrationChargeCam' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFFactorMethodValid",2082,G__CalibCint_193_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsBlindPixelMethod",2963,G__CalibCint_193_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsFFactorMethod",2637,G__CalibCint_193_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsPINDiodeMethod",2676,G__CalibCint_193_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsBlindPixelMethodErr",3260,G__CalibCint_193_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsFFactorMethodErr",2934,G__CalibCint_193_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsPINDiodeMethodErr",2973,G__CalibCint_193_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_193_0_31, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationChargeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_193_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_193_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationChargeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_193_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationChargeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_193_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_193_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_193_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_193_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_193_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationChargeCam", 2190, G__CalibCint_193_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationRelTimeCalc(void) {
   /* MCalibrationRelTimeCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc));
   G__memfunc_setup("GetOutputFile",1329,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeAverageResolution",2593,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeRelTimes",1623,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeBadPixels",1710,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeUnsuitablePixels",2499,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintUncalibrated",1755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"C - - 10 - text i - 'Int_t' 0 - in "
"i - 'Int_t' 0 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintUncalibrated",1755,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i 'MBadPixelsPix::UncalibratedType_t' - 0 - typ C - - 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckDeviatingBehavior",2405,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckHistOverflow",1926,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckOscillations",1934,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCheckFitResults",1711,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationRelTimeCalc",2266,G__CalibCint_194_0_16, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,G__CalibCint_194_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDebug",675,G__CalibCint_194_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRelTimeResolutionLimit",2577,G__CalibCint_194_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgRelTimeResolutionLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckFitResults",1823,G__CalibCint_194_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckDeviatingBehavior",2517,G__CalibCint_194_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckHistOverflow",2038,G__CalibCint_194_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckOscillations",2046,G__CalibCint_194_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDebug",787,G__CalibCint_194_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_194_0_26, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationRelTimeCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_194_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_194_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationRelTimeCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_194_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationRelTimeCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_194_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_194_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_194_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimeCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_194_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_194_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimeCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationRelTimeCalc", 2392, G__CalibCint_194_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationRelTimeCam(void) {
   /* MCalibrationRelTimeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddArea",642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSector",889,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationRelTimeCam",2168,G__CalibCint_195_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibCint_195_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationRelTimeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_195_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_195_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationRelTimeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_195_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationRelTimeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_195_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_195_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_195_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_195_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_195_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationRelTimeCam", 2294, G__CalibCint_195_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationBlindCam(void) {
   /* MCalibrationBlindCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationBlindCam",1967,G__CalibCint_196_0_2, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCam), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '1' nblind C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsFluxInsidePlexiglassAvailable",3156,G__CalibCint_196_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglass",2359,G__CalibCint_196_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglassVar",2656,G__CalibCint_196_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglassRelVar",2947,G__CalibCint_196_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPulserColor",1446,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibCint_196_0_9, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationBlindCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_196_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_196_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationBlindCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_196_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationBlindCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_196_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_196_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_196_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_196_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_196_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationBlindCam", 2093, G__CalibCint_196_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationQECam(void) {
   /* MCalibrationQECam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddArea",642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSector",889,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationQECam",1628,G__CalibCint_197_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGraphQEvsCorningBlues",2396,G__CalibCint_197_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TGraphErrors), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraphQEvsCorningReds",2287,G__CalibCint_197_0_8, 85, G__get_linked_tagnum(&G__CalibCintLN_TGraphErrors), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistQEvsCorningBlues",2306,G__CalibCint_197_0_9, 85, G__get_linked_tagnum(&G__CalibCintLN_TH2D), -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 '50' nbins d - 'Axis_t' 10 '6.' first "
"d - 'Axis_t' 10 '17.' last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistQEvsCorningReds",2197,G__CalibCint_197_0_10, 85, G__get_linked_tagnum(&G__CalibCintLN_TH2D), -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 '50' nbins d - 'Axis_t' 10 '0.' first "
"d - 'Axis_t' 10 '25.' last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPlexiglassQE",1490,G__CalibCint_197_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlexiglassQERelVar",2078,G__CalibCint_197_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorningBlues",1515,G__CalibCint_197_0_14, 117, G__get_linked_tagnum(&G__CalibCintLN_MArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorningReds",1406,G__CalibCint_197_0_15, 117, G__get_linked_tagnum(&G__CalibCintLN_MArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBlindPixelMethodValid",2296,G__CalibCint_197_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_197_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCombinedMethodValid",2094,G__CalibCint_197_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPINDiodeMethodValid",2009,G__CalibCint_197_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBlindPixelMethodValid",2296,G__CalibCint_197_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_197_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCombinedMethodValid",2094,G__CalibCint_197_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPINDiodeMethodValid",2009,G__CalibCint_197_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBlindPixelMethodValid",2408,G__CalibCint_197_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixelMethodValid",2408,G__CalibCint_197_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedMethodValid",2206,G__CalibCint_197_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedMethodValid",2206,G__CalibCint_197_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFactorMethodValid",2082,G__CalibCint_197_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFactorMethodValid",2082,G__CalibCint_197_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPINDiodeMethodValid",2121,G__CalibCint_197_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPINDiodeMethodValid",2121,G__CalibCint_197_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_197_0_33, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationQECam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_197_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_197_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationQECam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_197_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationQECam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_197_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_197_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_197_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQECam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_197_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_197_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQECam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationQECam", 1754, G__CalibCint_197_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibColorSteer(void) {
   /* MCalibColorSteer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitialize",1225,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNamePattern",1407,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__CalibCintLN_TString), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibColorSteer",1578,G__CalibCint_198_0_7, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibColorSteer), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistCopy",1119,G__CalibCint_198_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_198_0_9, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibColorSteer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_198_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSteer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_198_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibColorSteer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_198_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibColorSteer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_198_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_198_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSteer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_198_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibColorSteer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_198_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibColorSteer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_198_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibColorSteer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibColorSteer", 1704, G__CalibCint_198_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrateData(void) {
   /* MCalibrateData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData));
   G__memfunc_setup("Calibrate",903,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"g - 'Bool_t' 0 - data g - 'Bool_t' 0 - pedestal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrateData",1358,G__CalibCint_200_0_7, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrateData), -1, 0, 3, 1, 1, 0, 
"i 'MCalibrateData::CalibrationMode_t' - 0 'gkDefault' calmode C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPedestal",1083,G__CalibCint_200_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"Cam\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPedestal",1083,G__CalibCint_200_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - pedestal C - - 10 - pedphot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnablePedestalType",1819,G__CalibCint_200_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrateData::PedestalType_t' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedestalFlag",1496,G__CalibCint_200_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrateData::PedestalType_t' - 0 'kRun' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestPedestalFlag",1612,G__CalibCint_200_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrateData::PedestalType_t' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibrationMode",1817,G__CalibCint_200_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrateData::CalibrationMode_t' - 0 'gkDefault' calmode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalType",1324,G__CalibCint_200_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrateData::SignalType_t' - 0 'kPhe' sigtype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibConvMinLimit",1984,G__CalibCint_200_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'gkCalibConvMinLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibConvMaxLimit",1986,G__CalibCint_200_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'gkCalibConvMaxLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleFactor",1395,G__CalibCint_200_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 '1' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateConversionFactors",2395,G__CalibCint_200_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MCalibrationChargeCam' - 10 '0' updatecam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_200_0_20, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrateData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_200_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_200_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrateData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_200_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrateData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_200_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_200_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_200_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_200_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_200_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrateData", 1484, G__CalibCint_200_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibCalcFromPast(void) {
   /* MCalibCalcFromPast */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInitialize",1225,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - name g - 'Bool_t' 0 'kTRUE' finalize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateMeanPhes",1396,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibCalcFromPast",1735,G__CalibCint_201_0_9, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibCalcFromPast), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEventsDump",1627,G__CalibCint_201_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEventsDump",1639,G__CalibCint_201_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgNumEventsDump' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhesDump",1410,G__CalibCint_201_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 'fgNumPhesDump' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibrate",1203,G__CalibCint_201_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCalibrateData' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeCalc",1257,G__CalibCint_201_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCalibrationChargeCalc' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRelTimeCalc",1361,G__CalibCint_201_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MCalibrationRelTimeCalc' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpdateNumPhes",1615,G__CalibCint_201_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpdateWithFFactorMethod",2609,G__CalibCint_201_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_201_0_18, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibCalcFromPast::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_201_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibCalcFromPast::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_201_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibCalcFromPast::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_201_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibCalcFromPast::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_201_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_201_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibCalcFromPast::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_201_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibCalcFromPast::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_201_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibCalcFromPast::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_201_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibCalcFromPast::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibCalcFromPast", 1861, G__CalibCint_201_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibConstCam(void) {
   /* MCalibConstCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam));
   G__memfunc_setup("MCalibConstCam",1344,G__CalibCint_207_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAverageArea",1364,G__CalibCint_207_0_4, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageArea",1364,G__CalibCint_207_0_5, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAverageArea",1668,G__CalibCint_207_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSector",1611,G__CalibCint_207_0_7, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 0, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageSector",1611,G__CalibCint_207_0_8, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumAverageSector",1915,G__CalibCint_207_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__CalibCint_207_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CalibCint_207_0_11, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__CalibCint_207_0_12, 117, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 1, 1, 1, 1, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitSize",815,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitAverageAreas",1595,G__CalibCint_207_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitAverageSectors",1842,G__CalibCint_207_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetBadPixels",1192,G__CalibCint_207_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MBadPixelsCam' - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibCint_207_0_21, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibConstCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_207_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_207_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibConstCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_207_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibConstCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_207_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_207_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_207_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibConstCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_207_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_207_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibConstCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibConstCam", 1470, G__CalibCint_207_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrateFact(void) {
   /* MCalibrateFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrateFact",1362,G__CalibCint_213_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrateFact), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibConst",1294,G__CalibCint_213_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScale",788,G__CalibCint_213_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_213_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrateFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_213_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_213_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrateFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_213_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrateFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_213_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_213_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_213_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_213_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_213_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrateFact", 1488, G__CalibCint_213_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibConstPix(void) {
   /* MCalibConstPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix));
   G__memfunc_setup("MCalibConstPix",1376,G__CalibCint_216_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibConstPix), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCalibConst",1282,G__CalibCint_216_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibFFactor",1440,G__CalibCint_216_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibConst",1294,G__CalibCint_216_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibFFactor",1452,G__CalibCint_216_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_216_0_8, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibConstPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_216_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_216_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibConstPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_216_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibConstPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_216_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_216_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_216_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibConstPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_216_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibConstPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_216_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibConstPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibConstPix", 1502, G__CalibCint_216_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationPatternDecode(void) {
   /* MCalibrationPatternDecode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationPatternDecode",2519,G__CalibCint_217_0_3, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPatternDecode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_217_0_4, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationPatternDecode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_217_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPatternDecode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_217_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationPatternDecode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_217_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationPatternDecode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_217_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_217_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPatternDecode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_217_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPatternDecode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_217_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPatternDecode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_217_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPatternDecode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationPatternDecode", 2645, G__CalibCint_217_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrateRelTimes(void) {
   /* MCalibrateRelTimes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrateRelTimes",1785,G__CalibCint_221_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrateRelTimes), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_221_0_5, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrateRelTimes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_221_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateRelTimes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_221_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrateRelTimes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_221_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrateRelTimes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_221_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_221_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateRelTimes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_221_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateRelTimes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_221_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateRelTimes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_221_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateRelTimes::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrateRelTimes", 1911, G__CalibCint_221_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationPulseTimeCam(void) {
   /* MCalibrationPulseTimeCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam));
   G__memfunc_setup("MCalibrationPulseTimeCam",2398,G__CalibCint_223_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationPulseTimeCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibCint_223_0_4, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationPulseTimeCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_223_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPulseTimeCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_223_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationPulseTimeCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_223_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationPulseTimeCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_223_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_223_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPulseTimeCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_223_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPulseTimeCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_223_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationPulseTimeCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_223_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationPulseTimeCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationPulseTimeCam", 2524, G__CalibCint_223_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationRelTimePix(void) {
   /* MCalibrationRelTimePix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix));
   G__memfunc_setup("MCalibrationRelTimePix",2200,G__CalibCint_224_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationRelTimePix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeOffset",1302,G__CalibCint_224_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeOffsetErr",1599,G__CalibCint_224_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimePrecision",1627,G__CalibCint_224_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimePrecisionErr",1924,G__CalibCint_224_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_224_0_6, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationRelTimePix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_224_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimePix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_224_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationRelTimePix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_224_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationRelTimePix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_224_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_224_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimePix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_224_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimePix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_224_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationRelTimePix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_224_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationRelTimePix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationRelTimePix", 2326, G__CalibCint_224_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationQECamMagic(void) {
   /* MCalibrationQECamMagic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic));
   G__memfunc_setup("CreateCorningReds",1714,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCorningBlues",1823,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationQECamMagic",2109,G__CalibCint_234_0_3, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQECamMagic), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_234_0_4, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationQECamMagic::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_234_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECamMagic::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_234_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationQECamMagic::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_234_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationQECamMagic::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_234_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_234_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECamMagic::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_234_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQECamMagic::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_234_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQECamMagic::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_234_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQECamMagic::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationQECamMagic", 2235, G__CalibCint_234_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationQEPix(void) {
   /* MCalibrationQEPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix));
   G__memfunc_setup("AddAverageBlindPixelQEs",2232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i 'MCalibrationCam::PulserColor_t' - 10 - col f - 'Float_t' 1 - wav "
"f - 'Float_t' 1 - sumw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAverageFFactorQEs",1906,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i 'MCalibrationCam::PulserColor_t' - 10 - col f - 'Float_t' 1 - wav "
"f - 'Float_t' 1 - sumw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAveragePINDiodeQEs",1945,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i 'MCalibrationCam::PulserColor_t' - 10 - col f - 'Float_t' 1 - wav "
"f - 'Float_t' 1 - sumw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvNormBlindPixelRelVar",2474,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvNormCombinedRelVar",2272,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvNormFFactorRelVar",2148,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvNormPINDiodeRelVar",2187,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationQEPix",1660,G__CalibCint_235_0_8, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationQEPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAverageQE",1137,G__CalibCint_235_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAverageQERelVar",1725,G__CalibCint_235_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultQE",1147,G__CalibCint_235_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultQERelVar",1735,G__CalibCint_235_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightGuidesEff",1674,G__CalibCint_235_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightGuidesEffRelVar",2262,G__CalibCint_235_0_16, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightGuidesEff",1674,G__CalibCint_235_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightGuidesEffRelVar",2262,G__CalibCint_235_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEBlindPixel",1441,G__CalibCint_235_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEBlindPixelErr",1738,G__CalibCint_235_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEBlindPixelRelVar",2029,G__CalibCint_235_0_21, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesBlindPixel",2232,G__CalibCint_235_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesBlindPixelErr",2529,G__CalibCint_235_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesBlindPixelVar",2529,G__CalibCint_235_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesCombined",2030,G__CalibCint_235_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesCombinedErr",2327,G__CalibCint_235_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesCombinedVar",2327,G__CalibCint_235_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesFFactor",1906,G__CalibCint_235_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesFFactorErr",2203,G__CalibCint_235_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesFFactorVar",2203,G__CalibCint_235_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesPINDiode",1945,G__CalibCint_235_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesPINDiodeErr",2242,G__CalibCint_235_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECascadesPINDiodeVar",2242,G__CalibCint_235_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECombined",1239,G__CalibCint_235_0_34, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECombinedErr",1536,G__CalibCint_235_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQECombinedRelVar",1827,G__CalibCint_235_0_36, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEFFactor",1115,G__CalibCint_235_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEFFactorErr",1412,G__CalibCint_235_0_38, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEFFactorRelVar",1703,G__CalibCint_235_0_39, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEPINDiode",1154,G__CalibCint_235_0_40, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEPINDiodeErr",1451,G__CalibCint_235_0_41, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQEPINDiodeRelVar",1742,G__CalibCint_235_0_42, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMTCollectionEff",1838,G__CalibCint_235_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPMTCollectionEffRelVar",2426,G__CalibCint_235_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAverageQEBlindPixelAvailable",2937,G__CalibCint_235_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAverageQECombinedAvailable",2735,G__CalibCint_235_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAverageQEFFactorAvailable",2611,G__CalibCint_235_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAverageQEPINDiodeAvailable",2650,G__CalibCint_235_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBlindPixelMethodValid",2296,G__CalibCint_235_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBlindPixelMethodValid",2296,G__CalibCint_235_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCombinedMethodValid",2094,G__CalibCint_235_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCombinedMethodValid",2094,G__CalibCint_235_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_235_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_235_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPINDiodeMethodValid",2009,G__CalibCint_235_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPINDiodeMethodValid",2009,G__CalibCint_235_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageQE",1149,G__CalibCint_235_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormBlindPixel",1898,G__CalibCint_235_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormBlindPixelVar",2195,G__CalibCint_235_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormCombined",1696,G__CalibCint_235_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormCombinedVar",1993,G__CalibCint_235_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormFFactor",1572,G__CalibCint_235_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormFFactorVar",1869,G__CalibCint_235_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormPINDiode",1611,G__CalibCint_235_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAvNormPINDiodeVar",1908,G__CalibCint_235_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageQEBlindPixelAvailable",3049,G__CalibCint_235_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageQECombinedAvailable",2847,G__CalibCint_235_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageQEFFactorAvailable",2723,G__CalibCint_235_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAverageQEPINDiodeAvailable",2762,G__CalibCint_235_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBlindPixelMethodValid",2408,G__CalibCint_235_0_70, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCombinedMethodValid",2206,G__CalibCint_235_0_71, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFFactorMethodValid",2082,G__CalibCint_235_0_72, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPINDiodeMethodValid",2121,G__CalibCint_235_0_73, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 10 - b i 'MCalibrationCam::PulserColor_t' - 10 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEBlindPixel",1453,G__CalibCint_235_0_74, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEBlindPixelVar",1750,G__CalibCint_235_0_75, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQECombined",1251,G__CalibCint_235_0_76, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQECombinedVar",1548,G__CalibCint_235_0_77, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEFFactor",1127,G__CalibCint_235_0_78, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEFFactorVar",1424,G__CalibCint_235_0_79, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEPINDiode",1166,G__CalibCint_235_0_80, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEPINDiodeVar",1463,G__CalibCint_235_0_81, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - f i 'MCalibrationCam::PulserColor_t' - 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateBlindPixelMethod",2223,G__CalibCint_235_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - plex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateCombinedMethod",2021,G__CalibCint_235_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateFFactorMethod",1897,G__CalibCint_235_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - plex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdatePINDiodeMethod",1936,G__CalibCint_235_0_85, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_235_0_86, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationQEPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_235_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQEPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_235_0_88, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationQEPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_235_0_89, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationQEPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_235_0_93, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_235_0_94, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQEPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_235_0_95, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQEPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_235_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationQEPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_235_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationQEPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationQEPix", 1786, G__CalibCint_235_0_98, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationTestCam(void) {
   /* MCalibrationTestCam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam));
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddArea",642,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddSector",889,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"h - 'UInt_t' 10 - a h - 'UInt_t' 10 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationTestCam",1894,G__CalibCint_238_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCam), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumUninterpolated",2078,G__CalibCint_238_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUninterplatedInMaxCluster",3182,G__CalibCint_238_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitAverageAreas",1595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumUninterpolated",2090,G__CalibCint_238_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 10 - i i - 'Int_t' 10 - aidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumUninterpolatedInMaxCluster",3305,G__CalibCint_238_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__CalibCint_238_0_14, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationTestCam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_238_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_238_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationTestCam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_238_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationTestCam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_238_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_238_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_238_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestCam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_238_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_238_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestCam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationTestCam", 2020, G__CalibCint_238_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationTestCalc(void) {
   /* MCalibrationTestCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc));
   G__memfunc_setup("GetOutputFile",1329,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeNotInterpolated",2382,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalizeCalibratedPhotons",2568,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMaxNumBadPixelsCluster",2599,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoopNeighbours",1456,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'TArrayI' - 11 - arr u 'TArrayI' - 1 - known "
"i - 'Int_t' 1 - clustersize i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrationTestCalc",1992,G__CalibCint_239_0_8, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputFile",1341,G__CalibCint_239_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"TestCalibStat.txt\"' file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputPath",1354,G__CalibCint_239_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\".\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPhotErrLimit",1519,G__CalibCint_239_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgPhotErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_239_0_12, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationTestCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_239_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_239_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationTestCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_239_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationTestCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_239_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_239_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_239_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_239_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_239_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestCalc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationTestCalc", 2118, G__CalibCint_239_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationTestPix(void) {
   /* MCalibrationTestPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix));
   G__memfunc_setup("MCalibrationTestPix",1926,G__CalibCint_240_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationTestPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumPhotons",1339,G__CalibCint_240_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsErr",1636,G__CalibCint_240_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsPerArea",2011,G__CalibCint_240_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsPerAreaErr",2308,G__CalibCint_240_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixId",766,G__CalibCint_240_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExcluded",1002,G__CalibCint_240_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPixId",778,G__CalibCint_240_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExcluded",1114,G__CalibCint_240_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotons",1351,G__CalibCint_240_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsErr",1648,G__CalibCint_240_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsPerArea",2023,G__CalibCint_240_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumPhotonsPerAreaErr",2320,G__CalibCint_240_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_240_0_15, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationTestPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_240_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_240_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationTestPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_240_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationTestPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_240_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_240_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_240_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_240_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationTestPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_240_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationTestPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationTestPix", 2052, G__CalibCint_240_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationChargePINDiode(void) {
   /* MCalibrationChargePINDiode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode));
   G__memfunc_setup("GetPINDiodeQEGreenRelVar",2239,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPINDiodeQEBlueRelVar",2134,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPINDiodeQEUVRelVar",1913,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPINDiodeQECT1RelVar",1942,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSolidAngleRatioRelVar",2381,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationChargePINDiode",2507,G__CalibCint_242_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePINDiode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcFluxOutsidePlexiglass",2571,G__CalibCint_242_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeMean",1350,G__CalibCint_242_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeRms",1271,G__CalibCint_242_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColor",799,G__CalibCint_242_0_11, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxOutsidePlexiglass",2488,G__CalibCint_242_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxOutsidePlexiglassErr",2785,G__CalibCint_242_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxOutsidePlexiglassRelVar",3076,G__CalibCint_242_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotons",1339,G__CalibCint_242_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsErr",1636,G__CalibCint_242_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPhotonsRelVar",1927,G__CalibCint_242_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPed",569,G__CalibCint_242_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedRms",875,G__CalibCint_242_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsChargeFitValid",1561,G__CalibCint_242_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTimeFitValid",1374,G__CalibCint_242_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOscillating",1333,G__CalibCint_242_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFluxOutsidePlexiglassAvailable",3285,G__CalibCint_242_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsTimeMean",1362,G__CalibCint_242_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsTimeRms",1283,G__CalibCint_242_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeToPhotons",1828,G__CalibCint_242_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgChargeToPhotons' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeToPhotonsErr",2125,G__CalibCint_242_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgChargeToPhotonsErr' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColor",811,G__CalibCint_242_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__CalibCint_242_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - ped f - 'Float_t' 0 - pedrms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsChargeMean",1577,G__CalibCint_242_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsChargeMeanErr",1874,G__CalibCint_242_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsChargeSigma",1689,G__CalibCint_242_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRmsChargeSigmaErr",1986,G__CalibCint_242_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOscillating",1445,G__CalibCint_242_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeFitValid",1673,G__CalibCint_242_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeFitValid",1486,G__CalibCint_242_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFluxOutsidePlexiglassAvailable",3397,G__CalibCint_242_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_242_0_38, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationChargePINDiode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_242_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePINDiode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_242_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationChargePINDiode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_242_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationChargePINDiode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_242_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_242_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePINDiode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_242_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargePINDiode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_242_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePINDiode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_242_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargePINDiode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationChargePINDiode", 2633, G__CalibCint_242_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationChargePix(void) {
   /* MCalibrationChargePix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix));
   G__memfunc_setup("GetElectronicPedRmsRelVar",2495,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConversionHiLoRelVar",2302,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFactorRelVar",1553,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationChargePix",2096,G__CalibCint_244_0_4, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationChargePix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFFactorMethodValid",2082,G__CalibCint_244_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestal",1118,G__CalibCint_244_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - ped f - 'Float_t' 10 - pedrms "
"f - 'Float_t' 10 - pederr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPed",581,G__CalibCint_244_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - ped f - 'Float_t' 10 - pederr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedRMS",823,G__CalibCint_244_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - pedrms f - 'Float_t' 10 - pedrmserr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsTimeMean",1362,G__CalibCint_244_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAbsTimeRms",1283,G__CalibCint_244_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversionHiLo",1726,G__CalibCint_244_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgConversionHiLo' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversionHiLoErr",2023,G__CalibCint_244_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgConversionHiLoErr' e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversionHiLoSigma",2223,G__CalibCint_244_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgConversionHiLoSigma' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConvFFactorRelErrLimit",2482,G__CalibCint_244_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgConvFFactorRelErrLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanConvFADC2Phe",1696,G__CalibCint_244_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanConvFADC2PheVar",1993,G__CalibCint_244_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanConvFADC2PheSystVar",2428,G__CalibCint_244_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMeanFFactorFADC2Phot",2093,G__CalibCint_244_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSaturated",1545,G__CalibCint_244_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheFFactorMethod",1871,G__CalibCint_244_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheFFactorMethodVar",2168,G__CalibCint_244_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheFFactorMethodSystVar",2603,G__CalibCint_244_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPheFFactorMethodLimit",2382,G__CalibCint_244_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 'fgPheFFactorMethodLimit' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeMean",1350,G__CalibCint_244_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsTimeRms",1271,G__CalibCint_244_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConversionHiLo",1714,G__CalibCint_244_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConversionHiLoErr",2011,G__CalibCint_244_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConversionHiLoSigma",2211,G__CalibCint_244_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedMean",1611,G__CalibCint_244_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedMeanErr",1908,G__CalibCint_244_0_32, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedSigma",1723,G__CalibCint_244_0_33, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedSigmaErr",2020,G__CalibCint_244_0_34, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedRSigma",1805,G__CalibCint_244_0_35, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedRSigmaErr",2102,G__CalibCint_244_0_36, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConvertedRSigmaSquare",2430,G__CalibCint_244_0_37, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2Phe",1684,G__CalibCint_244_0_38, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2PheErr",1981,G__CalibCint_244_0_39, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2PheSystErr",2416,G__CalibCint_244_0_40, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2PheTotErr",2292,G__CalibCint_244_0_41, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFFactorFADC2Phe",1570,G__CalibCint_244_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2PheVar",1981,G__CalibCint_244_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanConvFADC2PheSystVar",2416,G__CalibCint_244_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanFFactorFADC2Phot",2081,G__CalibCint_244_0_45, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanFFactorFADC2PhotErr",2378,G__CalibCint_244_0_46, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanFFactorFADC2PhotVar",2378,G__CalibCint_244_0_47, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSaturated",1533,G__CalibCint_244_0_48, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPed",569,G__CalibCint_244_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedErr",866,G__CalibCint_244_0_50, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedRms",875,G__CalibCint_244_0_51, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedRmsErr",1172,G__CalibCint_244_0_52, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethod",1859,G__CalibCint_244_0_53, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodErr",2156,G__CalibCint_244_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodSystErr",2591,G__CalibCint_244_0_55, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodTotErr",2467,G__CalibCint_244_0_56, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodVar",2156,G__CalibCint_244_0_57, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodSystVar",2591,G__CalibCint_244_0_58, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodRelVar",2447,G__CalibCint_244_0_59, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPheFFactorMethodRelSystVar",2882,G__CalibCint_244_0_60, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRSigma",867,G__CalibCint_244_0_61, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRSigmaErr",1164,G__CalibCint_244_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRSigmaRelVar",1455,G__CalibCint_244_0_63, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRSigmaPerCharge",1748,G__CalibCint_244_0_64, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRSigmaPerChargeErr",2045,G__CalibCint_244_0_65, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFFactorMethodValid",1970,G__CalibCint_244_0_66, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcLoGainPedestal",1759,G__CalibCint_244_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - logainsamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcReducedSigma",1568,G__CalibCint_244_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 '0' extractorres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcFFactor",1048,G__CalibCint_244_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcConvFFactor",1454,G__CalibCint_244_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMeanFFactor",1433,G__CalibCint_244_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - nphotons f - 'Float_t' 10 - nphotonsrelvar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_244_0_72, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationChargePix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_244_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_244_0_74, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationChargePix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_244_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationChargePix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_244_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_244_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_244_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargePix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_244_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationChargePix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_244_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationChargePix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationChargePix", 2222, G__CalibCint_244_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationBlindPix(void) {
   /* MCalibrationBlindPix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix));
   G__memfunc_setup("MCalibrationBlindPix",1999,G__CalibCint_252_0_1, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindPix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcFluxInsidePlexiglass",2442,G__CalibCint_252_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAreaRelVar",1253,G__CalibCint_252_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAtt",585,G__CalibCint_252_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAttRelVar",1173,G__CalibCint_252_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQE",438,G__CalibCint_252_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQERelVar",1026,G__CalibCint_252_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollEff",955,G__CalibCint_252_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollEffRelVar",1543,G__CalibCint_252_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColor",799,G__CalibCint_252_0_12, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambda",865,G__CalibCint_252_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaErr",1162,G__CalibCint_252_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaRelVar",1453,G__CalibCint_252_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaCheck",1343,G__CalibCint_252_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambdaCheckErr",1640,G__CalibCint_252_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglass",2359,G__CalibCint_252_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglassErr",2656,G__CalibCint_252_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxInsidePlexiglassRelVar",2947,G__CalibCint_252_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu0",530,G__CalibCint_252_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu0Err",827,G__CalibCint_252_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu1",531,G__CalibCint_252_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu1Err",828,G__CalibCint_252_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma0",833,G__CalibCint_252_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma0Err",1130,G__CalibCint_252_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1",834,G__CalibCint_252_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSigma1Err",1131,G__CalibCint_252_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOscillating",1333,G__CalibCint_252_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsChargeFitValid",1561,G__CalibCint_252_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPedestalFitOK",1451,G__CalibCint_252_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSinglePheFitOK",1528,G__CalibCint_252_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFluxInsidePlexiglassAvailable",3156,G__CalibCint_252_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetArea",677,G__CalibCint_252_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAreaErr",974,G__CalibCint_252_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAtt",597,G__CalibCint_252_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAttErr",894,G__CalibCint_252_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQE",450,G__CalibCint_252_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetQEErr",747,G__CalibCint_252_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollEff",967,G__CalibCint_252_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollEffErr",1264,G__CalibCint_252_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetColor",811,G__CalibCint_252_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrationCam::PulserColor_t' - 10 - color", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambda",877,G__CalibCint_252_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambdaVar",1174,G__CalibCint_252_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambdaCheck",1355,G__CalibCint_252_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLambdaCheckErr",1652,G__CalibCint_252_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMu0",542,G__CalibCint_252_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMu0Err",839,G__CalibCint_252_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMu1",543,G__CalibCint_252_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMu1Err",840,G__CalibCint_252_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma0",845,G__CalibCint_252_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma0Err",1142,G__CalibCint_252_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma1",846,G__CalibCint_252_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSigma1Err",1143,G__CalibCint_252_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOscillating",1445,G__CalibCint_252_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChargeFitValid",1673,G__CalibCint_252_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPedestalFitOK",1563,G__CalibCint_252_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSinglePheFitOK",1640,G__CalibCint_252_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFluxInsidePlexiglassAvailable",3268,G__CalibCint_252_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 10 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_252_0_61, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationBlindPix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_252_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindPix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_252_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationBlindPix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_252_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationBlindPix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_252_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_252_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindPix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_252_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindPix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_252_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindPix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_252_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindPix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationBlindPix", 2125, G__CalibCint_252_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationBlindCamOneOldStyle(void) {
   /* MCalibrationBlindCamOneOldStyle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle));
   G__memfunc_setup("CreatePixs",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAreas",1088,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAtts",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateQEs",861,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCollEffs",1378,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationBlindCamOneOldStyle",3073,G__CalibCint_254_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_254_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationBlindCamOneOldStyle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_254_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamOneOldStyle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_254_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationBlindCamOneOldStyle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_254_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationBlindCamOneOldStyle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_254_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_254_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamOneOldStyle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_254_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamOneOldStyle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_254_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamOneOldStyle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_254_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamOneOldStyle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationBlindCamOneOldStyle", 3199, G__CalibCint_254_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationBlindCamTwoNewStyle(void) {
   /* MCalibrationBlindCamTwoNewStyle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle));
   G__memfunc_setup("CreatePixs",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAreas",1088,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAtts",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateQEs",861,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCollEffs",1378,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationBlindCamTwoNewStyle",3108,G__CalibCint_255_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_255_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationBlindCamTwoNewStyle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_255_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamTwoNewStyle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_255_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationBlindCamTwoNewStyle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_255_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationBlindCamTwoNewStyle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_255_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_255_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamTwoNewStyle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_255_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamTwoNewStyle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_255_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamTwoNewStyle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_255_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamTwoNewStyle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationBlindCamTwoNewStyle", 3234, G__CalibCint_255_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrationBlindCamThreeNewStyle(void) {
   /* MCalibrationBlindCamThreeNewStyle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle));
   G__memfunc_setup("CreatePixs",1016,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAreas",1088,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateAtts",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateQEs",861,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateCollEffs",1378,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCalibrationBlindCamThreeNewStyle",3298,G__CalibCint_256_0_6, 105, G__get_linked_tagnum(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle), -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__CalibCint_256_0_7, 85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrationBlindCamThreeNewStyle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__CalibCint_256_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamThreeNewStyle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__CalibCint_256_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrationBlindCamThreeNewStyle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__CalibCint_256_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrationBlindCamThreeNewStyle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__CalibCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__CalibCint_256_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__CalibCint_256_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamThreeNewStyle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__CalibCint_256_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamThreeNewStyle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__CalibCint_256_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrationBlindCamThreeNewStyle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__CalibCint_256_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrationBlindCamThreeNewStyle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrationBlindCamThreeNewStyle", 3424, G__CalibCint_256_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncCalibCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalCalibCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcCalibCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__CalibCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__CalibCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TOrdCollection = { "TOrdCollection" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPix = { "MCalibrationPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MBadPixelsPix = { "MBadPixelsPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MBadPixelsCam = { "MBadPixelsCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationCam = { "MCalibrationCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationCamcLcLPulserColor_t = { "MCalibrationCam::PulserColor_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPattern = { "MCalibrationPattern" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibColorSet = { "MCalibColorSet" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCalc = { "MCalibrationChargeCalc" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCam = { "MCalibrationChargeCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationRelTimeCalc = { "MCalibrationRelTimeCalc" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationRelTimeCam = { "MCalibrationRelTimeCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindCam = { "MCalibrationBlindCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationQECam = { "MCalibrationQECam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibColorSteer = { "MCalibColorSteer" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateData = { "MCalibrateData" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibCalcFromPast = { "MCalibCalcFromPast" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MPedestalCam = { "MPedestalCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibConstCam = { "MCalibConstCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MExtractedSignalCam = { "MExtractedSignalCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t = { "MCalibrateData::CalibrationMode_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateDatacLcLPedestalType_t = { "MCalibrateData::PedestalType_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateDatacLcLSignalType_t = { "MCalibrateData::SignalType_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MArrayD = { "MArrayD" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateFact = { "MCalibrateFact" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibConstPix = { "MCalibConstPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPatternDecode = { "MCalibrationPatternDecode" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPatterncLcLCLColor_t = { "MCalibrationPattern::CLColor_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t = { "MCalibrationPatternDecode::PulserColorCode_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MArrivalTimeCam = { "MArrivalTimeCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrateRelTimes = { "MCalibrateRelTimes" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPixcLcLdA = { "MCalibrationPix::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationPulseTimeCam = { "MCalibrationPulseTimeCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationRelTimePix = { "MCalibrationRelTimePix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MBadPixelsPixcLcLUncalibratedType_t = { "MBadPixelsPix::UncalibratedType_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t = { "MCalibrationRelTimeCalc::Check_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationRelTimeCalccLcLdA = { "MCalibrationRelTimeCalc::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationQECamcLcLdA = { "MCalibrationQECam::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationQECamMagic = { "MCalibrationQECamMagic" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationQEPix = { "MCalibrationQEPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationQEPixcLcLdA = { "MCalibrationQEPix::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MHCalibrationTestCam = { "MHCalibrationTestCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationTestCam = { "MCalibrationTestCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationTestCalc = { "MCalibrationTestCalc" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationTestPix = { "MCalibrationTestPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MPedestalPix = { "MPedestalPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargePINDiode = { "MCalibrationChargePINDiode" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MHCalibrationChargeBlindCam = { "MHCalibrationChargeBlindCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargePix = { "MCalibrationChargePix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MHCalibrationChargeCam = { "MHCalibrationChargeCam" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MExtractor = { "MExtractor" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t = { "MCalibrationChargeCalc::Check_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t = { "MCalibrationChargeCalc::FitResult_t" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCalccLcLdA = { "MCalibrationChargeCalc::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargeCamcLcLdA = { "MCalibrationChargeCam::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargePixcLcLdA = { "MCalibrationChargePix::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindPix = { "MCalibrationBlindPix" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindPixcLcLdA = { "MCalibrationBlindPix::$" , 101 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindCamOneOldStyle = { "MCalibrationBlindCamOneOldStyle" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindCamTwoNewStyle = { "MCalibrationBlindCamTwoNewStyle" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationBlindCamThreeNewStyle = { "MCalibrationBlindCamThreeNewStyle" , 99 , -1 };
G__linked_taginfo G__CalibCintLN_MCalibrationChargePINDiodecLcLdA = { "MCalibrationChargePINDiode::$" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableCalibCint() {
  G__CalibCintLN_TClass.tagnum = -1 ;
  G__CalibCintLN_TBuffer.tagnum = -1 ;
  G__CalibCintLN_TMemberInspector.tagnum = -1 ;
  G__CalibCintLN_TObject.tagnum = -1 ;
  G__CalibCintLN_TString.tagnum = -1 ;
  G__CalibCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__CalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibCintLN_TList.tagnum = -1 ;
  G__CalibCintLN_TClonesArray.tagnum = -1 ;
  G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__CalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__CalibCintLN_TEnv.tagnum = -1 ;
  G__CalibCintLN_MParContainer.tagnum = -1 ;
  G__CalibCintLN_MInputStreamID.tagnum = -1 ;
  G__CalibCintLN_MParList.tagnum = -1 ;
  G__CalibCintLN_MTask.tagnum = -1 ;
  G__CalibCintLN_MGeomCam.tagnum = -1 ;
  G__CalibCintLN_MCamEvent.tagnum = -1 ;
  G__CalibCintLN_TArrayI.tagnum = -1 ;
  G__CalibCintLN_TArrayF.tagnum = -1 ;
  G__CalibCintLN_TOrdCollection.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPix.tagnum = -1 ;
  G__CalibCintLN_MBadPixelsPix.tagnum = -1 ;
  G__CalibCintLN_MBadPixelsCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationCamcLcLPulserColor_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPattern.tagnum = -1 ;
  G__CalibCintLN_MRawEvtHeader.tagnum = -1 ;
  G__CalibCintLN_MCalibColorSet.tagnum = -1 ;
  G__CalibCintLN_MRawRunHeader.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCalc.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationRelTimeCalc.tagnum = -1 ;
  G__CalibCintLN_MCalibrationRelTimeCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationQECam.tagnum = -1 ;
  G__CalibCintLN_MCalibColorSteer.tagnum = -1 ;
  G__CalibCintLN_MCalibrateData.tagnum = -1 ;
  G__CalibCintLN_MCalibCalcFromPast.tagnum = -1 ;
  G__CalibCintLN_MArrayF.tagnum = -1 ;
  G__CalibCintLN_MPedestalCam.tagnum = -1 ;
  G__CalibCintLN_MSignalCam.tagnum = -1 ;
  G__CalibCintLN_MCalibConstCam.tagnum = -1 ;
  G__CalibCintLN_MExtractedSignalCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrateDatacLcLPedestalType_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrateDatacLcLSignalType_t.tagnum = -1 ;
  G__CalibCintLN_MArrayD.tagnum = -1 ;
  G__CalibCintLN_MCalibrateFact.tagnum = -1 ;
  G__CalibCintLN_MCalibConstPix.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPatternDecode.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPatterncLcLCLColor_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t.tagnum = -1 ;
  G__CalibCintLN_MArrivalTimeCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrateRelTimes.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPixcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationPulseTimeCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationRelTimePix.tagnum = -1 ;
  G__CalibCintLN_MBadPixelsPixcLcLUncalibratedType_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationRelTimeCalccLcLdA.tagnum = -1 ;
  G__CalibCintLN_TArrayC.tagnum = -1 ;
  G__CalibCintLN_TGraphErrors.tagnum = -1 ;
  G__CalibCintLN_TH2D.tagnum = -1 ;
  G__CalibCintLN_MCalibrationQECamcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationQECamMagic.tagnum = -1 ;
  G__CalibCintLN_MCalibrationQEPix.tagnum = -1 ;
  G__CalibCintLN_MCalibrationQEPixcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MHCalibrationTestCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationTestCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationTestCalc.tagnum = -1 ;
  G__CalibCintLN_MCalibrationTestPix.tagnum = -1 ;
  G__CalibCintLN_MPedestalPix.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargePINDiode.tagnum = -1 ;
  G__CalibCintLN_MHCalibrationChargeBlindCam.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargePix.tagnum = -1 ;
  G__CalibCintLN_MHCalibrationChargeCam.tagnum = -1 ;
  G__CalibCintLN_MExtractor.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCalccLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargeCamcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargePixcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindPix.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindPixcLcLdA.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindCamOneOldStyle.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindCamTwoNewStyle.tagnum = -1 ;
  G__CalibCintLN_MCalibrationBlindCamThreeNewStyle.tagnum = -1 ;
  G__CalibCintLN_MCalibrationChargePINDiodecLcLdA.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableCalibCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TString);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TList);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TOrdCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPix),sizeof(MCalibrationPix),-1,324864,"Base Container for Calibration Results Pixel",G__setup_memvarMCalibrationPix,G__setup_memfuncMCalibrationPix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MBadPixelsPix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MBadPixelsCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationCam),sizeof(MCalibrationCam),-1,324864,"Base class Container for Calibration Results Camera",G__setup_memvarMCalibrationCam,G__setup_memfuncMCalibrationCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationCamcLcLPulserColor_t);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPattern),sizeof(MCalibrationPattern),-1,323840,"Container storing the decoded calibration pattern",G__setup_memvarMCalibrationPattern,G__setup_memfuncMCalibrationPattern);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MRawEvtHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibColorSet),sizeof(MCalibColorSet),-1,323840,"Task to workaround missing colors",G__setup_memvarMCalibColorSet,G__setup_memfuncMCalibColorSet);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MRawRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCalc),sizeof(MCalibrationChargeCalc),-1,323840,"Task calculating Calibration Containers and Quantum Efficiencies",G__setup_memvarMCalibrationChargeCalc,G__setup_memfuncMCalibrationChargeCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCam),sizeof(MCalibrationChargeCam),-1,323840,"Container Charge Calibration Results Camera",G__setup_memvarMCalibrationChargeCam,G__setup_memfuncMCalibrationChargeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationRelTimeCalc),sizeof(MCalibrationRelTimeCalc),-1,323840,"Task finalizing the relative time Calibration",G__setup_memvarMCalibrationRelTimeCalc,G__setup_memfuncMCalibrationRelTimeCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationRelTimeCam),sizeof(MCalibrationRelTimeCam),-1,323840,"Container Rel. Arrival Time Calibration Results Camera",G__setup_memvarMCalibrationRelTimeCam,G__setup_memfuncMCalibrationRelTimeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindCam),sizeof(MCalibrationBlindCam),-1,323840,"Container Blind Pixels Calibration Results Camera",G__setup_memvarMCalibrationBlindCam,G__setup_memfuncMCalibrationBlindCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationQECam),sizeof(MCalibrationQECam),-1,323840,"Container Quantum Efficieny Calibration Results Camera",G__setup_memvarMCalibrationQECam,G__setup_memfuncMCalibrationQECam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibColorSteer),sizeof(MCalibColorSteer),-1,323840,"Task to steer the processing of multiple calibration colours",G__setup_memvarMCalibColorSteer,G__setup_memfuncMCalibColorSteer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateData),sizeof(MCalibrateData),-1,323840,"Task to calibrate FADC counts into photons or photo-electrons",G__setup_memvarMCalibrateData,G__setup_memfuncMCalibrateData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibCalcFromPast),sizeof(MCalibCalcFromPast),-1,323840,"Task to steer the processing of interlace calibration events",G__setup_memvarMCalibCalcFromPast,G__setup_memfuncMCalibCalcFromPast);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MPedestalCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MSignalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibConstCam),sizeof(MCalibConstCam),-1,324864,"Temporary Storage for calibration constants",G__setup_memvarMCalibConstCam,G__setup_memfuncMCalibConstCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MExtractedSignalCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateDatacLcLCalibrationMode_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateDatacLcLPedestalType_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateDatacLcLSignalType_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MArrayD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateFact),sizeof(MCalibrateFact),-1,324864,(char*)NULL,G__setup_memvarMCalibrateFact,G__setup_memfuncMCalibrateFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibConstPix),sizeof(MCalibConstPix),-1,323840,"Temporay Storage Calibraion Constant of one pixel",G__setup_memvarMCalibConstPix,G__setup_memfuncMCalibConstPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPatternDecode),sizeof(MCalibrationPatternDecode),-1,323840,"Task to decode the Trigger Pattern",G__setup_memvarMCalibrationPatternDecode,G__setup_memfuncMCalibrationPatternDecode);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPatterncLcLCLColor_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPatternDecodecLcLPulserColorCode_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MArrivalTimeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrateRelTimes),sizeof(MCalibrateRelTimes),-1,323840,"Task to calculate calibrated relative arrival times",G__setup_memvarMCalibrateRelTimes,G__setup_memfuncMCalibrateRelTimes);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPixcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationPulseTimeCam),sizeof(MCalibrationPulseTimeCam),-1,323840,"Container Pulse Time Results Camera",G__setup_memvarMCalibrationPulseTimeCam,G__setup_memfuncMCalibrationPulseTimeCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationRelTimePix),sizeof(MCalibrationRelTimePix),-1,324864,"Container Rel. Arrival Time Calibration Results Pixel",G__setup_memvarMCalibrationRelTimePix,G__setup_memfuncMCalibrationRelTimePix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MBadPixelsPixcLcLUncalibratedType_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationRelTimeCalccLcLCheck_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationRelTimeCalccLcLdA);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TArrayC);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_TH2D);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationQECamcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationQECamMagic),sizeof(MCalibrationQECamMagic),-1,323840,"Container Quantum Efficieny for MAGIC",G__setup_memvarMCalibrationQECamMagic,G__setup_memfuncMCalibrationQECamMagic);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationQEPix),sizeof(MCalibrationQEPix),-1,324864,"Container Quantum Efficieny Calibration Results Pixel",G__setup_memvarMCalibrationQEPix,G__setup_memfuncMCalibrationQEPix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationQEPixcLcLdA);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MHCalibrationTestCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationTestCam),sizeof(MCalibrationTestCam),-1,323840,"Container Test Calibration Results Camera",G__setup_memvarMCalibrationTestCam,G__setup_memfuncMCalibrationTestCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationTestCalc),sizeof(MCalibrationTestCalc),-1,323840,"Task retrieving the results of MHCalibrationTestCam",G__setup_memvarMCalibrationTestCalc,G__setup_memfuncMCalibrationTestCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationTestPix),sizeof(MCalibrationTestPix),-1,324864,"Container for Calibration Test Results Pixel",G__setup_memvarMCalibrationTestPix,G__setup_memfuncMCalibrationTestPix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MPedestalPix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargePINDiode),sizeof(MCalibrationChargePINDiode),-1,324864,"Container Charge Calibration Results PIN Diode",G__setup_memvarMCalibrationChargePINDiode,G__setup_memfuncMCalibrationChargePINDiode);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MHCalibrationChargeBlindCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargePix),sizeof(MCalibrationChargePix),-1,323840,"Container Charge Calibration Results Pixel",G__setup_memvarMCalibrationChargePix,G__setup_memfuncMCalibrationChargePix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MHCalibrationChargeCam);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MExtractor);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCalccLcLCheck_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCalccLcLFitResult_t);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCalccLcLdA);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargeCamcLcLdA);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargePixcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindPix),sizeof(MCalibrationBlindPix),-1,323840,"Container Calibration Results Blind Pixel",G__setup_memvarMCalibrationBlindPix,G__setup_memfuncMCalibrationBlindPix);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindPixcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindCamOneOldStyle),sizeof(MCalibrationBlindCamOneOldStyle),-1,323840,"Container Blind Pixel Calibration Results - until run 31693",G__setup_memvarMCalibrationBlindCamOneOldStyle,G__setup_memfuncMCalibrationBlindCamOneOldStyle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindCamTwoNewStyle),sizeof(MCalibrationBlindCamTwoNewStyle),-1,323840,"Container Blind Pixel Calibration Results - after run 31693",G__setup_memvarMCalibrationBlindCamTwoNewStyle,G__setup_memfuncMCalibrationBlindCamTwoNewStyle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationBlindCamThreeNewStyle),sizeof(MCalibrationBlindCamThreeNewStyle),-1,323840,"Container Blind Pixel Calibration Results - after run 43307",G__setup_memvarMCalibrationBlindCamThreeNewStyle,G__setup_memfuncMCalibrationBlindCamThreeNewStyle);
   G__get_linked_tagnum_fwd(&G__CalibCintLN_MCalibrationChargePINDiodecLcLdA);
}
extern "C" void G__cpp_setupCalibCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupCalibCint()");
  G__set_cpp_environmentCalibCint();
  G__cpp_setup_tagtableCalibCint();

  G__cpp_setup_inheritanceCalibCint();

  G__cpp_setup_typetableCalibCint();

  G__cpp_setup_memvarCalibCint();

  G__cpp_setup_memfuncCalibCint();
  G__cpp_setup_globalCalibCint();
  G__cpp_setup_funcCalibCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncCalibCint();
  return;
}
class G__cpp_setup_initCalibCint {
  public:
    G__cpp_setup_initCalibCint() { G__add_setup_func("CalibCint",(G__incsetup)(&G__cpp_setupCalibCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initCalibCint() { G__remove_setup_func("CalibCint"); }
};
G__cpp_setup_initCalibCint G__cpp_setup_initializerCalibCint;

