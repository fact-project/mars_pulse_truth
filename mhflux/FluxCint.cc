//
// File generated by rootcint at Mon Nov 28 11:06:08 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME FluxCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FluxCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MAlphaFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MAlphaFitter(void *p = 0);
   static void *newArray_MAlphaFitter(Long_t size, void *p);
   static void delete_MAlphaFitter(void *p);
   static void deleteArray_MAlphaFitter(void *p);
   static void destruct_MAlphaFitter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MAlphaFitter*)
   {
      ::MAlphaFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MAlphaFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MAlphaFitter", ::MAlphaFitter::Class_Version(), "./MAlphaFitter.h", 17,
                  typeid(::MAlphaFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MAlphaFitter::Dictionary, isa_proxy, 4,
                  sizeof(::MAlphaFitter) );
      instance.SetNew(&new_MAlphaFitter);
      instance.SetNewArray(&newArray_MAlphaFitter);
      instance.SetDelete(&delete_MAlphaFitter);
      instance.SetDeleteArray(&deleteArray_MAlphaFitter);
      instance.SetDestructor(&destruct_MAlphaFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MAlphaFitter*)
   {
      return GenerateInitInstanceLocal((::MAlphaFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MAlphaFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHAlpha_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHAlpha(void *p = 0);
   static void *newArray_MHAlpha(Long_t size, void *p);
   static void delete_MHAlpha(void *p);
   static void deleteArray_MHAlpha(void *p);
   static void destruct_MHAlpha(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHAlpha*)
   {
      ::MHAlpha *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHAlpha >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHAlpha", ::MHAlpha::Class_Version(), "./MHAlpha.h", 28,
                  typeid(::MHAlpha), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHAlpha::Dictionary, isa_proxy, 4,
                  sizeof(::MHAlpha) );
      instance.SetNew(&new_MHAlpha);
      instance.SetNewArray(&newArray_MHAlpha);
      instance.SetDelete(&delete_MHAlpha);
      instance.SetDeleteArray(&deleteArray_MHAlpha);
      instance.SetDestructor(&destruct_MHAlpha);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHAlpha*)
   {
      return GenerateInitInstanceLocal((::MHAlpha*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHAlpha*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHThetaSq_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHThetaSq(void *p = 0);
   static void *newArray_MHThetaSq(Long_t size, void *p);
   static void delete_MHThetaSq(void *p);
   static void deleteArray_MHThetaSq(void *p);
   static void destruct_MHThetaSq(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHThetaSq*)
   {
      ::MHThetaSq *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHThetaSq >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHThetaSq", ::MHThetaSq::Class_Version(), "./MHThetaSq.h", 11,
                  typeid(::MHThetaSq), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHThetaSq::Dictionary, isa_proxy, 4,
                  sizeof(::MHThetaSq) );
      instance.SetNew(&new_MHThetaSq);
      instance.SetNewArray(&newArray_MHThetaSq);
      instance.SetDelete(&delete_MHThetaSq);
      instance.SetDeleteArray(&deleteArray_MHThetaSq);
      instance.SetDestructor(&destruct_MHThetaSq);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHThetaSq*)
   {
      return GenerateInitInstanceLocal((::MHThetaSq*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHThetaSq*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHThetaSqN_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHThetaSqN(void *p = 0);
   static void *newArray_MHThetaSqN(Long_t size, void *p);
   static void delete_MHThetaSqN(void *p);
   static void deleteArray_MHThetaSqN(void *p);
   static void destruct_MHThetaSqN(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHThetaSqN*)
   {
      ::MHThetaSqN *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHThetaSqN >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHThetaSqN", ::MHThetaSqN::Class_Version(), "./MHThetaSqN.h", 15,
                  typeid(::MHThetaSqN), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHThetaSqN::Dictionary, isa_proxy, 4,
                  sizeof(::MHThetaSqN) );
      instance.SetNew(&new_MHThetaSqN);
      instance.SetNewArray(&newArray_MHThetaSqN);
      instance.SetDelete(&delete_MHThetaSqN);
      instance.SetDeleteArray(&deleteArray_MHThetaSqN);
      instance.SetDestructor(&destruct_MHThetaSqN);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHThetaSqN*)
   {
      return GenerateInitInstanceLocal((::MHThetaSqN*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHThetaSqN*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHPhi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHPhi(void *p = 0);
   static void *newArray_MHPhi(Long_t size, void *p);
   static void delete_MHPhi(void *p);
   static void deleteArray_MHPhi(void *p);
   static void destruct_MHPhi(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHPhi*)
   {
      ::MHPhi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHPhi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHPhi", ::MHPhi::Class_Version(), "./MHPhi.h", 16,
                  typeid(::MHPhi), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHPhi::Dictionary, isa_proxy, 4,
                  sizeof(::MHPhi) );
      instance.SetNew(&new_MHPhi);
      instance.SetNewArray(&newArray_MHPhi);
      instance.SetDelete(&delete_MHPhi);
      instance.SetDeleteArray(&deleteArray_MHPhi);
      instance.SetDestructor(&destruct_MHPhi);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHPhi*)
   {
      return GenerateInitInstanceLocal((::MHPhi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHPhi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHFalseSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHFalseSource(void *p = 0);
   static void *newArray_MHFalseSource(Long_t size, void *p);
   static void delete_MHFalseSource(void *p);
   static void deleteArray_MHFalseSource(void *p);
   static void destruct_MHFalseSource(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHFalseSource*)
   {
      ::MHFalseSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHFalseSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHFalseSource", ::MHFalseSource::Class_Version(), "./MHFalseSource.h", 21,
                  typeid(::MHFalseSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHFalseSource::Dictionary, isa_proxy, 4,
                  sizeof(::MHFalseSource) );
      instance.SetNew(&new_MHFalseSource);
      instance.SetNewArray(&newArray_MHFalseSource);
      instance.SetDelete(&delete_MHFalseSource);
      instance.SetDeleteArray(&deleteArray_MHFalseSource);
      instance.SetDestructor(&destruct_MHFalseSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHFalseSource*)
   {
      return GenerateInitInstanceLocal((::MHFalseSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHFalseSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHDisp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHDisp(void *p = 0);
   static void *newArray_MHDisp(Long_t size, void *p);
   static void delete_MHDisp(void *p);
   static void deleteArray_MHDisp(void *p);
   static void destruct_MHDisp(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHDisp*)
   {
      ::MHDisp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHDisp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHDisp", ::MHDisp::Class_Version(), "./MHDisp.h", 22,
                  typeid(::MHDisp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHDisp::Dictionary, isa_proxy, 4,
                  sizeof(::MHDisp) );
      instance.SetNew(&new_MHDisp);
      instance.SetNewArray(&newArray_MHDisp);
      instance.SetDelete(&delete_MHDisp);
      instance.SetDeleteArray(&deleteArray_MHDisp);
      instance.SetDestructor(&destruct_MHDisp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHDisp*)
   {
      return GenerateInitInstanceLocal((::MHDisp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHDisp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHEnergyEst_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHEnergyEst(void *p = 0);
   static void *newArray_MHEnergyEst(Long_t size, void *p);
   static void delete_MHEnergyEst(void *p);
   static void deleteArray_MHEnergyEst(void *p);
   static void destruct_MHEnergyEst(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHEnergyEst*)
   {
      ::MHEnergyEst *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHEnergyEst >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHEnergyEst", ::MHEnergyEst::Class_Version(), "./MHEnergyEst.h", 22,
                  typeid(::MHEnergyEst), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHEnergyEst::Dictionary, isa_proxy, 4,
                  sizeof(::MHEnergyEst) );
      instance.SetNew(&new_MHEnergyEst);
      instance.SetNewArray(&newArray_MHEnergyEst);
      instance.SetDelete(&delete_MHEnergyEst);
      instance.SetDeleteArray(&deleteArray_MHEnergyEst);
      instance.SetDestructor(&destruct_MHEnergyEst);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHEnergyEst*)
   {
      return GenerateInitInstanceLocal((::MHEnergyEst*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHEnergyEst*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHEffectiveOnTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHEffectiveOnTime(void *p = 0);
   static void *newArray_MHEffectiveOnTime(Long_t size, void *p);
   static void delete_MHEffectiveOnTime(void *p);
   static void deleteArray_MHEffectiveOnTime(void *p);
   static void destruct_MHEffectiveOnTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHEffectiveOnTime*)
   {
      ::MHEffectiveOnTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHEffectiveOnTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHEffectiveOnTime", ::MHEffectiveOnTime::Class_Version(), "./MHEffectiveOnTime.h", 27,
                  typeid(::MHEffectiveOnTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHEffectiveOnTime::Dictionary, isa_proxy, 4,
                  sizeof(::MHEffectiveOnTime) );
      instance.SetNew(&new_MHEffectiveOnTime);
      instance.SetNewArray(&newArray_MHEffectiveOnTime);
      instance.SetDelete(&delete_MHEffectiveOnTime);
      instance.SetDeleteArray(&deleteArray_MHEffectiveOnTime);
      instance.SetDestructor(&destruct_MHEffectiveOnTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHEffectiveOnTime*)
   {
      return GenerateInitInstanceLocal((::MHEffectiveOnTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHEffectiveOnTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHCollectionArea_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHCollectionArea(void *p = 0);
   static void *newArray_MHCollectionArea(Long_t size, void *p);
   static void delete_MHCollectionArea(void *p);
   static void deleteArray_MHCollectionArea(void *p);
   static void destruct_MHCollectionArea(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHCollectionArea*)
   {
      ::MHCollectionArea *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHCollectionArea >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHCollectionArea", ::MHCollectionArea::Class_Version(), "./MHCollectionArea.h", 21,
                  typeid(::MHCollectionArea), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHCollectionArea::Dictionary, isa_proxy, 4,
                  sizeof(::MHCollectionArea) );
      instance.SetNew(&new_MHCollectionArea);
      instance.SetNewArray(&newArray_MHCollectionArea);
      instance.SetDelete(&delete_MHCollectionArea);
      instance.SetDeleteArray(&deleteArray_MHCollectionArea);
      instance.SetDestructor(&destruct_MHCollectionArea);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHCollectionArea*)
   {
      return GenerateInitInstanceLocal((::MHCollectionArea*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHCollectionArea*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHThreshold_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHThreshold(void *p = 0);
   static void *newArray_MHThreshold(Long_t size, void *p);
   static void delete_MHThreshold(void *p);
   static void deleteArray_MHThreshold(void *p);
   static void destruct_MHThreshold(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHThreshold*)
   {
      ::MHThreshold *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHThreshold >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHThreshold", ::MHThreshold::Class_Version(), "./MHThreshold.h", 15,
                  typeid(::MHThreshold), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHThreshold::Dictionary, isa_proxy, 4,
                  sizeof(::MHThreshold) );
      instance.SetNew(&new_MHThreshold);
      instance.SetNewArray(&newArray_MHThreshold);
      instance.SetDelete(&delete_MHThreshold);
      instance.SetDeleteArray(&deleteArray_MHThreshold);
      instance.SetDestructor(&destruct_MHThreshold);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHThreshold*)
   {
      return GenerateInitInstanceLocal((::MHThreshold*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHThreshold*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcSpectrumWeight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcSpectrumWeight(void *p = 0);
   static void *newArray_MMcSpectrumWeight(Long_t size, void *p);
   static void delete_MMcSpectrumWeight(void *p);
   static void deleteArray_MMcSpectrumWeight(void *p);
   static void destruct_MMcSpectrumWeight(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcSpectrumWeight*)
   {
      ::MMcSpectrumWeight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcSpectrumWeight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcSpectrumWeight", ::MMcSpectrumWeight::Class_Version(), "./MMcSpectrumWeight.h", 20,
                  typeid(::MMcSpectrumWeight), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcSpectrumWeight::Dictionary, isa_proxy, 4,
                  sizeof(::MMcSpectrumWeight) );
      instance.SetNew(&new_MMcSpectrumWeight);
      instance.SetNewArray(&newArray_MMcSpectrumWeight);
      instance.SetDelete(&delete_MMcSpectrumWeight);
      instance.SetDeleteArray(&deleteArray_MMcSpectrumWeight);
      instance.SetDestructor(&destruct_MMcSpectrumWeight);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcSpectrumWeight*)
   {
      return GenerateInitInstanceLocal((::MMcSpectrumWeight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcSpectrumWeight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MAlphaFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MAlphaFitter::Class_Name()
{
   return "MAlphaFitter";
}

//______________________________________________________________________________
const char *MAlphaFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MAlphaFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MAlphaFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MAlphaFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MAlphaFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MAlphaFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MAlphaFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MAlphaFitter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHAlpha::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHAlpha::Class_Name()
{
   return "MHAlpha";
}

//______________________________________________________________________________
const char *MHAlpha::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHAlpha*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHAlpha::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHAlpha*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHAlpha::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHAlpha*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHAlpha::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHAlpha*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHThetaSq::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHThetaSq::Class_Name()
{
   return "MHThetaSq";
}

//______________________________________________________________________________
const char *MHThetaSq::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSq*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHThetaSq::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSq*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHThetaSq::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSq*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHThetaSq::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSq*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHThetaSqN::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHThetaSqN::Class_Name()
{
   return "MHThetaSqN";
}

//______________________________________________________________________________
const char *MHThetaSqN::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSqN*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHThetaSqN::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSqN*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHThetaSqN::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSqN*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHThetaSqN::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThetaSqN*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHPhi::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHPhi::Class_Name()
{
   return "MHPhi";
}

//______________________________________________________________________________
const char *MHPhi::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPhi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHPhi::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPhi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHPhi::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPhi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHPhi::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPhi*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHFalseSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHFalseSource::Class_Name()
{
   return "MHFalseSource";
}

//______________________________________________________________________________
const char *MHFalseSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHFalseSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHFalseSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHFalseSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHFalseSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHFalseSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHFalseSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHFalseSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHDisp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHDisp::Class_Name()
{
   return "MHDisp";
}

//______________________________________________________________________________
const char *MHDisp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDisp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHDisp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDisp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHDisp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDisp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHDisp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDisp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHEnergyEst::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHEnergyEst::Class_Name()
{
   return "MHEnergyEst";
}

//______________________________________________________________________________
const char *MHEnergyEst::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHEnergyEst*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHEnergyEst::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHEnergyEst*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHEnergyEst::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHEnergyEst*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHEnergyEst::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHEnergyEst*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHEffectiveOnTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHEffectiveOnTime::Class_Name()
{
   return "MHEffectiveOnTime";
}

//______________________________________________________________________________
const char *MHEffectiveOnTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHEffectiveOnTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHEffectiveOnTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHEffectiveOnTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHEffectiveOnTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHEffectiveOnTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHEffectiveOnTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHEffectiveOnTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHCollectionArea::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHCollectionArea::Class_Name()
{
   return "MHCollectionArea";
}

//______________________________________________________________________________
const char *MHCollectionArea::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCollectionArea*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHCollectionArea::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHCollectionArea*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHCollectionArea::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCollectionArea*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHCollectionArea::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHCollectionArea*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHThreshold::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHThreshold::Class_Name()
{
   return "MHThreshold";
}

//______________________________________________________________________________
const char *MHThreshold::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThreshold*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHThreshold::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHThreshold*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHThreshold::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThreshold*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHThreshold::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHThreshold*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcSpectrumWeight::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcSpectrumWeight::Class_Name()
{
   return "MMcSpectrumWeight";
}

//______________________________________________________________________________
const char *MMcSpectrumWeight::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcSpectrumWeight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcSpectrumWeight::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcSpectrumWeight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcSpectrumWeight::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcSpectrumWeight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcSpectrumWeight::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcSpectrumWeight*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MAlphaFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class MAlphaFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MAlphaFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(MAlphaFitter::Class(),this);
   }
}

//______________________________________________________________________________
void MAlphaFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MAlphaFitter.
      TClass *R__cl = ::MAlphaFitter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigInt", &fSigInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigMax", &fSigMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBgMin", &fBgMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBgMax", &fBgMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleMin", &fScaleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleMax", &fScaleMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPolynomOrder", &fPolynomOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFitBackground", &fFitBackground);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignalFunc", &fSignalFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignificance", &fSignificance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrorExcess", &fErrorExcess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsExcess", &fEventsExcess);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsSignal", &fEventsSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventsBackground", &fEventsBackground);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChiSqSignal", &fChiSqSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChiSqBg", &fChiSqBg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntegralMax", &fIntegralMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleFactor", &fScaleFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoefficients", &fCoefficients);
      R__insp.InspectMember(fCoefficients, "fCoefficients.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrors", &fErrors);
      R__insp.InspectMember(fErrors, "fErrors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFunc", &fFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleMode", &fScaleMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleUser", &fScaleUser);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrategy", &fStrategy);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MAlphaFitter(void *p) {
      return  p ? new(p) ::MAlphaFitter : new ::MAlphaFitter;
   }
   static void *newArray_MAlphaFitter(Long_t nElements, void *p) {
      return p ? new(p) ::MAlphaFitter[nElements] : new ::MAlphaFitter[nElements];
   }
   // Wrapper around operator delete
   static void delete_MAlphaFitter(void *p) {
      delete ((::MAlphaFitter*)p);
   }
   static void deleteArray_MAlphaFitter(void *p) {
      delete [] ((::MAlphaFitter*)p);
   }
   static void destruct_MAlphaFitter(void *p) {
      typedef ::MAlphaFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MAlphaFitter

//______________________________________________________________________________
void MHPhi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHPhi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHPhi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHPhi::Class(),this);
   }
}

//______________________________________________________________________________
void MHPhi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHPhi.
      TClass *R__cl = ::MHPhi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHPhi", &fHPhi);
      R__insp.InspectMember(fHPhi, "fHPhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHPhiOff", &fHPhiOff);
      R__insp.InspectMember(fHPhiOff, "fHPhiOff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTemplate", &fHTemplate);
      R__insp.InspectMember(fHTemplate, "fHTemplate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHInhom", &fHInhom);
      R__insp.InspectMember(fHInhom, "fHInhom.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHInhomOff", &fHInhomOff);
      R__insp.InspectMember(fHInhomOff, "fHInhomOff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPos", &fSrcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisp", &fDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConvMm2Deg", &fConvMm2Deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBinsSignal", &fNumBinsSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaCut", &fThetaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistSrc", &fDistSrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseAntiPhiCut", &fUseAntiPhiCut);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHPhi(void *p) {
      return  p ? new(p) ::MHPhi : new ::MHPhi;
   }
   static void *newArray_MHPhi(Long_t nElements, void *p) {
      return p ? new(p) ::MHPhi[nElements] : new ::MHPhi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHPhi(void *p) {
      delete ((::MHPhi*)p);
   }
   static void deleteArray_MHPhi(void *p) {
      delete [] ((::MHPhi*)p);
   }
   static void destruct_MHPhi(void *p) {
      typedef ::MHPhi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHPhi

//______________________________________________________________________________
void MHDisp::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHDisp.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHDisp::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHDisp::Class(),this);
   }
}

//______________________________________________________________________________
void MHDisp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHDisp.
      TClass *R__cl = ::MHDisp::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisp", &fDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeviation", &fDeviation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcAnti", &fSrcAnti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBg", &fHistBg);
      R__insp.InspectMember(fHistBg, "fHistBg.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBg1", &fHistBg1);
      R__insp.InspectMember(fHistBg1, "fHistBg1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBg2", &fHistBg2);
      R__insp.InspectMember(fHistBg2, "fHistBg2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormerSrc", &fFormerSrc);
      R__insp.InspectMember(fFormerSrc, "fFormerSrc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHalf", &fHalf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearing", &fSmearing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWobble", &fWobble);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleMin", &fScaleMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScaleMax", &fScaleMax);
      MHFalseSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHDisp(void *p) {
      return  p ? new(p) ::MHDisp : new ::MHDisp;
   }
   static void *newArray_MHDisp(Long_t nElements, void *p) {
      return p ? new(p) ::MHDisp[nElements] : new ::MHDisp[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHDisp(void *p) {
      delete ((::MHDisp*)p);
   }
   static void deleteArray_MHDisp(void *p) {
      delete [] ((::MHDisp*)p);
   }
   static void destruct_MHDisp(void *p) {
      typedef ::MHDisp current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHDisp

//______________________________________________________________________________
void MHAlpha::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHAlpha.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHAlpha::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHAlpha::Class(),this);
   }
}

//______________________________________________________________________________
void MHAlpha::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHAlpha.
      TClass *R__cl = ::MHAlpha::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist", &fHist);
      R__insp.InspectMember(fHist, "fHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistTime", &fHistTime);
      R__insp.InspectMember(fHistTime, "fHistTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameParameter", &fNameParameter);
      R__insp.InspectMember(fNameParameter, "fNameParameter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParameter", &fParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOffData", &fOffData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFit", &fFit);
      R__insp.InspectMember(fFit, "fFit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHEnergy", &fHEnergy);
      R__insp.InspectMember(fHEnergy, "fHEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTheta", &fHTheta);
      R__insp.InspectMember(fHTheta, "fHTheta.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTime", &fHTime);
      R__insp.InspectMember(fHTime, "fHTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSigma", &fSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBin", &fBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeEffOn", &fTimeEffOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastTime", &fLastTime);
      R__insp.InspectMember(fLastTime, "fLastTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTimeBins", &fNumTimeBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumRebin", &fNumRebin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMap[15]", fMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipHistTime", &fSkipHistTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipHistTheta", &fSkipHistTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipHistEnergy", &fSkipHistEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fForceUsingSize", &fForceUsingSize);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHAlpha(void *p) {
      return  p ? new(p) ::MHAlpha : new ::MHAlpha;
   }
   static void *newArray_MHAlpha(Long_t nElements, void *p) {
      return p ? new(p) ::MHAlpha[nElements] : new ::MHAlpha[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHAlpha(void *p) {
      delete ((::MHAlpha*)p);
   }
   static void deleteArray_MHAlpha(void *p) {
      delete [] ((::MHAlpha*)p);
   }
   static void destruct_MHAlpha(void *p) {
      typedef ::MHAlpha current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHAlpha

//______________________________________________________________________________
void MHThetaSq::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHThetaSq.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHThetaSq::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHThetaSq::Class(),this);
   }
}

//______________________________________________________________________________
void MHThetaSq::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHThetaSq.
      TClass *R__cl = ::MHThetaSq::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBinsSignal", &fNumBinsSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBinsTotal", &fNumBinsTotal);
      MHAlpha::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHThetaSq(void *p) {
      return  p ? new(p) ::MHThetaSq : new ::MHThetaSq;
   }
   static void *newArray_MHThetaSq(Long_t nElements, void *p) {
      return p ? new(p) ::MHThetaSq[nElements] : new ::MHThetaSq[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHThetaSq(void *p) {
      delete ((::MHThetaSq*)p);
   }
   static void deleteArray_MHThetaSq(void *p) {
      delete [] ((::MHThetaSq*)p);
   }
   static void destruct_MHThetaSq(void *p) {
      typedef ::MHThetaSq current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHThetaSq

//______________________________________________________________________________
void MHThetaSqN::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHThetaSqN.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHThetaSqN::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHThetaSqN::Class(),this);
   }
}

//______________________________________________________________________________
void MHThetaSqN::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHThetaSqN.
      TClass *R__cl = ::MHThetaSqN::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisp", &fDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPosCam", &fSrcPosCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaSqCut", &fThetaSqCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignificanceCutLevel", &fSignificanceCutLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBinsSignal", &fNumBinsSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBinsTotal", &fNumBinsTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumOffSourcePos", &fNumOffSourcePos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoOffCut", &fDoOffCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounter", &fCounter);
      R__insp.InspectMember(fCounter, "fCounter.");
      MHAlpha::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHThetaSqN(void *p) {
      return  p ? new(p) ::MHThetaSqN : new ::MHThetaSqN;
   }
   static void *newArray_MHThetaSqN(Long_t nElements, void *p) {
      return p ? new(p) ::MHThetaSqN[nElements] : new ::MHThetaSqN[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHThetaSqN(void *p) {
      delete ((::MHThetaSqN*)p);
   }
   static void deleteArray_MHThetaSqN(void *p) {
      delete [] ((::MHThetaSqN*)p);
   }
   static void destruct_MHThetaSqN(void *p) {
      typedef ::MHThetaSqN current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHThetaSqN

//______________________________________________________________________________
void MHEnergyEst::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHEnergyEst.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHEnergyEst::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHEnergyEst::Class(),this);
   }
}

//______________________________________________________________________________
void MHEnergyEst::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHEnergyEst.
      TClass *R__cl = ::MHEnergyEst::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMap[100]", fMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHEnergy", &fHEnergy);
      R__insp.InspectMember(fHEnergy, "fHEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHResolutionEst", &fHResolutionEst);
      R__insp.InspectMember(fHResolutionEst, "fHResolutionEst.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHResolutionMC", &fHResolutionMC);
      R__insp.InspectMember(fHResolutionMC, "fHResolutionMC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHImpact", &fHImpact);
      R__insp.InspectMember(fHImpact, "fHImpact.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChisq", &fChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBias", &fBias);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHEnergyEst(void *p) {
      return  p ? new(p) ::MHEnergyEst : new ::MHEnergyEst;
   }
   static void *newArray_MHEnergyEst(Long_t nElements, void *p) {
      return p ? new(p) ::MHEnergyEst[nElements] : new ::MHEnergyEst[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHEnergyEst(void *p) {
      delete ((::MHEnergyEst*)p);
   }
   static void deleteArray_MHEnergyEst(void *p) {
      delete [] ((::MHEnergyEst*)p);
   }
   static void destruct_MHEnergyEst(void *p) {
      typedef ::MHEnergyEst current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHEnergyEst

//______________________________________________________________________________
void MHFalseSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHFalseSource.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHFalseSource::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHFalseSource::Class(),this);
   }
}

//______________________________________________________________________________
void MHFalseSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHFalseSource.
      TClass *R__cl = ::MHFalseSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPos", &fSrcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObservatory", &fObservatory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMm2Deg", &fMm2Deg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlphaCut", &fAlphaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBgMean", &fBgMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDist", &fMinDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDist", &fMaxDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDW", &fMinDW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDW", &fMaxDW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist", &fHist);
      R__insp.InspectMember(fHist, "fHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHistOff", &fHistOff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRa", &fRa);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDec", &fDec);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHFalseSource(void *p) {
      return  p ? new(p) ::MHFalseSource : new ::MHFalseSource;
   }
   static void *newArray_MHFalseSource(Long_t nElements, void *p) {
      return p ? new(p) ::MHFalseSource[nElements] : new ::MHFalseSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHFalseSource(void *p) {
      delete ((::MHFalseSource*)p);
   }
   static void deleteArray_MHFalseSource(void *p) {
      delete [] ((::MHFalseSource*)p);
   }
   static void destruct_MHFalseSource(void *p) {
      typedef ::MHFalseSource current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHFalseSource

//______________________________________________________________________________
void MHEffectiveOnTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHEffectiveOnTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHEffectiveOnTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHEffectiveOnTime::Class(),this);
   }
}

//______________________________________________________________________________
void MHEffectiveOnTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHEffectiveOnTime.
      TClass *R__cl = ::MHEffectiveOnTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointPos", &fPointPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastTime", &fLastTime);
      R__insp.InspectMember(fLastTime, "fLastTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParam", &fParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH2DeltaT", &fH2DeltaT);
      R__insp.InspectMember(fH2DeltaT, "fH2DeltaT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH1DeltaT", &fH1DeltaT);
      R__insp.InspectMember(fH1DeltaT, "fH1DeltaT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHThetaEffOn", &fHThetaEffOn);
      R__insp.InspectMember(fHThetaEffOn, "fHThetaEffOn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHThetaProb", &fHThetaProb);
      R__insp.InspectMember(fHThetaProb, "fHThetaProb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHThetaNDF", &fHThetaNDF);
      R__insp.InspectMember(fHThetaNDF, "fHThetaNDF.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHThetaLambda", &fHThetaLambda);
      R__insp.InspectMember(fHThetaLambda, "fHThetaLambda.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTimeEffOn", &fHTimeEffOn);
      R__insp.InspectMember(fHTimeEffOn, "fHTimeEffOn.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTimeProb", &fHTimeProb);
      R__insp.InspectMember(fHTimeProb, "fHTimeProb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTimeLambda", &fHTimeLambda);
      R__insp.InspectMember(fHTimeLambda, "fHTimeLambda.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsFinalized", &fIsFinalized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstBin", &fFirstBin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalTime", &fTotalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffOnTime", &fEffOnTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEffOnTimeErr", &fEffOnTimeErr);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHEffectiveOnTime(void *p) {
      return  p ? new(p) ::MHEffectiveOnTime : new ::MHEffectiveOnTime;
   }
   static void *newArray_MHEffectiveOnTime(Long_t nElements, void *p) {
      return p ? new(p) ::MHEffectiveOnTime[nElements] : new ::MHEffectiveOnTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHEffectiveOnTime(void *p) {
      delete ((::MHEffectiveOnTime*)p);
   }
   static void deleteArray_MHEffectiveOnTime(void *p) {
      delete [] ((::MHEffectiveOnTime*)p);
   }
   static void destruct_MHEffectiveOnTime(void *p) {
      typedef ::MHEffectiveOnTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHEffectiveOnTime

//______________________________________________________________________________
void MHCollectionArea::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHCollectionArea.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHCollectionArea::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHCollectionArea::Class(),this);
   }
}

//______________________________________________________________________________
void MHCollectionArea::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHCollectionArea.
      TClass *R__cl = ::MHCollectionArea::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSel", &fHistSel);
      R__insp.InspectMember(fHistSel, "fHistSel.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistAll", &fHistAll);
      R__insp.InspectMember(fHistAll, "fHistAll.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHEnergy", &fHEnergy);
      R__insp.InspectMember(fHEnergy, "fHEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcAreaRadius", &fMcAreaRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalNumSimulatedShowers", &fTotalNumSimulatedShowers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCorsikaVersion", &fCorsikaVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllEvtsTriggered", &fAllEvtsTriggered);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsExtern", &fIsExtern);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHCollectionArea(void *p) {
      return  p ? new(p) ::MHCollectionArea : new ::MHCollectionArea;
   }
   static void *newArray_MHCollectionArea(Long_t nElements, void *p) {
      return p ? new(p) ::MHCollectionArea[nElements] : new ::MHCollectionArea[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHCollectionArea(void *p) {
      delete ((::MHCollectionArea*)p);
   }
   static void deleteArray_MHCollectionArea(void *p) {
      delete [] ((::MHCollectionArea*)p);
   }
   static void destruct_MHCollectionArea(void *p) {
      typedef ::MHCollectionArea current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHCollectionArea

//______________________________________________________________________________
void MHThreshold::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHThreshold.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHThreshold::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHThreshold::Class(),this);
   }
}

//______________________________________________________________________________
void MHThreshold::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHThreshold.
      TClass *R__cl = ::MHThreshold::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHEnergy", &fHEnergy);
      R__insp.InspectMember(fHEnergy, "fHEnergy.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHThreshold(void *p) {
      return  p ? new(p) ::MHThreshold : new ::MHThreshold;
   }
   static void *newArray_MHThreshold(Long_t nElements, void *p) {
      return p ? new(p) ::MHThreshold[nElements] : new ::MHThreshold[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHThreshold(void *p) {
      delete ((::MHThreshold*)p);
   }
   static void deleteArray_MHThreshold(void *p) {
      delete [] ((::MHThreshold*)p);
   }
   static void destruct_MHThreshold(void *p) {
      typedef ::MHThreshold current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHThreshold

//______________________________________________________________________________
void MMcSpectrumWeight::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcSpectrumWeight.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcSpectrumWeight::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcSpectrumWeight::Class(),this);
   }
}

//______________________________________________________________________________
void MMcSpectrumWeight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcSpectrumWeight.
      TClass *R__cl = ::MMcSpectrumWeight::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointing", &fPointing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameWeight", &fNameWeight);
      R__insp.InspectMember(fNameWeight, "fNameWeight.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameMcEvt", &fNameMcEvt);
      R__insp.InspectMember(fNameMcEvt, "fNameMcEvt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFunc", &fFunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeightsZd", &fWeightsZd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeightsSize", &fWeightsSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOldSlope", &fOldSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNewSlope", &fNewSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergyMin", &fEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergyMax", &fEnergyMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNorm", &fNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNormEnergy", &fNormEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormula", &fFormula);
      R__insp.InspectMember(fFormula, "fFormula.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllowChange", &fAllowChange);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcSpectrumWeight(void *p) {
      return  p ? new(p) ::MMcSpectrumWeight : new ::MMcSpectrumWeight;
   }
   static void *newArray_MMcSpectrumWeight(Long_t nElements, void *p) {
      return p ? new(p) ::MMcSpectrumWeight[nElements] : new ::MMcSpectrumWeight[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcSpectrumWeight(void *p) {
      delete ((::MMcSpectrumWeight*)p);
   }
   static void deleteArray_MMcSpectrumWeight(void *p) {
      delete [] ((::MMcSpectrumWeight*)p);
   }
   static void destruct_MMcSpectrumWeight(void *p) {
      typedef ::MMcSpectrumWeight current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcSpectrumWeight

/********************************************************
* FluxCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableFluxCint();

extern "C" void G__set_cpp_environmentFluxCint() {
  G__cpp_reset_tagtableFluxCint();
}
#include <new>
extern "C" int G__cpp_dllrevFluxCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MAlphaFitter */
static int G__FluxCint_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MAlphaFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MAlphaFitter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MAlphaFitter((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MAlphaFitter((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MAlphaFitter((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MAlphaFitter[n];
       } else {
         p = new((void*) gvp) MAlphaFitter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MAlphaFitter;
       } else {
         p = new((void*) gvp) MAlphaFitter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MAlphaFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MAlphaFitter(*(MAlphaFitter*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MAlphaFitter(*(MAlphaFitter*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetScaleUser((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetScaleMode((MAlphaFitter::ScaleMode_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetMinimizationStrategy((MAlphaFitter::Strategy_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetSignalIntegralMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetSignalFitMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetBackgroundFitMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetBackgroundFitMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetScaleMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetScaleMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetPolynomOrder((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->SetSignalFunction((MAlphaFitter::SignalFunc_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MAlphaFitter*) G__getstructoffset())->EnableBackgroundFit((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MAlphaFitter*) G__getstructoffset())->EnableBackgroundFit();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->FixScale();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetSignalIntegralMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetEventsExcess());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetEventsSignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetEventsBackground());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetSignificance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetErrorExcess());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetChiSqSignal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetChiSqBg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetScaleFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetMinimizationValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MAlphaFitter*) G__getstructoffset())->GetScaleMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetGausSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetGausMu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetGausA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->GetCoefficient((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayD& obj = ((const MAlphaFitter*) G__getstructoffset())->GetCoefficients();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayD& obj = ((const MAlphaFitter*) G__getstructoffset())->GetErrors();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->Eval((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->CalcUpperLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, *(TH1D*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, *(TH1D*) libp->para[1].ref
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->Fit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->ScaleAndFit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->ScaleAndFit(*(TH1D*) libp->para[0].ref, (TH1D*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref, (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitAlpha(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitEnergy(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MAlphaFitter*) G__getstructoffset())->FitTheta(*(TH3D*) libp->para[0].ref, (TH3D*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MAlphaFitter*) G__getstructoffset())->Scale(*(TH1D*) libp->para[0].ref, *(TH1D*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MAlphaFitter*) G__getstructoffset())->ApplyScaling(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref
, (UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MAlphaFitter*) G__getstructoffset())->ApplyScaling(*(TH3D*) libp->para[0].ref, *(TH3D*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((const MAlphaFitter*) G__getstructoffset())->PaintResult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((const MAlphaFitter*) G__getstructoffset())->PaintResult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MAlphaFitter*) G__getstructoffset())->PaintResult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MAlphaFitter*) G__getstructoffset())->PaintResult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MAlphaFitter*) G__getstructoffset())->PaintResult();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MAlphaFitter*) G__getstructoffset())->DrawResult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MAlphaFitter*) G__getstructoffset())->DrawResult((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MAlphaFitter*) G__getstructoffset())->DrawResult((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MAlphaFitter*) G__getstructoffset())->DrawResult();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MAlphaFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MAlphaFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MAlphaFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MAlphaFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MAlphaFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MAlphaFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MAlphaFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MAlphaFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_175_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MAlphaFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MAlphaFitter G__TMAlphaFitter;
static int G__FluxCint_175_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MAlphaFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MAlphaFitter*) (soff+(sizeof(MAlphaFitter)*i)))->~G__TMAlphaFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MAlphaFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MAlphaFitter*) (soff))->~G__TMAlphaFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHAlpha */
static int G__FluxCint_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHAlpha* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHAlpha((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHAlpha((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHAlpha((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHAlpha((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHAlpha[n];
       } else {
         p = new((void*) gvp) MHAlpha[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHAlpha;
       } else {
         p = new((void*) gvp) MHAlpha;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHAlpha));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH3D& obj = ((const MHAlpha*) G__getstructoffset())->GetHist();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MAlphaFitter& obj = ((const MHAlpha*) G__getstructoffset())->GetAlphaFitter();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1D& obj = ((const MHAlpha*) G__getstructoffset())->GetHEnergy();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHAlpha*) G__getstructoffset())->GetOffData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->SetNameParameter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->SetOffData(*(MHAlpha*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->SetNumTimeBins((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHAlpha*) G__getstructoffset())->SkipHistTime((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHAlpha*) G__getstructoffset())->SkipHistTime();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHAlpha*) G__getstructoffset())->SkipHistTheta((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHAlpha*) G__getstructoffset())->SkipHistTheta();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHAlpha*) G__getstructoffset())->SkipHistEnergy((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHAlpha*) G__getstructoffset())->SkipHistEnergy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHAlpha*) G__getstructoffset())->ForceUsingSize((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHAlpha*) G__getstructoffset())->ForceUsingSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHAlpha*) G__getstructoffset())->FitAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((Bool_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((Bool_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((Bool_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((Bool_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHAlpha*) G__getstructoffset())->DrawNicePlot((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->DrawAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->DrawAll((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MHAlpha*) G__getstructoffset())->InitMapping((MHMatrix*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHAlpha*) G__getstructoffset())->InitMapping((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->StopMapping();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->ApplyScaling();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHAlpha::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHAlpha::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHAlpha::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHAlpha::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHAlpha*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHAlpha::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHAlpha::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHAlpha::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_237_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHAlpha::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHAlpha G__TMHAlpha;
static int G__FluxCint_237_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHAlpha*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHAlpha*) (soff+(sizeof(MHAlpha)*i)))->~G__TMHAlpha();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHAlpha*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHAlpha*) (soff))->~G__TMHAlpha();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHThetaSq */
static int G__FluxCint_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHThetaSq* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThetaSq((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHThetaSq((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThetaSq((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHThetaSq((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThetaSq[n];
       } else {
         p = new((void*) gvp) MHThetaSq[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThetaSq;
       } else {
         p = new((void*) gvp) MHThetaSq;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSq*) G__getstructoffset())->SetNumBinsSignal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSq*) G__getstructoffset())->SetNumBinsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHThetaSq::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSq::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHThetaSq::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHThetaSq::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSq*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSq::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThetaSq::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSq::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThetaSq::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHThetaSq G__TMHThetaSq;
static int G__FluxCint_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHThetaSq*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHThetaSq*) (soff+(sizeof(MHThetaSq)*i)))->~G__TMHThetaSq();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHThetaSq*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHThetaSq*) (soff))->~G__TMHThetaSq();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHThetaSqN */
static int G__FluxCint_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHThetaSqN* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThetaSqN((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHThetaSqN((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThetaSqN((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHThetaSqN((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThetaSqN[n];
       } else {
         p = new((void*) gvp) MHThetaSqN[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThetaSqN;
       } else {
         p = new((void*) gvp) MHThetaSqN;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSqN*) G__getstructoffset())->SetNumBinsSignal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSqN*) G__getstructoffset())->SetNumBinsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHThetaSqN*) G__getstructoffset())->SetNumOffSourcePos((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHThetaSqN*) G__getstructoffset())->SetNumOffSourcePos();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHThetaSqN*) G__getstructoffset())->SetSignificanceCutLevel((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHThetaSqN*) G__getstructoffset())->SetSignificanceCutLevel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHThetaSqN*) G__getstructoffset())->SetDoOffCut((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHThetaSqN*) G__getstructoffset())->SetDoOffCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHThetaSqN::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSqN::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHThetaSqN::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHThetaSqN::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThetaSqN*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSqN::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThetaSqN::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThetaSqN::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_243_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThetaSqN::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHThetaSqN G__TMHThetaSqN;
static int G__FluxCint_243_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHThetaSqN*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHThetaSqN*) (soff+(sizeof(MHThetaSqN)*i)))->~G__TMHThetaSqN();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHThetaSqN*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHThetaSqN*) (soff))->~G__TMHThetaSqN();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHPhi */
static int G__FluxCint_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHPhi* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPhi((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHPhi((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPhi((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHPhi((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPhi[n];
       } else {
         p = new((void*) gvp) MHPhi[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPhi;
       } else {
         p = new((void*) gvp) MHPhi;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHPhi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPhi*) G__getstructoffset())->SetNumBinsSignal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHPhi*) G__getstructoffset())->SetUseAntiPhiCut((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHPhi*) G__getstructoffset())->SetUseAntiPhiCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHPhi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPhi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHPhi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHPhi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPhi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPhi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPhi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPhi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_244_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPhi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHPhi G__TMHPhi;
static int G__FluxCint_244_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHPhi*) (soff+(sizeof(MHPhi)*i)))->~G__TMHPhi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHPhi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHPhi*) (soff))->~G__TMHPhi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHFalseSource */
static int G__FluxCint_246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHFalseSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHFalseSource((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHFalseSource((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHFalseSource((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHFalseSource((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHFalseSource[n];
       } else {
         p = new((void*) gvp) MHFalseSource[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHFalseSource;
       } else {
         p = new((void*) gvp) MHFalseSource;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Byte_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHFalseSource*) G__getstructoffset())->FitSignificance();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->FitSignificanceStd();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetMinDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetMaxDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetMinDW((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetMaxDW((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetAlphaCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetAlphaPlus5();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetAlphaMinus5();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetBgMean((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetBgMeanPlus5();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetBgMeanMinus5();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->SetOffData(*(MHFalseSource*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHFalseSource*) G__getstructoffset())->DrawNicePlot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHFalseSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHFalseSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHFalseSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHFalseSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHFalseSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHFalseSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHFalseSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHFalseSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_246_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHFalseSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHFalseSource G__TMHFalseSource;
static int G__FluxCint_246_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHFalseSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHFalseSource*) (soff+(sizeof(MHFalseSource)*i)))->~G__TMHFalseSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHFalseSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHFalseSource*) (soff))->~G__TMHFalseSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHDisp */
static int G__FluxCint_250_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDisp* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDisp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHDisp((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDisp((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHDisp((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDisp[n];
       } else {
         p = new((void*) gvp) MHDisp[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDisp;
       } else {
         p = new((void*) gvp) MHDisp;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHDisp));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHDisp*) G__getstructoffset())->SetSmearing((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHDisp*) G__getstructoffset())->SetSmearing();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHDisp*) G__getstructoffset())->SetWobble((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHDisp*) G__getstructoffset())->SetWobble();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDisp*) G__getstructoffset())->SetScaleMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDisp*) G__getstructoffset())->SetScaleMax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDisp*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MHDisp*) G__getstructoffset())->GetScaleMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MHDisp*) G__getstructoffset())->GetScaleMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHDisp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDisp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHDisp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHDisp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDisp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDisp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDisp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDisp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_250_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDisp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHDisp G__TMHDisp;
static int G__FluxCint_250_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHDisp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHDisp*) (soff+(sizeof(MHDisp)*i)))->~G__TMHDisp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHDisp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHDisp*) (soff))->~G__TMHDisp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHEnergyEst */
static int G__FluxCint_252_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHEnergyEst* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHEnergyEst((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHEnergyEst((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHEnergyEst((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHEnergyEst((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHEnergyEst[n];
       } else {
         p = new((void*) gvp) MHEnergyEst[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHEnergyEst;
       } else {
         p = new((void*) gvp) MHEnergyEst;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH3D& obj = ((const MHEnergyEst*) G__getstructoffset())->GetHEnergy();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHEnergyEst*) G__getstructoffset())->GetWeights(*(TH1D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEnergyEst*) G__getstructoffset())->InitMapping((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEnergyEst*) G__getstructoffset())->StopMapping();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHEnergyEst::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEnergyEst::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHEnergyEst::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHEnergyEst::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEnergyEst*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEnergyEst::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHEnergyEst::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEnergyEst::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_252_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHEnergyEst::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHEnergyEst G__TMHEnergyEst;
static int G__FluxCint_252_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHEnergyEst*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHEnergyEst*) (soff+(sizeof(MHEnergyEst)*i)))->~G__TMHEnergyEst();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHEnergyEst*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHEnergyEst*) (soff))->~G__TMHEnergyEst();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHEffectiveOnTime */
static int G__FluxCint_268_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHEffectiveOnTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHEffectiveOnTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHEffectiveOnTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHEffectiveOnTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHEffectiveOnTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHEffectiveOnTime[n];
       } else {
         p = new((void*) gvp) MHEffectiveOnTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHEffectiveOnTime;
       } else {
         p = new((void*) gvp) MHEffectiveOnTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEffectiveOnTime*) G__getstructoffset())->SetNumEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEffectiveOnTime*) G__getstructoffset())->SetFirstBin((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHEffectiveOnTime*) G__getstructoffset())->GetTotalTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHEffectiveOnTime*) G__getstructoffset())->GetEffOnTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1D& obj = ((const MHEffectiveOnTime*) G__getstructoffset())->GetHEffOnTheta();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1D& obj = ((const MHEffectiveOnTime*) G__getstructoffset())->GetHEffOnTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((const MHEffectiveOnTime*) G__getstructoffset())->GetH2DeltaT();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHEffectiveOnTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEffectiveOnTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHEffectiveOnTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHEffectiveOnTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHEffectiveOnTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEffectiveOnTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHEffectiveOnTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHEffectiveOnTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_268_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHEffectiveOnTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHEffectiveOnTime G__TMHEffectiveOnTime;
static int G__FluxCint_268_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHEffectiveOnTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHEffectiveOnTime*) (soff+(sizeof(MHEffectiveOnTime)*i)))->~G__TMHEffectiveOnTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHEffectiveOnTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHEffectiveOnTime*) (soff))->~G__TMHEffectiveOnTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHCollectionArea */
static int G__FluxCint_270_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHCollectionArea* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCollectionArea((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHCollectionArea((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHCollectionArea((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHCollectionArea((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCollectionArea[n];
       } else {
         p = new((void*) gvp) MHCollectionArea[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHCollectionArea;
       } else {
         p = new((void*) gvp) MHCollectionArea;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCollectionArea*) G__getstructoffset())->SetHistAll(*(TH2D*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((MHCollectionArea*) G__getstructoffset())->GetHistAll();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((const MHCollectionArea*) G__getstructoffset())->GetHistAll();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2D& obj = ((const MHCollectionArea*) G__getstructoffset())->GetHistSel();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1D& obj = ((const MHCollectionArea*) G__getstructoffset())->GetHEnergy();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCollectionArea*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCollectionArea*) G__getstructoffset())->GetCollectionAreaEff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHCollectionArea*) G__getstructoffset())->GetCollectionAreaAbs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCollectionArea*) G__getstructoffset())->SetMcAreaRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHCollectionArea::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCollectionArea::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHCollectionArea::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHCollectionArea::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHCollectionArea*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCollectionArea::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCollectionArea::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHCollectionArea::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_270_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHCollectionArea::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHCollectionArea G__TMHCollectionArea;
static int G__FluxCint_270_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHCollectionArea*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHCollectionArea*) (soff+(sizeof(MHCollectionArea)*i)))->~G__TMHCollectionArea();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHCollectionArea*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHCollectionArea*) (soff))->~G__TMHCollectionArea();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHThreshold */
static int G__FluxCint_271_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHThreshold* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThreshold((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHThreshold((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHThreshold((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHThreshold((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThreshold[n];
       } else {
         p = new((void*) gvp) MHThreshold[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHThreshold;
       } else {
         p = new((void*) gvp) MHThreshold;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MHThreshold));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHThreshold::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThreshold::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHThreshold::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHThreshold::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHThreshold*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThreshold::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThreshold::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHThreshold::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_271_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHThreshold::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHThreshold G__TMHThreshold;
static int G__FluxCint_271_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHThreshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHThreshold*) (soff+(sizeof(MHThreshold)*i)))->~G__TMHThreshold();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHThreshold*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHThreshold*) (soff))->~G__TMHThreshold();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcSpectrumWeight */
static int G__FluxCint_279_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcSpectrumWeight* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcSpectrumWeight((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcSpectrumWeight((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcSpectrumWeight((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcSpectrumWeight((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcSpectrumWeight[n];
       } else {
         p = new((void*) gvp) MMcSpectrumWeight[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcSpectrumWeight;
       } else {
         p = new((void*) gvp) MMcSpectrumWeight;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNameWeight((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNameWeight();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNameMcEvt((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNameMcEvt();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNewSlope((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNewSlope();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNorm((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNorm();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNormEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetNormEnergy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetFormula((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetFormula();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetEnergyRange((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetEnergyRange((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetEnergyRange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetOldSlope((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetOldSlope();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetWeightsZd((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetWeightsZd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetWeightsSize((TH1D*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMcSpectrumWeight*) G__getstructoffset())->SetWeightsSize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MMcSpectrumWeight*) G__getstructoffset())->Set(*(MMcCorsikaRunHeader*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecOld((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecNew((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaWeights((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecOld();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecNew();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaWeights();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecOldX();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaSpecNewX();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMcSpectrumWeight*) G__getstructoffset())->GetFormulaWeightsX();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetSpecNewIntegral((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetSpecOldIntegral((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetSpecNewIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetSpecOldIntegral());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->CalcSpecNew((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->CalcSpecOld((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetEnergyMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMcSpectrumWeight*) G__getstructoffset())->GetEnergyMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MMcSpectrumWeight*) G__getstructoffset())->CompleteEnergySpectrum(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MMcSpectrumWeight*) G__getstructoffset())->CompleteEnergySpectrum(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcSpectrumWeight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcSpectrumWeight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcSpectrumWeight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcSpectrumWeight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcSpectrumWeight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcSpectrumWeight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcSpectrumWeight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcSpectrumWeight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FluxCint_279_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcSpectrumWeight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcSpectrumWeight G__TMMcSpectrumWeight;
static int G__FluxCint_279_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcSpectrumWeight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcSpectrumWeight*) (soff+(sizeof(MMcSpectrumWeight)*i)))->~G__TMMcSpectrumWeight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcSpectrumWeight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcSpectrumWeight*) (soff))->~G__TMMcSpectrumWeight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MAlphaFitter */

/* MHAlpha */

/* MHThetaSq */

/* MHThetaSqN */

/* MHPhi */

/* MHFalseSource */

/* MHDisp */

/* MHEnergyEst */

/* MHEffectiveOnTime */

/* MHCollectionArea */

/* MHThreshold */

/* MMcSpectrumWeight */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFluxCint {
 public:
  G__Sizep2memfuncFluxCint(): p(&G__Sizep2memfuncFluxCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFluxCint::*p)();
};

size_t G__get_sizep2memfuncFluxCint()
{
  G__Sizep2memfuncFluxCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFluxCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter))) {
     MAlphaFitter *G__Lderived;
     G__Lderived=(MAlphaFitter*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha))) {
     MHAlpha *G__Lderived;
     G__Lderived=(MHAlpha*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq))) {
     MHThetaSq *G__Lderived;
     G__Lderived=(MHThetaSq*)0x1000;
     {
       MHAlpha *G__Lpbase=(MHAlpha*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq),G__get_linked_tagnum(&G__FluxCintLN_MHAlpha),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN))) {
     MHThetaSqN *G__Lderived;
     G__Lderived=(MHThetaSqN*)0x1000;
     {
       MHAlpha *G__Lpbase=(MHAlpha*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN),G__get_linked_tagnum(&G__FluxCintLN_MHAlpha),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHPhi))) {
     MHPhi *G__Lderived;
     G__Lderived=(MHPhi*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHPhi),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHPhi),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHPhi),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource))) {
     MHFalseSource *G__Lderived;
     G__Lderived=(MHFalseSource*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHDisp))) {
     MHDisp *G__Lderived;
     G__Lderived=(MHDisp*)0x1000;
     {
       MHFalseSource *G__Lpbase=(MHFalseSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp),G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst))) {
     MHEnergyEst *G__Lderived;
     G__Lderived=(MHEnergyEst*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime))) {
     MHEffectiveOnTime *G__Lderived;
     G__Lderived=(MHEffectiveOnTime*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea))) {
     MHCollectionArea *G__Lderived;
     G__Lderived=(MHCollectionArea*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold))) {
     MHThreshold *G__Lderived;
     G__Lderived=(MHThreshold*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold),G__get_linked_tagnum(&G__FluxCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight))) {
     MMcSpectrumWeight *G__Lderived;
     G__Lderived=(MMcSpectrumWeight*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight),G__get_linked_tagnum(&G__FluxCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight),G__get_linked_tagnum(&G__FluxCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight),G__get_linked_tagnum(&G__FluxCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight),G__get_linked_tagnum(&G__FluxCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFluxCint() {

   /* Setting up typedef entry */
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FluxCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FluxCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FluxCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FluxCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__FluxCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__FluxCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__FluxCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__FluxCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MAlphaFitter */
static void G__setup_memvarMAlphaFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter));
   { MAlphaFitter *p; p=(MAlphaFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kNone=%lldLL",(long long)MAlphaFitter::kNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kEntries=%lldLL",(long long)MAlphaFitter::kEntries).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kIntegral=%lldLL",(long long)MAlphaFitter::kIntegral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kOffRegion=%lldLL",(long long)MAlphaFitter::kOffRegion).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kBackground=%lldLL",(long long)MAlphaFitter::kBackground).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kLeastSquare=%lldLL",(long long)MAlphaFitter::kLeastSquare).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-2,1,G__FastAllocString(2048).Format("kUserScale=%lldLL",(long long)MAlphaFitter::kUserScale).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kSignificance=%lldLL",(long long)MAlphaFitter::kSignificance).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kSignificanceChi2=%lldLL",(long long)MAlphaFitter::kSignificanceChi2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kSignificanceLogExcess=%lldLL",(long long)MAlphaFitter::kSignificanceLogExcess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kSignificanceSqrtExcess=%lldLL",(long long)MAlphaFitter::kSignificanceSqrtExcess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kSignificanceExcess=%lldLL",(long long)MAlphaFitter::kSignificanceExcess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kExcess=%lldLL",(long long)MAlphaFitter::kExcess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kGaussSigma=%lldLL",(long long)MAlphaFitter::kGaussSigma).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kWeakSource=%lldLL",(long long)MAlphaFitter::kWeakSource).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-2,1,G__FastAllocString(2048).Format("kWeakSourceLogExcess=%lldLL",(long long)MAlphaFitter::kWeakSourceLogExcess).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLSignalFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kGauss=%lldLL",(long long)MAlphaFitter::kGauss).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLSignalFunc_t),-1,-2,1,G__FastAllocString(2048).Format("kThetaSq=%lldLL",(long long)MAlphaFitter::kThetaSq).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigInt=",0,"minimum of range to fit the signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigMax=",0,"maximum of range to fit the signal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBgMin=",0,"minimum of range to fit the background");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBgMax=",0,"minimum of range to fit the background");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fScaleMin=",0,"minimum of range to determin the scale factor of the background");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fScaleMax=",0,"maximum of range to determin the scale factor of the background");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPolynomOrder=",0,"order of polyom to be fitted to the background");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFitBackground=",0,"Backround fit: yes/no");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLSignalFunc_t),-1,-1,4,"fSignalFunc=",0,"Type of signal function");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSignificance=",0,"significance of an unknown signal (Li/Ma 17)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fErrorExcess=",0,"Simple error propagation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventsExcess=",0,"calculated number of excess events (signal-bg)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventsSignal=",0,"calculated number of signal events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEventsBackground=",0,"calculated number of bg events (fScaleFactor already applied)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChiSqSignal=",0,"Reduced (chi^2/NDF) chisq of signal fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChiSqBg=",0,"Reduced (chi^2/NDF) chisq of bg fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIntegralMax=",0,"Calculated bin border to which it was integrated");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScaleFactor=",0,"Scale factor determined for off-data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TArrayD),-1,-1,4,"fCoefficients=",0,"Fit result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TArrayD),-1,-1,4,"fErrors=",0,"Fit errors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TF1),-1,-1,4,"fFunc=",0,"fit function (gauss + polynom)");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t),-1,-1,4,"fScaleMode=",0,"scaling mode");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScaleUser=",0,"user scale factor");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLStrategy_t),-1,-1,4,"fStrategy=",0,"How to calc minimization value");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHAlpha */
static void G__setup_memvarMHAlpha(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha));
   { MHAlpha *p; p=(MHAlpha*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH3D),-1,-1,2,"fHist=",0,"Alpha vs. theta and energy");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,2,"fHistTime=",0,"! temporary histogram to get alpha vs. time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TString),-1,-1,2,"fNameParameter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParContainer),-1,-1,2,"fParameter=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FluxCintLN_TH3D),-1,-1,2,"fOffData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter),-1,-1,2,"fFit=",0,"SEEMS THAT STREAMER HAS SOME PROBLEMS... MAYBE IF FUNC IS USED AT THE SAME TIME FOR FITS (PAINT)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHEnergy=",0,"excess events vs energy");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTheta=",0,"excess events vs theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTime=",0,"excess events vs time;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fSigma=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fEnergy=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterI),-1,-1,4,"fBin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MPointingPos),-1,-1,4,"fPointPos=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,4,"fTimeEffOn=",0,"! Time to steer filling of fHTime");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,4,"fTime=",0,"! Event-Time to finalize fHTime");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,4,"fLastTime=",0,"! Last fTimeEffOn");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumTimeBins=",0,"Number of time bins to fill together");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumRebin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MHillas),-1,-1,2,"fHillas=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MHMatrix),-1,-1,2,"fMatrix=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMap[15]=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSkipHistTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSkipHistTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSkipHistEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fForceUsingSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHThetaSq */
static void G__setup_memvarMHThetaSq(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq));
   { MHThetaSq *p; p=(MHThetaSq*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBinsSignal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBinsTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHThetaSqN */
static void G__setup_memvarMHThetaSqN(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN));
   { MHThetaSqN *p; p=(MHThetaSqN*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! conversion mm to deg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fDisp=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MSrcPosCam),-1,-1,4,"fSrcPosCam=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fThetaSqCut=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSignificanceCutLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBinsSignal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumBinsTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumOffSourcePos=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDoOffCut=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TArrayI),-1,-1,4,"fCounter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHPhi */
static void G__setup_memvarMHPhi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHPhi));
   { MHPhi *p; p=(MHPhi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHPhi=",0,"Phi plot of the signal w.r.t. source");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHPhiOff=",0,"Phi plot of the signal w.r.t. source+180deg");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTemplate=",0,"Template how the background should look in the ideal case");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHInhom=",0,"Phi plot off the signal w.r.t. source (out of the ring with the signal)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHInhomOff=",0,"Phi plot off the signal w.r.t. source+180deg (out of the ring with the signal)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MHillas),-1,-1,4,"fHillas=",0,"! Pointer to input container \"MHillas\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MSrcPosCam),-1,-1,4,"fSrcPos=",0,"! Pointer to input container \"MSrcPosCam\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fDisp=",0,"! Pointer to input container \"Disp\"");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fConvMm2Deg=",0,"! Conversion factor from camera geometry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumBinsSignal=",0,"Number of bins for signal region");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThetaCut=",0,"Theta cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDistSrc=",0,"Nominal distance of source from center in wobble");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseAntiPhiCut=",0,"Whether to use a anti-phi cut or not");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHFalseSource */
static void G__setup_memvarMHFalseSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource));
   { MHFalseSource *p; p=(MHFalseSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,2,"fTime=",0,"! container to take the event time from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MPointingPos),-1,-1,2,"fPointPos=",0,"! container to take pointing position from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MSrcPosCam),-1,-1,2,"fSrcPos=",0,"! container for sopurce position in camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MObservatory),-1,-1,2,"fObservatory=",0,"! conteiner to take observatory location from");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMm2Deg=",0,"conversion factor for display in degrees");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAlphaCut=",0,"Alpha cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBgMean=",0,"Background mean");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinDist=",0,"Min dist");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxDist=",0,"Max dist");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinDW=",0,"Minimum distance in percent of dist");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxDW=",0,"Maximum distance in percent of dist");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH3D),-1,-1,2,"fHist=",0,"Alpha vs. x and y");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FluxCintLN_TH3D),-1,-1,2,"fHistOff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRa=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHDisp */
static void G__setup_memvarMHDisp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp));
   { MHDisp *p; p=(MHDisp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fDisp=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MPointingDev),-1,-1,4,"fDeviation=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MSrcPosCam),-1,-1,4,"fSrcAnti=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHistBg=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHistBg1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHistBg2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TVector2),-1,-1,4,"fFormerSrc=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHalf=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSmearing=",0,"[deg] Width of Gaus to fold with the events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWobble=",0,"This is for Wobble-Mode observations");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScaleMin=",0,"[deg] Minimum circle for integration of off-data for scaling");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScaleMax=",0,"[deg] Maximum circle for integration of off-data for scaling");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHEnergyEst */
static void G__setup_memvarMHEnergyEst(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst));
   { MHEnergyEst *p; p=(MHEnergyEst*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fEnergy=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMap[100]=",0,"FIXME!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MHMatrix),-1,-1,4,"fMatrix=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH3D),-1,-1,4,"fHEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHResolutionEst=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHResolutionMC=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHImpact=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChisq=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBias=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHEffectiveOnTime */
static void G__setup_memvarMHEffectiveOnTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime));
   { MHEffectiveOnTime *p; p=(MHEffectiveOnTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MPointingPos),-1,-1,4,"fPointPos=",0,"! Container to get the zenith angle from");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,4,"fLastTime=",0,"! Time-Stamp of last event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MTime),-1,-1,4,"fTime=",0,"! Time-Stamp of \"effective on-time\" event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterDerr),-1,-1,4,"fParam=",0,"! Output container for effective on-time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fH2DeltaT=",0,"Counts vs Delta T and Theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fH1DeltaT=",0,"! Counts vs Delta T (for a time interval)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHThetaEffOn=",0,"Effective On time versus Theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHThetaProb=",0,"Chisq prob fit of Effective On time versus Theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHThetaNDF=",0,"NDF vs Theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHThetaLambda=",0,"Slope (rate) vs Theta");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTimeEffOn=",0,"Effective On time versus Time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTimeProb=",0,"Chisq prob fit of Effective On time versus Time");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHTimeLambda=",0,"Slope (rate) vs Time");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsFinalized=",0,"Flag telling you whether fHThetaEffOn is the final result");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"Number of events to be used for a bin in time");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFirstBin=",0,"For bin for fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTotalTime=",0,"[s] Total time accumulated from run-header");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEffOnTime=",0,"[s] On time as fitted from the DeltaT distribution");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEffOnTimeErr=",0,"[s] On time error as fitted from the DeltaT distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHCollectionArea */
static void G__setup_memvarMHCollectionArea(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea));
   { MHCollectionArea *p; p=(MHCollectionArea*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MMcRunHeader),-1,-1,4,"fHeader=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHistSel=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH2D),-1,-1,4,"fHistAll=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMcAreaRadius=",0,"[m] Radius of circle within which the cores of Corsika events have been uniformly distributed.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fTotalNumSimulatedShowers=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCorsikaVersion=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllEvtsTriggered=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsExtern=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHThreshold */
static void G__setup_memvarMHThreshold(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold));
   { MHThreshold *p; p=(MHThreshold*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FluxCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"! Pointer to MC energy");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1D),-1,-1,4,"fHEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcSpectrumWeight */
static void G__setup_memvarMMcSpectrumWeight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight));
   { MMcSpectrumWeight *p; p=(MMcSpectrumWeight*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FluxCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,"Pointer to the container with the MC energy");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FluxCintLN_MHillas),-1,-1,4,"fHillas=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MParameterD),-1,-1,4,"fWeight=",0,"Pointer to the output MWeight container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_MPointingPos),-1,-1,4,"fPointing=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TString),-1,-1,4,"fNameWeight=",0,"Name of the MWeight container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TString),-1,-1,4,"fNameMcEvt=",0,"Name of the MMcEvt container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TF1),-1,-1,4,"fFunc=",0,"Function calculating the weights");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1),-1,-1,4,"fWeightsZd=",0,"Set additional ZA weights");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TH1),-1,-1,4,"fWeightsSize=",0,"Set additional ZA weights");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOldSlope=",0,"Slope of energy spectrum generated with Corsika");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNewSlope=",0,"Slope of the new spectrum (if it is a power law)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergyMin=",0,"Minimum energy simulated");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergyMax=",0,"Maximum energy simulated");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNorm=",0,"Normalization constant (additional normalization constant)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fNormEnergy=",0,"Energy at which the spectra are normalized (default -1 means the integral is used)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FluxCintLN_TString),-1,-1,4,"fFormula=",0,"Text Formula for new spectrum: eg. \"pow(MMcEvt.fEnergy, -2.0)\"");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllowChange=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FluxCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFluxCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMAlphaFitter(void) {
   /* MAlphaFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter));
   G__memfunc_setup("DoOffFit",753,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 0, 
"u 'TH1D' - 11 - hon u 'TH1D' - 11 - hof "
"g - 'Bool_t' 0 - paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitOff",574,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TH1D' - 1 - h i - 'Int_t' 0 - paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitResult",930,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TH1D' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MAlphaFitter",1185,G__FluxCint_175_0_4, 105, G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MAlphaFitter",1185,G__FluxCint_175_0_5, 105, G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter), -1, 0, 1, 1, 1, 0, "u 'MAlphaFitter' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetScaleUser",1203,G__FluxCint_175_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleMode",1177,G__FluxCint_175_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MAlphaFitter::ScaleMode_t' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinimizationStrategy",2423,G__FluxCint_175_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MAlphaFitter::Strategy_t' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalIntegralMax",2022,G__FluxCint_175_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalFitMax",1491,G__FluxCint_175_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundFitMin",1907,G__FluxCint_175_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBackgroundFitMax",1909,G__FluxCint_175_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleMin",1080,G__FluxCint_175_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleMax",1082,G__FluxCint_175_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPolynomOrder",1558,G__FluxCint_175_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalFunction",1744,G__FluxCint_175_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MAlphaFitter::SignalFunc_t' - 0 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EnableBackgroundFit",1898,G__FluxCint_175_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FixScale",783,G__FluxCint_175_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalIntegralMax",2010,G__FluxCint_175_0_22, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventsExcess",1536,G__FluxCint_175_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventsSignal",1523,G__FluxCint_175_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventsBackground",1941,G__FluxCint_175_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignificance",1507,G__FluxCint_175_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrorExcess",1429,G__FluxCint_175_0_27, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChiSqSignal",1366,G__FluxCint_175_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChiSqBg",929,G__FluxCint_175_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaleFactor",1383,G__FluxCint_175_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinimizationValue",2069,G__FluxCint_175_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaleMode",1165,G__FluxCint_175_0_32, 105, G__get_linked_tagnum(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGausSigma",1185,G__FluxCint_175_0_33, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGausMu",882,G__FluxCint_175_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGausA",753,G__FluxCint_175_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefficient",1407,G__FluxCint_175_0_36, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoefficients",1522,G__FluxCint_175_0_37, 117, G__get_linked_tagnum(&G__FluxCintLN_TArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErrors",925,G__FluxCint_175_0_38, 117, G__get_linked_tagnum(&G__FluxCintLN_TArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__FluxCint_175_0_39, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcUpperLimit",1406,G__FluxCint_175_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fit",291,G__FluxCint_175_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TH1D' - 1 - h g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fit",291,G__FluxCint_175_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH1D' - 11 - on u 'TH1D' - 11 - off "
"d - 'Double_t' 0 - alpha g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fit",291,G__FluxCint_175_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH1D' - 1 - on U 'TH1D' - 0 - off "
"d - 'Double_t' 0 - alpha g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fit",291,G__FluxCint_175_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH1D' - 1 - on U 'TH1D' - 0 - off "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScaleAndFit",1054,G__FluxCint_175_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH1D' - 1 - on U 'TH1D' - 0 - off "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAlpha",777,G__FluxCint_175_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TH3D' - 11 - h g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitEnergy",909,G__FluxCint_175_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH3D' - 11 - h h - 'UInt_t' 0 - bin "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTheta",793,G__FluxCint_175_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH3D' - 11 - h h - 'UInt_t' 0 - bin "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAlpha",777,G__FluxCint_175_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH3D' - 11 - on u 'TH3D' - 11 - off "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitEnergy",909,G__FluxCint_175_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH3D' - 11 - on u 'TH3D' - 11 - off "
"h - 'UInt_t' 0 - bin g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTheta",793,G__FluxCint_175_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH3D' - 11 - on u 'TH3D' - 11 - off "
"h - 'UInt_t' 0 - bin g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAlpha",777,G__FluxCint_175_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TH3D' - 11 - on U 'TH3D' - 10 - off "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitEnergy",909,G__FluxCint_175_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH3D' - 11 - on U 'TH3D' - 10 - off "
"h - 'UInt_t' 0 - bin g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTheta",793,G__FluxCint_175_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TH3D' - 11 - on U 'TH3D' - 10 - off "
"h - 'UInt_t' 0 - bin g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__FluxCint_175_0_55, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'TH1D' - 1 - off u 'TH1D' - 11 - on", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyScaling",1223,G__FluxCint_175_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'TH3D' - 11 - hon u 'TH3D' - 1 - hof "
"h - 'UInt_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyScaling",1223,G__FluxCint_175_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'TH3D' - 11 - hon u 'TH3D' - 1 - hof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintResult",1147,G__FluxCint_175_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"f - 'Float_t' 0 '0.04' x f - 'Float_t' 0 '0.94' y "
"f - 'Float_t' 0 '0.035' size g - 'Bool_t' 0 'kFALSE' draw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawResult",1037,G__FluxCint_175_0_59, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 0 '0.04' x f - 'Float_t' 0 '0.94' y "
"f - 'Float_t' 0 '0.035' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_175_0_61, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MAlphaFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_175_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MAlphaFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_175_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MAlphaFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_175_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MAlphaFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_175_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_175_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MAlphaFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_175_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MAlphaFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_175_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MAlphaFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_175_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MAlphaFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MAlphaFitter", 1311, G__FluxCint_175_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHAlpha(void) {
   /* MHAlpha */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHAlpha));
   G__memfunc_setup("FitEnergyBins",1305,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitThetaBins",1189,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateAlphaTime",1496,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kFALSE' final", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitAlphaTime",1289,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'MTime' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinalAlphaTime",1375,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'MBinning' - 1 - bins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBin",581,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintText",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - val d - 'Double_t' 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintText",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH1D' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 11 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVal",579,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParameterRule",1625,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHAlpha",635,G__FluxCint_237_0_13, 105, G__get_linked_tagnum(&G__FluxCintLN_MHAlpha), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHist",696,G__FluxCint_237_0_17, 117, G__get_linked_tagnum(&G__FluxCintLN_TH3D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlphaFitter",1396,G__FluxCint_237_0_18, 117, G__get_linked_tagnum(&G__FluxCintLN_MAlphaFitter), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHEnergy",978,G__FluxCint_237_0_19, 117, G__get_linked_tagnum(&G__FluxCintLN_TH1D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffData",949,G__FluxCint_237_0_20, 85, G__get_linked_tagnum(&G__FluxCintLN_TH3D), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameParameter",1614,G__FluxCint_237_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffData",961,G__FluxCint_237_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MHAlpha' - 11 - h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumTimeBins",1399,G__FluxCint_237_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipHistTime",1214,G__FluxCint_237_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipHistTheta",1317,G__FluxCint_237_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SkipHistEnergy",1433,G__FluxCint_237_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceUsingSize",1424,G__FluxCint_237_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitAlpha",777,G__FluxCint_237_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawNicePlot",1196,G__FluxCint_237_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - - 10 '\"FACT observation\"' title C - - 10 '\"preliminary\"' watermark "
"i - 'Int_t' 0 '-1' binlo i - 'Int_t' 0 '9999' binhi", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("DrawNicePlot",1196,G__FluxCint_237_0_30, 121, -1, -1, 0, 5, 1, 1, 0, 
"g - 'Bool_t' 0 - newc C - - 10 '0' title "
"C - - 10 '0' watermark i - 'Int_t' 0 '-1' binlo "
"i - 'Int_t' 0 '9999' binhi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawAll",679,G__FluxCint_237_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("DrawAll",679,G__FluxCint_237_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - newc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,G__FluxCint_237_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - mat i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StopMapping",1138,G__FluxCint_237_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyScaling",1223,G__FluxCint_237_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_237_0_40, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHAlpha::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_237_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHAlpha::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_237_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHAlpha::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_237_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHAlpha::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_237_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_237_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHAlpha::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_237_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHAlpha::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_237_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHAlpha::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_237_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHAlpha::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHAlpha", 761, G__FluxCint_237_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHThetaSq(void) {
   /* MHThetaSq */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq));
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 11 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVal",579,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParameterRule",1625,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 0, 1, 4, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHThetaSq",847,G__FluxCint_239_0_6, 105, G__get_linked_tagnum(&G__FluxCintLN_MHThetaSq), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - mat i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumBinsSignal",1606,G__FluxCint_239_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumBinsTotal",1516,G__FluxCint_239_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FluxCint_239_0_10, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHThetaSq::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_239_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSq::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_239_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHThetaSq::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_239_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHThetaSq::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_239_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_239_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSq::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_239_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThetaSq::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_239_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSq::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_239_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThetaSq::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHThetaSq", 973, G__FluxCint_239_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHThetaSqN(void) {
   /* MHThetaSqN */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN));
   G__memfunc_setup("GetVec",574,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FluxCintLN_TVector2), -1, 0, 2, 1, 4, 8, 
"u 'TVector2' - 11 - v i - 'Int_t' 0 - n1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVal",591,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'MParList' - 11 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVal",579,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetOffData",961,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'MHAlpha' - 11 - h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 - weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHThetaSqN",925,G__FluxCint_243_0_10, 105, G__get_linked_tagnum(&G__FluxCintLN_MHThetaSqN), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - mat i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumBinsSignal",1606,G__FluxCint_243_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumBinsTotal",1516,G__FluxCint_243_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumOffSourcePos",1818,G__FluxCint_243_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '3' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignificanceCutLevel",2323,G__FluxCint_243_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '1.7' l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDoOffCut",1062,G__FluxCint_243_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FluxCint_243_0_17, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHThetaSqN::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_243_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSqN::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_243_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHThetaSqN::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_243_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHThetaSqN::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_243_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_243_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSqN::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_243_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThetaSqN::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_243_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThetaSqN::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_243_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThetaSqN::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHThetaSqN", 1051, G__FluxCint_243_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHPhi(void) {
   /* MHPhi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHPhi));
   G__memfunc_setup("PaintUpdate",1119,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintText",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH1D' - 11 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHPhi",438,G__FluxCint_244_0_5, 105, G__get_linked_tagnum(&G__FluxCintLN_MHPhi), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumBinsSignal",1606,G__FluxCint_244_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseAntiPhiCut",1586,G__FluxCint_244_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_244_0_11, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHPhi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_244_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPhi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_244_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHPhi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_244_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHPhi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_244_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_244_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPhi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_244_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPhi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_244_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPhi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_244_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPhi::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHPhi", 564, G__FluxCint_244_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHFalseSource(void) {
   /* MHFalseSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource));
   G__memfunc_setup("GetCatalog",987,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FluxCintLN_TObject), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSymmetric",1339,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TH1' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Modified",801,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectAll",1008,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TH2D' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectOff",1010,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'TH3D' - 11 - src U 'TH2D' - 0 - h "
"U 'TH2D' - 0 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectOn",916,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'TH3D' - 11 - src U 'TH2D' - 0 - h "
"U 'TH2D' - 0 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProjectOnOff",1199,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TH2D' - 0 - h U 'TH2D' - 0 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHFalseSource",1265,G__FluxCint_246_0_9, 105, G__get_linked_tagnum(&G__FluxCintLN_MHFalseSource), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitSignificance",1510,G__FluxCint_246_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 '10' sigint f - 'Float_t' 0 '75' sigmax "
"f - 'Float_t' 0 '45' bgmin f - 'Float_t' 0 '85' bgmax "
"b - 'Byte_t' 0 '2' polynom", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("FitSignificanceStd",1809,G__FluxCint_246_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetMinDist",996,G__FluxCint_246_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dist", "Absolute minimum distance", (void*) NULL, 0);
   G__memfunc_setup("SetMaxDist",998,G__FluxCint_246_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dist", "Absolute maximum distance", (void*) NULL, 0);
   G__memfunc_setup("SetMinDW",747,G__FluxCint_246_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ratio", "Minimum ratio between length/dist", (void*) NULL, 0);
   G__memfunc_setup("SetMaxDW",749,G__FluxCint_246_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ratio", "Maximum ratio between length/dist", (void*) NULL, 0);
   G__memfunc_setup("SetAlphaCut",1086,G__FluxCint_246_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - alpha", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetAlphaPlus5",1259,G__FluxCint_246_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetAlphaMinus5",1363,G__FluxCint_246_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetBgMean",854,G__FluxCint_246_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - alpha", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetBgMeanPlus5",1327,G__FluxCint_246_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetBgMeanMinus5",1431,G__FluxCint_246_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetOffData",961,G__FluxCint_246_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MHFalseSource' - 11 - fs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawNicePlot",1196,G__FluxCint_246_0_23, 121, -1, -1, 0, 0, 1, 1, 8, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_246_0_29, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHFalseSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_246_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHFalseSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_246_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHFalseSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_246_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHFalseSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_246_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_246_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHFalseSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_246_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHFalseSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_246_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHFalseSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_246_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHFalseSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHFalseSource", 1391, G__FluxCint_246_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHDisp(void) {
   /* MHDisp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHDisp));
   G__memfunc_setup("GetOffSignal",1177,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "u 'TH1' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Profile1D",838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"C - - 10 - name u 'TH2' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Profile",721,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 8, 
"u 'TH1' - 1 - h2 u 'TH2' - 11 - h1 "
"d - 'Axis_t' 0 '0' x0 d - 'Axis_t' 0 '0' y0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSignificance",1601,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 8, 
"u 'TH2' - 1 - s u 'TH2' - 11 - h1 "
"u 'TH2' - 11 - h2 d - 'Double_t' 10 '1' scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeDot",677,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH2' - 1 - h2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sq",196,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHDisp",549,G__FluxCint_250_0_8, 105, G__get_linked_tagnum(&G__FluxCintLN_MHDisp), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSmearing",1122,G__FluxCint_250_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWobble",903,G__FluxCint_250_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleMin",1080,G__FluxCint_250_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", "*MENU* *ARGS={scale=>fScaleMin}", (void*) NULL, 0);
   G__memfunc_setup("SetScaleMax",1082,G__FluxCint_250_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", "*MENU* *ARGS={scale=>fScaleMax}", (void*) NULL, 0);
   G__memfunc_setup("SetScale",788,G__FluxCint_250_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", "*MENU* *ARGS={min=>fScaleMin,max=>fScaleMax}", (void*) NULL, 0);
   G__memfunc_setup("GetScaleMin",1068,G__FluxCint_250_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaleMax",1070,G__FluxCint_250_0_15, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOffData",961,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'MHFalseSource' - 11 - fs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_250_0_23, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHDisp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_250_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDisp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_250_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHDisp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_250_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHDisp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_250_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_250_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDisp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_250_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDisp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_250_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDisp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_250_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDisp::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHDisp", 675, G__FluxCint_250_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHEnergyEst(void) {
   /* MHEnergyEst */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst));
   G__memfunc_setup("MakeProj",793,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FluxCintLN_TH1), -1, 0, 1, 1, 4, 0, "C - - 10 - how", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeProf",789,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FluxCintLN_TH1), -1, 0, 1, 1, 4, 0, "u 'TH2' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateProf",1018,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TH2' - 1 - h g - 'Bool_t' 0 - logy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVal",579,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcChisq",875,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"d - 'Double_t' 1 - chisq d - 'Double_t' 1 - prob", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHEnergyEst",1067,G__FluxCint_252_0_9, 105, G__get_linked_tagnum(&G__FluxCintLN_MHEnergyEst), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHEnergy",978,G__FluxCint_252_0_10, 117, G__get_linked_tagnum(&G__FluxCintLN_TH3D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeights",1019,G__FluxCint_252_0_11, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TH1D' - 1 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,G__FluxCint_252_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MHMatrix' - 0 - mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopMapping",1138,G__FluxCint_252_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_252_0_17, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHEnergyEst::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_252_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEnergyEst::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_252_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHEnergyEst::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_252_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHEnergyEst::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_252_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_252_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEnergyEst::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_252_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHEnergyEst::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_252_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEnergyEst::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_252_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHEnergyEst::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHEnergyEst", 1193, G__FluxCint_252_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHEffectiveOnTime(void) {
   /* MHEffectiveOnTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime));
   G__memfunc_setup("FitH",363,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"U 'TH1D' - 0 - h D - 'Double_t' 0 - res "
"g - 'Bool_t' 0 'kFALSE' paint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitThetaBins",1189,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FitTimeBin",971,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintProb",911,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH1' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintText",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"d - 'Double_t' 0 - val d - 'Double_t' 0 - error "
"d - 'Double_t' 0 '-1' range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintText",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "D - 'Double_t' 0 - res", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawRightAxis",1313,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateRightAxis",1526,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TH1' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStatistics",1592,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHEffectiveOnTime",1650,G__FluxCint_268_0_15, 105, G__get_linked_tagnum(&G__FluxCintLN_MHEffectiveOnTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__FluxCint_268_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFirstBin",1101,G__FluxCint_268_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalTime",1203,G__FluxCint_268_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEffOnTime",1149,G__FluxCint_268_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHEffOnTheta",1324,G__FluxCint_268_0_20, 117, G__get_linked_tagnum(&G__FluxCintLN_TH1D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHEffOnTime",1221,G__FluxCint_268_0_21, 117, G__get_linked_tagnum(&G__FluxCintLN_TH1D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH2DeltaT",984,G__FluxCint_268_0_22, 117, G__get_linked_tagnum(&G__FluxCintLN_TH2D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_268_0_25, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHEffectiveOnTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_268_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEffectiveOnTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_268_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHEffectiveOnTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_268_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHEffectiveOnTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_268_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_268_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEffectiveOnTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_268_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHEffectiveOnTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_268_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHEffectiveOnTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_268_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHEffectiveOnTime::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHEffectiveOnTime", 1776, G__FluxCint_268_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHCollectionArea(void) {
   /* MHCollectionArea */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea));
   G__memfunc_setup("GetImpactMax",1188,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TH2D' - 1 - hsel u 'TH2D' - 1 - hall", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcEfficiency",1384,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHCollectionArea",1562,G__FluxCint_270_0_4, 105, G__get_linked_tagnum(&G__FluxCintLN_MHCollectionArea), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetHistAll",989,G__FluxCint_270_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TH2D' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistAll",977,G__FluxCint_270_0_12, 117, G__get_linked_tagnum(&G__FluxCintLN_TH2D), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistAll",977,G__FluxCint_270_0_13, 117, G__get_linked_tagnum(&G__FluxCintLN_TH2D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistSel",988,G__FluxCint_270_0_14, 117, G__get_linked_tagnum(&G__FluxCintLN_TH2D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHEnergy",978,G__FluxCint_270_0_15, 117, G__get_linked_tagnum(&G__FluxCintLN_TH1D), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__FluxCint_270_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollectionAreaEff",1974,G__FluxCint_270_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollectionAreaAbs",1979,G__FluxCint_270_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMcAreaRadius",1469,G__FluxCint_270_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FluxCint_270_0_20, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHCollectionArea::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_270_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCollectionArea::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_270_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHCollectionArea::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_270_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHCollectionArea::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_270_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_270_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCollectionArea::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_270_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCollectionArea::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_270_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHCollectionArea::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_270_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHCollectionArea::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHCollectionArea", 1688, G__FluxCint_270_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHThreshold(void) {
   /* MHThreshold */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MHThreshold));
   G__memfunc_setup("MHThreshold",1090,G__FluxCint_271_0_1, 105, G__get_linked_tagnum(&G__FluxCintLN_MHThreshold), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_271_0_6, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHThreshold::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_271_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThreshold::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_271_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHThreshold::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_271_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHThreshold::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_271_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_271_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThreshold::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_271_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThreshold::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_271_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHThreshold::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_271_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHThreshold::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHThreshold", 1216, G__FluxCint_271_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcSpectrumWeight(void) {
   /* MMcSpectrumWeight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceX",788,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 1, 1, 4, 8, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMcSpectrumWeight",1720,G__FluxCint_279_0_7, 105, G__get_linked_tagnum(&G__FluxCintLN_MMcSpectrumWeight), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameWeight",1301,G__FluxCint_279_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MWeight\"' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameMcEvt",1164,G__FluxCint_279_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MMcEvt\"' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewSlope",1113,G__FluxCint_279_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNorm",712,G__FluxCint_279_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '1' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNormEnergy",1330,G__FluxCint_279_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '1' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFormula",1026,G__FluxCint_279_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergyRange",1411,G__FluxCint_279_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '-2' min d - 'Double_t' 0 '-1' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOldSlope",1102,G__FluxCint_279_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-2.6' s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeightsZd",1221,G__FluxCint_279_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1' - 0 '0' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeightsSize",1442,G__FluxCint_279_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1D' - 0 '0' h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__FluxCint_279_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MMcCorsikaRunHeader' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecOld",1696,G__FluxCint_279_0_19, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecNew",1707,G__FluxCint_279_0_20, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaWeights",1745,G__FluxCint_279_0_21, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecOld",1696,G__FluxCint_279_0_22, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecNew",1707,G__FluxCint_279_0_23, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaWeights",1745,G__FluxCint_279_0_24, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecOldX",1784,G__FluxCint_279_0_25, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaSpecNewX",1795,G__FluxCint_279_0_26, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormulaWeightsX",1833,G__FluxCint_279_0_27, 117, G__get_linked_tagnum(&G__FluxCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpecNewIntegral",1803,G__FluxCint_279_0_28, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - emin d - 'Double_t' 0 - emax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpecOldIntegral",1792,G__FluxCint_279_0_29, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - emin d - 'Double_t' 0 - emax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpecNewIntegral",1803,G__FluxCint_279_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpecOldIntegral",1792,G__FluxCint_279_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcSpecNew",1064,G__FluxCint_279_0_32, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcSpecOld",1053,G__FluxCint_279_0_33, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyMin",1198,G__FluxCint_279_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyMax",1200,G__FluxCint_279_0_35, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CompleteEnergySpectrum",2294,G__FluxCint_279_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TH1' - 1 - h d - 'Double_t' 0 - emin "
"d - 'Double_t' 0 '0' scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FluxCint_279_0_38, 85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcSpectrumWeight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FluxCint_279_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcSpectrumWeight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FluxCint_279_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcSpectrumWeight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FluxCint_279_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcSpectrumWeight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FluxCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FluxCint_279_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FluxCint_279_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcSpectrumWeight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FluxCint_279_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcSpectrumWeight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FluxCint_279_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcSpectrumWeight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FluxCint_279_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcSpectrumWeight::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMcSpectrumWeight", 1846, G__FluxCint_279_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFluxCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFluxCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFluxCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FluxCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__FluxCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TH3D = { "TH3D" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MAlphaFitter = { "MAlphaFitter" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MAlphaFittercLcLScaleMode_t = { "MAlphaFitter::ScaleMode_t" , 101 , -1 };
G__linked_taginfo G__FluxCintLN_MAlphaFittercLcLStrategy_t = { "MAlphaFitter::Strategy_t" , 101 , -1 };
G__linked_taginfo G__FluxCintLN_MAlphaFittercLcLSignalFunc_t = { "MAlphaFitter::SignalFunc_t" , 101 , -1 };
G__linked_taginfo G__FluxCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MBinning = { "MBinning" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MParameterI = { "MParameterI" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHillas = { "MHillas" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MPointingPos = { "MPointingPos" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHAlpha = { "MHAlpha" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHThetaSq = { "MHThetaSq" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MSrcPosCam = { "MSrcPosCam" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHThetaSqN = { "MHThetaSqN" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHPhi = { "MHPhi" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MObservatory = { "MObservatory" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHFalseSource = { "MHFalseSource" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MPointingDev = { "MPointingDev" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHDisp = { "MHDisp" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHEnergyEst = { "MHEnergyEst" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MParameterDerr = { "MParameterDerr" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHEffectiveOnTime = { "MHEffectiveOnTime" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MMcRunHeader = { "MMcRunHeader" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHCollectionArea = { "MHCollectionArea" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MHThreshold = { "MHThreshold" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MMcCorsikaRunHeader = { "MMcCorsikaRunHeader" , 99 , -1 };
G__linked_taginfo G__FluxCintLN_MMcSpectrumWeight = { "MMcSpectrumWeight" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFluxCint() {
  G__FluxCintLN_TClass.tagnum = -1 ;
  G__FluxCintLN_TBuffer.tagnum = -1 ;
  G__FluxCintLN_TMemberInspector.tagnum = -1 ;
  G__FluxCintLN_TObject.tagnum = -1 ;
  G__FluxCintLN_TString.tagnum = -1 ;
  G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__FluxCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__FluxCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__FluxCintLN_TEnv.tagnum = -1 ;
  G__FluxCintLN_TArrayD.tagnum = -1 ;
  G__FluxCintLN_MParContainer.tagnum = -1 ;
  G__FluxCintLN_TF1.tagnum = -1 ;
  G__FluxCintLN_TH1D.tagnum = -1 ;
  G__FluxCintLN_TH3D.tagnum = -1 ;
  G__FluxCintLN_MAlphaFitter.tagnum = -1 ;
  G__FluxCintLN_MAlphaFittercLcLScaleMode_t.tagnum = -1 ;
  G__FluxCintLN_MAlphaFittercLcLStrategy_t.tagnum = -1 ;
  G__FluxCintLN_MAlphaFittercLcLSignalFunc_t.tagnum = -1 ;
  G__FluxCintLN_TH1.tagnum = -1 ;
  G__FluxCintLN_TH2.tagnum = -1 ;
  G__FluxCintLN_MBinning.tagnum = -1 ;
  G__FluxCintLN_MParList.tagnum = -1 ;
  G__FluxCintLN_TArrayI.tagnum = -1 ;
  G__FluxCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__FluxCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__FluxCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__FluxCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__FluxCintLN_TH2D.tagnum = -1 ;
  G__FluxCintLN_MH.tagnum = -1 ;
  G__FluxCintLN_MTime.tagnum = -1 ;
  G__FluxCintLN_MParameterD.tagnum = -1 ;
  G__FluxCintLN_MParameterI.tagnum = -1 ;
  G__FluxCintLN_MHillas.tagnum = -1 ;
  G__FluxCintLN_MHMatrix.tagnum = -1 ;
  G__FluxCintLN_MPointingPos.tagnum = -1 ;
  G__FluxCintLN_MHAlpha.tagnum = -1 ;
  G__FluxCintLN_MHThetaSq.tagnum = -1 ;
  G__FluxCintLN_TVector2.tagnum = -1 ;
  G__FluxCintLN_MGeomCam.tagnum = -1 ;
  G__FluxCintLN_MSrcPosCam.tagnum = -1 ;
  G__FluxCintLN_MHThetaSqN.tagnum = -1 ;
  G__FluxCintLN_MHPhi.tagnum = -1 ;
  G__FluxCintLN_MObservatory.tagnum = -1 ;
  G__FluxCintLN_MHFalseSource.tagnum = -1 ;
  G__FluxCintLN_MPointingDev.tagnum = -1 ;
  G__FluxCintLN_MHDisp.tagnum = -1 ;
  G__FluxCintLN_MMcEvt.tagnum = -1 ;
  G__FluxCintLN_MHEnergyEst.tagnum = -1 ;
  G__FluxCintLN_MParameterDerr.tagnum = -1 ;
  G__FluxCintLN_MHEffectiveOnTime.tagnum = -1 ;
  G__FluxCintLN_MMcRunHeader.tagnum = -1 ;
  G__FluxCintLN_MHCollectionArea.tagnum = -1 ;
  G__FluxCintLN_MHThreshold.tagnum = -1 ;
  G__FluxCintLN_MInputStreamID.tagnum = -1 ;
  G__FluxCintLN_MTask.tagnum = -1 ;
  G__FluxCintLN_MMcCorsikaRunHeader.tagnum = -1 ;
  G__FluxCintLN_MMcSpectrumWeight.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFluxCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TString);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TF1);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TH1D);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TH3D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MAlphaFitter),sizeof(MAlphaFitter),-1,325376,(char*)NULL,G__setup_memvarMAlphaFitter,G__setup_memfuncMAlphaFitter);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MAlphaFittercLcLScaleMode_t);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MAlphaFittercLcLStrategy_t);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MAlphaFittercLcLSignalFunc_t);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MBinning);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TH2D);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MH);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MTime);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MParameterD);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MParameterI);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MHillas);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MHMatrix);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MPointingPos);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHAlpha),sizeof(MHAlpha),-1,323840,"Alpha-Plot which is fitted online",G__setup_memvarMHAlpha,G__setup_memfuncMHAlpha);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHThetaSq),sizeof(MHThetaSq),-1,323840,"Theta-Plot which is fitted online",G__setup_memvarMHThetaSq,G__setup_memfuncMHThetaSq);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_TVector2);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MSrcPosCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHThetaSqN),sizeof(MHThetaSqN),-1,324864,"Theta-Plot which is fitted online",G__setup_memvarMHThetaSqN,G__setup_memfuncMHThetaSqN);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHPhi),sizeof(MHPhi),-1,323840,"Histogram for ring-method",G__setup_memvarMHPhi,G__setup_memfuncMHPhi);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MObservatory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHFalseSource),sizeof(MHFalseSource),-1,323840,"3D-histogram in alpha, x and y",G__setup_memvarMHFalseSource,G__setup_memfuncMHFalseSource);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MPointingDev);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHDisp),sizeof(MHDisp),-1,323840,"Class to provide a Disp map",G__setup_memvarMHDisp,G__setup_memfuncMHDisp);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MMcEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHEnergyEst),sizeof(MHEnergyEst),-1,323840,"Histogram for the result of the energy reconstruction",G__setup_memvarMHEnergyEst,G__setup_memfuncMHEnergyEst);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MParameterDerr);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHEffectiveOnTime),sizeof(MHEffectiveOnTime),-1,323840,"Histogram to determin effective On-Time vs Time and Zenith Angle",G__setup_memvarMHEffectiveOnTime,G__setup_memfuncMHEffectiveOnTime);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MMcRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHCollectionArea),sizeof(MHCollectionArea),-1,323840,"Data Container to calculate Collection Area",G__setup_memvarMHCollectionArea,G__setup_memfuncMHCollectionArea);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MHThreshold),sizeof(MHThreshold),-1,323840,"Data Container to calculate threshold",G__setup_memvarMHThreshold,G__setup_memfuncMHThreshold);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__FluxCintLN_MMcCorsikaRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FluxCintLN_MMcSpectrumWeight),sizeof(MMcSpectrumWeight),-1,324864,"Task to calculate weights to change the energy spectrum",G__setup_memvarMMcSpectrumWeight,G__setup_memfuncMMcSpectrumWeight);
}
extern "C" void G__cpp_setupFluxCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupFluxCint()");
  G__set_cpp_environmentFluxCint();
  G__cpp_setup_tagtableFluxCint();

  G__cpp_setup_inheritanceFluxCint();

  G__cpp_setup_typetableFluxCint();

  G__cpp_setup_memvarFluxCint();

  G__cpp_setup_memfuncFluxCint();
  G__cpp_setup_globalFluxCint();
  G__cpp_setup_funcFluxCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFluxCint();
  return;
}
class G__cpp_setup_initFluxCint {
  public:
    G__cpp_setup_initFluxCint() { G__add_setup_func("FluxCint",(G__incsetup)(&G__cpp_setupFluxCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFluxCint() { G__remove_setup_func("FluxCint"); }
};
G__cpp_setup_initFluxCint G__cpp_setup_initializerFluxCint;

