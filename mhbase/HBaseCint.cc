//
// File generated by rootcint at Mon Nov 28 11:05:37 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME HBaseCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "HBaseCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MH(void *p = 0);
   static void *newArray_MH(Long_t size, void *p);
   static void delete_MH(void *p);
   static void deleteArray_MH(void *p);
   static void destruct_MH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MH*)
   {
      ::MH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MH", ::MH::Class_Version(), "./MH.h", 26,
                  typeid(::MH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MH::Dictionary, isa_proxy, 4,
                  sizeof(::MH) );
      instance.SetNew(&new_MH);
      instance.SetNewArray(&newArray_MH);
      instance.SetDelete(&delete_MH);
      instance.SetDeleteArray(&deleteArray_MH);
      instance.SetDestructor(&destruct_MH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MH*)
   {
      return GenerateInitInstanceLocal((::MH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFillH_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFillH(void *p = 0);
   static void *newArray_MFillH(Long_t size, void *p);
   static void delete_MFillH(void *p);
   static void deleteArray_MFillH(void *p);
   static void destruct_MFillH(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFillH*)
   {
      ::MFillH *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFillH >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFillH", ::MFillH::Class_Version(), "./MFillH.h", 17,
                  typeid(::MFillH), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFillH::Dictionary, isa_proxy, 4,
                  sizeof(::MFillH) );
      instance.SetNew(&new_MFillH);
      instance.SetNewArray(&newArray_MFillH);
      instance.SetDelete(&delete_MFillH);
      instance.SetDeleteArray(&deleteArray_MFillH);
      instance.SetDestructor(&destruct_MFillH);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFillH*)
   {
      return GenerateInitInstanceLocal((::MFillH*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFillH*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MBinning_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MBinning(void *p = 0);
   static void *newArray_MBinning(Long_t size, void *p);
   static void delete_MBinning(void *p);
   static void deleteArray_MBinning(void *p);
   static void destruct_MBinning(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MBinning*)
   {
      ::MBinning *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MBinning >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MBinning", ::MBinning::Class_Version(), "./MBinning.h", 18,
                  typeid(::MBinning), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MBinning::Dictionary, isa_proxy, 4,
                  sizeof(::MBinning) );
      instance.SetNew(&new_MBinning);
      instance.SetNewArray(&newArray_MBinning);
      instance.SetDelete(&delete_MBinning);
      instance.SetDeleteArray(&deleteArray_MBinning);
      instance.SetDestructor(&destruct_MBinning);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MBinning*)
   {
      return GenerateInitInstanceLocal((::MBinning*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MBinning*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MH3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MH3(void *p = 0);
   static void *newArray_MH3(Long_t size, void *p);
   static void delete_MH3(void *p);
   static void deleteArray_MH3(void *p);
   static void destruct_MH3(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MH3*)
   {
      ::MH3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MH3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MH3", ::MH3::Class_Version(), "./MH3.h", 20,
                  typeid(::MH3), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MH3::Dictionary, isa_proxy, 4,
                  sizeof(::MH3) );
      instance.SetNew(&new_MH3);
      instance.SetNewArray(&newArray_MH3);
      instance.SetDelete(&delete_MH3);
      instance.SetDeleteArray(&deleteArray_MH3);
      instance.SetDestructor(&destruct_MH3);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MH3*)
   {
      return GenerateInitInstanceLocal((::MH3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MH3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHn_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHn(void *p = 0);
   static void *newArray_MHn(Long_t size, void *p);
   static void delete_MHn(void *p);
   static void deleteArray_MHn(void *p);
   static void destruct_MHn(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHn*)
   {
      ::MHn *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHn >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHn", ::MHn::Class_Version(), "./MHn.h", 9,
                  typeid(::MHn), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHn::Dictionary, isa_proxy, 4,
                  sizeof(::MHn) );
      instance.SetNew(&new_MHn);
      instance.SetNewArray(&newArray_MHn);
      instance.SetDelete(&delete_MHn);
      instance.SetDeleteArray(&deleteArray_MHn);
      instance.SetDestructor(&destruct_MHn);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHn*)
   {
      return GenerateInitInstanceLocal((::MHn*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHn*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHArray_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHArray(void *p = 0);
   static void *newArray_MHArray(Long_t size, void *p);
   static void delete_MHArray(void *p);
   static void deleteArray_MHArray(void *p);
   static void destruct_MHArray(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHArray*)
   {
      ::MHArray *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHArray >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHArray", ::MHArray::Class_Version(), "./MHArray.h", 14,
                  typeid(::MHArray), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHArray::Dictionary, isa_proxy, 4,
                  sizeof(::MHArray) );
      instance.SetNew(&new_MHArray);
      instance.SetNewArray(&newArray_MHArray);
      instance.SetDelete(&delete_MHArray);
      instance.SetDeleteArray(&deleteArray_MHArray);
      instance.SetDestructor(&destruct_MHArray);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHArray*)
   {
      return GenerateInitInstanceLocal((::MHArray*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHArray*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHMatrix(void *p = 0);
   static void *newArray_MHMatrix(Long_t size, void *p);
   static void delete_MHMatrix(void *p);
   static void deleteArray_MHMatrix(void *p);
   static void destruct_MHMatrix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHMatrix*)
   {
      ::MHMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHMatrix", ::MHMatrix::Class_Version(), "./MHMatrix.h", 30,
                  typeid(::MHMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHMatrix::Dictionary, isa_proxy, 4,
                  sizeof(::MHMatrix) );
      instance.SetNew(&new_MHMatrix);
      instance.SetNewArray(&newArray_MHMatrix);
      instance.SetDelete(&delete_MHMatrix);
      instance.SetDeleteArray(&deleteArray_MHMatrix);
      instance.SetDestructor(&destruct_MHMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHMatrix*)
   {
      return GenerateInitInstanceLocal((::MHMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MH::Class_Name()
{
   return "MH";
}

//______________________________________________________________________________
const char *MH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFillH::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFillH::Class_Name()
{
   return "MFillH";
}

//______________________________________________________________________________
const char *MFillH::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFillH*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFillH::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFillH*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFillH::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFillH*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFillH::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFillH*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MBinning::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MBinning::Class_Name()
{
   return "MBinning";
}

//______________________________________________________________________________
const char *MBinning::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBinning*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MBinning::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MBinning*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MBinning::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBinning*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MBinning::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MBinning*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MH3::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MH3::Class_Name()
{
   return "MH3";
}

//______________________________________________________________________________
const char *MH3::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MH3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MH3::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MH3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MH3::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MH3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MH3::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MH3*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHn::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHn::Class_Name()
{
   return "MHn";
}

//______________________________________________________________________________
const char *MHn::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHn*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHn::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHn*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHn::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHn*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHn::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHn*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHArray::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHArray::Class_Name()
{
   return "MHArray";
}

//______________________________________________________________________________
const char *MHArray::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHArray*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHArray::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHArray*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHArray::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHArray*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHArray::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHArray*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHMatrix::Class_Name()
{
   return "MHMatrix";
}

//______________________________________________________________________________
const char *MHMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MFillH::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFillH.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFillH::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFillH::Class(),this);
   }
}

//______________________________________________________________________________
void MFillH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFillH.
      TClass *R__cl = ::MFillH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParContainer", &fParContainer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParContainerName", &fParContainerName);
      R__insp.InspectMember(fParContainerName, "fParContainerName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fH", &fH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHName", &fHName);
      R__insp.InspectMember(fHName, "fHName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTab", &fNameTab);
      R__insp.InspectMember(fNameTab, "fNameTab.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTitleTab", &fTitleTab);
      R__insp.InspectMember(fTitleTab, "fTitleTab.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWeightName", &fWeightName);
      R__insp.InspectMember(fWeightName, "fWeightName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMapIdx", &fMapIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCanvas", &fCanvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawOption", &fDrawOption);
      R__insp.InspectMember(fDrawOption, "fDrawOption.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFillH(void *p) {
      return  p ? new(p) ::MFillH : new ::MFillH;
   }
   static void *newArray_MFillH(Long_t nElements, void *p) {
      return p ? new(p) ::MFillH[nElements] : new ::MFillH[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFillH(void *p) {
      delete ((::MFillH*)p);
   }
   static void deleteArray_MFillH(void *p) {
      delete [] ((::MFillH*)p);
   }
   static void destruct_MFillH(void *p) {
      typedef ::MFillH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFillH

//______________________________________________________________________________
void MH::Streamer(TBuffer &R__b)
{
   // Stream an object of class MH.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MH::Class(),this);
   } else {
      R__b.WriteClassBuffer(MH::Class(),this);
   }
}

//______________________________________________________________________________
void MH::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MH.
      TClass *R__cl = ::MH::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSerialNumber", &fSerialNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumExecutions", &fNumExecutions);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MH(void *p) {
      return  p ? new(p) ::MH : new ::MH;
   }
   static void *newArray_MH(Long_t nElements, void *p) {
      return p ? new(p) ::MH[nElements] : new ::MH[nElements];
   }
   // Wrapper around operator delete
   static void delete_MH(void *p) {
      delete ((::MH*)p);
   }
   static void deleteArray_MH(void *p) {
      delete [] ((::MH*)p);
   }
   static void destruct_MH(void *p) {
      typedef ::MH current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MH

//______________________________________________________________________________
void MH3::Streamer(TBuffer &R__b)
{
   // Stream an object of class MH3.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MH3::Class(),this);
   } else {
      R__b.WriteClassBuffer(MH3::Class(),this);
   }
}

//______________________________________________________________________________
void MH3::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MH3.
      TClass *R__cl = ::MH3::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabels[3]", fLabels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDimension", &fDimension);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHist", &fHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData[4]", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBins[3]", &fBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale[4]", fScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStyleBits", &fStyleBits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConversion", &fConversion);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MH3(void *p) {
      return  p ? new(p) ::MH3 : new ::MH3;
   }
   static void *newArray_MH3(Long_t nElements, void *p) {
      return p ? new(p) ::MH3[nElements] : new ::MH3[nElements];
   }
   // Wrapper around operator delete
   static void delete_MH3(void *p) {
      delete ((::MH3*)p);
   }
   static void deleteArray_MH3(void *p) {
      delete [] ((::MH3*)p);
   }
   static void destruct_MH3(void *p) {
      typedef ::MH3 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MH3

//______________________________________________________________________________
void MHn::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHn.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHn::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHn::Class(),this);
   }
}

//______________________________________________________________________________
void MHn::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHn.
      TClass *R__cl = ::MHn::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHist[6]", &fHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawOption[6]", fDrawOption);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayout", &fLayout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHn(void *p) {
      return  p ? new(p) ::MHn : new ::MHn;
   }
   static void *newArray_MHn(Long_t nElements, void *p) {
      return p ? new(p) ::MHn[nElements] : new ::MHn[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHn(void *p) {
      delete ((::MHn*)p);
   }
   static void deleteArray_MHn(void *p) {
      delete [] ((::MHn*)p);
   }
   static void destruct_MHn(void *p) {
      typedef ::MHn current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHn

//______________________________________________________________________________
void MHArray::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHArray.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHArray::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHArray::Class(),this);
   }
}

//______________________________________________________________________________
void MHArray::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHArray.
      TClass *R__cl = ::MHArray::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdx", &fIdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParList", &fParList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClass", &fClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTemplate", &fTemplate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTemplateName", &fTemplateName);
      R__insp.InspectMember(fTemplateName, "fTemplateName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMapIdx", &fMapIdx);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHArray(void *p) {
      return  p ? new(p) ::MHArray : new ::MHArray;
   }
   static void *newArray_MHArray(Long_t nElements, void *p) {
      return p ? new(p) ::MHArray[nElements] : new ::MHArray[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHArray(void *p) {
      delete ((::MHArray*)p);
   }
   static void deleteArray_MHArray(void *p) {
      delete [] ((::MHArray*)p);
   }
   static void destruct_MHArray(void *p) {
      typedef ::MHArray current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHArray

//______________________________________________________________________________
void MHMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHMatrix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHMatrix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHMatrix::Class(),this);
   }
}

//______________________________________________________________________________
void MHMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHMatrix.
      TClass *R__cl = ::MHMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumRows", &fNumRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM", &fM);
      R__insp.InspectMember(fM, "fM.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM2", &fM2);
      R__insp.InspectMember(fM2, "fM2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHMatrix(void *p) {
      return  p ? new(p) ::MHMatrix : new ::MHMatrix;
   }
   static void *newArray_MHMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::MHMatrix[nElements] : new ::MHMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHMatrix(void *p) {
      delete ((::MHMatrix*)p);
   }
   static void deleteArray_MHMatrix(void *p) {
      delete [] ((::MHMatrix*)p);
   }
   static void destruct_MHMatrix(void *p) {
      typedef ::MHMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHMatrix

//______________________________________________________________________________
void MBinning::Streamer(TBuffer &R__b)
{
   // Stream an object of class MBinning.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MBinning::Class(),this);
   } else {
      R__b.WriteClassBuffer(MBinning::Class(),this);
   }
}

//______________________________________________________________________________
void MBinning::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MBinning.
      TClass *R__cl = ::MBinning::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEdges", &fEdges);
      R__insp.InspectMember(fEdges, "fEdges.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MBinning(void *p) {
      return  p ? new(p) ::MBinning : new ::MBinning;
   }
   static void *newArray_MBinning(Long_t nElements, void *p) {
      return p ? new(p) ::MBinning[nElements] : new ::MBinning[nElements];
   }
   // Wrapper around operator delete
   static void delete_MBinning(void *p) {
      delete ((::MBinning*)p);
   }
   static void deleteArray_MBinning(void *p) {
      delete [] ((::MBinning*)p);
   }
   static void destruct_MBinning(void *p) {
      typedef ::MBinning current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MBinning

/********************************************************
* HBaseCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableHBaseCint();

extern "C" void G__set_cpp_environmentHBaseCint() {
  G__cpp_reset_tagtableHBaseCint();
}
#include <new>
extern "C" int G__cpp_dllrevHBaseCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MH */
static int G__HBaseCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MH((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MH[n];
       } else {
         p = new((void*) gvp) MH[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MH;
       } else {
         p = new((void*) gvp) MH;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH*) G__getstructoffset())->SetSerialNumber((Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MH*) G__getstructoffset())->GetSerialNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MH*) G__getstructoffset())->AddSerialNumber((const char*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MH*) G__getstructoffset())->AddSerialNumber(*(TString*) libp->para[0].ref);
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MH*) G__getstructoffset())->GetNumExecutions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH*) G__getstructoffset())->SetNumExecutions((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH*) G__getstructoffset())->PrintSkipped((UInt_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const MH*) G__getstructoffset())->OverwritesDraw((TClass*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const MH*) G__getstructoffset())->OverwritesDraw());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MH*) G__getstructoffset())->SetupFill((MParList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MH*) G__getstructoffset())->ReInit((MParList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((MH*) G__getstructoffset())->Fill((MParContainer*) G__int(libp->para[0]), (const Stat_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((MH*) G__getstructoffset())->Fill((MParContainer*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MH*) G__getstructoffset())->Finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MH*) G__getstructoffset())->GetDataMember();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MH*) G__getstructoffset())->GetHistByName(*((const TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) MH::MakeDefCanvas(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) MH::MakeDefCanvas(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::MakeDefCanvas(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::MakeDefCanvas(*((TString*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::MakeDefCanvas(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) MH::MakeDefCanvas());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) MH::MakeDefCanvas((TObject*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::MakeDefCanvas((TObject*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::MakeDefCanvas((TObject*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::MakeDefCanvas((TObject*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::RemoveFromPad((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH1*) libp->para[0].ref, *(MBinning*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH2*) libp->para[0].ref, *(MBinning*) libp->para[1].ref
, *(MBinning*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH3*) libp->para[0].ref, *(MBinning*) libp->para[1].ref
, *(MBinning*) libp->para[2].ref, *(MBinning*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH1*) libp->para[0].ref, *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH2*) libp->para[0].ref, *(TArrayD*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH3*) libp->para[0].ref, *(TArrayD*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref, *(TArrayD*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH1*) libp->para[0].ref, *(TAxis*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH2*) libp->para[0].ref, *(TAxis*) libp->para[1].ref
, *(TAxis*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning(*(TH3*) libp->para[0].ref, *(TAxis*) libp->para[1].ref
, *(TAxis*) libp->para[2].ref, *(TAxis*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::CopyBinning(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((const TString*) G__int(libp->para[1]))
, *(TH1*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((const TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *(TH2*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((const TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *(TH3*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH1*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH2*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1])
, (MBinning*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH3*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1])
, (MBinning*) G__int(libp->para[2]), (MBinning*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH2*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH3*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *(TArrayD*) libp->para[2].ref, *(TArrayD*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH1*) G__int(libp->para[0]), (TAxis*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH2*) G__int(libp->para[0]), (TAxis*) G__int(libp->para[1])
, (TAxis*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetBinning((TH3*) G__int(libp->para[0]), (TAxis*) G__int(libp->para[1])
, (TAxis*) G__int(libp->para[2]), (TAxis*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, (TH1*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (TH2*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) MH::ApplyBinning(*(MParList*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (TH3*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      MH::SetBinomialErrors(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *(TH1*) libp->para[2].ref, (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      MH::SetBinomialErrors(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *(TH1*) libp->para[2].ref, (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      MH::SetBinomialErrors(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *(TH1*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::RemoveFirstBin(*(TH1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::ScaleArray(*(TArrayD*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TArrayD* pobj;
         TArrayD xobj = MH::ScaleAxis(*(TAxis*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
         pobj = new TArrayD(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      MH::ScaleAxis(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      MH::ScaleAxis(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      MH::ScaleAxis(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      MH::ScaleAxis(*(TH1*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) MH::GetBinCenterLog(*(TAxis*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::DrawSameCopy(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *((const TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      MH::DrawSame(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *((const TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      MH::DrawSame(*(TH1*) libp->para[0].ref, *(TH1*) libp->para[1].ref
, *((const TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MH*) G__getstructoffset())->DrawClone((Option_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MH::GetNewPad(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::FindGoodLimits((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) MH::GetMinimumGT(*(TH1*) libp->para[0].ref, (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) MH::GetMinimumGT(*(TH1*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MH::StripZeros(*(TH1*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayF*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::ProjectArray(*(TArrayD*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayF*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayF*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayD*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::ProjectArray(*(MArrayD*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRangeUser(*(TH1*) libp->para[0].ref, *(Axis_t*) G__Doubleref(&libp->para[1])
, *(Axis_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRangeUserX(*(TH1*) libp->para[0].ref, *(Axis_t*) G__Doubleref(&libp->para[1])
, *(Axis_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRangeUserY(*(TH1*) libp->para[0].ref, *(Axis_t*) G__Doubleref(&libp->para[1])
, *(Axis_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRange(*(TH1*) libp->para[0].ref, *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRangeX(*(TH1*) libp->para[0].ref, *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::GetRangeY(*(TH1*) libp->para[0].ref, *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) MH::FindObjectInPad((const char*) G__int(libp->para[0]), (TVirtualPad*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) MH::FindObjectInPad((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      MH::SetPalette(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      MH::SetPalette(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      MH::SetPalette();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      MH::SetPadRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      MH::SetPadRange((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::SetPadRange((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::GetObjectInfoH((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(TH1*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::GetObjectInfoP((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(TProfile*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::GetObjectInfo((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(TObject*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_177_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_177_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MH(*(MH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MH G__TMH;
static int G__HBaseCint_177_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MH*) (soff+(sizeof(MH)*i)))->~G__TMH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MH*) (soff))->~G__TMH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_177_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH* dest = (MH*) G__getstructoffset();
   *dest = *(MH*) libp->para[0].ref;
   const MH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFillH */
static int G__HBaseCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH[n];
     } else {
       p = new((void*) gvp) MFillH[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH;
     } else {
       p = new((void*) gvp) MFillH;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFillH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFillH(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFillH((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFillH((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFillH(
(const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFillH(
(const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFillH((const char*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFillH(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFillH(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFillH((MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((MH*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFillH((MH*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFillH(
(MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH(
(MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFillH(
(MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFillH((MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFillH((MH*) G__int(libp->para[0]), (MParContainer*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MFillH*) G__getstructoffset())->SetNameTab((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MFillH*) G__getstructoffset())->SetNameTab((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFillH*) G__getstructoffset())->SetNameTab();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFillH*) G__getstructoffset())->SetTitleTab((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFillH*) G__getstructoffset())->SetTitleTab();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFillH*) G__getstructoffset())->SetRuleForIdx(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFillH*) G__getstructoffset())->SetRuleForIdx((MData*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFillH*) G__getstructoffset())->ResetWeight();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFillH*) G__getstructoffset())->SetWeight((MParameterD*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFillH*) G__getstructoffset())->SetWeight((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFillH*) G__getstructoffset())->SetWeight();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFillH*) G__getstructoffset())->GetCanvas());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFillH::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFillH::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFillH::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFillH::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFillH*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFillH::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFillH::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFillH::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_181_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFillH::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_181_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFillH* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFillH(*(MFillH*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFillH G__TMFillH;
static int G__HBaseCint_181_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFillH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFillH*) (soff+(sizeof(MFillH)*i)))->~G__TMFillH();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFillH*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFillH*) (soff))->~G__TMFillH();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_181_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFillH* dest = (MFillH*) G__getstructoffset();
   *dest = *(MFillH*) libp->para[0].ref;
   const MFillH& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MBinning */
static int G__HBaseCint_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MBinning((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MBinning((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MBinning[n];
       } else {
         p = new((void*) gvp) MBinning[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MBinning;
       } else {
         p = new((void*) gvp) MBinning;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MBinning(
(Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
*(MBinning*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MBinning(
*(MBinning*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(MBinning*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MBinning(*(MBinning*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(MBinning*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MBinning(*(MBinning*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MBinning(
*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MBinning(
*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MBinning(*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TH1*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MBinning(*(TH1*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
*(TAxis*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MBinning(
*(TAxis*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TAxis*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MBinning(*(TAxis*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TAxis*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MBinning(*(TAxis*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(
*(TArrayD*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MBinning(
*(TArrayD*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TArrayD*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MBinning(*(TArrayD*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MBinning(*(TArrayD*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MBinning(*(TArrayD*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdges(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MBinning*) G__getstructoffset())->SetEdges(*(MParList*) libp->para[0].ref, (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MBinning*) G__getstructoffset())->SetEdges(*(MParList*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MBinning*) G__getstructoffset())->SetEdgesRaw((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdges(*(TAxis*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdges(*(MBinning*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MBinning*) G__getstructoffset())->SetEdges(*(TH1*) libp->para[0].ref, (const Char_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MBinning*) G__getstructoffset())->SetEdges(*(TH1*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdges((Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])
, (const Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdges((const Int_t) G__int(libp->para[0]), (const Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdgesLin((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdgesLog((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdgesCos((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->SetEdgesASin((Int_t) G__int(libp->para[0]), (Axis_t) G__double(libp->para[1])
, (Axis_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MBinning*) G__getstructoffset())->FindLoEdge((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MBinning*) G__getstructoffset())->FindHiEdge((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MBinning*) G__getstructoffset())->GetEdgeLo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MBinning*) G__getstructoffset())->GetEdgeHi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MBinning*) G__getstructoffset())->GetNumEdges());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MBinning*) G__getstructoffset())->GetNumBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((const MBinning*) G__getstructoffset())->GetEdges());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayD& obj = ((const MBinning*) G__getstructoffset())->GetEdgesD();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MBinning*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->AddEdge((Axis_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->RemoveFirstEdge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->RemoveLastEdge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->IsLinear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->IsLogarithmic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->IsCosinic());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->IsDefault());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->IsUserArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MBinning*) G__getstructoffset())->HasTitle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MBinning*) G__getstructoffset())->Apply(*(TH1*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MBinning::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBinning::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MBinning::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MBinning::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MBinning*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBinning::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBinning::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MBinning::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_186_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MBinning::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MBinning G__TMBinning;
static int G__HBaseCint_186_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MBinning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MBinning*) (soff+(sizeof(MBinning)*i)))->~G__TMBinning();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MBinning*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MBinning*) (soff))->~G__TMBinning();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_186_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MBinning* dest = (MBinning*) G__getstructoffset();
   *dest = *(MBinning*) libp->para[0].ref;
   const MBinning& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MH3 */
static int G__HBaseCint_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3((const Int_t) G__int(libp->para[0]), (MH3::Type_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MH3((const Int_t) G__int(libp->para[0]), (MH3::Type_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3((const Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MH3((const Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MH3[n];
       } else {
         p = new((void*) gvp) MH3[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MH3;
       } else {
         p = new((void*) gvp) MH3;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MH3(*(TH1*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MH3(*(TH1*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3((const char*) G__int(libp->para[0]), (MH3::Type_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MH3((const char*) G__int(libp->para[0]), (MH3::Type_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MH3((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (MH3::Type_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (MH3::Type_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MH3((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (MH3::Type_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (MH3::Type_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (MH3::Type_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (MH3::Type_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MH3(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetScaleX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetScaleY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetScaleZ((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetScaleT((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MH3*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MH3*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MH3*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetLogx((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetLogx();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetLogy((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetLogy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetLogz((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetLogz();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MH3*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MH3*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetLog();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetAutoRangeX((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetAutoRangeX();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetAutoRangeY((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetAutoRangeY();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->SetAutoRangeZ((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetAutoRangeZ();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MH3*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MH3*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetAutoRange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetBinningX((MBinning*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetBinningY((MBinning*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetBinningZ((MBinning*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MH3*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1])
, (MBinning*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MH3*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->SetBinnings();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MH3*) G__getstructoffset())->Sumw2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MH3*) G__getstructoffset())->InitLabels((MH3::Labels_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MH3*) G__getstructoffset())->DefaultLabel((char) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->DefaultLabel((char) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->DefaultLabelX((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->DefaultLabelX();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->DefaultLabelY((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->DefaultLabelY();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MH3*) G__getstructoffset())->DefaultLabelZ((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MH3*) G__getstructoffset())->DefaultLabelZ();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MH3*) G__getstructoffset())->DefineLabel((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MH3*) G__getstructoffset())->DefineLabel((char) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MH3*) G__getstructoffset())->DefineLabel((char) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelX((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelY((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelZ((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabels((char) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelsX(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelsY(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->DefineLabelsZ(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->SetWeight((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MH3*) G__getstructoffset())->SetConversion((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MH3*) G__getstructoffset())->SetConversion());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MH3*) G__getstructoffset())->GetDimension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MH3*) G__getstructoffset())->GetNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((const MH3*) G__getstructoffset())->FindFixBin((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((const MH3*) G__getstructoffset())->FindFixBin((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((const MH3*) G__getstructoffset())->FindFixBin((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1& obj = ((MH3*) G__getstructoffset())->GetHist();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1& obj = ((const MH3*) G__getstructoffset())->GetHist();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const TString* pobj;
         const TString xobj = ((const MH3*) G__getstructoffset())->GetRule((const Char_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const TString* pobj;
         const TString xobj = ((const MH3*) G__getstructoffset())->GetRule();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const MH3*) G__getstructoffset())->GetHistByName(*((const TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const MH3*) G__getstructoffset())->GetHistByName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const MH3*) G__getstructoffset())->GetFullTitle();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MH3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MH3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MH3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MH3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MH3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MH3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_241_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MH3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_241_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MH3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MH3(*(MH3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MH3 G__TMH3;
static int G__HBaseCint_241_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MH3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MH3*) (soff+(sizeof(MH3)*i)))->~G__TMH3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MH3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MH3*) (soff))->~G__TMH3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_241_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MH3* dest = (MH3*) G__getstructoffset();
   *dest = *(MH3*) libp->para[0].ref;
   const MH3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHn */
static int G__HBaseCint_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHn* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHn((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHn((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHn((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHn((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHn[n];
       } else {
         p = new((void*) gvp) MHn[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHn;
       } else {
         p = new((void*) gvp) MHn;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHn));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->SetLayout((MHn::Layout_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (MH3::Type_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (MH3::Type_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHn*) G__getstructoffset())->AddHist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->InitName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->InitTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MHn*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MHn*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MHn*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MHn*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MHn*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MHn*) G__getstructoffset())->SetLog((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MHn*) G__getstructoffset())->SetLog();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MHn*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MHn*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MHn*) G__getstructoffset())->SetAutoRange((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MHn*) G__getstructoffset())->SetAutoRange();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const MHn*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1])
, (MBinning*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const MHn*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]), (MBinning*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MHn*) G__getstructoffset())->SetBinnings((MBinning*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const MHn*) G__getstructoffset())->SetBinnings();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHn*) G__getstructoffset())->Sumw2();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHn*) G__getstructoffset())->InitLabels((MH3::Labels_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHn*) G__getstructoffset())->DefaultLabelX((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHn*) G__getstructoffset())->DefaultLabelX();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHn*) G__getstructoffset())->DefaultLabelY((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHn*) G__getstructoffset())->DefaultLabelY();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHn*) G__getstructoffset())->DefaultLabelZ((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHn*) G__getstructoffset())->DefaultLabelZ();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelX((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelY((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelZ((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelsX(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelsY(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->DefineLabelsZ(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->SetWeight((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHn*) G__getstructoffset())->SetConversion((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHn*) G__getstructoffset())->SetConversion();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHn::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHn::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHn::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHn::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHn*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHn::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHn::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHn::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_245_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHn::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_245_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHn* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHn(*(MHn*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHn));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHn G__TMHn;
static int G__HBaseCint_245_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHn*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHn*) (soff+(sizeof(MHn)*i)))->~G__TMHn();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHn*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHn*) (soff))->~G__TMHn();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_245_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHn* dest = (MHn*) G__getstructoffset();
   *dest = *(MHn*) libp->para[0].ref;
   const MHn& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHArray */
static int G__HBaseCint_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHArray((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHArray((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHArray[n];
       } else {
         p = new((void*) gvp) MHArray[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHArray;
       } else {
         p = new((void*) gvp) MHArray;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray(
*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MHArray(
*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray(
*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHArray(
*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray(*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHArray(*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray(*((const TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) MHArray(*((const TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHArray* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHArray(
(MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray((MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHArray((MH*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHArray((MH*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHArray((MH*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MHArray*) G__getstructoffset())->Set(*((const TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHArray*) G__getstructoffset())->Set(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->Set((MH*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHArray*) G__getstructoffset())->AddHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const MH& obj = ((MHArray*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHArray*) G__getstructoffset())->At((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHArray*) G__getstructoffset())->GetH());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->SetIndexByKey((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->SetIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->IncIndex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->DecIndex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHArray*) G__getstructoffset())->GetIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHArray::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHArray::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHArray::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHArray::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHArray*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHArray::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHArray::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHArray::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_249_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHArray::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_249_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHArray* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHArray(*(MHArray*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHArray G__TMHArray;
static int G__HBaseCint_249_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHArray*) (soff+(sizeof(MHArray)*i)))->~G__TMHArray();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHArray*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHArray*) (soff))->~G__TMHArray();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHMatrix */
static int G__HBaseCint_312_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHMatrix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHMatrix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHMatrix[n];
       } else {
         p = new((void*) gvp) MHMatrix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHMatrix;
       } else {
         p = new((void*) gvp) MHMatrix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(
(MDataArray*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHMatrix(
(MDataArray*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix((MDataArray*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHMatrix((MDataArray*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix((MDataArray*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHMatrix((MDataArray*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(
*(TMatrix*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHMatrix(
*(TMatrix*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(*(TMatrix*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHMatrix(*(TMatrix*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(*(TMatrix*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MHMatrix(*(TMatrix*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(
*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MHMatrix(
*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(
*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHMatrix(
*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMatrix(*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHMatrix(*(TMatrix*) libp->para[0].ref, (MDataArray*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHMatrix::CopyCrop(*(TMatrix*) libp->para[0].ref, *(TMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->Lock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->Unlock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MHMatrix*) G__getstructoffset())->AddColumn((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->AddColumns((MDataArray*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->AddColumns(*(TCollection*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHMatrix*) G__getstructoffset())->GetColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHMatrix*) G__getstructoffset())->GetColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMatrix& obj = ((const MHMatrix*) G__getstructoffset())->GetM();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHMatrix*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHMatrix*) G__getstructoffset())->GetNumRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHMatrix*) G__getstructoffset())->InvertPosDef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const MHMatrix*) G__getstructoffset())->CalcDist(*(TMatrix*) libp->para[0].ref, *(TVector*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const MHMatrix*) G__getstructoffset())->CalcDist(*(TMatrix*) libp->para[0].ref, *(TVector*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((MHMatrix*) G__getstructoffset())->CalcDist(*(TVector*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((MHMatrix*) G__getstructoffset())->CalcDist(*(TVector*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHMatrix*) G__getstructoffset())->SetOwner((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHMatrix*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->Reassign();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const TArrayI* pobj;
         const TArrayI xobj = ((const MHMatrix*) G__getstructoffset())->GetIndexOfSortedColumn((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
         pobj = new TArrayI(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const TArrayI* pobj;
         const TArrayI xobj = ((const MHMatrix*) G__getstructoffset())->GetIndexOfSortedColumn((Int_t) G__int(libp->para[0]));
         pobj = new TArrayI(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const TArrayI* pobj;
         const TArrayI xobj = ((const MHMatrix*) G__getstructoffset())->GetIndexOfSortedColumn();
         pobj = new TArrayI(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MHMatrix*) G__getstructoffset())->SortMatrixByColumn((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHMatrix*) G__getstructoffset())->SortMatrixByColumn((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHMatrix*) G__getstructoffset())->SortMatrixByColumn();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->SetNumRow((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHMatrix*) G__getstructoffset())->GetNumRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MHMatrix*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHMatrix*) G__getstructoffset())->GetRow(*(TVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHMatrix*) G__getstructoffset())->operator>>(*(TVector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->Fill((MParList*) G__int(libp->para[0]), (MTask*) G__int(libp->para[1])
, (MFilter*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->Fill((MParList*) G__int(libp->para[0]), (MTask*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->ReduceNumberOfRows((UInt_t) G__int(libp->para[0]), *((const TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->RemoveInvalidRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix((const UInt_t) G__int(libp->para[0]), *(TH1F*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (TMatrix*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix((const UInt_t) G__int(libp->para[0]), *(TH1F*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix((const UInt_t) G__int(libp->para[0]), *(TH1F*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix((Int_t) G__int(libp->para[0]), (TMatrix*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MHMatrix*) G__getstructoffset())->DefRefMatrix());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->ShuffleRows((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->ReduceRows((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HBaseCint_312_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__HBaseCint_312_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHMatrix* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHMatrix(*(MHMatrix*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHMatrix G__TMHMatrix;
static int G__HBaseCint_312_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHMatrix*) (soff+(sizeof(MHMatrix)*i)))->~G__TMHMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHMatrix*) (soff))->~G__TMHMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__HBaseCint_312_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMatrix* dest = (MHMatrix*) G__getstructoffset();
   *dest = *(MHMatrix*) libp->para[0].ref;
   const MHMatrix& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MH */

/* MFillH */

/* MBinning */

/* MH3 */

/* MHn */

/* MHArray */

/* MHMatrix */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncHBaseCint {
 public:
  G__Sizep2memfuncHBaseCint(): p(&G__Sizep2memfuncHBaseCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncHBaseCint::*p)();
};

size_t G__get_sizep2memfuncHBaseCint()
{
  G__Sizep2memfuncHBaseCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceHBaseCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MH))) {
     MH *G__Lderived;
     G__Lderived=(MH*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MFillH))) {
     MFillH *G__Lderived;
     G__Lderived=(MFillH*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH),G__get_linked_tagnum(&G__HBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH),G__get_linked_tagnum(&G__HBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MBinning))) {
     MBinning *G__Lderived;
     G__Lderived=(MBinning*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MBinning),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MBinning),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MH3))) {
     MH3 *G__Lderived;
     G__Lderived=(MH3*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH3),G__get_linked_tagnum(&G__HBaseCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH3),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH3),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MHn))) {
     MHn *G__Lderived;
     G__Lderived=(MHn*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHn),G__get_linked_tagnum(&G__HBaseCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHn),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHn),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MHArray))) {
     MHArray *G__Lderived;
     G__Lderived=(MHArray*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHArray),G__get_linked_tagnum(&G__HBaseCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHArray),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHArray),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix))) {
     MHMatrix *G__Lderived;
     G__Lderived=(MHMatrix*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix),G__get_linked_tagnum(&G__HBaseCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix),G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix),G__get_linked_tagnum(&G__HBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableHBaseCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__HBaseCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrix",117,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVector",117,G__get_linked_tagnum(&G__HBaseCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MH */
static void G__setup_memvarMH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH));
   { MH *p; p=(MH*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fSerialNumber=",0,"Serial number (eg of telecope)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumExecutions=",0,"Number of calls to Fill function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFillH */
static void G__setup_memvarMFillH(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   { MFillH *p; p=(MFillH*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MFillHcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoNotDisplay=%lldLL",(long long)MFillH::kDoNotDisplay).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MFillHcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kCanSkip=%lldLL",(long long)MFillH::kCanSkip).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MParContainer),-1,-1,4,"fParContainer=",0,"! Pointer to the data container storing");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fParContainerName=",0,"Name to a data container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MH),-1,-1,4,"fH=",0,"Pointer to the MH container to get filled");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fHName=",0,"Name to a MH container to get filled");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fNameTab=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fTitleTab=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MParameterD),-1,-1,4,"fWeight=",0,"! Pointer to the container storing a weight");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fWeightName=",0,"Name of a container storing a weight");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MData),-1,-1,4,"fIndex=",0,"MData object describing the 'key' to an automatic index for an MHArray");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MMap),-1,-1,4,"fMapIdx=",0,"! Map to map key-index-pair for an MHArray (MMap see MFillH.cc)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TCanvas),-1,-1,4,"fCanvas=",0,"! Canvas used to update a MStatusDisplay at the end of a loop");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fDrawOption=",0,"Draw option for status display");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MBinning */
static void G__setup_memvarMBinning(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   { MBinning *p; p=(MBinning*)0x1000; if (p) { }
   G__memvar_setup((void*)(&MBinning::gsDefName),117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,1,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)(&MBinning::gsDefTitle),117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,1,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TArrayD),-1,-1,4,"fEdges=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MBinningcLcLdA),-1,-2,4,"kIsDefault=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MBinningcLcLdA),-1,-2,4,"kIsLinear=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MBinningcLcLdA),-1,-2,4,"kIsLogarithmic=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MBinningcLcLdA),-1,-2,4,"kIsCosinic=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MBinningcLcLdA),-1,-2,4,"kIsUserArray=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MH3 */
static void G__setup_memvarMH3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   { MH3 *p; p=(MH3*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kNoLabels=%lldLL",(long long)MH3::kNoLabels).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsX=%lldLL",(long long)MH3::kLabelsX).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsY=%lldLL",(long long)MH3::kLabelsY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsZ=%lldLL",(long long)MH3::kLabelsZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsXY=%lldLL",(long long)MH3::kLabelsXY).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsXZ=%lldLL",(long long)MH3::kLabelsXZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsYZ=%lldLL",(long long)MH3::kLabelsYZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t),-1,-2,1,G__FastAllocString(2048).Format("kLabelsXYZ=%lldLL",(long long)MH3::kLabelsXYZ).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLType_t),-1,-2,1,G__FastAllocString(2048).Format("kHistogram=%lldLL",(long long)MH3::kHistogram).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLType_t),-1,-2,1,G__FastAllocString(2048).Format("kProfile=%lldLL",(long long)MH3::kProfile).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLType_t),-1,-2,1,G__FastAllocString(2048).Format("kProfileSpread=%lldLL",(long long)MH3::kProfileSpread).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoNotReset=%lldLL",(long long)MH3::kDoNotReset).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MObjLookup),-1,-1,4,"fLabels[3]=",0,"! Lookup table to conflate and name labels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDimension=",0,"Number of dimensions of histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TH1),-1,-1,2,"fHist=",0,"Histogram to fill");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MData),-1,-1,2,"fData[4]=",0,"Object from which the data is filled");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MData),-1,-1,2,"fWeight=",0,"Additional weight");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MBinning),-1,-1,2,"fBins[3]=",0,"Binning set omitting the parlist access");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fScale[4]=",0,"Scale for the three axis (eg unit)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"fStyleBits=",0,"Set the range of a histogram automatically in Finalize");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TFormula),-1,-1,2,"fConversion=",0,"Conversion function for displaying the histogram");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLdA),-1,-2,2,"kIsLogx=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLdA),-1,-2,2,"kIsLogy=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLdA),-1,-2,2,"kIsLogz=524288LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHn */
static void G__setup_memvarMHn(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHn));
   { MHn *p; p=(MHn*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHncLcLLayout_t),-1,-2,1,G__FastAllocString(2048).Format("kSimple=%lldLL",(long long)MHn::kSimple).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHncLcLLayout_t),-1,-2,1,G__FastAllocString(2048).Format("kComplex=%lldLL",(long long)MHn::kComplex).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHncLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kDoNotReset=%lldLL",(long long)MHn::kDoNotReset).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MH3),-1,-1,2,"fHist[6]=",0,"Possible six histograms");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,2,"fDrawOption[6]=",0,"Possible corresponding draw options");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MHncLcLLayout_t),-1,-1,2,"fLayout=",0,"Specifier for the layout in the canvas");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNum=",0,"Number of initialized histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHArray */
static void G__setup_memvarMHArray(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   { MHArray *p; p=(MHArray*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdx=",0,"current index for the fill function");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TList),-1,-1,4,"fArray=",0,"-> Array storing the histograms");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MParList),-1,-1,4,"fParList=",0,"! pointer to parameter list used for SetupFill when a new Hist is created");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),-1,-1,4,"fClass=",0,"pointer to class entry in root dictionary");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MH),-1,-1,4,"fTemplate=",0,"-> pointer to a template histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-1,4,"fTemplateName=",0,"name of the template class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MMap),-1,-1,4,"fMapIdx=",0,"! Table to map keys to array indices");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHArraycLcLdA),-1,-2,4,"kUseTemplate=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHMatrix */
static void G__setup_memvarMHMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   { MHMatrix *p; p=(MHMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,4,"gsDefName=",0,"! Default Name");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HBaseCintLN_TString),-1,-2,4,"gsDefTitle=",0,"! Default Title");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumRows=",0,"! Number of rows filled into the matrix (this is NOT the number of rows of the matrix!)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRow=",0,"! Present row");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,4,"fM=",0,"Matrix to be filled");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,4,"fM2=",0,"! Covariance Matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_MDataArray),-1,-1,4,"fData=",0,"List of data members (columns)");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrixcLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HBaseCintLN_MHMatrixcLcLdA),-1,-2,4,"kIsLocked=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarHBaseCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMH(void) {
   /* MH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH));
   G__memfunc_setup("GetBinningForLabels",1887,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 2, 3, 4, 0, 
"u 'TAxis' - 1 - x U 'MBinning' - 10 - bins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RestoreBinningForLabels",2339,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 3, 4, 0, "u 'TAxis' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH",149,G__HBaseCint_177_0_3, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSerialNumber",1525,G__HBaseCint_177_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSerialNumber",1513,G__HBaseCint_177_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSerialNumber",1490,G__HBaseCint_177_0_6, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 1, 1, 1, 8, "C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSerialNumber",1490,G__HBaseCint_177_0_7, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 1, 1, 1, 8, "u 'TString' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumExecutions",1655,G__HBaseCint_177_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumExecutions",1667,G__HBaseCint_177_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSkipped",1245,G__HBaseCint_177_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - n C - - 10 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OverwritesDraw",1480,G__HBaseCint_177_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TClass' - 0 '0' cls", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,G__HBaseCint_177_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,G__HBaseCint_177_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__HBaseCint_177_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' weight", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,G__HBaseCint_177_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,G__HBaseCint_177_0_16, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,G__HBaseCint_177_0_17, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeDefCanvas",1257,G__HBaseCint_177_0_18, 85, G__get_linked_tagnum(&G__HBaseCintLN_TCanvas), -1, 0, 5, 3, 1, 0, 
"u 'TString' - 0 '\"\"' name C - - 10 '\"\"' title "
"h - 'UInt_t' 0 '625' w h - 'UInt_t' 0 '440' h "
"g - 'Bool_t' 0 'kTRUE' usescreenfactor", (char*)NULL, (void*) G__func2void( (TCanvas* (*)(TString, const char*, UInt_t, UInt_t, Bool_t))(&MH::MakeDefCanvas) ), 0);
   G__memfunc_setup("MakeDefCanvas",1257,G__HBaseCint_177_0_19, 85, G__get_linked_tagnum(&G__HBaseCintLN_TCanvas), -1, 0, 4, 3, 1, 0, 
"U 'TObject' - 10 - obj h - 'UInt_t' 0 '625' w "
"h - 'UInt_t' 0 '440' h g - 'Bool_t' 0 'kFALSE' usescreenfactor", (char*)NULL, (void*) G__func2void( (TCanvas* (*)(const TObject*, UInt_t, UInt_t, Bool_t))(&MH::MakeDefCanvas) ), 0);
   G__memfunc_setup("RemoveFromPad",1303,G__HBaseCint_177_0_20, 121, -1, -1, 0, 1, 3, 1, 0, "C - - 10 - name", (char*)NULL, (void*) G__func2void( (void (*)(const char*))(&MH::RemoveFromPad) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_21, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TH1' - 1 - h u 'MBinning' - 11 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, const MBinning&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_22, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH2' - 1 - h u 'MBinning' - 11 - binsx "
"u 'MBinning' - 11 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2&, const MBinning&, const MBinning&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_23, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TH3' - 1 - h u 'MBinning' - 11 - binsx "
"u 'MBinning' - 11 - binsy u 'MBinning' - 11 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3&, const MBinning&, const MBinning&, const MBinning&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_24, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TH1' - 1 - h u 'TArrayD' - 11 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_25, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH2' - 1 - h u 'TArrayD' - 11 - binsx "
"u 'TArrayD' - 11 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2&, const TArrayD&, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_26, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TH3' - 1 - h u 'TArrayD' - 11 - binsx "
"u 'TArrayD' - 11 - binsy u 'TArrayD' - 11 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3&, const TArrayD&, const TArrayD&, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_27, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TH1' - 1 - h u 'TAxis' - 11 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, const TAxis&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_28, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH2' - 1 - h u 'TAxis' - 11 - binsx "
"u 'TAxis' - 11 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2&, const TAxis&, const TAxis&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_29, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TH3' - 1 - h u 'TAxis' - 11 - binsx "
"u 'TAxis' - 11 - binsy u 'TAxis' - 11 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3&, const TAxis&, const TAxis&, const TAxis&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("CopyBinning",1120,G__HBaseCint_177_0_30, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TH1' - 11 - x u 'TH1' - 1 - h", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, TH1&))(&MH::CopyBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 10 - x "
"u 'TH1' - 1 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, const TString, TH1&))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 10 - x "
"u 'TString' - 0 - y u 'TH2' - 1 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, const TString, TString, TH2&))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 10 - x "
"u 'TString' - 0 - y u 'TString' - 0 - z "
"u 'TH3' - 1 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, const TString, TString, TString, TH3&))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_34, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h U 'MBinning' - 10 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, const MBinning*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_35, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH2' - 0 - h U 'MBinning' - 10 - binsx "
"U 'MBinning' - 10 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, const MBinning*, const MBinning*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_36, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH3' - 0 - h U 'MBinning' - 10 - binsx "
"U 'MBinning' - 10 - binsy U 'MBinning' - 10 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3*, const MBinning*, const MBinning*, const MBinning*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_37, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h u 'TArrayD' - 11 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_38, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH2' - 0 - h u 'TArrayD' - 11 - binsx "
"u 'TArrayD' - 11 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, const TArrayD&, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_39, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH3' - 0 - h u 'TArrayD' - 11 - binsx "
"u 'TArrayD' - 11 - binsy u 'TArrayD' - 11 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3*, const TArrayD&, const TArrayD&, const TArrayD&))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_40, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h U 'TAxis' - 10 - binsx", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, const TAxis*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_41, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH2' - 0 - h U 'TAxis' - 10 - binsx "
"U 'TAxis' - 10 - binsy", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, const TAxis*, const TAxis*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("SetBinning",1009,G__HBaseCint_177_0_42, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH3' - 0 - h U 'TAxis' - 10 - binsx "
"U 'TAxis' - 10 - binsy U 'TAxis' - 10 - binsz", (char*)NULL, (void*) G__func2void( (void (*)(TH3*, const TAxis*, const TAxis*, const TAxis*))(&MH::SetBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 0 - x "
"U 'TH1' - 0 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, TString, TH1*))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 0 - x "
"u 'TString' - 0 - y U 'TH2' - 0 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, TString, TString, TH2*))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("ApplyBinning",1227,G__HBaseCint_177_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'MParList' - 11 - plist u 'TString' - 0 - x "
"u 'TString' - 0 - y u 'TString' - 0 - z "
"U 'TH3' - 0 - h", (char*)NULL, (void*) G__func2void( (Bool_t (*)(const MParList&, TString, TString, TString, TH3*))(&MH::ApplyBinning) ), 0);
   G__memfunc_setup("SetBinomialErrors",1748,G__HBaseCint_177_0_46, 121, -1, -1, 0, 5, 3, 1, 0, 
"u 'TH1' - 1 - hres u 'TH1' - 11 - h1 "
"u 'TH1' - 11 - h2 d - 'Double_t' 0 '1' c1 "
"d - 'Double_t' 0 '1' c2", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, const TH1&, const TH1&, Double_t, Double_t))(&MH::SetBinomialErrors) ), 0);
   G__memfunc_setup("RemoveFirstBin",1423,G__HBaseCint_177_0_47, 121, -1, -1, 0, 1, 3, 1, 0, "u 'TH1' - 1 - h", (char*)NULL, (void*) G__func2void( (void (*)(TH1&))(&MH::RemoveFirstBin) ), 0);
   G__memfunc_setup("ScaleArray",999,G__HBaseCint_177_0_48, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TArrayD' - 1 - bins d - 'Double_t' 0 - f", (char*)NULL, (void*) G__func2void( (void (*)(TArrayD&, Double_t))(&MH::ScaleArray) ), 0);
   G__memfunc_setup("ScaleAxis",893,G__HBaseCint_177_0_49, 117, G__get_linked_tagnum(&G__HBaseCintLN_TArrayD), -1, 0, 2, 3, 1, 0, 
"u 'TAxis' - 1 - axe d - 'Double_t' 0 - f", (char*)NULL, (void*) G__func2void( (TArrayD (*)(TAxis&, Double_t))(&MH::ScaleAxis) ), 0);
   G__memfunc_setup("ScaleAxis",893,G__HBaseCint_177_0_50, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TH1' - 1 - bins d - 'Double_t' 0 '1' fx "
"d - 'Double_t' 0 '1' fy d - 'Double_t' 0 '1' fz", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, Double_t, Double_t, Double_t))(&MH::ScaleAxis) ), 0);
   G__memfunc_setup("GetBinCenterLog",1468,G__HBaseCint_177_0_51, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"u 'TAxis' - 11 - axe i - 'Int_t' 0 - nbin", (char*)NULL, (void*) G__func2void( (Double_t (*)(const TAxis&, Int_t))(&MH::GetBinCenterLog) ), 0);
   G__memfunc_setup("DrawSameCopy",1199,G__HBaseCint_177_0_52, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist1 u 'TH1' - 11 - hist2 "
"u 'TString' - 10 - title", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, const TH1&, const TString))(&MH::DrawSameCopy) ), 0);
   G__memfunc_setup("DrawSame",788,G__HBaseCint_177_0_53, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TH1' - 1 - hist1 u 'TH1' - 1 - hist2 "
"u 'TString' - 10 - title g - 'Bool_t' 0 'kFALSE' same", (char*)NULL, (void*) G__func2void( (void (*)(TH1&, TH1&, const TString, Bool_t))(&MH::DrawSame) ), 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClone",895,G__HBaseCint_177_0_55, 85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 3, 1, 1, 8, 
"C - 'Option_t' 10 - opt i - 'Int_t' 0 - w "
"i - 'Int_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawClone",895,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNewPad",863,G__HBaseCint_177_0_57, 85, G__get_linked_tagnum(&G__HBaseCintLN_TVirtualPad), -1, 0, 1, 3, 1, 0, "u 'TString' - 1 - opt", (char*)NULL, (void*) G__func2void( (TVirtualPad* (*)(TString&))(&MH::GetNewPad) ), 0);
   G__memfunc_setup("FindGoodLimits",1404,G__HBaseCint_177_0_58, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - nbins i - 'Int_t' 1 - newbins "
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"g - 'Bool_t' 0 - isInteger", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t&, Double_t&, Double_t&, Bool_t))(&MH::FindGoodLimits) ), 0);
   G__memfunc_setup("GetMinimumGT",1175,G__HBaseCint_177_0_59, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"u 'TH1' - 11 - h d - 'Double_t' 0 '0' gt", (char*)NULL, (void*) G__func2void( (Double_t (*)(const TH1&, Double_t))(&MH::GetMinimumGT) ), 0);
   G__memfunc_setup("StripZeros",1061,G__HBaseCint_177_0_60, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TH1' - 1 - h i - 'Int_t' 0 - nbins", (char*)NULL, (void*) G__func2void( (Int_t (*)(TH1&, Int_t))(&MH::StripZeros) ), 0);
   G__memfunc_setup("ProjectArray",1238,G__HBaseCint_177_0_61, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1I), -1, 0, 4, 3, 1, 0, 
"u 'TArrayF' - 11 - array i - 'Int_t' 0 '30' nbins "
"C - - 10 '\"ProjectArray\"' name C - - 10 '\"Projected Array\"' title", (char*)NULL, (void*) G__func2void( (TH1I* (*)(const TArrayF&, Int_t, const char*, const char*))(&MH::ProjectArray) ), 0);
   G__memfunc_setup("ProjectArray",1238,G__HBaseCint_177_0_62, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1I), -1, 0, 4, 3, 1, 0, 
"u 'TArrayD' - 11 - array i - 'Int_t' 0 '30' nbins "
"C - - 10 '\"ProjectArray\"' name C - - 10 '\"Projected Array\"' title", (char*)NULL, (void*) G__func2void( (TH1I* (*)(const TArrayD&, Int_t, const char*, const char*))(&MH::ProjectArray) ), 0);
   G__memfunc_setup("ProjectArray",1238,G__HBaseCint_177_0_63, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1I), -1, 0, 4, 3, 1, 0, 
"u 'MArrayF' - 11 - array i - 'Int_t' 0 '30' nbins "
"C - - 10 '\"ProjectArray\"' name C - - 10 '\"Projected Array\"' title", (char*)NULL, (void*) G__func2void( (TH1I* (*)(const MArrayF&, Int_t, const char*, const char*))(&MH::ProjectArray) ), 0);
   G__memfunc_setup("ProjectArray",1238,G__HBaseCint_177_0_64, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1I), -1, 0, 4, 3, 1, 0, 
"u 'MArrayD' - 11 - array i - 'Int_t' 0 '30' nbins "
"C - - 10 '\"ProjectArray\"' name C - - 10 '\"Projected Array\"' title", (char*)NULL, (void*) G__func2void( (TH1I* (*)(const MArrayD&, Int_t, const char*, const char*))(&MH::ProjectArray) ), 0);
   G__memfunc_setup("GetRangeUser",1196,G__HBaseCint_177_0_65, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist d - 'Axis_t' 1 - lo "
"d - 'Axis_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Axis_t&, Axis_t&))(&MH::GetRangeUser) ), 0);
   G__memfunc_setup("GetRangeUserX",1284,G__HBaseCint_177_0_66, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist d - 'Axis_t' 1 - lo "
"d - 'Axis_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Axis_t&, Axis_t&))(&MH::GetRangeUserX) ), 0);
   G__memfunc_setup("GetRangeUserY",1285,G__HBaseCint_177_0_67, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist d - 'Axis_t' 1 - lo "
"d - 'Axis_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Axis_t&, Axis_t&))(&MH::GetRangeUserY) ), 0);
   G__memfunc_setup("GetRange",781,G__HBaseCint_177_0_68, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist i - 'Int_t' 1 - lo "
"i - 'Int_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Int_t&, Int_t&))(&MH::GetRange) ), 0);
   G__memfunc_setup("GetRangeX",869,G__HBaseCint_177_0_69, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist i - 'Int_t' 1 - lo "
"i - 'Int_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Int_t&, Int_t&))(&MH::GetRangeX) ), 0);
   G__memfunc_setup("GetRangeY",870,G__HBaseCint_177_0_70, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TH1' - 11 - hist i - 'Int_t' 1 - lo "
"i - 'Int_t' 1 - hi", (char*)NULL, (void*) G__func2void( (void (*)(const TH1&, Int_t&, Int_t&))(&MH::GetRangeY) ), 0);
   G__memfunc_setup("FindObjectInPad",1444,G__HBaseCint_177_0_71, 85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 2, 3, 1, 0, 
"C - - 10 - name U 'TVirtualPad' - 0 '0' pad", (char*)NULL, (void*) G__func2void( (TObject* (*)(const char*, TVirtualPad*))(&MH::FindObjectInPad) ), 0);
   G__memfunc_setup("SetPalette",1019,G__HBaseCint_177_0_72, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 '\"pretty\"' paletteName i - 'Int_t' 0 '50' ncol", (char*)NULL, (void*) G__func2void( (void (*)(TString, Int_t))(&MH::SetPalette) ), 0);
   G__memfunc_setup("SetPadRange",1070,G__HBaseCint_177_0_73, 121, -1, -1, 0, 2, 3, 1, 0, 
"f - 'Float_t' 0 - max f - 'Float_t' 0 '1' aspect", (char*)NULL, (void*) G__func2void( (void (*)(Float_t, Float_t))(&MH::SetPadRange) ), 0);
   G__memfunc_setup("SetPadRange",1070,G__HBaseCint_177_0_74, 121, -1, -1, 0, 4, 3, 1, 0, 
"f - 'Float_t' 0 - x0 f - 'Float_t' 0 - y0 "
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1", (char*)NULL, (void*) G__func2void( (void (*)(Float_t, Float_t, Float_t, Float_t))(&MH::SetPadRange) ), 0);
   G__memfunc_setup("GetObjectInfoH",1355,G__HBaseCint_177_0_75, 67, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py "
"u 'TH1' - 11 - h", (char*)NULL, (void*) G__func2void( (char* (*)(Int_t, Int_t, const TH1&))(&MH::GetObjectInfoH) ), 0);
   G__memfunc_setup("GetObjectInfoP",1363,G__HBaseCint_177_0_76, 67, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py "
"u 'TProfile' - 11 - p", (char*)NULL, (void*) G__func2void( (char* (*)(Int_t, Int_t, const TProfile&))(&MH::GetObjectInfoP) ), 0);
   G__memfunc_setup("GetObjectInfo",1283,G__HBaseCint_177_0_77, 67, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py "
"u 'TObject' - 11 - o", (char*)NULL, (void*) G__func2void( (char* (*)(Int_t, Int_t, const TObject&))(&MH::GetObjectInfo) ), 0);
   G__memfunc_setup("GetObjectInfo",1283,(G__InterfaceMethod) NULL,67, -1, -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HBaseCint_177_0_79, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_177_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_177_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_177_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_177_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_177_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_177_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_177_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_177_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MH::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MH", 149, G__HBaseCint_177_0_91, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 0, 1, 1, 1, 0, "u 'MH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MH", 275, G__HBaseCint_177_0_92, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_177_0_93, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 1, 1, 1, 1, 0, "u 'MH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFillH(void) {
   /* MFillH */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MFillH));
   G__memfunc_setup("ExtractName",1116,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 1, 1, 4, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractClass",1233,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 1, 1, 4, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawToDisplay",1319,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFillH",540,G__HBaseCint_181_0_6, 105, G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFillH",540,G__HBaseCint_181_0_7, 105, G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 4, 1, 1, 0, 
"C - - 10 - hist C - - 10 '0' par "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFillH",540,G__HBaseCint_181_0_8, 105, G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 4, 1, 1, 0, 
"C - - 10 - hist U 'MParContainer' - 0 - par "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFillH",540,G__HBaseCint_181_0_9, 105, G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 4, 1, 1, 0, 
"U 'MH' - 0 - hist C - - 10 '0' par "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFillH",540,G__HBaseCint_181_0_10, 105, G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 4, 1, 1, 0, 
"U 'MH' - 0 - hist U 'MParContainer' - 0 - par "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTab",964,G__HBaseCint_181_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' n C - - 10 '\"\"' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTitleTab",1093,G__HBaseCint_181_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRuleForIdx",1296,G__HBaseCint_181_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRuleForIdx",1296,G__HBaseCint_181_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MData' - 0 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetWeight",1131,G__HBaseCint_181_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__HBaseCint_181_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MParameterD' - 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__HBaseCint_181_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"MWeight\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrawOption",1331,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDrawOption",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Option_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCanvas",892,G__HBaseCint_181_0_24, 85, G__get_linked_tagnum(&G__HBaseCintLN_TCanvas), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HBaseCint_181_0_25, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFillH::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_181_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFillH::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_181_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFillH::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_181_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFillH::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_181_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_181_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFillH::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_181_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFillH::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_181_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFillH::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_181_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFillH::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFillH", 540, G__HBaseCint_181_0_37, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 0, 1, 1, 1, 0, "u 'MFillH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFillH", 666, G__HBaseCint_181_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_181_0_39, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MFillH), -1, 1, 1, 1, 1, 0, "u 'MFillH' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMBinning(void) {
   /* MBinning */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MBinning));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_2, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_3, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - hi C - - 10 '0' name "
"C - - 10 '\"\"' opt C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_4, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 3, 1, 1, 0, 
"u 'MBinning' - 11 - bins C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_5, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 4, 1, 1, 0, 
"u 'TH1' - 11 - h c - 'Char_t' 10 ''x'' axis "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_6, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 3, 1, 1, 0, 
"u 'TAxis' - 11 - a C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MBinning",786,G__HBaseCint_186_0_7, 105, G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 0, 3, 1, 1, 0, 
"u 'TArrayD' - 11 - a C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - named", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'MParList' - 11 - list C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdgesRaw",1086,G__HBaseCint_186_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - txt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TAxis' - 11 - axe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MBinning' - 11 - bins", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TH1' - 11 - h c - 'Char_t' 10 ''x'' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 10 - lo "
"d - 'Axis_t' 10 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdges",788,G__HBaseCint_186_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - nbins d - 'Axis_t' 10 - lo "
"d - 'Axis_t' 0 - up C - - 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdgesLin",1079,G__HBaseCint_186_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdgesLog",1078,G__HBaseCint_186_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdgesCos",1081,G__HBaseCint_186_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEdgesASin",1151,G__HBaseCint_186_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nbins d - 'Axis_t' 0 - lo "
"d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindLoEdge",945,G__HBaseCint_186_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHiEdge",935,G__HBaseCint_186_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdgeLo",848,G__HBaseCint_186_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdgeHi",838,G__HBaseCint_186_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumEdges",1080,G__HBaseCint_186_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBins",988,G__HBaseCint_186_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdges",776,G__HBaseCint_186_0_27, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEdgesD",844,G__HBaseCint_186_0_28, 117, G__get_linked_tagnum(&G__HBaseCintLN_TArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__HBaseCint_186_0_29, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEdge",638,G__HBaseCint_186_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Axis_t' 0 - up", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveFirstEdge",1515,G__HBaseCint_186_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveLastEdge",1399,G__HBaseCint_186_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLinear",791,G__HBaseCint_186_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLogarithmic",1327,G__HBaseCint_186_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCosinic",900,G__HBaseCint_186_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDefault",897,G__HBaseCint_186_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsUserArray",1114,G__HBaseCint_186_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasTitle",798,G__HBaseCint_186_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Apply",518,G__HBaseCint_186_0_39, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TH1' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HBaseCint_186_0_42, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MBinning::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_186_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBinning::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_186_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MBinning::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_186_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MBinning::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_186_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_186_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBinning::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_186_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBinning::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_186_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MBinning::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_186_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MBinning::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MBinning", 912, G__HBaseCint_186_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_186_0_55, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MBinning), -1, 1, 1, 1, 1, 0, "u 'MBinning' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMH3(void) {
   /* MH3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MH3));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabels",883,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__HBaseCintLN_MObjLookup), -1, 0, 1, 1, 4, 0, "c - - 0 - axe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitLabels",999,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TAxis' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeflateLabels",1288,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabels",883,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLLabels_t), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 2, 1, 4, 9, 
"i - 'Int_t' 0 - axe d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3cLcLType_t), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Convert",737,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH1' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleLogAxis",1283,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'TAxis' - 1 - axe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_11, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 '0' dim i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_12, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 1, 1, 1, 0, "u 'TH1' - 11 - h1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_13, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 2, 1, 1, 0, 
"C - - 10 - memberx i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_14, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 3, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_15, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 4, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"C - - 10 - memberz i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MH3",200,G__HBaseCint_241_0_16, 105, G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 5, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"C - - 10 - memberz C - - 10 - weight "
"i 'MH3::Type_t' - 0 'MH3::kProfile' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleX",876,G__HBaseCint_241_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleY",877,G__HBaseCint_241_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleZ",878,G__HBaseCint_241_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScaleT",872,G__HBaseCint_241_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScale",788,G__HBaseCint_241_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 '1' y "
"d - 'Double_t' 0 '1' z d - 'Double_t' 0 '1' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogx",710,G__HBaseCint_241_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogy",711,G__HBaseCint_241_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogz",712,G__HBaseCint_241_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLog",590,G__HBaseCint_241_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' x g - 'Bool_t' 0 'kTRUE' y "
"g - 'Bool_t' 0 'kTRUE' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoRangeX",1290,G__HBaseCint_241_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoRangeY",1291,G__HBaseCint_241_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoRangeZ",1292,G__HBaseCint_241_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoRange",1202,G__HBaseCint_241_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' x g - 'Bool_t' 0 'kTRUE' y "
"g - 'Bool_t' 0 'kTRUE' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningX",1097,G__HBaseCint_241_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MBinning' - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningY",1098,G__HBaseCint_241_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MBinning' - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinningZ",1099,G__HBaseCint_241_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MBinning' - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinnings",1124,G__HBaseCint_241_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'MBinning' - 0 '0' x U 'MBinning' - 0 '0' y "
"U 'MBinning' - 0 '0' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sumw2",478,G__HBaseCint_241_0_34, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitLabels",999,G__HBaseCint_241_0_35, 121, -1, -1, 0, 1, 1, 1, 8, "i 'MH3::Labels_t' - 0 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabel",1189,G__HBaseCint_241_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - - 0 - axe C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelX",1277,G__HBaseCint_241_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelY",1278,G__HBaseCint_241_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelZ",1279,G__HBaseCint_241_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabel",1067,G__HBaseCint_241_0_40, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - - 0 - axe i - 'Int_t' 0 '0' label "
"C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelX",1155,G__HBaseCint_241_0_41, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelY",1156,G__HBaseCint_241_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelZ",1157,G__HBaseCint_241_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabels",1182,G__HBaseCint_241_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"c - - 0 - axe u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsX",1270,G__HBaseCint_241_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsY",1271,G__HBaseCint_241_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsZ",1272,G__HBaseCint_241_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__HBaseCint_241_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - phrase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversion",1362,G__HBaseCint_241_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 '\"\"' func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDimension",1222,G__HBaseCint_241_0_50, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbins",794,G__HBaseCint_241_0_51, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFixBin",961,G__HBaseCint_241_0_52, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 '0' y "
"d - 'Double_t' 0 '0' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist",696,G__HBaseCint_241_0_53, 117, G__get_linked_tagnum(&G__HBaseCintLN_TH1), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHist",696,G__HBaseCint_241_0_54, 117, G__get_linked_tagnum(&G__HBaseCintLN_TH1), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,G__HBaseCint_241_0_56, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 1, 1, 1, 8, "c - 'Char_t' 10 ''x'' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,G__HBaseCint_241_0_60, 85, G__get_linked_tagnum(&G__HBaseCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("New",298,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_MParContainer), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTitle",802,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFullTitle",1205,G__HBaseCint_241_0_67, 117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HBaseCint_241_0_71, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MH3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_241_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_241_0_73, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MH3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_241_0_74, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MH3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_241_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_241_0_79, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_241_0_80, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MH3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_241_0_81, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MH3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_241_0_82, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MH3::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MH3", 200, G__HBaseCint_241_0_83, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 0, 1, 1, 1, 0, "u 'MH3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MH3", 326, G__HBaseCint_241_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_241_0_85, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MH3), -1, 1, 1, 1, 1, 0, "u 'MH3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHn(void) {
   /* MHn */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHn));
   G__memfunc_setup("InitHist",812,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitName",789,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - n C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTitle",918,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - n C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrawOption",1331,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - n C - - 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHn",259,G__HBaseCint_245_0_5, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHn), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLayout",938,G__HBaseCint_245_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MHn::Layout_t' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDrawOption",1331,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddHist",673,G__HBaseCint_245_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - memberx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHist",673,G__HBaseCint_245_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHist",673,G__HBaseCint_245_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"C - - 10 - memberz i 'MH3::Type_t' - 0 'MH3::kHistogram' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHist",673,G__HBaseCint_245_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - memberx C - - 10 - membery "
"C - - 10 - memberz C - - 10 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitName",789,G__HBaseCint_245_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTitle",918,G__HBaseCint_245_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScale",788,G__HBaseCint_245_0_14, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 '1' y "
"d - 'Double_t' 0 '2' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLog",590,G__HBaseCint_245_0_15, 121, -1, -1, 0, 3, 1, 1, 8, 
"g - 'Bool_t' 0 'kTRUE' x g - 'Bool_t' 0 'kTRUE' y "
"g - 'Bool_t' 0 'kTRUE' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAutoRange",1202,G__HBaseCint_245_0_16, 121, -1, -1, 0, 3, 1, 1, 8, 
"g - 'Bool_t' 0 'kTRUE' x g - 'Bool_t' 0 'kTRUE' y "
"g - 'Bool_t' 0 'kTRUE' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinnings",1124,G__HBaseCint_245_0_17, 121, -1, -1, 0, 3, 1, 1, 8, 
"U 'MBinning' - 0 '0' x U 'MBinning' - 0 '0' y "
"U 'MBinning' - 0 '0' z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sumw2",478,G__HBaseCint_245_0_18, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitLabels",999,G__HBaseCint_245_0_19, 121, -1, -1, 0, 1, 1, 1, 8, "i 'MH3::Labels_t' - 0 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelX",1277,G__HBaseCint_245_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelY",1278,G__HBaseCint_245_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefaultLabelZ",1279,G__HBaseCint_245_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '0' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelX",1155,G__HBaseCint_245_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelY",1156,G__HBaseCint_245_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelZ",1157,G__HBaseCint_245_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - label C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsX",1270,G__HBaseCint_245_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsY",1271,G__HBaseCint_245_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefineLabelsZ",1272,G__HBaseCint_245_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWeight",916,G__HBaseCint_245_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - phrase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversion",1362,G__HBaseCint_245_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HBaseCint_245_0_36, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHn::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_245_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHn::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_245_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHn::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_245_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHn::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_245_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_245_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHn::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_245_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHn::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_245_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHn::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_245_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHn::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHn", 259, G__HBaseCint_245_0_48, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MHn), -1, 0, 1, 1, 1, 0, "u 'MHn' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHn", 385, G__HBaseCint_245_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_245_0_50, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MHn), -1, 1, 1, 1, 1, 0, "u 'MHn' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHArray(void) {
   /* MHArray */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHArray));
   G__memfunc_setup("CreateH",668,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLegendEntry",1386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"U 'TLegend' - 0 - leg U 'TObject' - 0 - obj "
"i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHArray",660,G__HBaseCint_249_0_4, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHArray), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHArray",660,G__HBaseCint_249_0_5, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHArray), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 10 - hname g - 'Bool_t' 0 'kFALSE' istempl "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHArray",660,G__HBaseCint_249_0_6, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHArray), -1, 0, 3, 1, 1, 0, 
"U 'MH' - 10 - hist C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__HBaseCint_249_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 10 - hname g - 'Bool_t' 0 'kFALSE' istempl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__HBaseCint_249_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MH' - 10 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddHistogram",1207,G__HBaseCint_249_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__HBaseCint_249_0_13, 117, G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("At",181,G__HBaseCint_249_0_14, 85, G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH",360,G__HBaseCint_249_0_15, 85, G__get_linked_tagnum(&G__HBaseCintLN_MH), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndexByKey",1288,G__HBaseCint_249_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndex",804,G__HBaseCint_249_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncIndex",786,G__HBaseCint_249_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DecIndex",772,G__HBaseCint_249_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndex",792,G__HBaseCint_249_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClone",895,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HBaseCint_249_0_24, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHArray::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_249_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHArray::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_249_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHArray::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_249_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHArray::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_249_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_249_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHArray::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_249_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHArray::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_249_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHArray::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_249_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHArray::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHArray", 660, G__HBaseCint_249_0_36, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MHArray), -1, 0, 1, 1, 1, 0, "u 'MHArray' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHArray", 786, G__HBaseCint_249_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHMatrix(void) {
   /* MHMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix));
   G__memfunc_setup("AddRow",577,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "u 'TMatrixT<float>' 'TMatrix' 11 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawDefRefInfo",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'TH1' - 11 - hth u 'TH1' - 11 - hthd "
"u 'TH1' - 11 - thsh i - 'Int_t' 0 - refcolumn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandomArrayI",1481,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TArrayI' - 1 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHMatrix",778,G__HBaseCint_312_0_9, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHMatrix",778,G__HBaseCint_312_0_10, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 0, 3, 1, 1, 0, 
"U 'MDataArray' - 0 - mat C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHMatrix",778,G__HBaseCint_312_0_11, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 0, 3, 1, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 11 - m C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHMatrix",778,G__HBaseCint_312_0_12, 105, G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 0, 4, 1, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 11 - m U 'MDataArray' - 0 - arr "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyCrop",815,G__HBaseCint_312_0_13, 121, -1, -1, 0, 3, 3, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 1 - target u 'TMatrixT<float>' 'TMatrix' 11 - source "
"i - 'Int_t' 0 - rows", (char*)NULL, (void*) G__func2void( (void (*)(TMatrix&, const TMatrix&, Int_t))(&MHMatrix::CopyCrop) ), 0);
   G__memfunc_setup("Lock",393,G__HBaseCint_312_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Unlock",620,G__HBaseCint_312_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddColumn",887,G__HBaseCint_312_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddColumns",1002,G__HBaseCint_312_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MDataArray' - 0 - mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddColumns",1002,G__HBaseCint_312_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TCollection' - 11 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColumns",1025,G__HBaseCint_312_0_19, 85, G__get_linked_tagnum(&G__HBaseCintLN_MDataArray), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetColumns",1025,G__HBaseCint_312_0_20, 85, G__get_linked_tagnum(&G__HBaseCintLN_MDataArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetM",365,G__HBaseCint_312_0_21, 117, G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR), G__defined_typename("TMatrix"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G__HBaseCint_312_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRows",1019,G__HBaseCint_312_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InvertPosDef",1209,G__HBaseCint_312_0_25, 85, G__get_linked_tagnum(&G__HBaseCintLN_TMatrixTlEfloatgR), G__defined_typename("TMatrix"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDist",775,G__HBaseCint_312_0_26, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'TMatrixT<float>' 'TMatrix' 11 - m u 'TVectorT<float>' 'TVector' 11 - v "
"i - 'Int_t' 0 '25' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDist",775,G__HBaseCint_312_0_27, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"u 'TVectorT<float>' 'TVector' 11 - v i - 'Int_t' 0 '25' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__HBaseCint_312_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reassign",828,G__HBaseCint_312_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndexOfSortedColumn",2220,G__HBaseCint_312_0_30, 117, G__get_linked_tagnum(&G__HBaseCintLN_TArrayI), -1, 0, 2, 1, 1, 9, 
"i - 'Int_t' 0 '0' ncol g - 'Bool_t' 0 'kTRUE' desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortMatrixByColumn",1862,G__HBaseCint_312_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' ncol g - 'Bool_t' 0 'kTRUE' desc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumRow",916,G__HBaseCint_312_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumRow",904,G__HBaseCint_312_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__HBaseCint_312_0_34, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRow",600,G__HBaseCint_312_0_35, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVectorT<float>' 'TVector' 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__HBaseCint_312_0_36, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVectorT<float>' 'TVector' 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__HBaseCint_312_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'MParList' - 0 - plist U 'MTask' - 0 - read "
"U 'MFilter' - 0 '0' filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__HBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReduceNumberOfRows",1825,G__HBaseCint_312_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - numrows u 'TString' - 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveInvalidRows",1760,G__HBaseCint_312_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefRefMatrix",1185,G__HBaseCint_312_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"h - 'UInt_t' 10 - refcolumn u 'TH1F' - 11 - thsh "
"i - 'Int_t' 0 '0' nmaxevts U 'TMatrixT<float>' 'TMatrix' 0 '0' mrest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DefRefMatrix",1185,G__HBaseCint_312_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' nmaxevts U 'TMatrixT<float>' 'TMatrix' 0 '0' mrest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShuffleRows",1144,G__HBaseCint_312_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - seed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReduceRows",1027,G__HBaseCint_312_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HBaseCint_312_0_47, 85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HBaseCint_312_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HBaseCint_312_0_49, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HBaseCint_312_0_50, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HBaseCint_312_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HBaseCint_312_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HBaseCint_312_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HBaseCint_312_0_57, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HBaseCint_312_0_58, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHMatrix::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHMatrix", 778, G__HBaseCint_312_0_59, (int) ('i'), G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 0, 1, 1, 1, 0, "u 'MHMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHMatrix", 904, G__HBaseCint_312_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__HBaseCint_312_0_61, (int) ('u'), G__get_linked_tagnum(&G__HBaseCintLN_MHMatrix), -1, 1, 1, 1, 1, 0, "u 'MHMatrix' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncHBaseCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalHBaseCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcHBaseCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__HBaseCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__HBaseCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MMap = { "MMap" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MData = { "MData" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MFillH = { "MFillH" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MFillHcLcLdA = { "MFillH::$" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TAxis = { "TAxis" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MBinning = { "MBinning" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MBinningcLcLdA = { "MBinning::$" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MArrayD = { "MArrayD" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MObjLookup = { "MObjLookup" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MH3 = { "MH3" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MH3cLcLLabels_t = { "MH3::Labels_t" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_MH3cLcLType_t = { "MH3::Type_t" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_MH3cLcLdA = { "MH3::$" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_MHn = { "MHn" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MHncLcLLayout_t = { "MHn::Layout_t" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_MHncLcLdA = { "MHn::$" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_TLegend = { "TLegend" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MHArray = { "MHArray" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MHArraycLcLdA = { "MHArray::$" , 101 , -1 };
G__linked_taginfo G__HBaseCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MDataArray = { "MDataArray" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__HBaseCintLN_MHMatrixcLcLdA = { "MHMatrix::$" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableHBaseCint() {
  G__HBaseCintLN_TClass.tagnum = -1 ;
  G__HBaseCintLN_TBuffer.tagnum = -1 ;
  G__HBaseCintLN_TMemberInspector.tagnum = -1 ;
  G__HBaseCintLN_TObject.tagnum = -1 ;
  G__HBaseCintLN_TCollection.tagnum = -1 ;
  G__HBaseCintLN_TString.tagnum = -1 ;
  G__HBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__HBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HBaseCintLN_TList.tagnum = -1 ;
  G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__HBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__HBaseCintLN_TCanvas.tagnum = -1 ;
  G__HBaseCintLN_TVirtualPad.tagnum = -1 ;
  G__HBaseCintLN_TEnv.tagnum = -1 ;
  G__HBaseCintLN_TArrayD.tagnum = -1 ;
  G__HBaseCintLN_MParContainer.tagnum = -1 ;
  G__HBaseCintLN_MInputStreamID.tagnum = -1 ;
  G__HBaseCintLN_MFilter.tagnum = -1 ;
  G__HBaseCintLN_MParList.tagnum = -1 ;
  G__HBaseCintLN_MTask.tagnum = -1 ;
  G__HBaseCintLN_MH.tagnum = -1 ;
  G__HBaseCintLN_MMap.tagnum = -1 ;
  G__HBaseCintLN_MData.tagnum = -1 ;
  G__HBaseCintLN_MParameterD.tagnum = -1 ;
  G__HBaseCintLN_MFillH.tagnum = -1 ;
  G__HBaseCintLN_MFillHcLcLdA.tagnum = -1 ;
  G__HBaseCintLN_TH1.tagnum = -1 ;
  G__HBaseCintLN_TAxis.tagnum = -1 ;
  G__HBaseCintLN_MBinning.tagnum = -1 ;
  G__HBaseCintLN_MBinningcLcLdA.tagnum = -1 ;
  G__HBaseCintLN_TH1I.tagnum = -1 ;
  G__HBaseCintLN_TH2.tagnum = -1 ;
  G__HBaseCintLN_TH3.tagnum = -1 ;
  G__HBaseCintLN_TArrayF.tagnum = -1 ;
  G__HBaseCintLN_MArrayF.tagnum = -1 ;
  G__HBaseCintLN_MArrayD.tagnum = -1 ;
  G__HBaseCintLN_TProfile.tagnum = -1 ;
  G__HBaseCintLN_TArrayI.tagnum = -1 ;
  G__HBaseCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__HBaseCintLN_TH1F.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__HBaseCintLN_MObjLookup.tagnum = -1 ;
  G__HBaseCintLN_TFormula.tagnum = -1 ;
  G__HBaseCintLN_MH3.tagnum = -1 ;
  G__HBaseCintLN_MH3cLcLLabels_t.tagnum = -1 ;
  G__HBaseCintLN_MH3cLcLType_t.tagnum = -1 ;
  G__HBaseCintLN_MH3cLcLdA.tagnum = -1 ;
  G__HBaseCintLN_MHn.tagnum = -1 ;
  G__HBaseCintLN_MHncLcLLayout_t.tagnum = -1 ;
  G__HBaseCintLN_MHncLcLdA.tagnum = -1 ;
  G__HBaseCintLN_TLegend.tagnum = -1 ;
  G__HBaseCintLN_MHArray.tagnum = -1 ;
  G__HBaseCintLN_MHArraycLcLdA.tagnum = -1 ;
  G__HBaseCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__HBaseCintLN_MDataArray.tagnum = -1 ;
  G__HBaseCintLN_MHMatrix.tagnum = -1 ;
  G__HBaseCintLN_MHMatrixcLcLdA.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableHBaseCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TCollection);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TString);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TList);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MFilter);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MTask);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MH),sizeof(MH),-1,323840,"A base class for Mars histograms",G__setup_memvarMH,G__setup_memfuncMH);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MMap);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MData);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MParameterD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MFillH),sizeof(MFillH),-1,324864,"Task to fill a histogram with data from a parameter container",G__setup_memvarMFillH,G__setup_memfuncMFillH);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MFillHcLcLdA);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TAxis);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MBinning),sizeof(MBinning),-1,324352,"Container to store the binning of a histogram",G__setup_memvarMBinning,G__setup_memfuncMBinning);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MBinningcLcLdA);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TH1I);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TH2);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TH3);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MArrayD);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TProfile);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MObjLookup);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TFormula);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MH3),sizeof(MH3),-1,324864,"Generalized 1/2/3D-histogram for Mars variables",G__setup_memvarMH3,G__setup_memfuncMH3);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MH3cLcLLabels_t);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MH3cLcLType_t);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MH3cLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHn),sizeof(MHn),-1,324864,"Generalized histogram class for up to six histograms",G__setup_memvarMHn,G__setup_memfuncMHn);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHncLcLLayout_t);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHncLcLdA);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TLegend);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHArray),sizeof(MHArray),-1,324864,"A histogram class for an array of Mars histograms",G__setup_memvarMHArray,G__setup_memfuncMHArray);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHArraycLcLdA);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MDataArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHMatrix),sizeof(MHMatrix),-1,324864,"Multidimensional Matrix (TMatrix) to store events",G__setup_memvarMHMatrix,G__setup_memfuncMHMatrix);
   G__get_linked_tagnum_fwd(&G__HBaseCintLN_MHMatrixcLcLdA);
}
extern "C" void G__cpp_setupHBaseCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupHBaseCint()");
  G__set_cpp_environmentHBaseCint();
  G__cpp_setup_tagtableHBaseCint();

  G__cpp_setup_inheritanceHBaseCint();

  G__cpp_setup_typetableHBaseCint();

  G__cpp_setup_memvarHBaseCint();

  G__cpp_setup_memfuncHBaseCint();
  G__cpp_setup_globalHBaseCint();
  G__cpp_setup_funcHBaseCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncHBaseCint();
  return;
}
class G__cpp_setup_initHBaseCint {
  public:
    G__cpp_setup_initHBaseCint() { G__add_setup_func("HBaseCint",(G__incsetup)(&G__cpp_setupHBaseCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initHBaseCint() { G__remove_setup_func("HBaseCint"); }
};
G__cpp_setup_initHBaseCint G__cpp_setup_initializerHBaseCint;

