//
// File generated by rootcint at Mon Nov 28 11:05:14 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME FBaseCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FBaseCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MF(void *p = 0);
   static void *newArray_MF(Long_t size, void *p);
   static void delete_MF(void *p);
   static void deleteArray_MF(void *p);
   static void destruct_MF(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MF*)
   {
      ::MF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MF", ::MF::Class_Version(), "./MF.h", 18,
                  typeid(::MF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MF::Dictionary, isa_proxy, 4,
                  sizeof(::MF) );
      instance.SetNew(&new_MF);
      instance.SetNewArray(&newArray_MF);
      instance.SetDelete(&delete_MF);
      instance.SetDeleteArray(&deleteArray_MF);
      instance.SetDestructor(&destruct_MF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MF*)
   {
      return GenerateInitInstanceLocal((::MF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFDataPhrase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFDataPhrase(void *p = 0);
   static void *newArray_MFDataPhrase(Long_t size, void *p);
   static void delete_MFDataPhrase(void *p);
   static void deleteArray_MFDataPhrase(void *p);
   static void destruct_MFDataPhrase(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFDataPhrase*)
   {
      ::MFDataPhrase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFDataPhrase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFDataPhrase", ::MFDataPhrase::Class_Version(), "./MFDataPhrase.h", 13,
                  typeid(::MFDataPhrase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFDataPhrase::Dictionary, isa_proxy, 4,
                  sizeof(::MFDataPhrase) );
      instance.SetNew(&new_MFDataPhrase);
      instance.SetNewArray(&newArray_MFDataPhrase);
      instance.SetDelete(&delete_MFDataPhrase);
      instance.SetDeleteArray(&deleteArray_MFDataPhrase);
      instance.SetDestructor(&destruct_MFDataPhrase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFDataPhrase*)
   {
      return GenerateInitInstanceLocal((::MFDataPhrase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFDataPhrase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFilterList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFilterList(void *p = 0);
   static void *newArray_MFilterList(Long_t size, void *p);
   static void delete_MFilterList(void *p);
   static void deleteArray_MFilterList(void *p);
   static void destruct_MFilterList(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFilterList*)
   {
      ::MFilterList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFilterList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFilterList", ::MFilterList::Class_Version(), "./MFilterList.h", 22,
                  typeid(::MFilterList), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFilterList::Dictionary, isa_proxy, 4,
                  sizeof(::MFilterList) );
      instance.SetNew(&new_MFilterList);
      instance.SetNewArray(&newArray_MFilterList);
      instance.SetDelete(&delete_MFilterList);
      instance.SetDeleteArray(&deleteArray_MFilterList);
      instance.SetDestructor(&destruct_MFilterList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFilterList*)
   {
      return GenerateInitInstanceLocal((::MFilterList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFilterList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFEventSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFEventSelector(void *p = 0);
   static void *newArray_MFEventSelector(Long_t size, void *p);
   static void delete_MFEventSelector(void *p);
   static void deleteArray_MFEventSelector(void *p);
   static void destruct_MFEventSelector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFEventSelector*)
   {
      ::MFEventSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFEventSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFEventSelector", ::MFEventSelector::Class_Version(), "./MFEventSelector.h", 11,
                  typeid(::MFEventSelector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFEventSelector::Dictionary, isa_proxy, 4,
                  sizeof(::MFEventSelector) );
      instance.SetNew(&new_MFEventSelector);
      instance.SetNewArray(&newArray_MFEventSelector);
      instance.SetDelete(&delete_MFEventSelector);
      instance.SetDeleteArray(&deleteArray_MFEventSelector);
      instance.SetDestructor(&destruct_MFEventSelector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFEventSelector*)
   {
      return GenerateInitInstanceLocal((::MFEventSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFEventSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFEventSelector2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MFEventSelector2(void *p);
   static void deleteArray_MFEventSelector2(void *p);
   static void destruct_MFEventSelector2(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFEventSelector2*)
   {
      ::MFEventSelector2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFEventSelector2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFEventSelector2", ::MFEventSelector2::Class_Version(), "./MFEventSelector2.h", 27,
                  typeid(::MFEventSelector2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFEventSelector2::Dictionary, isa_proxy, 4,
                  sizeof(::MFEventSelector2) );
      instance.SetDelete(&delete_MFEventSelector2);
      instance.SetDeleteArray(&deleteArray_MFEventSelector2);
      instance.SetDestructor(&destruct_MFEventSelector2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFEventSelector2*)
   {
      return GenerateInitInstanceLocal((::MFEventSelector2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFEventSelector2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFDataChain_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFDataChain(void *p = 0);
   static void *newArray_MFDataChain(Long_t size, void *p);
   static void delete_MFDataChain(void *p);
   static void deleteArray_MFDataChain(void *p);
   static void destruct_MFDataChain(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFDataChain*)
   {
      ::MFDataChain *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFDataChain >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFDataChain", ::MFDataChain::Class_Version(), "./MFDataChain.h", 20,
                  typeid(::MFDataChain), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFDataChain::Dictionary, isa_proxy, 4,
                  sizeof(::MFDataChain) );
      instance.SetNew(&new_MFDataChain);
      instance.SetNewArray(&newArray_MFDataChain);
      instance.SetDelete(&delete_MFDataChain);
      instance.SetDeleteArray(&deleteArray_MFDataChain);
      instance.SetDestructor(&destruct_MFDataChain);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFDataChain*)
   {
      return GenerateInitInstanceLocal((::MFDataChain*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFDataChain*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFDataMember_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MFDataMember(void *p);
   static void deleteArray_MFDataMember(void *p);
   static void destruct_MFDataMember(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFDataMember*)
   {
      ::MFDataMember *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFDataMember >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFDataMember", ::MFDataMember::Class_Version(), "./MFDataMember.h", 14,
                  typeid(::MFDataMember), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFDataMember::Dictionary, isa_proxy, 4,
                  sizeof(::MFDataMember) );
      instance.SetDelete(&delete_MFDataMember);
      instance.SetDeleteArray(&deleteArray_MFDataMember);
      instance.SetDestructor(&destruct_MFDataMember);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFDataMember*)
   {
      return GenerateInitInstanceLocal((::MFDataMember*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFDataMember*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFRealTimePeriod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFRealTimePeriod(void *p = 0);
   static void *newArray_MFRealTimePeriod(Long_t size, void *p);
   static void delete_MFRealTimePeriod(void *p);
   static void deleteArray_MFRealTimePeriod(void *p);
   static void destruct_MFRealTimePeriod(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFRealTimePeriod*)
   {
      ::MFRealTimePeriod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFRealTimePeriod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFRealTimePeriod", ::MFRealTimePeriod::Class_Version(), "./MFRealTimePeriod.h", 9,
                  typeid(::MFRealTimePeriod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFRealTimePeriod::Dictionary, isa_proxy, 4,
                  sizeof(::MFRealTimePeriod) );
      instance.SetNew(&new_MFRealTimePeriod);
      instance.SetNewArray(&newArray_MFRealTimePeriod);
      instance.SetDelete(&delete_MFRealTimePeriod);
      instance.SetDeleteArray(&deleteArray_MFRealTimePeriod);
      instance.SetDestructor(&destruct_MFRealTimePeriod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFRealTimePeriod*)
   {
      return GenerateInitInstanceLocal((::MFRealTimePeriod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFRealTimePeriod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MF::Class_Name()
{
   return "MF";
}

//______________________________________________________________________________
const char *MF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFDataPhrase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFDataPhrase::Class_Name()
{
   return "MFDataPhrase";
}

//______________________________________________________________________________
const char *MFDataPhrase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataPhrase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFDataPhrase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataPhrase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFDataPhrase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataPhrase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFDataPhrase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataPhrase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFilterList::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFilterList::Class_Name()
{
   return "MFilterList";
}

//______________________________________________________________________________
const char *MFilterList::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFilterList::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFilterList::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFilterList::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFilterList*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFEventSelector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFEventSelector::Class_Name()
{
   return "MFEventSelector";
}

//______________________________________________________________________________
const char *MFEventSelector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFEventSelector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFEventSelector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFEventSelector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFEventSelector2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFEventSelector2::Class_Name()
{
   return "MFEventSelector2";
}

//______________________________________________________________________________
const char *MFEventSelector2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFEventSelector2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFEventSelector2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFEventSelector2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEventSelector2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFDataChain::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFDataChain::Class_Name()
{
   return "MFDataChain";
}

//______________________________________________________________________________
const char *MFDataChain::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataChain*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFDataChain::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataChain*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFDataChain::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataChain*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFDataChain::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataChain*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFDataMember::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFDataMember::Class_Name()
{
   return "MFDataMember";
}

//______________________________________________________________________________
const char *MFDataMember::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataMember*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFDataMember::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataMember*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFDataMember::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataMember*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFDataMember::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDataMember*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFRealTimePeriod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFRealTimePeriod::Class_Name()
{
   return "MFRealTimePeriod";
}

//______________________________________________________________________________
const char *MFRealTimePeriod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFRealTimePeriod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFRealTimePeriod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFRealTimePeriod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFRealTimePeriod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFRealTimePeriod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFRealTimePeriod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFRealTimePeriod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MFilterList::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFilterList.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFilterList::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFilterList::Class(),this);
   }
}

//______________________________________________________________________________
void MFilterList::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFilterList.
      TClass *R__cl = ::MFilterList::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilters", &fFilters);
      R__insp.InspectMember(fFilters, "fFilters.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFilterList(void *p) {
      return  p ? new(p) ::MFilterList : new ::MFilterList;
   }
   static void *newArray_MFilterList(Long_t nElements, void *p) {
      return p ? new(p) ::MFilterList[nElements] : new ::MFilterList[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFilterList(void *p) {
      delete ((::MFilterList*)p);
   }
   static void deleteArray_MFilterList(void *p) {
      delete [] ((::MFilterList*)p);
   }
   static void destruct_MFilterList(void *p) {
      typedef ::MFilterList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFilterList

//______________________________________________________________________________
void MF::Streamer(TBuffer &R__b)
{
   // Stream an object of class MF.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MF::Class(),this);
   } else {
      R__b.WriteClassBuffer(MF::Class(),this);
   }
}

//______________________________________________________________________________
void MF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MF.
      TClass *R__cl = ::MF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fF", &fF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllowEmpty", &fAllowEmpty);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MF(void *p) {
      return  p ? new(p) ::MF : new ::MF;
   }
   static void *newArray_MF(Long_t nElements, void *p) {
      return p ? new(p) ::MF[nElements] : new ::MF[nElements];
   }
   // Wrapper around operator delete
   static void delete_MF(void *p) {
      delete ((::MF*)p);
   }
   static void deleteArray_MF(void *p) {
      delete [] ((::MF*)p);
   }
   static void destruct_MF(void *p) {
      typedef ::MF current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MF

//______________________________________________________________________________
void MFEventSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFEventSelector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFEventSelector::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFEventSelector::Class(),this);
   }
}

//______________________________________________________________________________
void MFEventSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFEventSelector.
      TClass *R__cl = ::MFEventSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTotalEvts", &fNumTotalEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSelectEvts", &fNumSelectEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSelRatio", &fSelRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSelectedEvts", &fNumSelectedEvts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFEventSelector(void *p) {
      return  p ? new(p) ::MFEventSelector : new ::MFEventSelector;
   }
   static void *newArray_MFEventSelector(Long_t nElements, void *p) {
      return p ? new(p) ::MFEventSelector[nElements] : new ::MFEventSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFEventSelector(void *p) {
      delete ((::MFEventSelector*)p);
   }
   static void deleteArray_MFEventSelector(void *p) {
      delete [] ((::MFEventSelector*)p);
   }
   static void destruct_MFEventSelector(void *p) {
      typedef ::MFEventSelector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFEventSelector

//______________________________________________________________________________
void MFEventSelector2::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFEventSelector2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFEventSelector2::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFEventSelector2::Class(),this);
   }
}

//______________________________________________________________________________
void MFEventSelector2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFEventSelector2.
      TClass *R__cl = ::MFEventSelector2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHistOrig", &fHistOrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHistNom", &fHistNom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHistRes", &fHistRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataX", &fDataX);
      R__insp.InspectMember(fDataX, "fDataX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataY", &fDataY);
      R__insp.InspectMember(fDataY, "fDataY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataZ", &fDataZ);
      R__insp.InspectMember(fDataZ, "fDataZ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumMax", &fNumMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIs", &fIs);
      R__insp.InspectMember(fIs, "fIs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNom", &fNom);
      R__insp.InspectMember(fNom, "fNom.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCanvas", &fCanvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterName", &fFilterName);
      R__insp.InspectMember(fFilterName, "fFilterName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistIsProbability", &fHistIsProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseOrigDist", &fUseOrigDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounter[3]", fCounter);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MFEventSelector2(void *p) {
      delete ((::MFEventSelector2*)p);
   }
   static void deleteArray_MFEventSelector2(void *p) {
      delete [] ((::MFEventSelector2*)p);
   }
   static void destruct_MFEventSelector2(void *p) {
      typedef ::MFEventSelector2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFEventSelector2

//______________________________________________________________________________
void MFDataChain::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFDataChain.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFDataChain::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFDataChain::Class(),this);
   }
}

//______________________________________________________________________________
void MFDataChain::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFDataChain.
      TClass *R__cl = ::MFDataChain::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", &fData);
      R__insp.InspectMember(fData, "fData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCond", &fCond);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFDataChain(void *p) {
      return  p ? new(p) ::MFDataChain : new ::MFDataChain;
   }
   static void *newArray_MFDataChain(Long_t nElements, void *p) {
      return p ? new(p) ::MFDataChain[nElements] : new ::MFDataChain[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFDataChain(void *p) {
      delete ((::MFDataChain*)p);
   }
   static void deleteArray_MFDataChain(void *p) {
      delete [] ((::MFDataChain*)p);
   }
   static void destruct_MFDataChain(void *p) {
      typedef ::MFDataChain current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFDataChain

//______________________________________________________________________________
void MFDataMember::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFDataMember.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFDataMember::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFDataMember::Class(),this);
   }
}

//______________________________________________________________________________
void MFDataMember::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFDataMember.
      TClass *R__cl = ::MFDataMember::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", &fData);
      R__insp.InspectMember(fData, "fData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValue", &fValue);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MFDataMember(void *p) {
      delete ((::MFDataMember*)p);
   }
   static void deleteArray_MFDataMember(void *p) {
      delete [] ((::MFDataMember*)p);
   }
   static void destruct_MFDataMember(void *p) {
      typedef ::MFDataMember current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFDataMember

//______________________________________________________________________________
void MFDataPhrase::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFDataPhrase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFDataPhrase::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFDataPhrase::Class(),this);
   }
}

//______________________________________________________________________________
void MFDataPhrase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFDataPhrase.
      TClass *R__cl = ::MFDataPhrase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAllowEmpty", &fAllowEmpty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefault", &fDefault);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFDataPhrase(void *p) {
      return  p ? new(p) ::MFDataPhrase : new ::MFDataPhrase;
   }
   static void *newArray_MFDataPhrase(Long_t nElements, void *p) {
      return p ? new(p) ::MFDataPhrase[nElements] : new ::MFDataPhrase[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFDataPhrase(void *p) {
      delete ((::MFDataPhrase*)p);
   }
   static void deleteArray_MFDataPhrase(void *p) {
      delete [] ((::MFDataPhrase*)p);
   }
   static void destruct_MFDataPhrase(void *p) {
      typedef ::MFDataPhrase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFDataPhrase

//______________________________________________________________________________
void MFRealTimePeriod::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFRealTimePeriod.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFRealTimePeriod::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFRealTimePeriod::Class(),this);
   }
}

//______________________________________________________________________________
void MFRealTimePeriod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFRealTimePeriod.
      TClass *R__cl = ::MFRealTimePeriod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMilliSec", &fMilliSec);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFRealTimePeriod(void *p) {
      return  p ? new(p) ::MFRealTimePeriod : new ::MFRealTimePeriod;
   }
   static void *newArray_MFRealTimePeriod(Long_t nElements, void *p) {
      return p ? new(p) ::MFRealTimePeriod[nElements] : new ::MFRealTimePeriod[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFRealTimePeriod(void *p) {
      delete ((::MFRealTimePeriod*)p);
   }
   static void deleteArray_MFRealTimePeriod(void *p) {
      delete [] ((::MFRealTimePeriod*)p);
   }
   static void destruct_MFRealTimePeriod(void *p) {
      typedef ::MFRealTimePeriod current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFRealTimePeriod

/********************************************************
* FBaseCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableFBaseCint();

extern "C" void G__set_cpp_environmentFBaseCint() {
  G__cpp_reset_tagtableFBaseCint();
}
#include <new>
extern "C" int G__cpp_dllrevFBaseCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MF */
static int G__FBaseCint_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MF[n];
     } else {
       p = new((void*) gvp) MF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MF;
     } else {
       p = new((void*) gvp) MF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MF(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MF((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MF((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MF((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MF*) G__getstructoffset())->SetAllowEmpty((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MF*) G__getstructoffset())->SetAllowEmpty();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MF*) G__getstructoffset())->IsAllowEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_177_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_177_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MF(*(MF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MF G__TMF;
static int G__FBaseCint_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MF*) (soff+(sizeof(MF)*i)))->~G__TMF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MF*) (soff))->~G__TMF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MF* dest = (MF*) G__getstructoffset();
   *dest = *(MF*) libp->para[0].ref;
   const MF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFDataPhrase */
static int G__FBaseCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataPhrase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataPhrase[n];
     } else {
       p = new((void*) gvp) MFDataPhrase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataPhrase;
     } else {
       p = new((void*) gvp) MFDataPhrase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataPhrase* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataPhrase(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFDataPhrase(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataPhrase((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFDataPhrase((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataPhrase((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFDataPhrase((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFDataPhrase*) G__getstructoffset())->SetAllowEmpty((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFDataPhrase*) G__getstructoffset())->SetAllowEmpty();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MFDataPhrase*) G__getstructoffset())->IsAllowEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDataPhrase*) G__getstructoffset())->SetDefault((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MFDataPhrase*) G__getstructoffset())->GetDefault());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFDataPhrase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataPhrase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFDataPhrase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFDataPhrase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDataPhrase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataPhrase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataPhrase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataPhrase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_179_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataPhrase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_179_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFDataPhrase* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFDataPhrase(*(MFDataPhrase*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFDataPhrase G__TMFDataPhrase;
static int G__FBaseCint_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFDataPhrase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFDataPhrase*) (soff+(sizeof(MFDataPhrase)*i)))->~G__TMFDataPhrase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFDataPhrase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFDataPhrase*) (soff))->~G__TMFDataPhrase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataPhrase* dest = (MFDataPhrase*) G__getstructoffset();
   *dest = *(MFDataPhrase*) libp->para[0].ref;
   const MFDataPhrase& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFilterList */
static int G__FBaseCint_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFilterList* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFilterList(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFilterList((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFilterList((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFilterList[n];
       } else {
         p = new((void*) gvp) MFilterList[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFilterList;
       } else {
         p = new((void*) gvp) MFilterList;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFilterList* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList(
(MFilter*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFilterList(
(MFilter*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList((MFilter*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFilterList((MFilter*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFilterList((MFilter*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFilterList((MFilter*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFilterList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MFilterList(*(MFilterList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MFilterList(*(MFilterList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MFilterList*) G__getstructoffset())->AddToList((MFilter*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MFilterList*) G__getstructoffset())->AddToList(*(TCollection*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFilterList*) G__getstructoffset())->SetOwner((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFilterList*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MFilterList*) G__getstructoffset())->GetRule((Option_t*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MFilterList*) G__getstructoffset())->GetNumEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFilterList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFilterList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFilterList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFilterList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFilterList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFilterList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_183_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFilterList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFilterList G__TMFilterList;
static int G__FBaseCint_183_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFilterList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFilterList*) (soff+(sizeof(MFilterList)*i)))->~G__TMFilterList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFilterList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFilterList*) (soff))->~G__TMFilterList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFEventSelector */
static int G__FBaseCint_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEventSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEventSelector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEventSelector((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEventSelector((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFEventSelector((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEventSelector[n];
       } else {
         p = new((void*) gvp) MFEventSelector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEventSelector;
       } else {
         p = new((void*) gvp) MFEventSelector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEventSelector*) G__getstructoffset())->SetNumTotalEvts((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEventSelector*) G__getstructoffset())->SetNumSelectEvts((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEventSelector*) G__getstructoffset())->SetSelectionRatio((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFEventSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFEventSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFEventSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEventSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEventSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_186_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEventSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_186_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFEventSelector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFEventSelector(*(MFEventSelector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFEventSelector G__TMFEventSelector;
static int G__FBaseCint_186_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFEventSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFEventSelector*) (soff+(sizeof(MFEventSelector)*i)))->~G__TMFEventSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFEventSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFEventSelector*) (soff))->~G__TMFEventSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_186_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEventSelector* dest = (MFEventSelector*) G__getstructoffset();
   *dest = *(MFEventSelector*) libp->para[0].ref;
   const MFEventSelector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFEventSelector2 */
static int G__FBaseCint_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEventSelector2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEventSelector2(
*(MH3*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFEventSelector2(
*(MH3*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEventSelector2(*(MH3*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEventSelector2(*(MH3*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEventSelector2(*(MH3*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) MFEventSelector2(*(MH3*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFEventSelector2*) G__getstructoffset())->GetHistOrig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFEventSelector2*) G__getstructoffset())->SetNumMax((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFEventSelector2*) G__getstructoffset())->SetNumMax();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFEventSelector2*) G__getstructoffset())->SetHistIsProbability((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFEventSelector2*) G__getstructoffset())->SetHistIsProbability();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFEventSelector2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFEventSelector2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFEventSelector2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEventSelector2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEventSelector2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEventSelector2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_195_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEventSelector2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_195_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFEventSelector2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFEventSelector2(*(MFEventSelector2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFEventSelector2 G__TMFEventSelector2;
static int G__FBaseCint_195_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFEventSelector2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFEventSelector2*) (soff+(sizeof(MFEventSelector2)*i)))->~G__TMFEventSelector2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFEventSelector2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFEventSelector2*) (soff))->~G__TMFEventSelector2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_195_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEventSelector2* dest = (MFEventSelector2*) G__getstructoffset();
   *dest = *(MFEventSelector2*) libp->para[0].ref;
   const MFEventSelector2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFDataChain */
static int G__FBaseCint_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataChain* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFDataChain((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFDataChain((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFDataChain[n];
       } else {
         p = new((void*) gvp) MFDataChain[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFDataChain;
       } else {
         p = new((void*) gvp) MFDataChain;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataChain* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataChain* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFDataChain(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFDataChain::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataChain::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFDataChain::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFDataChain::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDataChain*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataChain::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataChain::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataChain::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataChain::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFDataChain* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFDataChain(*(MFDataChain*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFDataChain G__TMFDataChain;
static int G__FBaseCint_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFDataChain*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFDataChain*) (soff+(sizeof(MFDataChain)*i)))->~G__TMFDataChain();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFDataChain*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFDataChain*) (soff))->~G__TMFDataChain();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataChain* dest = (MFDataChain*) G__getstructoffset();
   *dest = *(MFDataChain*) libp->para[0].ref;
   const MFDataChain& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFDataMember */
static int G__FBaseCint_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataMember* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) MFDataMember(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFDataMember::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataMember::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFDataMember::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFDataMember::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDataMember*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataMember::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataMember::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDataMember::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_200_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDataMember::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_200_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFDataMember* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFDataMember(*(MFDataMember*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFDataMember G__TMFDataMember;
static int G__FBaseCint_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFDataMember*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFDataMember*) (soff+(sizeof(MFDataMember)*i)))->~G__TMFDataMember();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFDataMember*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFDataMember*) (soff))->~G__TMFDataMember();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_200_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDataMember* dest = (MFDataMember*) G__getstructoffset();
   *dest = *(MFDataMember*) libp->para[0].ref;
   const MFDataMember& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFRealTimePeriod */
static int G__FBaseCint_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFRealTimePeriod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFRealTimePeriod((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFRealTimePeriod((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFRealTimePeriod[n];
       } else {
         p = new((void*) gvp) MFRealTimePeriod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFRealTimePeriod;
       } else {
         p = new((void*) gvp) MFRealTimePeriod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFRealTimePeriod*) G__getstructoffset())->SetTime((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFRealTimePeriod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFRealTimePeriod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFRealTimePeriod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFRealTimePeriod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFRealTimePeriod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFRealTimePeriod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFRealTimePeriod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFRealTimePeriod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FBaseCint_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFRealTimePeriod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FBaseCint_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFRealTimePeriod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFRealTimePeriod(*(MFRealTimePeriod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFRealTimePeriod G__TMFRealTimePeriod;
static int G__FBaseCint_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFRealTimePeriod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFRealTimePeriod*) (soff+(sizeof(MFRealTimePeriod)*i)))->~G__TMFRealTimePeriod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFRealTimePeriod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFRealTimePeriod*) (soff))->~G__TMFRealTimePeriod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FBaseCint_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFRealTimePeriod* dest = (MFRealTimePeriod*) G__getstructoffset();
   *dest = *(MFRealTimePeriod*) libp->para[0].ref;
   const MFRealTimePeriod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MF */

/* MFDataPhrase */

/* MFilterList */

/* MFEventSelector */

/* MFEventSelector2 */

/* MFDataChain */

/* MFDataMember */

/* MFRealTimePeriod */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFBaseCint {
 public:
  G__Sizep2memfuncFBaseCint(): p(&G__Sizep2memfuncFBaseCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFBaseCint::*p)();
};

size_t G__get_sizep2memfuncFBaseCint()
{
  G__Sizep2memfuncFBaseCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFBaseCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MF))) {
     MF *G__Lderived;
     G__Lderived=(MF*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase))) {
     MFDataPhrase *G__Lderived;
     G__Lderived=(MFDataPhrase*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList))) {
     MFilterList *G__Lderived;
     G__Lderived=(MFilterList*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector))) {
     MFEventSelector *G__Lderived;
     G__Lderived=(MFEventSelector*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2))) {
     MFEventSelector2 *G__Lderived;
     G__Lderived=(MFEventSelector2*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain))) {
     MFDataChain *G__Lderived;
     G__Lderived=(MFDataChain*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember))) {
     MFDataMember *G__Lderived;
     G__Lderived=(MFDataMember*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod))) {
     MFRealTimePeriod *G__Lderived;
     G__Lderived=(MFRealTimePeriod*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod),G__get_linked_tagnum(&G__FBaseCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod),G__get_linked_tagnum(&G__FBaseCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod),G__get_linked_tagnum(&G__FBaseCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod),G__get_linked_tagnum(&G__FBaseCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod),G__get_linked_tagnum(&G__FBaseCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFBaseCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),0,G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChaincLcLFilterType_t),0,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLFilterType_t),0,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MF */
static void G__setup_memvarMF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF));
   { MF *p; p=(MF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefName=",0,"!");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefTitle=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MFilter),-1,-1,4,"fF=",0,"Filter");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllowEmpty=",0,"Not a Bit to be stored");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFDataPhrase */
static void G__setup_memvarMFDataPhrase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase));
   { MFDataPhrase *p; p=(MFDataPhrase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefName=",0,"!");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefTitle=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MData),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAllowEmpty=",0,"Not a Bit to be stored");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDefault=",0,"Default for empty case");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFilterList */
static void G__setup_memvarMFilterList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   { MFilterList *p; p=(MFilterList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TOrdCollection),-1,-1,4,"fFilters=",0,"Container for the filters");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),-1,-2,4,"kEAnd=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),-1,-2,4,"kEOr=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),-1,-2,4,"kEXor=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),-1,-2,4,"kELAnd=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),-1,-2,4,"kELOr=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFilterListcLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFEventSelector */
static void G__setup_memvarMFEventSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector));
   { MFEventSelector *p; p=(MFEventSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTotalEvts=",0,"Number of total events from which are selected");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumSelectEvts=",0,"Number of events to be selected");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSelRatio=",0,"Selection Probability");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumSelectedEvts=",0,"! Number of events which have been selected");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"! Reseult of a single selection");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelectorcLcLdA),-1,-2,4,"kNumTotalFromFile=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFEventSelector2 */
static void G__setup_memvarMFEventSelector2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2));
   { MFEventSelector2 *p; p=(MFEventSelector2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MH3),-1,-1,4,"fHistOrig=",0,"original distribution of the events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MH3),-1,-1,4,"fHistNom=",0,"nominal distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MH3),-1,-1,4,"fHistRes=",0,"resulting distribution");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MDataChain),-1,-1,4,"fDataX=",0,"data rule for the x-axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MDataChain),-1,-1,4,"fDataY=",0,"data rule for the y-axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MDataChain),-1,-1,4,"fDataZ=",0,"data rule for the z-axis");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fNumMax=",0,"Maximum number of selected events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TArrayL),-1,-1,4,"fIs=",0,"! array storing the original distribution");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TArrayL),-1,-1,4,"fNom=",0,"! array storing the nominal distribution");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TCanvas),-1,-1,4,"fCanvas=",0,"! canvas for online display");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TString),-1,-1,4,"fFilterName=",0,"name of the MFilter object to be used when determining the original distribution");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHistIsProbability=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseOrigDist=",0,"flag indicating that in the selection the original distribution is not changed");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCounter[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFDataChain */
static void G__setup_memvarMFDataChain(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   { MFDataChain *p; p=(MFDataChain*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MDataChain),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MData),-1,-1,4,"fCond=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChaincLcLFilterType_t),-1,-2,4,"kELowerThan=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChaincLcLFilterType_t),-1,-2,4,"kEGreaterThan=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MFDataChaincLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFDataMember */
static void G__setup_memvarMFDataMember(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember));
   { MFDataMember *p; p=(MFDataMember*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MDataMember),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLFilterType_t),-1,-2,4,"kELowerThan=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLFilterType_t),-1,-2,4,"kEGreaterThan=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLFilterType_t),-1,-2,4,"kEEqual=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fValue=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FBaseCintLN_MFDataMembercLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kIsInt=%lldLL",(long long)MFDataMember::kIsInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFRealTimePeriod */
static void G__setup_memvarMFRealTimePeriod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod));
   { MFRealTimePeriod *p; p=(MFRealTimePeriod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fMilliSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FBaseCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFBaseCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMF(void) {
   /* MF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MF));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MF",147,G__FBaseCint_177_0_2, 105, G__get_linked_tagnum(&G__FBaseCintLN_MF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MF",147,G__FBaseCint_177_0_3, 105, G__get_linked_tagnum(&G__FBaseCintLN_MF), -1, 0, 3, 1, 1, 0, 
"C - - 10 - text C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllowEmpty",1338,G__FBaseCint_177_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAllowEmpty",1226,G__FBaseCint_177_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRule",696,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_177_0_15, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_177_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_177_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_177_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_177_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_177_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_177_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_177_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_177_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MF", 147, G__FBaseCint_177_0_27, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MF), -1, 0, 1, 1, 1, 0, "u 'MF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MF", 273, G__FBaseCint_177_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_177_0_29, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MF), -1, 1, 1, 1, 1, 0, "u 'MF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFDataPhrase(void) {
   /* MFDataPhrase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase));
   G__memfunc_setup("IsRule",596,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"u 'TString' - 1 - txt u 'TString' - 1 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsVal",479,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 11 - txt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAlNum",665,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'TString' - 0 - txt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseRule",915,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FBaseCintLN_MFilter), -1, 0, 3, 1, 4, 8, 
"u 'TString' - 1 - txt U 'MFilter' - 0 - filter0 "
"i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseString",1138,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FBaseCintLN_MFilter), -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - txt i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFDataPhrase",1136,G__FBaseCint_179_0_7, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFDataPhrase",1136,G__FBaseCint_179_0_8, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase), -1, 0, 3, 1, 1, 0, 
"C - - 10 - text C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllowEmpty",1338,G__FBaseCint_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAllowEmpty",1226,G__FBaseCint_179_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefault",1009,G__FBaseCint_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefault",997,G__FBaseCint_179_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRule",696,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_179_0_22, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFDataPhrase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_179_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataPhrase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_179_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFDataPhrase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_179_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFDataPhrase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_179_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_179_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataPhrase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_179_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataPhrase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_179_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataPhrase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_179_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataPhrase::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFDataPhrase", 1136, G__FBaseCint_179_0_34, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase), -1, 0, 1, 1, 1, 0, "u 'MFDataPhrase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFDataPhrase", 1262, G__FBaseCint_179_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_179_0_36, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataPhrase), -1, 1, 1, 1, 1, 0, "u 'MFDataPhrase' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFilterList(void) {
   /* MFilterList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFilterList));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFilterList",1103,G__FBaseCint_183_0_3, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFilterList), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"&&\"' type C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFilterList",1103,G__FBaseCint_183_0_4, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFilterList), -1, 0, 3, 1, 1, 0, 
"U 'MFilter' - 0 - f C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFilterList",1103,G__FBaseCint_183_0_5, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFilterList), -1, 0, 1, 1, 1, 0, "u 'MFilterList' - 1 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddToList",872,G__FBaseCint_183_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MFilter' - 0 - filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddToList",872,G__FBaseCint_183_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TCollection' - 11 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__FBaseCint_183_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' enable", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,G__FBaseCint_183_0_12, 117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumEntries",1322,G__FBaseCint_183_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAccelerator",1425,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 0 'kAccStandard' acc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_183_0_21, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFilterList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_183_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_183_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFilterList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_183_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFilterList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_183_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_183_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_183_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFilterList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_183_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFilterList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_183_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFilterList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MFilterList", 1229, G__FBaseCint_183_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFEventSelector(void) {
   /* MFEventSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFEventSelector",1494,G__FBaseCint_186_0_4, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumTotalEvts",1538,G__FBaseCint_186_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSelectEvts",1630,G__FBaseCint_186_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelectionRatio",1745,G__FBaseCint_186_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FBaseCint_186_0_9, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFEventSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_186_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_186_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFEventSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_186_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFEventSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_186_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_186_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_186_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEventSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_186_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_186_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEventSelector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFEventSelector", 1494, G__FBaseCint_186_0_21, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector), -1, 0, 1, 1, 1, 0, "u 'MFEventSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFEventSelector", 1620, G__FBaseCint_186_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_186_0_23, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector), -1, 1, 1, 1, 1, 0, "u 'MFEventSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFEventSelector2(void) {
   /* MFEventSelector2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2));
   G__memfunc_setup("InitHistogram",1346,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FBaseCintLN_TH1), -1, 1, 1, 1, 4, 0, "U 'MH3' - 1 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadDistribution",1660,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'MRead' - 1 - read U 'MFilter' - 0 - filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrepareHistograms",1776,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcessData",1408,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - parlist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Select",608,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectProb",1011,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - parlist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFEventSelector2",1544,G__FBaseCint_195_0_10, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2), -1, 0, 3, 1, 1, 0, 
"u 'MH3' - 1 - hist C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistOrig",1097,G__FBaseCint_195_0_11, 85, G__get_linked_tagnum(&G__FBaseCintLN_MH3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumMax",898,G__FBaseCint_195_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 '-1' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistIsProbability",2049,G__FBaseCint_195_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_195_0_15, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFEventSelector2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_195_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_195_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFEventSelector2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_195_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFEventSelector2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_195_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_195_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_195_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEventSelector2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_195_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEventSelector2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_195_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEventSelector2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFEventSelector2", 1544, G__FBaseCint_195_0_27, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2), -1, 0, 1, 1, 1, 0, "u 'MFEventSelector2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFEventSelector2", 1670, G__FBaseCint_195_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_195_0_29, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFEventSelector2), -1, 1, 1, 1, 1, 0, "u 'MFEventSelector2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFDataChain(void) {
   /* MFDataChain */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFDataChain",1008,G__FBaseCint_196_0_4, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFDataChain",1008,G__FBaseCint_196_0_5, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain), -1, 0, 5, 1, 1, 0, 
"C - - 10 - rule c - - 10 - type "
"d - 'Double_t' 10 - val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFDataChain",1008,G__FBaseCint_196_0_6, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain), -1, 0, 5, 1, 1, 0, 
"C - - 10 - rule c - - 10 - type "
"C - - 10 - cond C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_196_0_12, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFDataChain::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_196_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataChain::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_196_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFDataChain::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_196_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFDataChain::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_196_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_196_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataChain::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_196_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataChain::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_196_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataChain::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_196_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataChain::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFDataChain", 1008, G__FBaseCint_196_0_24, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain), -1, 0, 1, 1, 1, 0, "u 'MFDataChain' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFDataChain", 1134, G__FBaseCint_196_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_196_0_26, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataChain), -1, 1, 1, 1, 1, 0, "u 'MFDataChain' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFDataMember(void) {
   /* MFDataMember */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFDataMember",1125,G__FBaseCint_200_0_4, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember), -1, 0, 5, 1, 1, 0, 
"C - - 10 - member c - - 10 - type "
"d - 'Double_t' 10 - val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__FBaseCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_200_0_10, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFDataMember::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_200_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataMember::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_200_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFDataMember::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_200_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFDataMember::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_200_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_200_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataMember::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_200_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataMember::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_200_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDataMember::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_200_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDataMember::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFDataMember", 1125, G__FBaseCint_200_0_22, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember), -1, 0, 1, 1, 1, 0, "u 'MFDataMember' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFDataMember", 1251, G__FBaseCint_200_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_200_0_24, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFDataMember), -1, 1, 1, 1, 1, 0, "u 'MFDataMember' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFRealTimePeriod(void) {
   /* MFRealTimePeriod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod));
   G__memfunc_setup("MFRealTimePeriod",1545,G__FBaseCint_203_0_1, 105, G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '1000' millis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__FBaseCint_203_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - millis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FBaseCint_203_0_5, 85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFRealTimePeriod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FBaseCint_203_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFRealTimePeriod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FBaseCint_203_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFRealTimePeriod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FBaseCint_203_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFRealTimePeriod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FBaseCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FBaseCint_203_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FBaseCint_203_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFRealTimePeriod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FBaseCint_203_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFRealTimePeriod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FBaseCint_203_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFRealTimePeriod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FBaseCint_203_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFRealTimePeriod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFRealTimePeriod", 1545, G__FBaseCint_203_0_17, (int) ('i'), G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod), -1, 0, 1, 1, 1, 0, "u 'MFRealTimePeriod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFRealTimePeriod", 1671, G__FBaseCint_203_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FBaseCint_203_0_19, (int) ('u'), G__get_linked_tagnum(&G__FBaseCintLN_MFRealTimePeriod), -1, 1, 1, 1, 1, 0, "u 'MFRealTimePeriod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFBaseCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFBaseCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFBaseCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FBaseCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__FBaseCintLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MF = { "MF" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MData = { "MData" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataPhrase = { "MFDataPhrase" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TOrdCollection = { "TOrdCollection" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFilterList = { "MFilterList" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFilterListcLcLFilterType_t = { "MFilterList::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_MFilterListcLcLdA = { "MFilterList::$" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_MFEventSelector = { "MFEventSelector" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFEventSelectorcLcLdA = { "MFEventSelector::$" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_TArrayL = { "TArrayL" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MDataChain = { "MDataChain" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MH3 = { "MH3" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFEventSelector2 = { "MFEventSelector2" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataChain = { "MFDataChain" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataChaincLcLFilterType_t = { "MFDataChain::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_MDataMember = { "MDataMember" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataMember = { "MFDataMember" , 99 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataMembercLcLFilterType_t = { "MFDataMember::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_MFDataMembercLcLdA = { "MFDataMember::$" , 101 , -1 };
G__linked_taginfo G__FBaseCintLN_MFRealTimePeriod = { "MFRealTimePeriod" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFBaseCint() {
  G__FBaseCintLN_TClass.tagnum = -1 ;
  G__FBaseCintLN_TBuffer.tagnum = -1 ;
  G__FBaseCintLN_TMemberInspector.tagnum = -1 ;
  G__FBaseCintLN_TObject.tagnum = -1 ;
  G__FBaseCintLN_TCollection.tagnum = -1 ;
  G__FBaseCintLN_TString.tagnum = -1 ;
  G__FBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__FBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__FBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__FBaseCintLN_TCanvas.tagnum = -1 ;
  G__FBaseCintLN_TEnv.tagnum = -1 ;
  G__FBaseCintLN_TArrayD.tagnum = -1 ;
  G__FBaseCintLN_MParContainer.tagnum = -1 ;
  G__FBaseCintLN_MInputStreamID.tagnum = -1 ;
  G__FBaseCintLN_MFilter.tagnum = -1 ;
  G__FBaseCintLN_MParList.tagnum = -1 ;
  G__FBaseCintLN_MTask.tagnum = -1 ;
  G__FBaseCintLN_MF.tagnum = -1 ;
  G__FBaseCintLN_MData.tagnum = -1 ;
  G__FBaseCintLN_MFDataPhrase.tagnum = -1 ;
  G__FBaseCintLN_TOrdCollection.tagnum = -1 ;
  G__FBaseCintLN_MFilterList.tagnum = -1 ;
  G__FBaseCintLN_MFilterListcLcLFilterType_t.tagnum = -1 ;
  G__FBaseCintLN_MFilterListcLcLdA.tagnum = -1 ;
  G__FBaseCintLN_MFEventSelector.tagnum = -1 ;
  G__FBaseCintLN_MFEventSelectorcLcLdA.tagnum = -1 ;
  G__FBaseCintLN_TArrayL.tagnum = -1 ;
  G__FBaseCintLN_MDataChain.tagnum = -1 ;
  G__FBaseCintLN_TH1.tagnum = -1 ;
  G__FBaseCintLN_MH3.tagnum = -1 ;
  G__FBaseCintLN_MRead.tagnum = -1 ;
  G__FBaseCintLN_MFEventSelector2.tagnum = -1 ;
  G__FBaseCintLN_MFDataChain.tagnum = -1 ;
  G__FBaseCintLN_MFDataChaincLcLFilterType_t.tagnum = -1 ;
  G__FBaseCintLN_MDataMember.tagnum = -1 ;
  G__FBaseCintLN_MFDataMember.tagnum = -1 ;
  G__FBaseCintLN_MFDataMembercLcLFilterType_t.tagnum = -1 ;
  G__FBaseCintLN_MFDataMembercLcLdA.tagnum = -1 ;
  G__FBaseCintLN_MFRealTimePeriod.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFBaseCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TCollection);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TString);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFilter);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MTask);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MF),sizeof(MF),-1,324864,"A Filter for cuts in any data member",G__setup_memvarMF,G__setup_memfuncMF);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataPhrase),sizeof(MFDataPhrase),-1,324864,"A Filter for cuts in any data member",G__setup_memvarMFDataPhrase,G__setup_memfuncMFDataPhrase);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TOrdCollection);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFilterList),sizeof(MFilterList),-1,325376,"List to combine several filters logically",G__setup_memvarMFilterList,G__setup_memfuncMFilterList);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFilterListcLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFilterListcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFEventSelector),sizeof(MFEventSelector),-1,323840,"A filter to do a random selection of events",G__setup_memvarMFEventSelector,G__setup_memfuncMFEventSelector);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFEventSelectorcLcLdA);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TArrayL);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MDataChain);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MH3);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MRead);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFEventSelector2),sizeof(MFEventSelector2),-1,324608,"FIXME!",G__setup_memvarMFEventSelector2,G__setup_memfuncMFEventSelector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataChain),sizeof(MFDataChain),-1,324864,"A Filter for cuts in any data member",G__setup_memvarMFDataChain,G__setup_memfuncMFDataChain);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataChaincLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MDataMember);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataMember),sizeof(MFDataMember),-1,323584,"A Filter for cuts in any data member",G__setup_memvarMFDataMember,G__setup_memfuncMFDataMember);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataMembercLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFDataMembercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FBaseCintLN_MFRealTimePeriod),sizeof(MFRealTimePeriod),-1,323840,"Filter allowing execution of a task only after a given real time interval",G__setup_memvarMFRealTimePeriod,G__setup_memfuncMFRealTimePeriod);
}
extern "C" void G__cpp_setupFBaseCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupFBaseCint()");
  G__set_cpp_environmentFBaseCint();
  G__cpp_setup_tagtableFBaseCint();

  G__cpp_setup_inheritanceFBaseCint();

  G__cpp_setup_typetableFBaseCint();

  G__cpp_setup_memvarFBaseCint();

  G__cpp_setup_memfuncFBaseCint();
  G__cpp_setup_globalFBaseCint();
  G__cpp_setup_funcFBaseCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFBaseCint();
  return;
}
class G__cpp_setup_initFBaseCint {
  public:
    G__cpp_setup_initFBaseCint() { G__add_setup_func("FBaseCint",(G__incsetup)(&G__cpp_setupFBaseCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFBaseCint() { G__remove_setup_func("FBaseCint"); }
};
G__cpp_setup_initFBaseCint G__cpp_setup_initializerFBaseCint;

