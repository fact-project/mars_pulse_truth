//
// File generated by rootcint at Mon Nov 28 11:05:25 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME FilterCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "FilterCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MFTriggerLvl1_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFTriggerLvl1(void *p = 0);
   static void *newArray_MFTriggerLvl1(Long_t size, void *p);
   static void delete_MFTriggerLvl1(void *p);
   static void deleteArray_MFTriggerLvl1(void *p);
   static void destruct_MFTriggerLvl1(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFTriggerLvl1*)
   {
      ::MFTriggerLvl1 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFTriggerLvl1 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFTriggerLvl1", ::MFTriggerLvl1::Class_Version(), "./MFTriggerLvl1.h", 18,
                  typeid(::MFTriggerLvl1), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFTriggerLvl1::Dictionary, isa_proxy, 4,
                  sizeof(::MFTriggerLvl1) );
      instance.SetNew(&new_MFTriggerLvl1);
      instance.SetNewArray(&newArray_MFTriggerLvl1);
      instance.SetDelete(&delete_MFTriggerLvl1);
      instance.SetDeleteArray(&deleteArray_MFTriggerLvl1);
      instance.SetDestructor(&destruct_MFTriggerLvl1);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFTriggerLvl1*)
   {
      return GenerateInitInstanceLocal((::MFTriggerLvl1*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFTriggerLvl1*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFTriggerLvl2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFTriggerLvl2(void *p = 0);
   static void *newArray_MFTriggerLvl2(Long_t size, void *p);
   static void delete_MFTriggerLvl2(void *p);
   static void deleteArray_MFTriggerLvl2(void *p);
   static void destruct_MFTriggerLvl2(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFTriggerLvl2*)
   {
      ::MFTriggerLvl2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFTriggerLvl2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFTriggerLvl2", ::MFTriggerLvl2::Class_Version(), "./MFTriggerLvl2.h", 22,
                  typeid(::MFTriggerLvl2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFTriggerLvl2::Dictionary, isa_proxy, 4,
                  sizeof(::MFTriggerLvl2) );
      instance.SetNew(&new_MFTriggerLvl2);
      instance.SetNewArray(&newArray_MFTriggerLvl2);
      instance.SetDelete(&delete_MFTriggerLvl2);
      instance.SetDeleteArray(&deleteArray_MFTriggerLvl2);
      instance.SetDestructor(&destruct_MFTriggerLvl2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFTriggerLvl2*)
   {
      return GenerateInitInstanceLocal((::MFTriggerLvl2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFTriggerLvl2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFMagicCuts_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFMagicCuts(void *p = 0);
   static void *newArray_MFMagicCuts(Long_t size, void *p);
   static void delete_MFMagicCuts(void *p);
   static void deleteArray_MFMagicCuts(void *p);
   static void destruct_MFMagicCuts(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFMagicCuts*)
   {
      ::MFMagicCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFMagicCuts >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFMagicCuts", ::MFMagicCuts::Class_Version(), "./MFMagicCuts.h", 24,
                  typeid(::MFMagicCuts), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFMagicCuts::Dictionary, isa_proxy, 4,
                  sizeof(::MFMagicCuts) );
      instance.SetNew(&new_MFMagicCuts);
      instance.SetNewArray(&newArray_MFMagicCuts);
      instance.SetDelete(&delete_MFMagicCuts);
      instance.SetDeleteArray(&deleteArray_MFMagicCuts);
      instance.SetDestructor(&destruct_MFMagicCuts);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFMagicCuts*)
   {
      return GenerateInitInstanceLocal((::MFMagicCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFMagicCuts*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFGeomag_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFGeomag(void *p = 0);
   static void *newArray_MFGeomag(Long_t size, void *p);
   static void delete_MFGeomag(void *p);
   static void deleteArray_MFGeomag(void *p);
   static void destruct_MFGeomag(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFGeomag*)
   {
      ::MFGeomag *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFGeomag >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFGeomag", ::MFGeomag::Class_Version(), "./MFGeomag.h", 12,
                  typeid(::MFGeomag), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFGeomag::Dictionary, isa_proxy, 4,
                  sizeof(::MFGeomag) );
      instance.SetNew(&new_MFGeomag);
      instance.SetNewArray(&newArray_MFGeomag);
      instance.SetDelete(&delete_MFGeomag);
      instance.SetDeleteArray(&deleteArray_MFGeomag);
      instance.SetDestructor(&destruct_MFGeomag);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFGeomag*)
   {
      return GenerateInitInstanceLocal((::MFGeomag*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFGeomag*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFEvtNumber_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFEvtNumber(void *p = 0);
   static void *newArray_MFEvtNumber(Long_t size, void *p);
   static void delete_MFEvtNumber(void *p);
   static void deleteArray_MFEvtNumber(void *p);
   static void destruct_MFEvtNumber(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFEvtNumber*)
   {
      ::MFEvtNumber *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFEvtNumber >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFEvtNumber", ::MFEvtNumber::Class_Version(), "./MFEvtNumber.h", 16,
                  typeid(::MFEvtNumber), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFEvtNumber::Dictionary, isa_proxy, 4,
                  sizeof(::MFEvtNumber) );
      instance.SetNew(&new_MFEvtNumber);
      instance.SetNewArray(&newArray_MFEvtNumber);
      instance.SetDelete(&delete_MFEvtNumber);
      instance.SetDeleteArray(&deleteArray_MFEvtNumber);
      instance.SetDestructor(&destruct_MFEvtNumber);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFEvtNumber*)
   {
      return GenerateInitInstanceLocal((::MFEvtNumber*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFEvtNumber*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFDeltaT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFDeltaT(void *p = 0);
   static void *newArray_MFDeltaT(Long_t size, void *p);
   static void delete_MFDeltaT(void *p);
   static void deleteArray_MFDeltaT(void *p);
   static void destruct_MFDeltaT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFDeltaT*)
   {
      ::MFDeltaT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFDeltaT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFDeltaT", ::MFDeltaT::Class_Version(), "./MFDeltaT.h", 20,
                  typeid(::MFDeltaT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFDeltaT::Dictionary, isa_proxy, 4,
                  sizeof(::MFDeltaT) );
      instance.SetNew(&new_MFDeltaT);
      instance.SetNewArray(&newArray_MFDeltaT);
      instance.SetDelete(&delete_MFDeltaT);
      instance.SetDeleteArray(&deleteArray_MFDeltaT);
      instance.SetDestructor(&destruct_MFDeltaT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFDeltaT*)
   {
      return GenerateInitInstanceLocal((::MFDeltaT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFDeltaT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFParticleId_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFParticleId(void *p = 0);
   static void *newArray_MFParticleId(Long_t size, void *p);
   static void delete_MFParticleId(void *p);
   static void deleteArray_MFParticleId(void *p);
   static void destruct_MFParticleId(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFParticleId*)
   {
      ::MFParticleId *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFParticleId >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFParticleId", ::MFParticleId::Class_Version(), "./MFParticleId.h", 18,
                  typeid(::MFParticleId), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFParticleId::Dictionary, isa_proxy, 4,
                  sizeof(::MFParticleId) );
      instance.SetNew(&new_MFParticleId);
      instance.SetNewArray(&newArray_MFParticleId);
      instance.SetDelete(&delete_MFParticleId);
      instance.SetDeleteArray(&deleteArray_MFParticleId);
      instance.SetDestructor(&destruct_MFParticleId);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFParticleId*)
   {
      return GenerateInitInstanceLocal((::MFParticleId*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFParticleId*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFSoftwareTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFSoftwareTrigger(void *p = 0);
   static void *newArray_MFSoftwareTrigger(Long_t size, void *p);
   static void delete_MFSoftwareTrigger(void *p);
   static void deleteArray_MFSoftwareTrigger(void *p);
   static void destruct_MFSoftwareTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFSoftwareTrigger*)
   {
      ::MFSoftwareTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFSoftwareTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFSoftwareTrigger", ::MFSoftwareTrigger::Class_Version(), "./MFSoftwareTrigger.h", 15,
                  typeid(::MFSoftwareTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFSoftwareTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::MFSoftwareTrigger) );
      instance.SetNew(&new_MFSoftwareTrigger);
      instance.SetNewArray(&newArray_MFSoftwareTrigger);
      instance.SetDelete(&delete_MFSoftwareTrigger);
      instance.SetDeleteArray(&deleteArray_MFSoftwareTrigger);
      instance.SetDestructor(&destruct_MFSoftwareTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFSoftwareTrigger*)
   {
      return GenerateInitInstanceLocal((::MFSoftwareTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFSoftwareTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFCosmics_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFCosmics(void *p = 0);
   static void *newArray_MFCosmics(Long_t size, void *p);
   static void delete_MFCosmics(void *p);
   static void deleteArray_MFCosmics(void *p);
   static void destruct_MFCosmics(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFCosmics*)
   {
      ::MFCosmics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFCosmics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFCosmics", ::MFCosmics::Class_Version(), "./MFCosmics.h", 15,
                  typeid(::MFCosmics), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFCosmics::Dictionary, isa_proxy, 4,
                  sizeof(::MFCosmics) );
      instance.SetNew(&new_MFCosmics);
      instance.SetNewArray(&newArray_MFCosmics);
      instance.SetDelete(&delete_MFCosmics);
      instance.SetDeleteArray(&deleteArray_MFCosmics);
      instance.SetDestructor(&destruct_MFCosmics);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFCosmics*)
   {
      return GenerateInitInstanceLocal((::MFCosmics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFCosmics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFEnergySlope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFEnergySlope(void *p = 0);
   static void *newArray_MFEnergySlope(Long_t size, void *p);
   static void delete_MFEnergySlope(void *p);
   static void deleteArray_MFEnergySlope(void *p);
   static void destruct_MFEnergySlope(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFEnergySlope*)
   {
      ::MFEnergySlope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFEnergySlope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFEnergySlope", ::MFEnergySlope::Class_Version(), "./MFEnergySlope.h", 13,
                  typeid(::MFEnergySlope), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFEnergySlope::Dictionary, isa_proxy, 4,
                  sizeof(::MFEnergySlope) );
      instance.SetNew(&new_MFEnergySlope);
      instance.SetNewArray(&newArray_MFEnergySlope);
      instance.SetDelete(&delete_MFEnergySlope);
      instance.SetDeleteArray(&deleteArray_MFEnergySlope);
      instance.SetDestructor(&destruct_MFEnergySlope);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFEnergySlope*)
   {
      return GenerateInitInstanceLocal((::MFEnergySlope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFEnergySlope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MFTriggerLvl1::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFTriggerLvl1::Class_Name()
{
   return "MFTriggerLvl1";
}

//______________________________________________________________________________
const char *MFTriggerLvl1::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl1*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFTriggerLvl1::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl1*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFTriggerLvl1::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl1*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFTriggerLvl1::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl1*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFTriggerLvl2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFTriggerLvl2::Class_Name()
{
   return "MFTriggerLvl2";
}

//______________________________________________________________________________
const char *MFTriggerLvl2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFTriggerLvl2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFTriggerLvl2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFTriggerLvl2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerLvl2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFMagicCuts::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFMagicCuts::Class_Name()
{
   return "MFMagicCuts";
}

//______________________________________________________________________________
const char *MFMagicCuts::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFMagicCuts*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFMagicCuts::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFMagicCuts*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFMagicCuts::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFMagicCuts*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFMagicCuts::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFMagicCuts*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFGeomag::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFGeomag::Class_Name()
{
   return "MFGeomag";
}

//______________________________________________________________________________
const char *MFGeomag::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFGeomag*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFGeomag::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFGeomag*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFGeomag::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFGeomag*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFGeomag::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFGeomag*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFEvtNumber::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFEvtNumber::Class_Name()
{
   return "MFEvtNumber";
}

//______________________________________________________________________________
const char *MFEvtNumber::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEvtNumber*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFEvtNumber::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEvtNumber*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFEvtNumber::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEvtNumber*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFEvtNumber::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEvtNumber*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFDeltaT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFDeltaT::Class_Name()
{
   return "MFDeltaT";
}

//______________________________________________________________________________
const char *MFDeltaT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDeltaT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFDeltaT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFDeltaT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFDeltaT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDeltaT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFDeltaT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFDeltaT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFParticleId::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFParticleId::Class_Name()
{
   return "MFParticleId";
}

//______________________________________________________________________________
const char *MFParticleId::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFParticleId*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFParticleId::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFParticleId*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFParticleId::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFParticleId*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFParticleId::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFParticleId*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFSoftwareTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFSoftwareTrigger::Class_Name()
{
   return "MFSoftwareTrigger";
}

//______________________________________________________________________________
const char *MFSoftwareTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFSoftwareTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFSoftwareTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFSoftwareTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFSoftwareTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFSoftwareTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFSoftwareTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFSoftwareTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFCosmics::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFCosmics::Class_Name()
{
   return "MFCosmics";
}

//______________________________________________________________________________
const char *MFCosmics::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFCosmics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFCosmics::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFCosmics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFCosmics::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFCosmics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFCosmics::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFCosmics*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFEnergySlope::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFEnergySlope::Class_Name()
{
   return "MFEnergySlope";
}

//______________________________________________________________________________
const char *MFEnergySlope::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEnergySlope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFEnergySlope::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFEnergySlope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFEnergySlope::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEnergySlope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFEnergySlope::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFEnergySlope*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MFTriggerLvl1::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFTriggerLvl1.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFTriggerLvl1::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFTriggerLvl1::Class(),this);
   }
}

//______________________________________________________________________________
void MFTriggerLvl1::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFTriggerLvl1.
      TClass *R__cl = ::MFTriggerLvl1::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcTrig", &fMcTrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContName", &fContName);
      R__insp.InspectMember(fContName, "fContName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValue", &fValue);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFTriggerLvl1(void *p) {
      return  p ? new(p) ::MFTriggerLvl1 : new ::MFTriggerLvl1;
   }
   static void *newArray_MFTriggerLvl1(Long_t nElements, void *p) {
      return p ? new(p) ::MFTriggerLvl1[nElements] : new ::MFTriggerLvl1[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFTriggerLvl1(void *p) {
      delete ((::MFTriggerLvl1*)p);
   }
   static void deleteArray_MFTriggerLvl1(void *p) {
      delete [] ((::MFTriggerLvl1*)p);
   }
   static void destruct_MFTriggerLvl1(void *p) {
      typedef ::MFTriggerLvl1 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFTriggerLvl1

//______________________________________________________________________________
void MFTriggerLvl2::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFTriggerLvl2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFTriggerLvl2::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFTriggerLvl2::Class(),this);
   }
}

//______________________________________________________________________________
void MFTriggerLvl2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFTriggerLvl2.
      TClass *R__cl = ::MFTriggerLvl2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContName", &fContName);
      R__insp.InspectMember(fContName, "fContName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcell", &fcell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValue", &fValue);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFTriggerLvl2(void *p) {
      return  p ? new(p) ::MFTriggerLvl2 : new ::MFTriggerLvl2;
   }
   static void *newArray_MFTriggerLvl2(Long_t nElements, void *p) {
      return p ? new(p) ::MFTriggerLvl2[nElements] : new ::MFTriggerLvl2[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFTriggerLvl2(void *p) {
      delete ((::MFTriggerLvl2*)p);
   }
   static void deleteArray_MFTriggerLvl2(void *p) {
      delete [] ((::MFTriggerLvl2*)p);
   }
   static void destruct_MFTriggerLvl2(void *p) {
      typedef ::MFTriggerLvl2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFTriggerLvl2

//______________________________________________________________________________
void MFGeomag::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFGeomag.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFGeomag::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFGeomag::Class(),this);
   }
}

//______________________________________________________________________________
void MFGeomag::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFGeomag.
      TClass *R__cl = ::MFGeomag::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGammaElectron", &fGammaElectron);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRigMin[2304]", fRigMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRigMax[2304]", fRigMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProb[2304]", fProb);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFGeomag(void *p) {
      return  p ? new(p) ::MFGeomag : new ::MFGeomag;
   }
   static void *newArray_MFGeomag(Long_t nElements, void *p) {
      return p ? new(p) ::MFGeomag[nElements] : new ::MFGeomag[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFGeomag(void *p) {
      delete ((::MFGeomag*)p);
   }
   static void deleteArray_MFGeomag(void *p) {
      delete [] ((::MFGeomag*)p);
   }
   static void destruct_MFGeomag(void *p) {
      typedef ::MFGeomag current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFGeomag

//______________________________________________________________________________
void MFDeltaT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFDeltaT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFDeltaT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFDeltaT::Class(),this);
   }
}

//______________________________________________________________________________
void MFDeltaT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFDeltaT.
      TClass *R__cl = ::MFDeltaT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTime", &fNameTime);
      R__insp.InspectMember(fNameTime, "fNameTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperLimit", &fUpperLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastTime", &fLastTime);
      R__insp.InspectMember(fLastTime, "fLastTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrors", &fErrors);
      R__insp.InspectMember(fErrors, "fErrors.");
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFDeltaT(void *p) {
      return  p ? new(p) ::MFDeltaT : new ::MFDeltaT;
   }
   static void *newArray_MFDeltaT(Long_t nElements, void *p) {
      return p ? new(p) ::MFDeltaT[nElements] : new ::MFDeltaT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFDeltaT(void *p) {
      delete ((::MFDeltaT*)p);
   }
   static void deleteArray_MFDeltaT(void *p) {
      delete [] ((::MFDeltaT*)p);
   }
   static void destruct_MFDeltaT(void *p) {
      typedef ::MFDeltaT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFDeltaT

//______________________________________________________________________________
void MFParticleId::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFParticleId.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFParticleId::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFParticleId::Class(),this);
   }
}

//______________________________________________________________________________
void MFParticleId::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFParticleId.
      TClass *R__cl = ::MFParticleId::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMcEvt", &fMcEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContName", &fContName);
      R__insp.InspectMember(fContName, "fContName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilterType", &fFilterType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValue", &fValue);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFParticleId(void *p) {
      return  p ? new(p) ::MFParticleId : new ::MFParticleId;
   }
   static void *newArray_MFParticleId(Long_t nElements, void *p) {
      return p ? new(p) ::MFParticleId[nElements] : new ::MFParticleId[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFParticleId(void *p) {
      delete ((::MFParticleId*)p);
   }
   static void deleteArray_MFParticleId(void *p) {
      delete [] ((::MFParticleId*)p);
   }
   static void destruct_MFParticleId(void *p) {
      typedef ::MFParticleId current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFParticleId

//______________________________________________________________________________
void MFEvtNumber::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFEvtNumber.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFEvtNumber::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFEvtNumber::Class(),this);
   }
}

//______________________________________________________________________________
void MFEvtNumber::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFEvtNumber.
      TClass *R__cl = ::MFEvtNumber::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTreeName", &fTreeName);
      R__insp.InspectMember(fTreeName, "fTreeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSelector", &fSelector);
      R__insp.InspectMember(fSelector, "fSelector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fList", &fList);
      R__insp.InspectMember(fList, "fList.");
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFEvtNumber(void *p) {
      return  p ? new(p) ::MFEvtNumber : new ::MFEvtNumber;
   }
   static void *newArray_MFEvtNumber(Long_t nElements, void *p) {
      return p ? new(p) ::MFEvtNumber[nElements] : new ::MFEvtNumber[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFEvtNumber(void *p) {
      delete ((::MFEvtNumber*)p);
   }
   static void deleteArray_MFEvtNumber(void *p) {
      delete [] ((::MFEvtNumber*)p);
   }
   static void destruct_MFEvtNumber(void *p) {
      typedef ::MFEvtNumber current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFEvtNumber

//______________________________________________________________________________
void MFSoftwareTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFSoftwareTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFSoftwareTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFSoftwareTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void MFSoftwareTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFSoftwareTrigger.
      TClass *R__cl = ::MFSoftwareTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTme", &fTme);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThreshold", &fThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWindow", &fTimeWindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumNeighbors", &fNumNeighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCut[2]", fCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFSoftwareTrigger(void *p) {
      return  p ? new(p) ::MFSoftwareTrigger : new ::MFSoftwareTrigger;
   }
   static void *newArray_MFSoftwareTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::MFSoftwareTrigger[nElements] : new ::MFSoftwareTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFSoftwareTrigger(void *p) {
      delete ((::MFSoftwareTrigger*)p);
   }
   static void deleteArray_MFSoftwareTrigger(void *p) {
      delete [] ((::MFSoftwareTrigger*)p);
   }
   static void destruct_MFSoftwareTrigger(void *p) {
      typedef ::MFSoftwareTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFSoftwareTrigger

//______________________________________________________________________________
void MFCosmics::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFCosmics.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFCosmics::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFCosmics::Class(),this);
   }
}

//______________________________________________________________________________
void MFCosmics::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFCosmics.
      TClass *R__cl = ::MFCosmics::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPedestals", &fPedestals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignals", &fSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamePedestalCam", &fNamePedestalCam);
      R__insp.InspectMember(fNamePedestalCam, "fNamePedestalCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCut[2]", fCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEmptyPixels", &fMaxEmptyPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSqrtHiGainSamples", &fSqrtHiGainSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinAcceptedFraction", &fMinAcceptedFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxAcceptedFraction", &fMaxAcceptedFraction);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFCosmics(void *p) {
      return  p ? new(p) ::MFCosmics : new ::MFCosmics;
   }
   static void *newArray_MFCosmics(Long_t nElements, void *p) {
      return p ? new(p) ::MFCosmics[nElements] : new ::MFCosmics[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFCosmics(void *p) {
      delete ((::MFCosmics*)p);
   }
   static void deleteArray_MFCosmics(void *p) {
      delete [] ((::MFCosmics*)p);
   }
   static void destruct_MFCosmics(void *p) {
      typedef ::MFCosmics current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFCosmics

//______________________________________________________________________________
void MFMagicCuts::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFMagicCuts.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFMagicCuts::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFMagicCuts::Class(),this);
   }
}

//______________________________________________________________________________
void MFMagicCuts::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFMagicCuts.
      TClass *R__cl = ::MFMagicCuts::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHil", &fHil);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHilSrc", &fHilSrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHilAnti", &fHilAnti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHilExt", &fHilExt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNewImgPar", &fNewImgPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fThetaSq", &fThetaSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDisp", &fDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGhostbuster", &fGhostbuster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHadronness", &fHadronness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMap[16]", fMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVariables", &fVariables);
      R__insp.InspectMember(fVariables, "fVariables.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThetaCut", &fThetaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHadronnessCut", &fHadronnessCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalcDisp", &fCalcDisp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalcGhostbuster", &fCalcGhostbuster);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFMagicCuts(void *p) {
      return  p ? new(p) ::MFMagicCuts : new ::MFMagicCuts;
   }
   static void *newArray_MFMagicCuts(Long_t nElements, void *p) {
      return p ? new(p) ::MFMagicCuts[nElements] : new ::MFMagicCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFMagicCuts(void *p) {
      delete ((::MFMagicCuts*)p);
   }
   static void deleteArray_MFMagicCuts(void *p) {
      delete [] ((::MFMagicCuts*)p);
   }
   static void destruct_MFMagicCuts(void *p) {
      typedef ::MFMagicCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFMagicCuts

//______________________________________________________________________________
void MFEnergySlope::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFEnergySlope.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFEnergySlope::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFEnergySlope::Class(),this);
   }
}

//______________________________________________________________________________
void MFEnergySlope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFEnergySlope.
      TClass *R__cl = ::MFEnergySlope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNewSlope", &fNewSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcSlope", &fMcSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcMinEnergy", &fMcMinEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMcMaxEnergy", &fMcMaxEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN0", &fN0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFEnergySlope(void *p) {
      return  p ? new(p) ::MFEnergySlope : new ::MFEnergySlope;
   }
   static void *newArray_MFEnergySlope(Long_t nElements, void *p) {
      return p ? new(p) ::MFEnergySlope[nElements] : new ::MFEnergySlope[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFEnergySlope(void *p) {
      delete ((::MFEnergySlope*)p);
   }
   static void deleteArray_MFEnergySlope(void *p) {
      delete [] ((::MFEnergySlope*)p);
   }
   static void destruct_MFEnergySlope(void *p) {
      typedef ::MFEnergySlope current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFEnergySlope

/********************************************************
* FilterCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableFilterCint();

extern "C" void G__set_cpp_environmentFilterCint() {
  G__cpp_reset_tagtableFilterCint();
}
#include <new>
extern "C" int G__cpp_dllrevFilterCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MFTriggerLvl1 */
static int G__FilterCint_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl1* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerLvl1[n];
       } else {
         p = new((void*) gvp) MFTriggerLvl1[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerLvl1;
       } else {
         p = new((void*) gvp) MFTriggerLvl1;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl1* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1(
(MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1((MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1((MMcTrig*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl1((MMcTrig*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFTriggerLvl1((MMcTrig*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFTriggerLvl1::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl1::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFTriggerLvl1::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFTriggerLvl1::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFTriggerLvl1*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl1::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerLvl1::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl1::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerLvl1::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFTriggerLvl1* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFTriggerLvl1(*(MFTriggerLvl1*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFTriggerLvl1 G__TMFTriggerLvl1;
static int G__FilterCint_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFTriggerLvl1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFTriggerLvl1*) (soff+(sizeof(MFTriggerLvl1)*i)))->~G__TMFTriggerLvl1();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFTriggerLvl1*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFTriggerLvl1*) (soff))->~G__TMFTriggerLvl1();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl1* dest = (MFTriggerLvl1*) G__getstructoffset();
   *dest = *(MFTriggerLvl1*) libp->para[0].ref;
   const MFTriggerLvl1& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFTriggerLvl2 */
static int G__FilterCint_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerLvl2[n];
       } else {
         p = new((void*) gvp) MFTriggerLvl2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerLvl2;
       } else {
         p = new((void*) gvp) MFTriggerLvl2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2(
(MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2((MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2((MMcTriggerLvl2*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerLvl2((MMcTriggerLvl2*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFTriggerLvl2((MMcTriggerLvl2*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFTriggerLvl2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFTriggerLvl2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFTriggerLvl2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFTriggerLvl2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerLvl2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerLvl2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerLvl2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFTriggerLvl2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFTriggerLvl2(*(MFTriggerLvl2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFTriggerLvl2 G__TMFTriggerLvl2;
static int G__FilterCint_181_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFTriggerLvl2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFTriggerLvl2*) (soff+(sizeof(MFTriggerLvl2)*i)))->~G__TMFTriggerLvl2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFTriggerLvl2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFTriggerLvl2*) (soff))->~G__TMFTriggerLvl2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_181_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerLvl2* dest = (MFTriggerLvl2*) G__getstructoffset();
   *dest = *(MFTriggerLvl2*) libp->para[0].ref;
   const MFTriggerLvl2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFMagicCuts */
static int G__FilterCint_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFMagicCuts* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFMagicCuts((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFMagicCuts((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFMagicCuts((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFMagicCuts((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFMagicCuts[n];
       } else {
         p = new((void*) gvp) MFMagicCuts[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFMagicCuts;
       } else {
         p = new((void*) gvp) MFMagicCuts;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MFMagicCuts*) G__getstructoffset())->GetThetaSqCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFMagicCuts*) G__getstructoffset())->SetThetaCut((MFMagicCuts::ThetaCut_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFMagicCuts*) G__getstructoffset())->SetHadronnessCut((MFMagicCuts::HadronnessCut_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFMagicCuts*) G__getstructoffset())->SetCalcDisp((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFMagicCuts*) G__getstructoffset())->SetCalcDisp();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFMagicCuts*) G__getstructoffset())->SetCalcGhostbuster((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFMagicCuts*) G__getstructoffset())->SetCalcGhostbuster();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFMagicCuts*) G__getstructoffset())->InitMapping((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFMagicCuts*) G__getstructoffset())->StopMapping();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MFMagicCuts*) G__getstructoffset())->CoefficentsRead((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MFMagicCuts*) G__getstructoffset())->CoefficentsWrite((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFMagicCuts::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFMagicCuts::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFMagicCuts::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFMagicCuts::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFMagicCuts*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFMagicCuts::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFMagicCuts::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFMagicCuts::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_192_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFMagicCuts::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_192_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFMagicCuts* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFMagicCuts(*(MFMagicCuts*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFMagicCuts G__TMFMagicCuts;
static int G__FilterCint_192_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFMagicCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFMagicCuts*) (soff+(sizeof(MFMagicCuts)*i)))->~G__TMFMagicCuts();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFMagicCuts*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFMagicCuts*) (soff))->~G__TMFMagicCuts();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_192_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFMagicCuts* dest = (MFMagicCuts*) G__getstructoffset();
   *dest = *(MFMagicCuts*) libp->para[0].ref;
   const MFMagicCuts& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFGeomag */
static int G__FilterCint_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFGeomag* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFGeomag((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFGeomag((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFGeomag((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFGeomag((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFGeomag[n];
       } else {
         p = new((void*) gvp) MFGeomag[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFGeomag;
       } else {
         p = new((void*) gvp) MFGeomag;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFGeomag));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFGeomag*) G__getstructoffset())->SetGammElec();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFGeomag::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFGeomag::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFGeomag::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFGeomag::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFGeomag*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFGeomag::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFGeomag::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFGeomag::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFGeomag::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFGeomag* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFGeomag(*(MFGeomag*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFGeomag));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFGeomag G__TMFGeomag;
static int G__FilterCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFGeomag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFGeomag*) (soff+(sizeof(MFGeomag)*i)))->~G__TMFGeomag();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFGeomag*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFGeomag*) (soff))->~G__TMFGeomag();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFGeomag* dest = (MFGeomag*) G__getstructoffset();
   *dest = *(MFGeomag*) libp->para[0].ref;
   const MFGeomag& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFEvtNumber */
static int G__FilterCint_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEvtNumber* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEvtNumber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEvtNumber((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEvtNumber((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFEvtNumber((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEvtNumber[n];
       } else {
         p = new((void*) gvp) MFEvtNumber[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEvtNumber;
       } else {
         p = new((void*) gvp) MFEvtNumber;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEvtNumber*) G__getstructoffset())->SetFileName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEvtNumber*) G__getstructoffset())->SetTreeName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEvtNumber*) G__getstructoffset())->SetSelector((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFEvtNumber::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEvtNumber::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFEvtNumber::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFEvtNumber::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEvtNumber*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEvtNumber::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEvtNumber::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEvtNumber::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEvtNumber::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFEvtNumber* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFEvtNumber(*(MFEvtNumber*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFEvtNumber G__TMFEvtNumber;
static int G__FilterCint_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFEvtNumber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFEvtNumber*) (soff+(sizeof(MFEvtNumber)*i)))->~G__TMFEvtNumber();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFEvtNumber*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFEvtNumber*) (soff))->~G__TMFEvtNumber();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_203_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEvtNumber* dest = (MFEvtNumber*) G__getstructoffset();
   *dest = *(MFEvtNumber*) libp->para[0].ref;
   const MFEvtNumber& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFDeltaT */
static int G__FilterCint_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDeltaT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFDeltaT(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFDeltaT(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFDeltaT((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MFDeltaT((Float_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDeltaT* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFDeltaT((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFDeltaT((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFDeltaT((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFDeltaT[n];
       } else {
         p = new((void*) gvp) MFDeltaT[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFDeltaT;
       } else {
         p = new((void*) gvp) MFDeltaT;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDeltaT*) G__getstructoffset())->SetUpperLimit((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MFDeltaT*) G__getstructoffset())->GetUpperLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFDeltaT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDeltaT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFDeltaT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFDeltaT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFDeltaT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDeltaT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDeltaT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFDeltaT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFDeltaT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFDeltaT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFDeltaT(*(MFDeltaT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFDeltaT G__TMFDeltaT;
static int G__FilterCint_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFDeltaT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFDeltaT*) (soff+(sizeof(MFDeltaT)*i)))->~G__TMFDeltaT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFDeltaT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFDeltaT*) (soff))->~G__TMFDeltaT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFDeltaT* dest = (MFDeltaT*) G__getstructoffset();
   *dest = *(MFDeltaT*) libp->para[0].ref;
   const MFDeltaT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFParticleId */
static int G__FilterCint_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFParticleId* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFParticleId(
(const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFParticleId((const char*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFParticleId((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFParticleId[n];
       } else {
         p = new((void*) gvp) MFParticleId[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFParticleId;
       } else {
         p = new((void*) gvp) MFParticleId;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFParticleId* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFParticleId(
(MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId((MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFParticleId((MMcEvt*) G__int(libp->para[0]), (const char) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFParticleId((MMcEvt*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFParticleId((MMcEvt*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFParticleId::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFParticleId::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFParticleId::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFParticleId::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFParticleId*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFParticleId::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFParticleId::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFParticleId::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFParticleId::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFParticleId* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFParticleId(*(MFParticleId*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFParticleId G__TMFParticleId;
static int G__FilterCint_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFParticleId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFParticleId*) (soff+(sizeof(MFParticleId)*i)))->~G__TMFParticleId();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFParticleId*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFParticleId*) (soff))->~G__TMFParticleId();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFParticleId* dest = (MFParticleId*) G__getstructoffset();
   *dest = *(MFParticleId*) libp->para[0].ref;
   const MFParticleId& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFSoftwareTrigger */
static int G__FilterCint_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFSoftwareTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFSoftwareTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFSoftwareTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFSoftwareTrigger((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFSoftwareTrigger((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFSoftwareTrigger[n];
       } else {
         p = new((void*) gvp) MFSoftwareTrigger[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFSoftwareTrigger;
       } else {
         p = new((void*) gvp) MFSoftwareTrigger;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFSoftwareTrigger*) G__getstructoffset())->SetThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFSoftwareTrigger*) G__getstructoffset())->SetNumNeighbors((Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFSoftwareTrigger*) G__getstructoffset())->SetTimeWindow((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFSoftwareTrigger*) G__getstructoffset())->SetTimeWindow();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFSoftwareTrigger*) G__getstructoffset())->SetTriggerType((MFSoftwareTrigger::TriggerType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFSoftwareTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFSoftwareTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFSoftwareTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFSoftwareTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFSoftwareTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFSoftwareTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFSoftwareTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFSoftwareTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_215_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFSoftwareTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_215_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFSoftwareTrigger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFSoftwareTrigger(*(MFSoftwareTrigger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFSoftwareTrigger G__TMFSoftwareTrigger;
static int G__FilterCint_215_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFSoftwareTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFSoftwareTrigger*) (soff+(sizeof(MFSoftwareTrigger)*i)))->~G__TMFSoftwareTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFSoftwareTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFSoftwareTrigger*) (soff))->~G__TMFSoftwareTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFCosmics */
static int G__FilterCint_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFCosmics* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFCosmics((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFCosmics((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFCosmics((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFCosmics((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFCosmics[n];
       } else {
         p = new((void*) gvp) MFCosmics[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFCosmics;
       } else {
         p = new((void*) gvp) MFCosmics;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFCosmics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFCosmics*) G__getstructoffset())->SetMaxEmptyPixels((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MFCosmics*) G__getstructoffset())->GetMaxEmptyPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFCosmics*) G__getstructoffset())->SetMaxAcceptedFraction((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFCosmics*) G__getstructoffset())->SetMinAcceptedFraction((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFCosmics*) G__getstructoffset())->SetNamePedestalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFCosmics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFCosmics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFCosmics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFCosmics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFCosmics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFCosmics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFCosmics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFCosmics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_222_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFCosmics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_222_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFCosmics* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFCosmics(*(MFCosmics*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFCosmics));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFCosmics G__TMFCosmics;
static int G__FilterCint_222_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFCosmics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFCosmics*) (soff+(sizeof(MFCosmics)*i)))->~G__TMFCosmics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFCosmics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFCosmics*) (soff))->~G__TMFCosmics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_222_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFCosmics* dest = (MFCosmics*) G__getstructoffset();
   *dest = *(MFCosmics*) libp->para[0].ref;
   const MFCosmics& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFEnergySlope */
static int G__FilterCint_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEnergySlope* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEnergySlope((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFEnergySlope((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEnergySlope[n];
       } else {
         p = new((void*) gvp) MFEnergySlope[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFEnergySlope;
       } else {
         p = new((void*) gvp) MFEnergySlope;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEnergySlope* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFEnergySlope(
(Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEnergySlope((Float_t) G__double(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope((Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MFEnergySlope((Float_t) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEnergySlope* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MFEnergySlope(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MFEnergySlope(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFEnergySlope((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MFEnergySlope((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEnergySlope*) G__getstructoffset())->SetNewSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEnergySlope*) G__getstructoffset())->SetMcSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEnergySlope*) G__getstructoffset())->SetMcMinEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEnergySlope*) G__getstructoffset())->SetMcMaxEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFEnergySlope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEnergySlope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFEnergySlope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFEnergySlope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFEnergySlope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEnergySlope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEnergySlope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFEnergySlope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__FilterCint_224_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFEnergySlope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__FilterCint_224_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFEnergySlope* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFEnergySlope(*(MFEnergySlope*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFEnergySlope G__TMFEnergySlope;
static int G__FilterCint_224_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFEnergySlope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFEnergySlope*) (soff+(sizeof(MFEnergySlope)*i)))->~G__TMFEnergySlope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFEnergySlope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFEnergySlope*) (soff))->~G__TMFEnergySlope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__FilterCint_224_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFEnergySlope* dest = (MFEnergySlope*) G__getstructoffset();
   *dest = *(MFEnergySlope*) libp->para[0].ref;
   const MFEnergySlope& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MFTriggerLvl1 */

/* MFTriggerLvl2 */

/* MFMagicCuts */

/* MFGeomag */

/* MFEvtNumber */

/* MFDeltaT */

/* MFParticleId */

/* MFSoftwareTrigger */

/* MFCosmics */

/* MFEnergySlope */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncFilterCint {
 public:
  G__Sizep2memfuncFilterCint(): p(&G__Sizep2memfuncFilterCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncFilterCint::*p)();
};

size_t G__get_sizep2memfuncFilterCint()
{
  G__Sizep2memfuncFilterCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceFilterCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1))) {
     MFTriggerLvl1 *G__Lderived;
     G__Lderived=(MFTriggerLvl1*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2))) {
     MFTriggerLvl2 *G__Lderived;
     G__Lderived=(MFTriggerLvl2*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts))) {
     MFMagicCuts *G__Lderived;
     G__Lderived=(MFMagicCuts*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag))) {
     MFGeomag *G__Lderived;
     G__Lderived=(MFGeomag*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber))) {
     MFEvtNumber *G__Lderived;
     G__Lderived=(MFEvtNumber*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT))) {
     MFDeltaT *G__Lderived;
     G__Lderived=(MFDeltaT*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId))) {
     MFParticleId *G__Lderived;
     G__Lderived=(MFParticleId*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger))) {
     MFSoftwareTrigger *G__Lderived;
     G__Lderived=(MFSoftwareTrigger*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics))) {
     MFCosmics *G__Lderived;
     G__Lderived=(MFCosmics*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope))) {
     MFEnergySlope *G__Lderived;
     G__Lderived=(MFEnergySlope*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope),G__get_linked_tagnum(&G__FilterCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope),G__get_linked_tagnum(&G__FilterCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope),G__get_linked_tagnum(&G__FilterCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope),G__get_linked_tagnum(&G__FilterCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope),G__get_linked_tagnum(&G__FilterCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableFilterCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FilterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FilterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__FilterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__FilterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t),0,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t),0,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FilterType_t",117,G__get_linked_tagnum(&G__FilterCintLN_MFParticleIdcLcLFilterType_t),0,G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MFTriggerLvl1 */
static void G__setup_memvarMFTriggerLvl1(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   { MFTriggerLvl1 *p; p=(MFTriggerLvl1*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MMcTrig),-1,-1,4,"fMcTrig=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fContName=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t),-1,-2,4,"kELowerThan=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t),-1,-2,4,"kEGreaterThan=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFTriggerLvl2 */
static void G__setup_memvarMFTriggerLvl2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   { MFTriggerLvl2 *p; p=(MFTriggerLvl2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fContName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MMcTriggerLvl2),-1,-1,4,"fcell=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t),-1,-2,4,"kELowerThan=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t),-1,-2,4,"kEGreaterThan=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFMagicCuts */
static void G__setup_memvarMFMagicCuts(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts));
   { MFMagicCuts *p; p=(MFMagicCuts*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t),-1,-2,1,G__FastAllocString(2048).Format("kNone=%lldLL",(long long)MFMagicCuts::kNone).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t),-1,-2,1,G__FastAllocString(2048).Format("kOn=%lldLL",(long long)MFMagicCuts::kOn).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t),-1,-2,1,G__FastAllocString(2048).Format("kOff=%lldLL",(long long)MFMagicCuts::kOff).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t),-1,-2,1,G__FastAllocString(2048).Format("kWobble=%lldLL",(long long)MFMagicCuts::kWobble).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-2,1,G__FastAllocString(2048).Format("kNoCut=%lldLL",(long long)MFMagicCuts::kNoCut).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-2,1,G__FastAllocString(2048).Format("kArea=%lldLL",(long long)MFMagicCuts::kArea).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-2,1,G__FastAllocString(2048).Format("kHadronness=%lldLL",(long long)MFMagicCuts::kHadronness).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-2,1,G__FastAllocString(2048).Format("kAreaLin=%lldLL",(long long)MFMagicCuts::kAreaLin).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-2,1,G__FastAllocString(2048).Format("kAll=%lldLL",(long long)MFMagicCuts::kAll).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kESize=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEAlpha=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEAlphaAnti=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEArea=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEDist=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEDistAnti=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEM3Long=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEM3LongAnti=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEWdivL=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kELeakage=9LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kESlope=10LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kESlopeAnti=11LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEHadronness=12LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kESign=13LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEDisp=14LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kEGhostbuster=15LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLdA),-1,-2,4,"kLastElement=16LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion factor from mm to deg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MHillas),-1,-1,4,"fHil=",0,"! Pointer to MHillas container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MHillasSrc),-1,-1,4,"fHilSrc=",0,"! Pointer to MHillasSrc container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MHillasSrc),-1,-1,4,"fHilAnti=",0,"! Pointer to MHillasSrc container called MHillasSrcAnti");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MHillasExt),-1,-1,4,"fHilExt=",0,"! Pointer to MHillasExt container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MNewImagePar),-1,-1,4,"fNewImgPar=",0,"! Pointer to MHillasExt container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MParameterD),-1,-1,4,"fThetaSq=",0,"! Pointer to MParameterD container called ThetaSq");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MParameterD),-1,-1,4,"fDisp=",0,"! Pointer to MParameterD container called Disp");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MParameterD),-1,-1,4,"fGhostbuster=",0,"! Pointer to MParameterD container called Ghostbuster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MParameterD),-1,-1,4,"fHadronness=",0,"! Pointer to MParameterD container called Hadronness");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"! Result of the filter evaluation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMap[16]=",0,"! Mapping table for fast optimization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MHMatrix),-1,-1,4,"fMatrix=",0,"! Matrix thorugh which the mapped elements are accessed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TArrayD),-1,-1,4,"fVariables=",0,"Coefficients of cuts");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t),-1,-1,4,"fThetaCut=",0,"Which kind of theta cut should be evaluated");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t),-1,-1,4,"fHadronnessCut=",0,"Which kind of hadronness cut should be evaluated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCalcDisp=",0,"Should we use Disp from the parameterlist?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fCalcGhostbuster=",0,"Should we use Ghostbuster from the parameterlist?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFGeomag */
static void G__setup_memvarMFGeomag(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag));
   { MFGeomag *p; p=(MFGeomag*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGammaElectron=",0,"switches gammas to electrons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRigMin[2304]=",0,"tables to contain cut limits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRigMax[2304]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fProb[2304]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFEvtNumber */
static void G__setup_memvarMFEvtNumber(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber));
   { MFEvtNumber *p; p=(MFEvtNumber*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MRawRunHeader),-1,-1,4,"fRun=",0,"! MRawRunHeader with run-number of event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MRawEvtHeader),-1,-1,4,"fEvt=",0,"! MRawEvtHeader with evt-number of event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"! Result returned by IsExpressionTrue");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fFileName=",0,"File name of the file with the even-/run-number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fTreeName=",0,"Tree name of the file with the even-/run-number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fSelector=",0,"Selector to choose run-/evt-number from file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TExMap),-1,-1,4,"fList=",0,"List with all event-/run-numbers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFDeltaT */
static void G__setup_memvarMFDeltaT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT));
   { MFDeltaT *p; p=(MFDeltaT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MTime),-1,-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fNameTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUpperLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_MTime),-1,-1,4,"fLastTime=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TArrayI),-1,-1,4,"fErrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFParticleId */
static void G__setup_memvarMFParticleId(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   { MFParticleId *p; p=(MFParticleId*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MMcEvt),-1,-1,4,"fMcEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fContName=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFParticleIdcLcLFilterType_t),-1,-2,4,"kEEqual=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFParticleIdcLcLFilterType_t),-1,-2,4,"kENotEqual=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFParticleIdcLcLFilterType_t),G__defined_typename("FilterType_t"),-1,4,"fFilterType=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFSoftwareTrigger */
static void G__setup_memvarMFSoftwareTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger));
   { MFSoftwareTrigger *p; p=(MFSoftwareTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t),-1,-2,1,G__FastAllocString(2048).Format("kSinglePixelNeighbors=%lldLL",(long long)MFSoftwareTrigger::kSinglePixelNeighbors).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t),-1,-2,1,G__FastAllocString(2048).Format("kAnyPattern=%lldLL",(long long)MFSoftwareTrigger::kAnyPattern).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FilterCintLN_MGeomCam),-1,-1,4,"fCam=",0,"Camera Geometry");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FilterCintLN_MSignalCam),-1,-1,4,"fEvt=",0,"Cerenkov Photon Event");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__FilterCintLN_MArrivalTime),-1,-1,4,"fTme=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThreshold=",0,"nuber of minimum required photons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeWindow=",0,"Window for time coincidence");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumNeighbors=",0,"number of required neighbours");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t),-1,-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLdA),-1,-2,4,"kWasChecked=2097152LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLdA),-1,-2,4,"kAboveThreshold=4194304LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTriggercLcLdA),-1,-2,4,"kIsCoincident=8388608LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFCosmics */
static void G__setup_memvarMFCosmics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics));
   { MFCosmics *p; p=(MFCosmics*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-2,4,"fgNamePedestalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MPedestalCam),-1,-1,4,"fPedestals=",0,"Pedestals of all pixels in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MExtractedSignalCam),-1,-1,4,"fSignals=",0,"Calibration events of all pixels in the camera");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"Bad pixel used for exclusions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MRawEvtData),-1,-1,4,"fRawEvt=",0,"raw event data (time slices)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__FilterCintLN_TString),-1,-1,4,"fNamePedestalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCut[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxEmptyPixels=",0,"Maximum number of empty pixels before declaring event as cosmic");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSqrtHiGainSamples=",0,"Square root of the number of used Hi-Gain Samples");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinAcceptedFraction=",0,"return error if exceeded");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxAcceptedFraction=",0,"return error if exceeded");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFEnergySlope */
static void G__setup_memvarMFEnergySlope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   { MFEnergySlope *p; p=(MFEnergySlope*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_MMcEvt),-1,-1,4,"fEvt=",0,"! Events used to determin energy slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fNewSlope=",0,"New slope set by user");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMcSlope=",0,"! Original energy slope from MC data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMcMinEnergy=",0,"! Starting energy of MC data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMcMaxEnergy=",0,"! Ending energy of MC data");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fN0=",0,"! Normalization factor");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"! Result returned by IsExpressionTrue");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__FilterCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarFilterCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMFTriggerLvl1(void) {
   /* MFTriggerLvl1 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"c - - 10 - type i - 'Int_t' 10 - val "
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFTriggerLvl1",1222,G__FilterCint_178_0_5, 105, G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1), -1, 0, 5, 1, 1, 0, 
"C - - 10 '\"MMcTrig\"' cname c - - 10 ''>'' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFTriggerLvl1",1222,G__FilterCint_178_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1), -1, 0, 5, 1, 1, 0, 
"U 'MMcTrig' - 0 - mctrig c - - 10 ''>'' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_178_0_8, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFTriggerLvl1::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_178_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl1::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_178_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFTriggerLvl1::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_178_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFTriggerLvl1::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_178_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_178_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl1::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_178_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerLvl1::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_178_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl1::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_178_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerLvl1::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFTriggerLvl1", 1222, G__FilterCint_178_0_20, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1), -1, 0, 1, 1, 1, 0, "u 'MFTriggerLvl1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFTriggerLvl1", 1348, G__FilterCint_178_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_178_0_22, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl1), -1, 1, 1, 1, 1, 0, "u 'MFTriggerLvl1' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFTriggerLvl2(void) {
   /* MFTriggerLvl2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"c - - 10 - type i - 'Int_t' 10 - val "
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFTriggerLvl2",1223,G__FilterCint_181_0_5, 105, G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2), -1, 0, 5, 1, 1, 0, 
"C - - 10 '\"MMcTriggerLvl2\"' cname c - - 10 ''>'' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFTriggerLvl2",1223,G__FilterCint_181_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2), -1, 0, 5, 1, 1, 0, 
"U 'MMcTriggerLvl2' - 0 - triglvl2 c - - 10 ''>'' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_181_0_8, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFTriggerLvl2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_181_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_181_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFTriggerLvl2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_181_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFTriggerLvl2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_181_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_181_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_181_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerLvl2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_181_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerLvl2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_181_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerLvl2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFTriggerLvl2", 1223, G__FilterCint_181_0_20, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2), -1, 0, 1, 1, 1, 0, "u 'MFTriggerLvl2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFTriggerLvl2", 1349, G__FilterCint_181_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_181_0_22, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFTriggerLvl2), -1, 1, 1, 1, 1, 0, "u 'MFTriggerLvl2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFMagicCuts(void) {
   /* MFMagicCuts */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDisp",688,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - slope d - 'Double_t' 0 - lgsize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsGhost",705,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"d - 'Double_t' 0 - m3long d - 'Double_t' 0 - slope "
"d - 'Double_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVal",579,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParam",785,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__FilterCintLN_TString), -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaSq",986,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"d - 'Double_t' 0 - p d - 'Double_t' 0 - d "
"d - 'Double_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFMagicCuts",1043,G__FilterCint_192_0_9, 105, G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThetaSqCut",1286,G__FilterCint_192_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThetaCut",1102,G__FilterCint_192_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFMagicCuts::ThetaCut_t' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHadronnessCut",1645,G__FilterCint_192_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFMagicCuts::HadronnessCut_t' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalcDisp",1071,G__FilterCint_192_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalcGhostbuster",1849,G__FilterCint_192_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMapping",1120,G__FilterCint_192_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MHMatrix' - 0 - mat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopMapping",1138,G__FilterCint_192_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CoefficentsRead",1509,G__FilterCint_192_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CoefficentsWrite",1652,G__FilterCint_192_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - arr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_192_0_22, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFMagicCuts::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_192_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFMagicCuts::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_192_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFMagicCuts::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_192_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFMagicCuts::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_192_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_192_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFMagicCuts::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_192_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFMagicCuts::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_192_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFMagicCuts::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_192_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFMagicCuts::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFMagicCuts", 1043, G__FilterCint_192_0_34, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts), -1, 0, 1, 1, 1, 0, "u 'MFMagicCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFMagicCuts", 1169, G__FilterCint_192_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_192_0_36, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFMagicCuts), -1, 1, 1, 1, 1, 0, "u 'MFMagicCuts' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFGeomag(void) {
   /* MFGeomag */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFGeomag));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFGeomag",739,G__FilterCint_197_0_3, 105, G__get_linked_tagnum(&G__FilterCintLN_MFGeomag), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGammElec",1063,G__FilterCint_197_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "allows to use gammas like electrons", (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_197_0_6, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFGeomag::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_197_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFGeomag::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_197_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFGeomag::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_197_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFGeomag::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_197_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_197_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFGeomag::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_197_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFGeomag::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_197_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFGeomag::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_197_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFGeomag::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFGeomag", 739, G__FilterCint_197_0_18, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFGeomag), -1, 0, 1, 1, 1, 0, "u 'MFGeomag' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFGeomag", 865, G__FilterCint_197_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_197_0_20, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFGeomag), -1, 1, 1, 1, 1, 0, "u 'MFGeomag' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFEvtNumber(void) {
   /* MFEvtNumber */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber));
   G__memfunc_setup("Compile",713,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("ULong_t"), 0, 2, 1, 4, 8, 
"m - 'ULong64_t' 0 - run m - 'ULong64_t' 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvtId",764,(G__InterfaceMethod) NULL, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFEvtNumber",1067,G__FilterCint_203_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileName",1069,G__FilterCint_203_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTreeName",1085,G__FilterCint_203_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSelector",1133,G__FilterCint_203_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - sel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_203_0_11, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFEvtNumber::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_203_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEvtNumber::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_203_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFEvtNumber::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_203_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFEvtNumber::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_203_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_203_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEvtNumber::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_203_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEvtNumber::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_203_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEvtNumber::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_203_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEvtNumber::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFEvtNumber", 1067, G__FilterCint_203_0_23, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber), -1, 0, 1, 1, 1, 0, "u 'MFEvtNumber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFEvtNumber", 1193, G__FilterCint_203_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_203_0_25, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFEvtNumber), -1, 1, 1, 1, 1, 0, "u 'MFEvtNumber' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFDeltaT(void) {
   /* MFDeltaT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"C - - 10 - name C - - 10 - title "
"f - 'Float_t' 0 '0.5' max C - - 10 '\"MTime\"' time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFDeltaT",721,G__FilterCint_209_0_5, 105, G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - max C - - 10 '\"MTime\"' time "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFDeltaT",721,G__FilterCint_209_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpperLimit",1335,G__FilterCint_209_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpperLimit",1323,G__FilterCint_209_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_209_0_10, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFDeltaT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_209_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDeltaT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_209_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFDeltaT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_209_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFDeltaT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_209_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_209_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDeltaT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_209_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDeltaT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_209_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFDeltaT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_209_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFDeltaT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFDeltaT", 721, G__FilterCint_209_0_22, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT), -1, 0, 1, 1, 1, 0, "u 'MFDeltaT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFDeltaT", 847, G__FilterCint_209_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_209_0_24, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFDeltaT), -1, 1, 1, 1, 1, 0, "u 'MFDeltaT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFParticleId(void) {
   /* MFParticleId */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFParticleId));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"c - - 10 - type i - 'Int_t' 10 - val "
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFParticleId",1140,G__FilterCint_210_0_5, 105, G__get_linked_tagnum(&G__FilterCintLN_MFParticleId), -1, 0, 5, 1, 1, 0, 
"C - - 10 '\"MMcEvt\"' cname c - - 10 ''='' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFParticleId",1140,G__FilterCint_210_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFParticleId), -1, 0, 5, 1, 1, 0, 
"U 'MMcEvt' - 0 - mcevt c - - 10 ''='' type "
"i - 'Int_t' 10 '0' val C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_210_0_8, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFParticleId::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_210_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFParticleId::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_210_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFParticleId::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_210_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFParticleId::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_210_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_210_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFParticleId::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_210_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFParticleId::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_210_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFParticleId::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_210_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFParticleId::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFParticleId", 1140, G__FilterCint_210_0_20, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFParticleId), -1, 0, 1, 1, 1, 0, "u 'MFParticleId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFParticleId", 1266, G__FilterCint_210_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_210_0_22, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFParticleId), -1, 1, 1, 1, 1, 0, "u 'MFParticleId' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFSoftwareTrigger(void) {
   /* MFSoftwareTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetBits",917,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - bits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPixel",992,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__FilterCintLN_MSignalPix), -1, 0, 1, 1, 4, 9, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SwTrigger",926,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SwCoincidence",1310,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CountPixels",1150,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - idx f - 'Float_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClusterTrigger",1462,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFSoftwareTrigger",1714,G__FilterCint_215_0_11, 105, G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThreshold",1241,G__FilterCint_215_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumNeighbors",1533,G__FilterCint_215_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'Byte_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeWindow",1331,G__FilterCint_215_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '-1' win", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTriggerType",1442,G__FilterCint_215_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFSoftwareTrigger::TriggerType_t' - 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_215_0_17, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFSoftwareTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_215_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFSoftwareTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_215_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFSoftwareTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_215_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFSoftwareTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_215_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_215_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFSoftwareTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_215_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFSoftwareTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_215_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFSoftwareTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_215_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFSoftwareTrigger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFSoftwareTrigger", 1714, G__FilterCint_215_0_29, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFSoftwareTrigger), -1, 0, 1, 1, 1, 0, "u 'MFSoftwareTrigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFSoftwareTrigger", 1840, G__FilterCint_215_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFCosmics(void) {
   /* MFCosmics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFCosmics));
   G__memfunc_setup("CosmicsRejection",1652,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFCosmics",868,G__FilterCint_222_0_8, 105, G__get_linked_tagnum(&G__FilterCintLN_MFCosmics), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxEmptyPixels",1750,G__FilterCint_222_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxEmptyPixels",1738,G__FilterCint_222_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxAcceptedFraction",2209,G__FilterCint_222_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinAcceptedFraction",2207,G__FilterCint_222_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNamePedestalCam",1776,G__FilterCint_222_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__FilterCint_222_0_14, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFCosmics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_222_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFCosmics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_222_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFCosmics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_222_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFCosmics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_222_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_222_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFCosmics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_222_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFCosmics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_222_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFCosmics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_222_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFCosmics::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFCosmics", 868, G__FilterCint_222_0_26, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFCosmics), -1, 0, 1, 1, 1, 0, "u 'MFCosmics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFCosmics", 994, G__FilterCint_222_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_222_0_28, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFCosmics), -1, 1, 1, 1, 1, 0, "u 'MFCosmics' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFEnergySlope(void) {
   /* MFEnergySlope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFEnergySlope",1280,G__FilterCint_224_0_5, 105, G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFEnergySlope",1280,G__FilterCint_224_0_6, 105, G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope), -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - slope C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFEnergySlope",1280,G__FilterCint_224_0_7, 105, G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - slope f - 'Float_t' 0 - emin "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewSlope",1113,G__FilterCint_224_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMcSlope",991,G__FilterCint_224_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMcMinEnergy",1386,G__FilterCint_224_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMcMaxEnergy",1388,G__FilterCint_224_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__FilterCint_224_0_13, 85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFEnergySlope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__FilterCint_224_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEnergySlope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__FilterCint_224_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFEnergySlope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__FilterCint_224_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFEnergySlope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__FilterCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__FilterCint_224_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__FilterCint_224_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEnergySlope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__FilterCint_224_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEnergySlope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__FilterCint_224_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFEnergySlope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__FilterCint_224_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFEnergySlope::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFEnergySlope", 1280, G__FilterCint_224_0_25, (int) ('i'), G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope), -1, 0, 1, 1, 1, 0, "u 'MFEnergySlope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFEnergySlope", 1406, G__FilterCint_224_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__FilterCint_224_0_27, (int) ('u'), G__get_linked_tagnum(&G__FilterCintLN_MFEnergySlope), -1, 1, 1, 1, 1, 0, "u 'MFEnergySlope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncFilterCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalFilterCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcFilterCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__FilterCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__FilterCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MMcTrig = { "MMcTrig" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFTriggerLvl1 = { "MFTriggerLvl1" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t = { "MFTriggerLvl1::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MMcTriggerLvl2 = { "MMcTriggerLvl2" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFTriggerLvl2 = { "MFTriggerLvl2" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t = { "MFTriggerLvl2::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MHillas = { "MHillas" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MHillasSrc = { "MHillasSrc" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MHillasExt = { "MHillasExt" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MNewImagePar = { "MNewImagePar" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFMagicCuts = { "MFMagicCuts" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFMagicCutscLcLThetaCut_t = { "MFMagicCuts::ThetaCut_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t = { "MFMagicCuts::HadronnessCut_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MFMagicCutscLcLdA = { "MFMagicCuts::$" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFGeomag = { "MFGeomag" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TExMap = { "TExMap" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFEvtNumber = { "MFEvtNumber" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFDeltaT = { "MFDeltaT" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFParticleId = { "MFParticleId" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFParticleIdcLcLFilterType_t = { "MFParticleId::FilterType_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MSignalPix = { "MSignalPix" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MArrivalTime = { "MArrivalTime" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFSoftwareTrigger = { "MFSoftwareTrigger" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t = { "MFSoftwareTrigger::TriggerType_t" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MFSoftwareTriggercLcLdA = { "MFSoftwareTrigger::$" , 101 , -1 };
G__linked_taginfo G__FilterCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MPedestalCam = { "MPedestalCam" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MBadPixelsCam = { "MBadPixelsCam" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MExtractedSignalCam = { "MExtractedSignalCam" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFCosmics = { "MFCosmics" , 99 , -1 };
G__linked_taginfo G__FilterCintLN_MFEnergySlope = { "MFEnergySlope" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableFilterCint() {
  G__FilterCintLN_TClass.tagnum = -1 ;
  G__FilterCintLN_TBuffer.tagnum = -1 ;
  G__FilterCintLN_TMemberInspector.tagnum = -1 ;
  G__FilterCintLN_TObject.tagnum = -1 ;
  G__FilterCintLN_TString.tagnum = -1 ;
  G__FilterCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__FilterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__FilterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__FilterCintLN_TEnv.tagnum = -1 ;
  G__FilterCintLN_TArrayD.tagnum = -1 ;
  G__FilterCintLN_MParContainer.tagnum = -1 ;
  G__FilterCintLN_MInputStreamID.tagnum = -1 ;
  G__FilterCintLN_MFilter.tagnum = -1 ;
  G__FilterCintLN_MParList.tagnum = -1 ;
  G__FilterCintLN_MTask.tagnum = -1 ;
  G__FilterCintLN_MMcTrig.tagnum = -1 ;
  G__FilterCintLN_MFTriggerLvl1.tagnum = -1 ;
  G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t.tagnum = -1 ;
  G__FilterCintLN_MMcTriggerLvl2.tagnum = -1 ;
  G__FilterCintLN_MFTriggerLvl2.tagnum = -1 ;
  G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t.tagnum = -1 ;
  G__FilterCintLN_MGeomCam.tagnum = -1 ;
  G__FilterCintLN_MHillas.tagnum = -1 ;
  G__FilterCintLN_MHillasSrc.tagnum = -1 ;
  G__FilterCintLN_MHillasExt.tagnum = -1 ;
  G__FilterCintLN_MNewImagePar.tagnum = -1 ;
  G__FilterCintLN_MParameterD.tagnum = -1 ;
  G__FilterCintLN_MHMatrix.tagnum = -1 ;
  G__FilterCintLN_MFMagicCuts.tagnum = -1 ;
  G__FilterCintLN_MFMagicCutscLcLThetaCut_t.tagnum = -1 ;
  G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t.tagnum = -1 ;
  G__FilterCintLN_MFMagicCutscLcLdA.tagnum = -1 ;
  G__FilterCintLN_MMcEvt.tagnum = -1 ;
  G__FilterCintLN_MFGeomag.tagnum = -1 ;
  G__FilterCintLN_TExMap.tagnum = -1 ;
  G__FilterCintLN_MRawRunHeader.tagnum = -1 ;
  G__FilterCintLN_MRawEvtHeader.tagnum = -1 ;
  G__FilterCintLN_MFEvtNumber.tagnum = -1 ;
  G__FilterCintLN_TArrayI.tagnum = -1 ;
  G__FilterCintLN_MTime.tagnum = -1 ;
  G__FilterCintLN_MFDeltaT.tagnum = -1 ;
  G__FilterCintLN_MFParticleId.tagnum = -1 ;
  G__FilterCintLN_MFParticleIdcLcLFilterType_t.tagnum = -1 ;
  G__FilterCintLN_MSignalCam.tagnum = -1 ;
  G__FilterCintLN_MSignalPix.tagnum = -1 ;
  G__FilterCintLN_MArrivalTime.tagnum = -1 ;
  G__FilterCintLN_MFSoftwareTrigger.tagnum = -1 ;
  G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t.tagnum = -1 ;
  G__FilterCintLN_MFSoftwareTriggercLcLdA.tagnum = -1 ;
  G__FilterCintLN_MRawEvtData.tagnum = -1 ;
  G__FilterCintLN_MPedestalCam.tagnum = -1 ;
  G__FilterCintLN_MBadPixelsCam.tagnum = -1 ;
  G__FilterCintLN_MExtractedSignalCam.tagnum = -1 ;
  G__FilterCintLN_MFCosmics.tagnum = -1 ;
  G__FilterCintLN_MFEnergySlope.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableFilterCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TString);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFilter);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MMcTrig);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFTriggerLvl1),sizeof(MFTriggerLvl1),-1,323840,"A Filter for the Level 1 Trigger",G__setup_memvarMFTriggerLvl1,G__setup_memfuncMFTriggerLvl1);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFTriggerLvl1cLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MMcTriggerLvl2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFTriggerLvl2),sizeof(MFTriggerLvl2),-1,323840,"A Filter for the Level 2 Trigger",G__setup_memvarMFTriggerLvl2,G__setup_memfuncMFTriggerLvl2);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFTriggerLvl2cLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MHillas);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MHillasSrc);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MHillasExt);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MNewImagePar);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MParameterD);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MHMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFMagicCuts),sizeof(MFMagicCuts),-1,323840,"A filter to evaluate the MagicCuts",G__setup_memvarMFMagicCuts,G__setup_memfuncMFMagicCuts);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFMagicCutscLcLThetaCut_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFMagicCutscLcLHadronnessCut_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFMagicCutscLcLdA);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MMcEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFGeomag),sizeof(MFGeomag),-1,323840,"Filter for MC particles, by geomagnetic field",G__setup_memvarMFGeomag,G__setup_memfuncMFGeomag);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TExMap);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MRawEvtHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFEvtNumber),sizeof(MFEvtNumber),-1,323840,"Filter to select events by run- and evt-number",G__setup_memvarMFEvtNumber,G__setup_memfuncMFEvtNumber);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFDeltaT),sizeof(MFDeltaT),-1,323840,"A Filter for time differences of consecutive events",G__setup_memvarMFDeltaT,G__setup_memfuncMFDeltaT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFParticleId),sizeof(MFParticleId),-1,323840,"A Filter for the (corsika) particle Id",G__setup_memvarMFParticleId,G__setup_memfuncMFParticleId);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFParticleIdcLcLFilterType_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MSignalCam);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MSignalPix);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MArrivalTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFSoftwareTrigger),sizeof(MFSoftwareTrigger),-1,323840,"Filter for software trigger",G__setup_memvarMFSoftwareTrigger,G__setup_memfuncMFSoftwareTrigger);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFSoftwareTriggercLcLTriggerType_t);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MFSoftwareTriggercLcLdA);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MRawEvtData);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MPedestalCam);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MBadPixelsCam);
   G__get_linked_tagnum_fwd(&G__FilterCintLN_MExtractedSignalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFCosmics),sizeof(MFCosmics),-1,323840,"Filter to perform a cosmics rejection",G__setup_memvarMFCosmics,G__setup_memfuncMFCosmics);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__FilterCintLN_MFEnergySlope),sizeof(MFEnergySlope),-1,323840,"A Filter to select events with a given energy slope",G__setup_memvarMFEnergySlope,G__setup_memfuncMFEnergySlope);
}
extern "C" void G__cpp_setupFilterCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupFilterCint()");
  G__set_cpp_environmentFilterCint();
  G__cpp_setup_tagtableFilterCint();

  G__cpp_setup_inheritanceFilterCint();

  G__cpp_setup_typetableFilterCint();

  G__cpp_setup_memvarFilterCint();

  G__cpp_setup_memfuncFilterCint();
  G__cpp_setup_globalFilterCint();
  G__cpp_setup_funcFilterCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncFilterCint();
  return;
}
class G__cpp_setup_initFilterCint {
  public:
    G__cpp_setup_initFilterCint() { G__add_setup_func("FilterCint",(G__incsetup)(&G__cpp_setupFilterCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initFilterCint() { G__remove_setup_func("FilterCint"); }
};
G__cpp_setup_initFilterCint G__cpp_setup_initializerFilterCint;

