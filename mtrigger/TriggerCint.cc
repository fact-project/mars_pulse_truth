//
// File generated by rootcint at Mon Nov 28 11:07:06 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TriggerCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TriggerCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MTriggerIPR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerIPR(void *p = 0);
   static void *newArray_MTriggerIPR(Long_t size, void *p);
   static void delete_MTriggerIPR(void *p);
   static void deleteArray_MTriggerIPR(void *p);
   static void destruct_MTriggerIPR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerIPR*)
   {
      ::MTriggerIPR *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerIPR >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerIPR", ::MTriggerIPR::Class_Version(), "./MTriggerIPR.h", 16,
                  typeid(::MTriggerIPR), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerIPR::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerIPR) );
      instance.SetNew(&new_MTriggerIPR);
      instance.SetNewArray(&newArray_MTriggerIPR);
      instance.SetDelete(&delete_MTriggerIPR);
      instance.SetDeleteArray(&deleteArray_MTriggerIPR);
      instance.SetDestructor(&destruct_MTriggerIPR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerIPR*)
   {
      return GenerateInitInstanceLocal((::MTriggerIPR*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerIPR*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerCell(void *p = 0);
   static void *newArray_MTriggerCell(Long_t size, void *p);
   static void delete_MTriggerCell(void *p);
   static void deleteArray_MTriggerCell(void *p);
   static void destruct_MTriggerCell(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerCell*)
   {
      ::MTriggerCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerCell", ::MTriggerCell::Class_Version(), "./MTriggerCell.h", 13,
                  typeid(::MTriggerCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerCell::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerCell) );
      instance.SetNew(&new_MTriggerCell);
      instance.SetNewArray(&newArray_MTriggerCell);
      instance.SetDelete(&delete_MTriggerCell);
      instance.SetDeleteArray(&deleteArray_MTriggerCell);
      instance.SetDestructor(&destruct_MTriggerCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerCell*)
   {
      return GenerateInitInstanceLocal((::MTriggerCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerBit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerBit(void *p = 0);
   static void *newArray_MTriggerBit(Long_t size, void *p);
   static void delete_MTriggerBit(void *p);
   static void deleteArray_MTriggerBit(void *p);
   static void destruct_MTriggerBit(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerBit*)
   {
      ::MTriggerBit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerBit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerBit", ::MTriggerBit::Class_Version(), "./MTriggerBit.h", 13,
                  typeid(::MTriggerBit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerBit::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerBit) );
      instance.SetNew(&new_MTriggerBit);
      instance.SetNewArray(&newArray_MTriggerBit);
      instance.SetDelete(&delete_MTriggerBit);
      instance.SetDeleteArray(&deleteArray_MTriggerBit);
      instance.SetDestructor(&destruct_MTriggerBit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerBit*)
   {
      return GenerateInitInstanceLocal((::MTriggerBit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerBit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerPrescFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerPrescFact(void *p = 0);
   static void *newArray_MTriggerPrescFact(Long_t size, void *p);
   static void delete_MTriggerPrescFact(void *p);
   static void deleteArray_MTriggerPrescFact(void *p);
   static void destruct_MTriggerPrescFact(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerPrescFact*)
   {
      ::MTriggerPrescFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerPrescFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerPrescFact", ::MTriggerPrescFact::Class_Version(), "./MTriggerPrescFact.h", 13,
                  typeid(::MTriggerPrescFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerPrescFact::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerPrescFact) );
      instance.SetNew(&new_MTriggerPrescFact);
      instance.SetNewArray(&newArray_MTriggerPrescFact);
      instance.SetDelete(&delete_MTriggerPrescFact);
      instance.SetDeleteArray(&deleteArray_MTriggerPrescFact);
      instance.SetDestructor(&destruct_MTriggerPrescFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerPrescFact*)
   {
      return GenerateInitInstanceLocal((::MTriggerPrescFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerPrescFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerLiveTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerLiveTime(void *p = 0);
   static void *newArray_MTriggerLiveTime(Long_t size, void *p);
   static void delete_MTriggerLiveTime(void *p);
   static void deleteArray_MTriggerLiveTime(void *p);
   static void destruct_MTriggerLiveTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerLiveTime*)
   {
      ::MTriggerLiveTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerLiveTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerLiveTime", ::MTriggerLiveTime::Class_Version(), "./MTriggerLiveTime.h", 13,
                  typeid(::MTriggerLiveTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerLiveTime::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerLiveTime) );
      instance.SetNew(&new_MTriggerLiveTime);
      instance.SetNewArray(&newArray_MTriggerLiveTime);
      instance.SetDelete(&delete_MTriggerLiveTime);
      instance.SetDeleteArray(&deleteArray_MTriggerLiveTime);
      instance.SetDestructor(&destruct_MTriggerLiveTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerLiveTime*)
   {
      return GenerateInitInstanceLocal((::MTriggerLiveTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerLiveTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerPattern_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerPattern(void *p = 0);
   static void *newArray_MTriggerPattern(Long_t size, void *p);
   static void delete_MTriggerPattern(void *p);
   static void deleteArray_MTriggerPattern(void *p);
   static void destruct_MTriggerPattern(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerPattern*)
   {
      ::MTriggerPattern *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerPattern >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerPattern", ::MTriggerPattern::Class_Version(), "./MTriggerPattern.h", 9,
                  typeid(::MTriggerPattern), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerPattern::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerPattern) );
      instance.SetNew(&new_MTriggerPattern);
      instance.SetNewArray(&newArray_MTriggerPattern);
      instance.SetDelete(&delete_MTriggerPattern);
      instance.SetDeleteArray(&deleteArray_MTriggerPattern);
      instance.SetDestructor(&destruct_MTriggerPattern);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerPattern*)
   {
      return GenerateInitInstanceLocal((::MTriggerPattern*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerPattern*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTriggerPatternDecode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTriggerPatternDecode(void *p = 0);
   static void *newArray_MTriggerPatternDecode(Long_t size, void *p);
   static void delete_MTriggerPatternDecode(void *p);
   static void deleteArray_MTriggerPatternDecode(void *p);
   static void destruct_MTriggerPatternDecode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTriggerPatternDecode*)
   {
      ::MTriggerPatternDecode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTriggerPatternDecode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTriggerPatternDecode", ::MTriggerPatternDecode::Class_Version(), "./MTriggerPatternDecode.h", 14,
                  typeid(::MTriggerPatternDecode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTriggerPatternDecode::Dictionary, isa_proxy, 4,
                  sizeof(::MTriggerPatternDecode) );
      instance.SetNew(&new_MTriggerPatternDecode);
      instance.SetNewArray(&newArray_MTriggerPatternDecode);
      instance.SetDelete(&delete_MTriggerPatternDecode);
      instance.SetDeleteArray(&deleteArray_MTriggerPatternDecode);
      instance.SetDestructor(&destruct_MTriggerPatternDecode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTriggerPatternDecode*)
   {
      return GenerateInitInstanceLocal((::MTriggerPatternDecode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTriggerPatternDecode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFTriggerPattern_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFTriggerPattern(void *p = 0);
   static void *newArray_MFTriggerPattern(Long_t size, void *p);
   static void delete_MFTriggerPattern(void *p);
   static void deleteArray_MFTriggerPattern(void *p);
   static void destruct_MFTriggerPattern(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFTriggerPattern*)
   {
      ::MFTriggerPattern *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFTriggerPattern >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFTriggerPattern", ::MFTriggerPattern::Class_Version(), "./MFTriggerPattern.h", 15,
                  typeid(::MFTriggerPattern), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFTriggerPattern::Dictionary, isa_proxy, 4,
                  sizeof(::MFTriggerPattern) );
      instance.SetNew(&new_MFTriggerPattern);
      instance.SetNewArray(&newArray_MFTriggerPattern);
      instance.SetDelete(&delete_MFTriggerPattern);
      instance.SetDeleteArray(&deleteArray_MFTriggerPattern);
      instance.SetDestructor(&destruct_MFTriggerPattern);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFTriggerPattern*)
   {
      return GenerateInitInstanceLocal((::MFTriggerPattern*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFTriggerPattern*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MTriggerIPR::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerIPR::Class_Name()
{
   return "MTriggerIPR";
}

//______________________________________________________________________________
const char *MTriggerIPR::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerIPR*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerIPR::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerIPR*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerIPR::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerIPR*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerIPR::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerIPR*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerCell::Class_Name()
{
   return "MTriggerCell";
}

//______________________________________________________________________________
const char *MTriggerCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerBit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerBit::Class_Name()
{
   return "MTriggerBit";
}

//______________________________________________________________________________
const char *MTriggerBit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerBit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerBit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerBit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerBit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerBit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerBit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerBit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerPrescFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerPrescFact::Class_Name()
{
   return "MTriggerPrescFact";
}

//______________________________________________________________________________
const char *MTriggerPrescFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPrescFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerPrescFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPrescFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerPrescFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPrescFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerPrescFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPrescFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerLiveTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerLiveTime::Class_Name()
{
   return "MTriggerLiveTime";
}

//______________________________________________________________________________
const char *MTriggerLiveTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerLiveTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerLiveTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerLiveTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerLiveTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerLiveTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerLiveTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerLiveTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerPattern::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerPattern::Class_Name()
{
   return "MTriggerPattern";
}

//______________________________________________________________________________
const char *MTriggerPattern::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPattern*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerPattern::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPattern*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerPattern::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPattern*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerPattern::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPattern*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTriggerPatternDecode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTriggerPatternDecode::Class_Name()
{
   return "MTriggerPatternDecode";
}

//______________________________________________________________________________
const char *MTriggerPatternDecode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPatternDecode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTriggerPatternDecode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPatternDecode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTriggerPatternDecode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPatternDecode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTriggerPatternDecode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTriggerPatternDecode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFTriggerPattern::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFTriggerPattern::Class_Name()
{
   return "MFTriggerPattern";
}

//______________________________________________________________________________
const char *MFTriggerPattern::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerPattern*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFTriggerPattern::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerPattern*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFTriggerPattern::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerPattern*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFTriggerPattern::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFTriggerPattern*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MTriggerIPR::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerIPR.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerIPR::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerIPR::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerIPR::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerIPR.
      TClass *R__cl = ::MTriggerIPR::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIPR", &fIPR);
      R__insp.InspectMember(fIPR, "fIPR.");
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerIPR(void *p) {
      return  p ? new(p) ::MTriggerIPR : new ::MTriggerIPR;
   }
   static void *newArray_MTriggerIPR(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerIPR[nElements] : new ::MTriggerIPR[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerIPR(void *p) {
      delete ((::MTriggerIPR*)p);
   }
   static void deleteArray_MTriggerIPR(void *p) {
      delete [] ((::MTriggerIPR*)p);
   }
   static void destruct_MTriggerIPR(void *p) {
      typedef ::MTriggerIPR current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerIPR

//______________________________________________________________________________
void MTriggerCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerCell.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerCell::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerCell::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerCell.
      TClass *R__cl = ::MTriggerCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCellRate", &fCellRate);
      R__insp.InspectMember(fCellRate, "fCellRate.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerCell(void *p) {
      return  p ? new(p) ::MTriggerCell : new ::MTriggerCell;
   }
   static void *newArray_MTriggerCell(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerCell[nElements] : new ::MTriggerCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerCell(void *p) {
      delete ((::MTriggerCell*)p);
   }
   static void deleteArray_MTriggerCell(void *p) {
      delete [] ((::MTriggerCell*)p);
   }
   static void destruct_MTriggerCell(void *p) {
      typedef ::MTriggerCell current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerCell

//______________________________________________________________________________
void MTriggerBit::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerBit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerBit::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerBit::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerBit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerBit.
      TClass *R__cl = ::MTriggerBit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBit", &fBit);
      R__insp.InspectMember(fBit, "fBit.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerBit(void *p) {
      return  p ? new(p) ::MTriggerBit : new ::MTriggerBit;
   }
   static void *newArray_MTriggerBit(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerBit[nElements] : new ::MTriggerBit[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerBit(void *p) {
      delete ((::MTriggerBit*)p);
   }
   static void deleteArray_MTriggerBit(void *p) {
      delete [] ((::MTriggerBit*)p);
   }
   static void destruct_MTriggerBit(void *p) {
      typedef ::MTriggerBit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerBit

//______________________________________________________________________________
void MTriggerPrescFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerPrescFact.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerPrescFact::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerPrescFact::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerPrescFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerPrescFact.
      TClass *R__cl = ::MTriggerPrescFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrescFact", &fPrescFact);
      R__insp.InspectMember(fPrescFact, "fPrescFact.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerPrescFact(void *p) {
      return  p ? new(p) ::MTriggerPrescFact : new ::MTriggerPrescFact;
   }
   static void *newArray_MTriggerPrescFact(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerPrescFact[nElements] : new ::MTriggerPrescFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerPrescFact(void *p) {
      delete ((::MTriggerPrescFact*)p);
   }
   static void deleteArray_MTriggerPrescFact(void *p) {
      delete [] ((::MTriggerPrescFact*)p);
   }
   static void destruct_MTriggerPrescFact(void *p) {
      typedef ::MTriggerPrescFact current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerPrescFact

//______________________________________________________________________________
void MTriggerLiveTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerLiveTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerLiveTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerLiveTime::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerLiveTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerLiveTime.
      TClass *R__cl = ::MTriggerLiveTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLiveTime", &fLiveTime);
      R__insp.InspectMember(fLiveTime, "fLiveTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeadTime", &fDeadTime);
      R__insp.InspectMember(fDeadTime, "fDeadTime.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerLiveTime(void *p) {
      return  p ? new(p) ::MTriggerLiveTime : new ::MTriggerLiveTime;
   }
   static void *newArray_MTriggerLiveTime(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerLiveTime[nElements] : new ::MTriggerLiveTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerLiveTime(void *p) {
      delete ((::MTriggerLiveTime*)p);
   }
   static void deleteArray_MTriggerLiveTime(void *p) {
      delete [] ((::MTriggerLiveTime*)p);
   }
   static void destruct_MTriggerLiveTime(void *p) {
      typedef ::MTriggerLiveTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerLiveTime

//______________________________________________________________________________
void MTriggerPattern::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerPattern.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerPattern::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerPattern::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerPattern::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerPattern.
      TClass *R__cl = ::MTriggerPattern::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrescaled", &fPrescaled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnprescaled", &fUnprescaled);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerPattern(void *p) {
      return  p ? new(p) ::MTriggerPattern : new ::MTriggerPattern;
   }
   static void *newArray_MTriggerPattern(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerPattern[nElements] : new ::MTriggerPattern[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerPattern(void *p) {
      delete ((::MTriggerPattern*)p);
   }
   static void deleteArray_MTriggerPattern(void *p) {
      delete [] ((::MTriggerPattern*)p);
   }
   static void destruct_MTriggerPattern(void *p) {
      typedef ::MTriggerPattern current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerPattern

//______________________________________________________________________________
void MTriggerPatternDecode::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTriggerPatternDecode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTriggerPatternDecode::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTriggerPatternDecode::Class(),this);
   }
}

//______________________________________________________________________________
void MTriggerPatternDecode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTriggerPatternDecode.
      TClass *R__cl = ::MTriggerPatternDecode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvtHeader", &fEvtHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPattern", &fPattern);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTriggerPatternDecode(void *p) {
      return  p ? new(p) ::MTriggerPatternDecode : new ::MTriggerPatternDecode;
   }
   static void *newArray_MTriggerPatternDecode(Long_t nElements, void *p) {
      return p ? new(p) ::MTriggerPatternDecode[nElements] : new ::MTriggerPatternDecode[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTriggerPatternDecode(void *p) {
      delete ((::MTriggerPatternDecode*)p);
   }
   static void deleteArray_MTriggerPatternDecode(void *p) {
      delete [] ((::MTriggerPatternDecode*)p);
   }
   static void destruct_MTriggerPatternDecode(void *p) {
      typedef ::MTriggerPatternDecode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTriggerPatternDecode

//______________________________________________________________________________
void MFTriggerPattern::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFTriggerPattern.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFTriggerPattern::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFTriggerPattern::Class(),this);
   }
}

//______________________________________________________________________________
void MFTriggerPattern::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFTriggerPattern.
      TClass *R__cl = ::MFTriggerPattern::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPattern", &fPattern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskRequiredPrescaled", &fMaskRequiredPrescaled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskRequiredUnprescaled", &fMaskRequiredUnprescaled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskDeniedPrescaled", &fMaskDeniedPrescaled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaskDeniedUnprescaled", &fMaskDeniedUnprescaled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDefault", &fDefault);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounter[4]", fCounter);
      MFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFTriggerPattern(void *p) {
      return  p ? new(p) ::MFTriggerPattern : new ::MFTriggerPattern;
   }
   static void *newArray_MFTriggerPattern(Long_t nElements, void *p) {
      return p ? new(p) ::MFTriggerPattern[nElements] : new ::MFTriggerPattern[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFTriggerPattern(void *p) {
      delete ((::MFTriggerPattern*)p);
   }
   static void deleteArray_MFTriggerPattern(void *p) {
      delete [] ((::MFTriggerPattern*)p);
   }
   static void destruct_MFTriggerPattern(void *p) {
      typedef ::MFTriggerPattern current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFTriggerPattern

/********************************************************
* TriggerCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTriggerCint();

extern "C" void G__set_cpp_environmentTriggerCint() {
  G__cpp_reset_tagtableTriggerCint();
}
#include <new>
extern "C" int G__cpp_dllrevTriggerCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MTriggerIPR */
static int G__TriggerCint_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerIPR* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerIPR[n];
     } else {
       p = new((void*) gvp) MTriggerIPR[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerIPR;
     } else {
       p = new((void*) gvp) MTriggerIPR;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MTriggerIPR*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MTriggerIPR*) G__getstructoffset())->operator[]((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerIPR::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerIPR::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerIPR::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerIPR::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerIPR*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerIPR::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerIPR::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerIPR::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerIPR::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerIPR* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerIPR(*(MTriggerIPR*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerIPR G__TMTriggerIPR;
static int G__TriggerCint_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerIPR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerIPR*) (soff+(sizeof(MTriggerIPR)*i)))->~G__TMTriggerIPR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerIPR*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerIPR*) (soff))->~G__TMTriggerIPR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerIPR* dest = (MTriggerIPR*) G__getstructoffset();
   *dest = *(MTriggerIPR*) libp->para[0].ref;
   const MTriggerIPR& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerCell */
static int G__TriggerCint_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerCell[n];
     } else {
       p = new((void*) gvp) MTriggerCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerCell;
     } else {
       p = new((void*) gvp) MTriggerCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MTriggerCell*) G__getstructoffset())->GetMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF* pobj;
         const TArrayF xobj = ((const MTriggerCell*) G__getstructoffset())->GetCellRate();
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MTriggerCell*) G__getstructoffset())->operator[]((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerCell(*(MTriggerCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerCell G__TMTriggerCell;
static int G__TriggerCint_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerCell*) (soff+(sizeof(MTriggerCell)*i)))->~G__TMTriggerCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerCell*) (soff))->~G__TMTriggerCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerCell* dest = (MTriggerCell*) G__getstructoffset();
   *dest = *(MTriggerCell*) libp->para[0].ref;
   const MTriggerCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerBit */
static int G__TriggerCint_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerBit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerBit[n];
     } else {
       p = new((void*) gvp) MTriggerBit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerBit;
     } else {
       p = new((void*) gvp) MTriggerBit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF* pobj;
         const TArrayF xobj = ((const MTriggerBit*) G__getstructoffset())->GetTriggerBit();
         pobj = new TArrayF(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MTriggerBit*) G__getstructoffset())->operator[]((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerBit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerBit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerBit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerBit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerBit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerBit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerBit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerBit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerBit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerBit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerBit(*(MTriggerBit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerBit G__TMTriggerBit;
static int G__TriggerCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerBit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerBit*) (soff+(sizeof(MTriggerBit)*i)))->~G__TMTriggerBit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerBit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerBit*) (soff))->~G__TMTriggerBit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerBit* dest = (MTriggerBit*) G__getstructoffset();
   *dest = *(MTriggerBit*) libp->para[0].ref;
   const MTriggerBit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerPrescFact */
static int G__TriggerCint_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPrescFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPrescFact[n];
     } else {
       p = new((void*) gvp) MTriggerPrescFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPrescFact;
     } else {
       p = new((void*) gvp) MTriggerPrescFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayL* pobj;
         const TArrayL xobj = ((const MTriggerPrescFact*) G__getstructoffset())->GetPrescFactors();
         pobj = new TArrayL(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MTriggerPrescFact*) G__getstructoffset())->operator[]((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerPrescFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPrescFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerPrescFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerPrescFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerPrescFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPrescFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPrescFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPrescFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_180_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPrescFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_180_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerPrescFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerPrescFact(*(MTriggerPrescFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerPrescFact G__TMTriggerPrescFact;
static int G__TriggerCint_180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerPrescFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerPrescFact*) (soff+(sizeof(MTriggerPrescFact)*i)))->~G__TMTriggerPrescFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerPrescFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerPrescFact*) (soff))->~G__TMTriggerPrescFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPrescFact* dest = (MTriggerPrescFact*) G__getstructoffset();
   *dest = *(MTriggerPrescFact*) libp->para[0].ref;
   const MTriggerPrescFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerLiveTime */
static int G__TriggerCint_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerLiveTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerLiveTime[n];
     } else {
       p = new((void*) gvp) MTriggerLiveTime[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerLiveTime;
     } else {
       p = new((void*) gvp) MTriggerLiveTime;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayL* pobj;
         const TArrayL xobj = ((const MTriggerLiveTime*) G__getstructoffset())->GetLiveTime();
         pobj = new TArrayL(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayL* pobj;
         const TArrayL xobj = ((const MTriggerLiveTime*) G__getstructoffset())->GetDeadTime();
         pobj = new TArrayL(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MTriggerLiveTime*) G__getstructoffset())->operator[]((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerLiveTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerLiveTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerLiveTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerLiveTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerLiveTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerLiveTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerLiveTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerLiveTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerLiveTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerLiveTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerLiveTime(*(MTriggerLiveTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerLiveTime G__TMTriggerLiveTime;
static int G__TriggerCint_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerLiveTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerLiveTime*) (soff+(sizeof(MTriggerLiveTime)*i)))->~G__TMTriggerLiveTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerLiveTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerLiveTime*) (soff))->~G__TMTriggerLiveTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerLiveTime* dest = (MTriggerLiveTime*) G__getstructoffset();
   *dest = *(MTriggerLiveTime*) libp->para[0].ref;
   const MTriggerLiveTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerPattern */
static int G__TriggerCint_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTriggerPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPattern((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTriggerPattern((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTriggerPattern[n];
       } else {
         p = new((void*) gvp) MTriggerPattern[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTriggerPattern;
       } else {
         p = new((void*) gvp) MTriggerPattern;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MTriggerPattern*) G__getstructoffset())->GetPrescaled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const MTriggerPattern*) G__getstructoffset())->GetUnprescaled());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerPattern::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPattern::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerPattern::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerPattern::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerPattern*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPattern::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPattern::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPattern::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_182_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPattern::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_182_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerPattern* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerPattern(*(MTriggerPattern*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerPattern G__TMTriggerPattern;
static int G__TriggerCint_182_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerPattern*) (soff+(sizeof(MTriggerPattern)*i)))->~G__TMTriggerPattern();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerPattern*) (soff))->~G__TMTriggerPattern();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_182_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPattern* dest = (MTriggerPattern*) G__getstructoffset();
   *dest = *(MTriggerPattern*) libp->para[0].ref;
   const MTriggerPattern& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTriggerPatternDecode */
static int G__TriggerCint_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPatternDecode* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPatternDecode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTriggerPatternDecode((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTriggerPatternDecode((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTriggerPatternDecode((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTriggerPatternDecode[n];
       } else {
         p = new((void*) gvp) MTriggerPatternDecode[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTriggerPatternDecode;
       } else {
         p = new((void*) gvp) MTriggerPatternDecode;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTriggerPatternDecode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPatternDecode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTriggerPatternDecode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTriggerPatternDecode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTriggerPatternDecode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPatternDecode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPatternDecode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTriggerPatternDecode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTriggerPatternDecode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TriggerCint_183_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MTriggerPatternDecode* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MTriggerPatternDecode(*(MTriggerPatternDecode*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTriggerPatternDecode G__TMTriggerPatternDecode;
static int G__TriggerCint_183_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTriggerPatternDecode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTriggerPatternDecode*) (soff+(sizeof(MTriggerPatternDecode)*i)))->~G__TMTriggerPatternDecode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTriggerPatternDecode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTriggerPatternDecode*) (soff))->~G__TMTriggerPatternDecode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_183_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTriggerPatternDecode* dest = (MTriggerPatternDecode*) G__getstructoffset();
   *dest = *(MTriggerPatternDecode*) libp->para[0].ref;
   const MTriggerPatternDecode& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFTriggerPattern */
static int G__TriggerCint_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MFTriggerPattern((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFTriggerPattern((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MFTriggerPattern((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerPattern[n];
       } else {
         p = new((void*) gvp) MFTriggerPattern[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MFTriggerPattern;
       } else {
         p = new((void*) gvp) MFTriggerPattern;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerPattern* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MFTriggerPattern(*(MFTriggerPattern*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MFTriggerPattern(*(MFTriggerPattern*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequireTriggerLvl1((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequireTriggerLvl1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequireTriggerLvl2((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequireTriggerLvl2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequireCalibration((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequireCalibration();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequirePedestal((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequirePedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequirePinDiode((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequirePinDiode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->RequireSumTrigger((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->RequireSumTrigger();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyTriggerLvl1((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyTriggerLvl1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyTriggerLvl2((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyTriggerLvl2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyCalibration((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyCalibration();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyPedestal((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyPinDiode((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyPinDiode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenySumTrigger((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenySumTrigger();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowTriggerLvl1((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowTriggerLvl1();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowTriggerLvl2((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowTriggerLvl2();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowCalibration((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowCalibration();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowPedestal((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowPedestal();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowPinDiode((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowPinDiode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowSumTrigger((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowSumTrigger();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->DenyAll((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->DenyAll();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->AllowAll((MFTriggerPattern::Prescale_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MFTriggerPattern*) G__getstructoffset())->AllowAll();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MFTriggerPattern*) G__getstructoffset())->Require(*((TString*) G__int(libp->para[0])), (MFTriggerPattern::Prescale_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->Require(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MFTriggerPattern*) G__getstructoffset())->Deny(*((TString*) G__int(libp->para[0])), (MFTriggerPattern::Prescale_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->Deny(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFTriggerPattern*) G__getstructoffset())->SetDefault((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MFTriggerPattern*) G__getstructoffset())->SetMaskRequired((const Byte_t) G__int(libp->para[0]), (MFTriggerPattern::Prescale_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->SetMaskRequired((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MFTriggerPattern*) G__getstructoffset())->SetMaskDenied((const Byte_t) G__int(libp->para[0]), (MFTriggerPattern::Prescale_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MFTriggerPattern*) G__getstructoffset())->SetMaskDenied((const Byte_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFTriggerPattern::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerPattern::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFTriggerPattern::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFTriggerPattern::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFTriggerPattern*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerPattern::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerPattern::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFTriggerPattern::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TriggerCint_193_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFTriggerPattern::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFTriggerPattern G__TMFTriggerPattern;
static int G__TriggerCint_193_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFTriggerPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFTriggerPattern*) (soff+(sizeof(MFTriggerPattern)*i)))->~G__TMFTriggerPattern();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFTriggerPattern*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFTriggerPattern*) (soff))->~G__TMFTriggerPattern();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TriggerCint_193_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFTriggerPattern* dest = (MFTriggerPattern*) G__getstructoffset();
   *dest = *(MFTriggerPattern*) libp->para[0].ref;
   const MFTriggerPattern& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MTriggerIPR */

/* MTriggerCell */

/* MTriggerBit */

/* MTriggerPrescFact */

/* MTriggerLiveTime */

/* MTriggerPattern */

/* MTriggerPatternDecode */

/* MFTriggerPattern */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTriggerCint {
 public:
  G__Sizep2memfuncTriggerCint(): p(&G__Sizep2memfuncTriggerCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTriggerCint::*p)();
};

size_t G__get_sizep2memfuncTriggerCint()
{
  G__Sizep2memfuncTriggerCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTriggerCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR))) {
     MTriggerIPR *G__Lderived;
     G__Lderived=(MTriggerIPR*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR),G__get_linked_tagnum(&G__TriggerCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell))) {
     MTriggerCell *G__Lderived;
     G__Lderived=(MTriggerCell*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit))) {
     MTriggerBit *G__Lderived;
     G__Lderived=(MTriggerBit*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact))) {
     MTriggerPrescFact *G__Lderived;
     G__Lderived=(MTriggerPrescFact*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime))) {
     MTriggerLiveTime *G__Lderived;
     G__Lderived=(MTriggerLiveTime*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern))) {
     MTriggerPattern *G__Lderived;
     G__Lderived=(MTriggerPattern*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode))) {
     MTriggerPatternDecode *G__Lderived;
     G__Lderived=(MTriggerPatternDecode*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode),G__get_linked_tagnum(&G__TriggerCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode),G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID))) {
     MInputStreamID *G__Lderived;
     G__Lderived=(MInputStreamID*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MTask))) {
     MTask *G__Lderived;
     G__Lderived=(MTask*)0x1000;
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTask),G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTask),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTask),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern))) {
     MFTriggerPattern *G__Lderived;
     G__Lderived=(MFTriggerPattern*)0x1000;
     {
       MFilter *G__Lpbase=(MFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_MFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern),G__get_linked_tagnum(&G__TriggerCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTriggerCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TriggerCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TriggerCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TriggerCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TriggerCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MTriggerIPR */
static void G__setup_memvarMTriggerIPR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR));
   { MTriggerIPR *p; p=(MTriggerIPR*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNTrigPix=397LL",0,"number of trigger pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayL),-1,-1,4,"fIPR=",0,"[Hz] IPR (Individual Pixel Rates)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerCell */
static void G__setup_memvarMTriggerCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell));
   { MTriggerCell *p; p=(MTriggerCell*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNCells=32LL",0,"Number of fields with cell rates");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayF),-1,-1,4,"fCellRate=",0,"Array of the measured L1 cell rates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerBit */
static void G__setup_memvarMTriggerBit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit));
   { MTriggerBit *p; p=(MTriggerBit*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNBits=20LL",0,"number of output bits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayF),-1,-1,4,"fBit=",0,"Array with the output bit rates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerPrescFact */
static void G__setup_memvarMTriggerPrescFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact));
   { MTriggerPrescFact *p; p=(MTriggerPrescFact*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNPrescFacts=8LL",0,"number of factors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayL),-1,-1,4,"fPrescFact=",0,"Array with the prescaling factors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerLiveTime */
static void G__setup_memvarMTriggerLiveTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime));
   { MTriggerLiveTime *p; p=(MTriggerLiveTime*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNScalers=5LL",0,"number of scalers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayL),-1,-1,4,"fLiveTime=",0,"Array with the livetime");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TArrayL),-1,-1,4,"fDeadTime=",0,"Array with the deadtime");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerPattern */
static void G__setup_memvarMTriggerPattern(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern));
   { MTriggerPattern *p; p=(MTriggerPattern*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kTriggerLvl1=%lldLL",(long long)MTriggerPattern::kTriggerLvl1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kCalibration=%lldLL",(long long)MTriggerPattern::kCalibration).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kTriggerLvl2=%lldLL",(long long)MTriggerPattern::kTriggerLvl2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kPedestal=%lldLL",(long long)MTriggerPattern::kPedestal).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kPinDiode=%lldLL",(long long)MTriggerPattern::kPinDiode).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kSumTrigger=%lldLL",(long long)MTriggerPattern::kSumTrigger).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kUndefined1=%lldLL",(long long)MTriggerPattern::kUndefined1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t),-1,-2,1,G__FastAllocString(2048).Format("kUndefined2=%lldLL",(long long)MTriggerPattern::kUndefined2).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fPrescaled=",0,"Bit Pattern as defined above");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fUnprescaled=",0,"Bit Pattern as defined above");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTriggerPatternDecode */
static void G__setup_memvarMTriggerPatternDecode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode));
   { MTriggerPatternDecode *p; p=(MTriggerPatternDecode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_MRawEvtHeader),-1,-1,4,"fEvtHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern),-1,-1,4,"fPattern=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFTriggerPattern */
static void G__setup_memvarMFTriggerPattern(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern));
   { MFTriggerPattern *p; p=(MFTriggerPattern*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPatterncLcLPrescale_t),-1,-2,1,G__FastAllocString(2048).Format("kUnPrescaled=%lldLL",(long long)MFTriggerPattern::kUnPrescaled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPatterncLcLPrescale_t),-1,-2,1,G__FastAllocString(2048).Format("kPrescaled=%lldLL",(long long)MFTriggerPattern::kPrescaled).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern),-1,-1,4,"fPattern=",0,"!");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMaskRequiredPrescaled=",0,"Mask for filtering Trigger Pattern allowed");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMaskRequiredUnprescaled=",0,"Mask for filtering Trigger Pattern allowed");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMaskDeniedPrescaled=",0,"Mask for filtering Trigger Pattern denied");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fMaskDeniedUnprescaled=",0,"Mask for filtering Trigger Pattern denied");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDefault=",0,"Default which is used if trigger pattern has default value (p==0&&u==0)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fResult=",0,"! Calculated result to be returned by IsExpressionTrue");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCounter[4]=",0,"! Counter for results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TriggerCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTriggerCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMTriggerIPR(void) {
   /* MTriggerIPR */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR));
   G__memfunc_setup("MTriggerIPR",1036,G__TriggerCint_175_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__TriggerCint_175_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__TriggerCint_175_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TriggerCint_175_0_6, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerIPR::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_175_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerIPR::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_175_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerIPR::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_175_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerIPR::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_175_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_175_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerIPR::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_175_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerIPR::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_175_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerIPR::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_175_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerIPR::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerIPR", 1036, G__TriggerCint_175_0_18, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR), -1, 0, 1, 1, 1, 0, "u 'MTriggerIPR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerIPR", 1162, G__TriggerCint_175_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_175_0_20, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerIPR), -1, 1, 1, 1, 1, 0, "u 'MTriggerIPR' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerCell(void) {
   /* MTriggerCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell));
   G__memfunc_setup("MTriggerCell",1185,G__TriggerCint_178_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__TriggerCint_178_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCellRate",1068,G__TriggerCint_178_0_3, 117, G__get_linked_tagnum(&G__TriggerCintLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TriggerCint_178_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_178_0_5, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_178_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_178_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_178_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_178_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_178_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_178_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_178_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_178_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerCell", 1185, G__TriggerCint_178_0_17, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell), -1, 0, 1, 1, 1, 0, "u 'MTriggerCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerCell", 1311, G__TriggerCint_178_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_178_0_19, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerCell), -1, 1, 1, 1, 1, 0, "u 'MTriggerCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerBit(void) {
   /* MTriggerBit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit));
   G__memfunc_setup("MTriggerBit",1088,G__TriggerCint_179_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerBit",1299,G__TriggerCint_179_0_2, 117, G__get_linked_tagnum(&G__TriggerCintLN_TArrayF), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TriggerCint_179_0_3, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_179_0_4, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerBit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_179_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerBit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_179_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerBit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_179_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerBit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_179_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerBit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_179_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerBit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_179_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerBit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_179_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerBit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerBit", 1088, G__TriggerCint_179_0_16, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit), -1, 0, 1, 1, 1, 0, "u 'MTriggerBit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerBit", 1214, G__TriggerCint_179_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_179_0_18, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerBit), -1, 1, 1, 1, 1, 0, "u 'MTriggerBit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerPrescFact(void) {
   /* MTriggerPrescFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact));
   G__memfunc_setup("MTriggerPrescFact",1692,G__TriggerCint_180_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPrescFactors",1519,G__TriggerCint_180_0_2, 117, G__get_linked_tagnum(&G__TriggerCintLN_TArrayL), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TriggerCint_180_0_3, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_180_0_4, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerPrescFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_180_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPrescFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_180_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerPrescFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_180_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerPrescFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_180_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_180_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPrescFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_180_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPrescFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_180_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPrescFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_180_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPrescFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerPrescFact", 1692, G__TriggerCint_180_0_16, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact), -1, 0, 1, 1, 1, 0, "u 'MTriggerPrescFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerPrescFact", 1818, G__TriggerCint_180_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_180_0_18, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPrescFact), -1, 1, 1, 1, 1, 0, "u 'MTriggerPrescFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerLiveTime(void) {
   /* MTriggerLiveTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime));
   G__memfunc_setup("MTriggerLiveTime",1600,G__TriggerCint_181_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLiveTime",1087,G__TriggerCint_181_0_2, 117, G__get_linked_tagnum(&G__TriggerCintLN_TArrayL), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeadTime",1053,G__TriggerCint_181_0_3, 117, G__get_linked_tagnum(&G__TriggerCintLN_TArrayL), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TriggerCint_181_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_181_0_5, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerLiveTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_181_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerLiveTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_181_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerLiveTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_181_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerLiveTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_181_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_181_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerLiveTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_181_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerLiveTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_181_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerLiveTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_181_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerLiveTime::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerLiveTime", 1600, G__TriggerCint_181_0_17, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime), -1, 0, 1, 1, 1, 0, "u 'MTriggerLiveTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerLiveTime", 1726, G__TriggerCint_181_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_181_0_19, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerLiveTime), -1, 1, 1, 1, 1, 0, "u 'MTriggerLiveTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerPattern(void) {
   /* MTriggerPattern */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern));
   G__memfunc_setup("MTriggerPattern",1535,G__TriggerCint_182_0_1, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPrescaled",1203,G__TriggerCint_182_0_5, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnprescaled",1430,G__TriggerCint_182_0_6, 98, -1, G__defined_typename("Byte_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_182_0_7, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerPattern::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_182_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPattern::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_182_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerPattern::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_182_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerPattern::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_182_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_182_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPattern::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_182_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPattern::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_182_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPattern::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_182_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPattern::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerPattern", 1535, G__TriggerCint_182_0_19, (int) ('i'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern), -1, 0, 1, 1, 1, 0, "u 'MTriggerPattern' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerPattern", 1661, G__TriggerCint_182_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_182_0_21, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPattern), -1, 1, 1, 1, 1, 0, "u 'MTriggerPattern' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTriggerPatternDecode(void) {
   /* MTriggerPatternDecode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MTriggerPatternDecode",2115,G__TriggerCint_183_0_3, 105, G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_183_0_4, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTriggerPatternDecode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_183_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPatternDecode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_183_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTriggerPatternDecode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_183_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTriggerPatternDecode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_183_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_183_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPatternDecode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_183_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPatternDecode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_183_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTriggerPatternDecode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_183_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTriggerPatternDecode::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MTriggerPatternDecode", 2115, G__TriggerCint_183_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode), -1, 0, 1, 1, 1, 0, "u 'MTriggerPatternDecode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MTriggerPatternDecode", 2241, G__TriggerCint_183_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_183_0_18, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MTriggerPatternDecode), -1, 1, 1, 1, 1, 0, "u 'MTriggerPatternDecode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFTriggerPattern(void) {
   /* MFTriggerPattern */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern));
   G__memfunc_setup("Require",733,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"b - 'Byte_t' 10 - mask i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deny",400,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"b - 'Byte_t' 10 - mask i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Allow",511,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"b - 'Byte_t' 10 - mask i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsExpressionTrue",1676,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MFTriggerPattern",1605,G__TriggerCint_193_0_9, 105, G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFTriggerPattern",1605,G__TriggerCint_193_0_10, 105, G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern), -1, 0, 1, 1, 1, 0, "u 'MFTriggerPattern' - 1 - trigpatt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequireTriggerLvl1",1808,G__TriggerCint_193_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequireTriggerLvl2",1809,G__TriggerCint_193_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequireCalibration",1861,G__TriggerCint_193_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequirePedestal",1551,G__TriggerCint_193_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequirePinDiode",1513,G__TriggerCint_193_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RequireSumTrigger",1766,G__TriggerCint_193_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyTriggerLvl1",1475,G__TriggerCint_193_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyTriggerLvl2",1476,G__TriggerCint_193_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyCalibration",1528,G__TriggerCint_193_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyPedestal",1218,G__TriggerCint_193_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyPinDiode",1180,G__TriggerCint_193_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenySumTrigger",1433,G__TriggerCint_193_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowTriggerLvl1",1586,G__TriggerCint_193_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowTriggerLvl2",1587,G__TriggerCint_193_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowCalibration",1639,G__TriggerCint_193_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowPedestal",1329,G__TriggerCint_193_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowPinDiode",1291,G__TriggerCint_193_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowSumTrigger",1544,G__TriggerCint_193_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DenyAll",681,G__TriggerCint_193_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AllowAll",792,G__TriggerCint_193_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Require",733,G__TriggerCint_193_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - patt i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Deny",400,G__TriggerCint_193_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - patt i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefault",1009,G__TriggerCint_193_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaskRequired",1529,G__TriggerCint_193_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 10 - mask i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaskDenied",1281,G__TriggerCint_193_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 10 - mask i 'MFTriggerPattern::Prescale_t' - 0 'kUnPrescaled' prescaled", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TriggerCint_193_0_36, 85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFTriggerPattern::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TriggerCint_193_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerPattern::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TriggerCint_193_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFTriggerPattern::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TriggerCint_193_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFTriggerPattern::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TriggerCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TriggerCint_193_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TriggerCint_193_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerPattern::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TriggerCint_193_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerPattern::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TriggerCint_193_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFTriggerPattern::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TriggerCint_193_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFTriggerPattern::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MFTriggerPattern", 1731, G__TriggerCint_193_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TriggerCint_193_0_49, (int) ('u'), G__get_linked_tagnum(&G__TriggerCintLN_MFTriggerPattern), -1, 1, 1, 1, 1, 0, "u 'MFTriggerPattern' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTriggerCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTriggerCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTriggerCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TriggerCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TriggerCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TArrayL = { "TArrayL" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerIPR = { "MTriggerIPR" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerCell = { "MTriggerCell" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerBit = { "MTriggerBit" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerPrescFact = { "MTriggerPrescFact" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerLiveTime = { "MTriggerLiveTime" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerPattern = { "MTriggerPattern" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerPatternDecode = { "MTriggerPatternDecode" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTriggerPatterncLcLPattern_t = { "MTriggerPattern::Pattern_t" , 101 , -1 };
G__linked_taginfo G__TriggerCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MFTriggerPattern = { "MFTriggerPattern" , 99 , -1 };
G__linked_taginfo G__TriggerCintLN_MFTriggerPatterncLcLPrescale_t = { "MFTriggerPattern::Prescale_t" , 101 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTriggerCint() {
  G__TriggerCintLN_TClass.tagnum = -1 ;
  G__TriggerCintLN_TBuffer.tagnum = -1 ;
  G__TriggerCintLN_TMemberInspector.tagnum = -1 ;
  G__TriggerCintLN_TObject.tagnum = -1 ;
  G__TriggerCintLN_TString.tagnum = -1 ;
  G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TriggerCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TriggerCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TriggerCintLN_MGeomCam.tagnum = -1 ;
  G__TriggerCintLN_MCamEvent.tagnum = -1 ;
  G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TriggerCintLN_MParContainer.tagnum = -1 ;
  G__TriggerCintLN_TArrayL.tagnum = -1 ;
  G__TriggerCintLN_MTriggerIPR.tagnum = -1 ;
  G__TriggerCintLN_TArrayF.tagnum = -1 ;
  G__TriggerCintLN_MTriggerCell.tagnum = -1 ;
  G__TriggerCintLN_MTriggerBit.tagnum = -1 ;
  G__TriggerCintLN_MTriggerPrescFact.tagnum = -1 ;
  G__TriggerCintLN_MTriggerLiveTime.tagnum = -1 ;
  G__TriggerCintLN_MTriggerPattern.tagnum = -1 ;
  G__TriggerCintLN_MTriggerPatternDecode.tagnum = -1 ;
  G__TriggerCintLN_MTriggerPatterncLcLPattern_t.tagnum = -1 ;
  G__TriggerCintLN_MInputStreamID.tagnum = -1 ;
  G__TriggerCintLN_MFilter.tagnum = -1 ;
  G__TriggerCintLN_MParList.tagnum = -1 ;
  G__TriggerCintLN_MTask.tagnum = -1 ;
  G__TriggerCintLN_MRawEvtHeader.tagnum = -1 ;
  G__TriggerCintLN_MRawRunHeader.tagnum = -1 ;
  G__TriggerCintLN_MFTriggerPattern.tagnum = -1 ;
  G__TriggerCintLN_MFTriggerPatterncLcLPrescale_t.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTriggerCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TString);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TArrayL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerIPR),sizeof(MTriggerIPR),-1,323840,"Trigger-Container for the Individual Pixel Rate (IPR)",G__setup_memvarMTriggerIPR,G__setup_memfuncMTriggerIPR);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerCell),sizeof(MTriggerCell),-1,323840,"Container for the trigger cell rates",G__setup_memvarMTriggerCell,G__setup_memfuncMTriggerCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerBit),sizeof(MTriggerBit),-1,323840,"Container for the L2 output bits rates",G__setup_memvarMTriggerBit,G__setup_memfuncMTriggerBit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerPrescFact),sizeof(MTriggerPrescFact),-1,323840,"Container for the L2 Prescaling Factors",G__setup_memvarMTriggerPrescFact,G__setup_memfuncMTriggerPrescFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerLiveTime),sizeof(MTriggerLiveTime),-1,323840,"Container for the Live-Deadtime",G__setup_memvarMTriggerLiveTime,G__setup_memfuncMTriggerLiveTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerPattern),sizeof(MTriggerPattern),-1,323840,"Container storing the decoded trigger pattern",G__setup_memvarMTriggerPattern,G__setup_memfuncMTriggerPattern);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerPatternDecode),sizeof(MTriggerPatternDecode),-1,323840,"Task to decode the Trigger Pattern",G__setup_memvarMTriggerPatternDecode,G__setup_memfuncMTriggerPatternDecode);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTriggerPatterncLcLPattern_t);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MFilter);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MRawEvtHeader);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MRawRunHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TriggerCintLN_MFTriggerPattern),sizeof(MFTriggerPattern),-1,324352,"A Filter for the Trigger Pattern",G__setup_memvarMFTriggerPattern,G__setup_memfuncMFTriggerPattern);
   G__get_linked_tagnum_fwd(&G__TriggerCintLN_MFTriggerPatterncLcLPrescale_t);
}
extern "C" void G__cpp_setupTriggerCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupTriggerCint()");
  G__set_cpp_environmentTriggerCint();
  G__cpp_setup_tagtableTriggerCint();

  G__cpp_setup_inheritanceTriggerCint();

  G__cpp_setup_typetableTriggerCint();

  G__cpp_setup_memvarTriggerCint();

  G__cpp_setup_memfuncTriggerCint();
  G__cpp_setup_globalTriggerCint();
  G__cpp_setup_funcTriggerCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTriggerCint();
  return;
}
class G__cpp_setup_initTriggerCint {
  public:
    G__cpp_setup_initTriggerCint() { G__add_setup_func("TriggerCint",(G__incsetup)(&G__cpp_setupTriggerCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTriggerCint() { G__remove_setup_func("TriggerCint"); }
};
G__cpp_setup_initTriggerCint G__cpp_setup_initializerTriggerCint;

