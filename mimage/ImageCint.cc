//
// File generated by rootcint at Mon Nov 28 11:07:04 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ImageCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ImageCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MImgCleanStd_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MImgCleanStd(void *p = 0);
   static void *newArray_MImgCleanStd(Long_t size, void *p);
   static void delete_MImgCleanStd(void *p);
   static void deleteArray_MImgCleanStd(void *p);
   static void destruct_MImgCleanStd(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MImgCleanStd*)
   {
      ::MImgCleanStd *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MImgCleanStd >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MImgCleanStd", ::MImgCleanStd::Class_Version(), "./MImgCleanStd.h", 19,
                  typeid(::MImgCleanStd), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MImgCleanStd::Dictionary, isa_proxy, 4,
                  sizeof(::MImgCleanStd) );
      instance.SetNew(&new_MImgCleanStd);
      instance.SetNewArray(&newArray_MImgCleanStd);
      instance.SetDelete(&delete_MImgCleanStd);
      instance.SetDeleteArray(&deleteArray_MImgCleanStd);
      instance.SetDestructor(&destruct_MImgCleanStd);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MImgCleanStd*)
   {
      return GenerateInitInstanceLocal((::MImgCleanStd*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MImgCleanStd*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MImgCleanTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MImgCleanTime(void *p = 0);
   static void *newArray_MImgCleanTime(Long_t size, void *p);
   static void delete_MImgCleanTime(void *p);
   static void deleteArray_MImgCleanTime(void *p);
   static void destruct_MImgCleanTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MImgCleanTime*)
   {
      ::MImgCleanTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MImgCleanTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MImgCleanTime", ::MImgCleanTime::Class_Version(), "./MImgCleanTime.h", 39,
                  typeid(::MImgCleanTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MImgCleanTime::Dictionary, isa_proxy, 4,
                  sizeof(::MImgCleanTime) );
      instance.SetNew(&new_MImgCleanTime);
      instance.SetNewArray(&newArray_MImgCleanTime);
      instance.SetDelete(&delete_MImgCleanTime);
      instance.SetDeleteArray(&deleteArray_MImgCleanTime);
      instance.SetDestructor(&destruct_MImgCleanTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MImgCleanTime*)
   {
      return GenerateInitInstanceLocal((::MImgCleanTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MImgCleanTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MImgCleanSimple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MImgCleanSimple(void *p = 0);
   static void *newArray_MImgCleanSimple(Long_t size, void *p);
   static void delete_MImgCleanSimple(void *p);
   static void deleteArray_MImgCleanSimple(void *p);
   static void destruct_MImgCleanSimple(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MImgCleanSimple*)
   {
      ::MImgCleanSimple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MImgCleanSimple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MImgCleanSimple", ::MImgCleanSimple::Class_Version(), "./MImgCleanSimple.h", 14,
                  typeid(::MImgCleanSimple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MImgCleanSimple::Dictionary, isa_proxy, 4,
                  sizeof(::MImgCleanSimple) );
      instance.SetNew(&new_MImgCleanSimple);
      instance.SetNewArray(&newArray_MImgCleanSimple);
      instance.SetDelete(&delete_MImgCleanSimple);
      instance.SetDeleteArray(&deleteArray_MImgCleanSimple);
      instance.SetDestructor(&destruct_MImgCleanSimple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MImgCleanSimple*)
   {
      return GenerateInitInstanceLocal((::MImgCleanSimple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MImgCleanSimple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHillas_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHillas(void *p = 0);
   static void *newArray_MHillas(Long_t size, void *p);
   static void delete_MHillas(void *p);
   static void deleteArray_MHillas(void *p);
   static void destruct_MHillas(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHillas*)
   {
      ::MHillas *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHillas >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHillas", ::MHillas::Class_Version(), "./MHillas.h", 15,
                  typeid(::MHillas), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHillas::Dictionary, isa_proxy, 4,
                  sizeof(::MHillas) );
      instance.SetNew(&new_MHillas);
      instance.SetNewArray(&newArray_MHillas);
      instance.SetDelete(&delete_MHillas);
      instance.SetDeleteArray(&deleteArray_MHillas);
      instance.SetDestructor(&destruct_MHillas);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHillas*)
   {
      return GenerateInitInstanceLocal((::MHillas*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHillas*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHillasSrc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHillasSrc(void *p = 0);
   static void *newArray_MHillasSrc(Long_t size, void *p);
   static void delete_MHillasSrc(void *p);
   static void deleteArray_MHillasSrc(void *p);
   static void destruct_MHillasSrc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHillasSrc*)
   {
      ::MHillasSrc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHillasSrc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHillasSrc", ::MHillasSrc::Class_Version(), "./MHillasSrc.h", 15,
                  typeid(::MHillasSrc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHillasSrc::Dictionary, isa_proxy, 4,
                  sizeof(::MHillasSrc) );
      instance.SetNew(&new_MHillasSrc);
      instance.SetNewArray(&newArray_MHillasSrc);
      instance.SetDelete(&delete_MHillasSrc);
      instance.SetDeleteArray(&deleteArray_MHillasSrc);
      instance.SetDestructor(&destruct_MHillasSrc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHillasSrc*)
   {
      return GenerateInitInstanceLocal((::MHillasSrc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHillasSrc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHillasExt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHillasExt(void *p = 0);
   static void *newArray_MHillasExt(Long_t size, void *p);
   static void delete_MHillasExt(void *p);
   static void deleteArray_MHillasExt(void *p);
   static void destruct_MHillasExt(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHillasExt*)
   {
      ::MHillasExt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHillasExt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHillasExt", ::MHillasExt::Class_Version(), "./MHillasExt.h", 15,
                  typeid(::MHillasExt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHillasExt::Dictionary, isa_proxy, 4,
                  sizeof(::MHillasExt) );
      instance.SetNew(&new_MHillasExt);
      instance.SetNewArray(&newArray_MHillasExt);
      instance.SetDelete(&delete_MHillasExt);
      instance.SetDeleteArray(&deleteArray_MHillasExt);
      instance.SetDestructor(&destruct_MHillasExt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHillasExt*)
   {
      return GenerateInitInstanceLocal((::MHillasExt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHillasExt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MImagePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MImagePar(void *p = 0);
   static void *newArray_MImagePar(Long_t size, void *p);
   static void delete_MImagePar(void *p);
   static void deleteArray_MImagePar(void *p);
   static void destruct_MImagePar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MImagePar*)
   {
      ::MImagePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MImagePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MImagePar", ::MImagePar::Class_Version(), "./MImagePar.h", 13,
                  typeid(::MImagePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MImagePar::Dictionary, isa_proxy, 4,
                  sizeof(::MImagePar) );
      instance.SetNew(&new_MImagePar);
      instance.SetNewArray(&newArray_MImagePar);
      instance.SetDelete(&delete_MImagePar);
      instance.SetDeleteArray(&deleteArray_MImagePar);
      instance.SetDestructor(&destruct_MImagePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MImagePar*)
   {
      return GenerateInitInstanceLocal((::MImagePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MImagePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MNewImagePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MNewImagePar(void *p = 0);
   static void *newArray_MNewImagePar(Long_t size, void *p);
   static void delete_MNewImagePar(void *p);
   static void deleteArray_MNewImagePar(void *p);
   static void destruct_MNewImagePar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MNewImagePar*)
   {
      ::MNewImagePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MNewImagePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MNewImagePar", ::MNewImagePar::Class_Version(), "./MNewImagePar.h", 13,
                  typeid(::MNewImagePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MNewImagePar::Dictionary, isa_proxy, 4,
                  sizeof(::MNewImagePar) );
      instance.SetNew(&new_MNewImagePar);
      instance.SetNewArray(&newArray_MNewImagePar);
      instance.SetDelete(&delete_MNewImagePar);
      instance.SetDeleteArray(&deleteArray_MNewImagePar);
      instance.SetDestructor(&destruct_MNewImagePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MNewImagePar*)
   {
      return GenerateInitInstanceLocal((::MNewImagePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MNewImagePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MNewImagePar2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MNewImagePar2(void *p = 0);
   static void *newArray_MNewImagePar2(Long_t size, void *p);
   static void delete_MNewImagePar2(void *p);
   static void deleteArray_MNewImagePar2(void *p);
   static void destruct_MNewImagePar2(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MNewImagePar2*)
   {
      ::MNewImagePar2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MNewImagePar2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MNewImagePar2", ::MNewImagePar2::Class_Version(), "./MNewImagePar2.h", 12,
                  typeid(::MNewImagePar2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MNewImagePar2::Dictionary, isa_proxy, 4,
                  sizeof(::MNewImagePar2) );
      instance.SetNew(&new_MNewImagePar2);
      instance.SetNewArray(&newArray_MNewImagePar2);
      instance.SetDelete(&delete_MNewImagePar2);
      instance.SetDeleteArray(&deleteArray_MNewImagePar2);
      instance.SetDestructor(&destruct_MNewImagePar2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MNewImagePar2*)
   {
      return GenerateInitInstanceLocal((::MNewImagePar2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MNewImagePar2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MConcentration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MConcentration(void *p = 0);
   static void *newArray_MConcentration(Long_t size, void *p);
   static void delete_MConcentration(void *p);
   static void deleteArray_MConcentration(void *p);
   static void destruct_MConcentration(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MConcentration*)
   {
      ::MConcentration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MConcentration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MConcentration", ::MConcentration::Class_Version(), "./MConcentration.h", 13,
                  typeid(::MConcentration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MConcentration::Dictionary, isa_proxy, 4,
                  sizeof(::MConcentration) );
      instance.SetNew(&new_MConcentration);
      instance.SetNewArray(&newArray_MConcentration);
      instance.SetDelete(&delete_MConcentration);
      instance.SetDeleteArray(&deleteArray_MConcentration);
      instance.SetDestructor(&destruct_MConcentration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MConcentration*)
   {
      return GenerateInitInstanceLocal((::MConcentration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MConcentration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHillasCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHillasCalc(void *p = 0);
   static void *newArray_MHillasCalc(Long_t size, void *p);
   static void delete_MHillasCalc(void *p);
   static void deleteArray_MHillasCalc(void *p);
   static void destruct_MHillasCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHillasCalc*)
   {
      ::MHillasCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHillasCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHillasCalc", ::MHillasCalc::Class_Version(), "./MHillasCalc.h", 31,
                  typeid(::MHillasCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHillasCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MHillasCalc) );
      instance.SetNew(&new_MHillasCalc);
      instance.SetNewArray(&newArray_MHillasCalc);
      instance.SetDelete(&delete_MHillasCalc);
      instance.SetDeleteArray(&deleteArray_MHillasCalc);
      instance.SetDestructor(&destruct_MHillasCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHillasCalc*)
   {
      return GenerateInitInstanceLocal((::MHillasCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHillasCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHHillas_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHHillas(void *p = 0);
   static void *newArray_MHHillas(Long_t size, void *p);
   static void delete_MHHillas(void *p);
   static void deleteArray_MHHillas(void *p);
   static void destruct_MHHillas(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHHillas*)
   {
      ::MHHillas *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHHillas >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHHillas", ::MHHillas::Class_Version(), "./MHHillas.h", 14,
                  typeid(::MHHillas), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHHillas::Dictionary, isa_proxy, 4,
                  sizeof(::MHHillas) );
      instance.SetNew(&new_MHHillas);
      instance.SetNewArray(&newArray_MHHillas);
      instance.SetDelete(&delete_MHHillas);
      instance.SetDeleteArray(&deleteArray_MHHillas);
      instance.SetDestructor(&destruct_MHHillas);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHHillas*)
   {
      return GenerateInitInstanceLocal((::MHHillas*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHHillas*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHHillasSrc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHHillasSrc(void *p = 0);
   static void *newArray_MHHillasSrc(Long_t size, void *p);
   static void delete_MHHillasSrc(void *p);
   static void deleteArray_MHHillasSrc(void *p);
   static void destruct_MHHillasSrc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHHillasSrc*)
   {
      ::MHHillasSrc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHHillasSrc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHHillasSrc", ::MHHillasSrc::Class_Version(), "./MHHillasSrc.h", 13,
                  typeid(::MHHillasSrc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHHillasSrc::Dictionary, isa_proxy, 4,
                  sizeof(::MHHillasSrc) );
      instance.SetNew(&new_MHHillasSrc);
      instance.SetNewArray(&newArray_MHHillasSrc);
      instance.SetDelete(&delete_MHHillasSrc);
      instance.SetDeleteArray(&deleteArray_MHHillasSrc);
      instance.SetDestructor(&destruct_MHHillasSrc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHHillasSrc*)
   {
      return GenerateInitInstanceLocal((::MHHillasSrc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHHillasSrc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHHillasExt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHHillasExt(void *p = 0);
   static void *newArray_MHHillasExt(Long_t size, void *p);
   static void delete_MHHillasExt(void *p);
   static void deleteArray_MHHillasExt(void *p);
   static void destruct_MHHillasExt(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHHillasExt*)
   {
      ::MHHillasExt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHHillasExt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHHillasExt", ::MHHillasExt::Class_Version(), "./MHHillasExt.h", 16,
                  typeid(::MHHillasExt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHHillasExt::Dictionary, isa_proxy, 4,
                  sizeof(::MHHillasExt) );
      instance.SetNew(&new_MHHillasExt);
      instance.SetNewArray(&newArray_MHHillasExt);
      instance.SetDelete(&delete_MHHillasExt);
      instance.SetDeleteArray(&deleteArray_MHHillasExt);
      instance.SetDestructor(&destruct_MHHillasExt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHHillasExt*)
   {
      return GenerateInitInstanceLocal((::MHHillasExt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHHillasExt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHImagePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHImagePar(void *p = 0);
   static void *newArray_MHImagePar(Long_t size, void *p);
   static void delete_MHImagePar(void *p);
   static void deleteArray_MHImagePar(void *p);
   static void destruct_MHImagePar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHImagePar*)
   {
      ::MHImagePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHImagePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHImagePar", ::MHImagePar::Class_Version(), "./MHImagePar.h", 14,
                  typeid(::MHImagePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHImagePar::Dictionary, isa_proxy, 4,
                  sizeof(::MHImagePar) );
      instance.SetNew(&new_MHImagePar);
      instance.SetNewArray(&newArray_MHImagePar);
      instance.SetDelete(&delete_MHImagePar);
      instance.SetDeleteArray(&deleteArray_MHImagePar);
      instance.SetDestructor(&destruct_MHImagePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHImagePar*)
   {
      return GenerateInitInstanceLocal((::MHImagePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHImagePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHNewImagePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHNewImagePar(void *p = 0);
   static void *newArray_MHNewImagePar(Long_t size, void *p);
   static void delete_MHNewImagePar(void *p);
   static void deleteArray_MHNewImagePar(void *p);
   static void destruct_MHNewImagePar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHNewImagePar*)
   {
      ::MHNewImagePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHNewImagePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHNewImagePar", ::MHNewImagePar::Class_Version(), "./MHNewImagePar.h", 15,
                  typeid(::MHNewImagePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHNewImagePar::Dictionary, isa_proxy, 4,
                  sizeof(::MHNewImagePar) );
      instance.SetNew(&new_MHNewImagePar);
      instance.SetNewArray(&newArray_MHNewImagePar);
      instance.SetDelete(&delete_MHNewImagePar);
      instance.SetDeleteArray(&deleteArray_MHNewImagePar);
      instance.SetDestructor(&destruct_MHNewImagePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHNewImagePar*)
   {
      return GenerateInitInstanceLocal((::MHNewImagePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHNewImagePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHNewImagePar2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHNewImagePar2(void *p = 0);
   static void *newArray_MHNewImagePar2(Long_t size, void *p);
   static void delete_MHNewImagePar2(void *p);
   static void deleteArray_MHNewImagePar2(void *p);
   static void destruct_MHNewImagePar2(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHNewImagePar2*)
   {
      ::MHNewImagePar2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHNewImagePar2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHNewImagePar2", ::MHNewImagePar2::Class_Version(), "./MHNewImagePar2.h", 15,
                  typeid(::MHNewImagePar2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHNewImagePar2::Dictionary, isa_proxy, 4,
                  sizeof(::MHNewImagePar2) );
      instance.SetNew(&new_MHNewImagePar2);
      instance.SetNewArray(&newArray_MHNewImagePar2);
      instance.SetDelete(&delete_MHNewImagePar2);
      instance.SetDeleteArray(&deleteArray_MHNewImagePar2);
      instance.SetDestructor(&destruct_MHNewImagePar2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHNewImagePar2*)
   {
      return GenerateInitInstanceLocal((::MHNewImagePar2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHNewImagePar2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHVsSize_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHVsSize(void *p = 0);
   static void *newArray_MHVsSize(Long_t size, void *p);
   static void delete_MHVsSize(void *p);
   static void deleteArray_MHVsSize(void *p);
   static void destruct_MHVsSize(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHVsSize*)
   {
      ::MHVsSize *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHVsSize >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHVsSize", ::MHVsSize::Class_Version(), "./MHVsSize.h", 18,
                  typeid(::MHVsSize), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHVsSize::Dictionary, isa_proxy, 4,
                  sizeof(::MHVsSize) );
      instance.SetNew(&new_MHVsSize);
      instance.SetNewArray(&newArray_MHVsSize);
      instance.SetDelete(&delete_MHVsSize);
      instance.SetDeleteArray(&deleteArray_MHVsSize);
      instance.SetDestructor(&destruct_MHVsSize);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHVsSize*)
   {
      return GenerateInitInstanceLocal((::MHVsSize*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHVsSize*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MStereoPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MStereoPar(void *p = 0);
   static void *newArray_MStereoPar(Long_t size, void *p);
   static void delete_MStereoPar(void *p);
   static void deleteArray_MStereoPar(void *p);
   static void destruct_MStereoPar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MStereoPar*)
   {
      ::MStereoPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MStereoPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MStereoPar", ::MStereoPar::Class_Version(), "./MStereoPar.h", 17,
                  typeid(::MStereoPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MStereoPar::Dictionary, isa_proxy, 4,
                  sizeof(::MStereoPar) );
      instance.SetNew(&new_MStereoPar);
      instance.SetNewArray(&newArray_MStereoPar);
      instance.SetDelete(&delete_MStereoPar);
      instance.SetDeleteArray(&deleteArray_MStereoPar);
      instance.SetDestructor(&destruct_MStereoPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MStereoPar*)
   {
      return GenerateInitInstanceLocal((::MStereoPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MStereoPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MStereoCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MStereoCalc(void *p = 0);
   static void *newArray_MStereoCalc(Long_t size, void *p);
   static void delete_MStereoCalc(void *p);
   static void deleteArray_MStereoCalc(void *p);
   static void destruct_MStereoCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MStereoCalc*)
   {
      ::MStereoCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MStereoCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MStereoCalc", ::MStereoCalc::Class_Version(), "./MStereoCalc.h", 22,
                  typeid(::MStereoCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MStereoCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MStereoCalc) );
      instance.SetNew(&new_MStereoCalc);
      instance.SetNewArray(&newArray_MStereoCalc);
      instance.SetDelete(&delete_MStereoCalc);
      instance.SetDeleteArray(&deleteArray_MStereoCalc);
      instance.SetDestructor(&destruct_MStereoCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MStereoCalc*)
   {
      return GenerateInitInstanceLocal((::MStereoCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MStereoCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MImgCleanStd::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MImgCleanStd::Class_Name()
{
   return "MImgCleanStd";
}

//______________________________________________________________________________
const char *MImgCleanStd::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanStd*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MImgCleanStd::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanStd*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MImgCleanStd::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanStd*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MImgCleanStd::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanStd*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MImgCleanTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MImgCleanTime::Class_Name()
{
   return "MImgCleanTime";
}

//______________________________________________________________________________
const char *MImgCleanTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MImgCleanTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MImgCleanTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MImgCleanTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MImgCleanSimple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MImgCleanSimple::Class_Name()
{
   return "MImgCleanSimple";
}

//______________________________________________________________________________
const char *MImgCleanSimple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanSimple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MImgCleanSimple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanSimple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MImgCleanSimple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanSimple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MImgCleanSimple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImgCleanSimple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHillas::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHillas::Class_Name()
{
   return "MHillas";
}

//______________________________________________________________________________
const char *MHillas::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillas*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHillas::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillas*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHillas::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillas*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHillas::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillas*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHillasSrc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHillasSrc::Class_Name()
{
   return "MHillasSrc";
}

//______________________________________________________________________________
const char *MHillasSrc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasSrc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHillasSrc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasSrc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHillasSrc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasSrc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHillasSrc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasSrc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHillasExt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHillasExt::Class_Name()
{
   return "MHillasExt";
}

//______________________________________________________________________________
const char *MHillasExt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasExt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHillasExt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasExt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHillasExt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasExt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHillasExt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasExt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MImagePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MImagePar::Class_Name()
{
   return "MImagePar";
}

//______________________________________________________________________________
const char *MImagePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImagePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MImagePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MImagePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MImagePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImagePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MImagePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MImagePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MNewImagePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MNewImagePar::Class_Name()
{
   return "MNewImagePar";
}

//______________________________________________________________________________
const char *MNewImagePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MNewImagePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MNewImagePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MNewImagePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MNewImagePar2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MNewImagePar2::Class_Name()
{
   return "MNewImagePar2";
}

//______________________________________________________________________________
const char *MNewImagePar2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MNewImagePar2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MNewImagePar2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MNewImagePar2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MNewImagePar2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MConcentration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MConcentration::Class_Name()
{
   return "MConcentration";
}

//______________________________________________________________________________
const char *MConcentration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MConcentration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MConcentration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MConcentration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MConcentration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MConcentration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MConcentration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MConcentration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHillasCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHillasCalc::Class_Name()
{
   return "MHillasCalc";
}

//______________________________________________________________________________
const char *MHillasCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHillasCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHillasCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHillasCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHillasCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHHillas::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHHillas::Class_Name()
{
   return "MHHillas";
}

//______________________________________________________________________________
const char *MHHillas::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillas*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHHillas::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillas*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHHillas::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillas*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHHillas::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillas*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHHillasSrc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHHillasSrc::Class_Name()
{
   return "MHHillasSrc";
}

//______________________________________________________________________________
const char *MHHillasSrc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasSrc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHHillasSrc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasSrc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHHillasSrc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasSrc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHHillasSrc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasSrc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHHillasExt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHHillasExt::Class_Name()
{
   return "MHHillasExt";
}

//______________________________________________________________________________
const char *MHHillasExt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasExt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHHillasExt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasExt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHHillasExt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasExt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHHillasExt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHHillasExt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHImagePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHImagePar::Class_Name()
{
   return "MHImagePar";
}

//______________________________________________________________________________
const char *MHImagePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHImagePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHImagePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHImagePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHImagePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHImagePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHImagePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHImagePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHNewImagePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHNewImagePar::Class_Name()
{
   return "MHNewImagePar";
}

//______________________________________________________________________________
const char *MHNewImagePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHNewImagePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHNewImagePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHNewImagePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHNewImagePar2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHNewImagePar2::Class_Name()
{
   return "MHNewImagePar2";
}

//______________________________________________________________________________
const char *MHNewImagePar2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHNewImagePar2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHNewImagePar2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHNewImagePar2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHNewImagePar2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHVsSize::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHVsSize::Class_Name()
{
   return "MHVsSize";
}

//______________________________________________________________________________
const char *MHVsSize::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsSize*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHVsSize::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsSize*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHVsSize::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsSize*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHVsSize::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsSize*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MStereoPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MStereoPar::Class_Name()
{
   return "MStereoPar";
}

//______________________________________________________________________________
const char *MStereoPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MStereoPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MStereoPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MStereoPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MStereoCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MStereoCalc::Class_Name()
{
   return "MStereoCalc";
}

//______________________________________________________________________________
const char *MStereoCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MStereoCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MStereoCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MStereoCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MStereoCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MImgCleanStd::Streamer(TBuffer &R__b)
{
   // Stream an object of class MImgCleanStd.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MImgCleanStd::Class(),this);
   } else {
      R__b.WriteClassBuffer(MImgCleanStd::Class(),this);
   }
}

//______________________________________________________________________________
void MImgCleanStd::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MImgCleanStd.
      TClass *R__cl = ::MImgCleanStd::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleaningMethod", &fCleaningMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanLvl0", &fCleanLvl0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanLvl1", &fCleanLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanLvl2", &fCleanLvl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLvl1", &fTimeLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLvl2", &fTimeLvl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanRings", &fCleanRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fKeepIsolatedPixels", &fKeepIsolatedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRecoverIsolatedPixels", &fRecoverIsolatedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPostCleanType", &fPostCleanType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNamePedPhotCam", &fNamePedPhotCam);
      R__insp.InspectMember(fNamePedPhotCam, "fNamePedPhotCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalCam", &fNameSignalCam);
      R__insp.InspectMember(fNameSignalCam, "fNameSignalCam.");
      MGTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MImgCleanStd(void *p) {
      return  p ? new(p) ::MImgCleanStd : new ::MImgCleanStd;
   }
   static void *newArray_MImgCleanStd(Long_t nElements, void *p) {
      return p ? new(p) ::MImgCleanStd[nElements] : new ::MImgCleanStd[nElements];
   }
   // Wrapper around operator delete
   static void delete_MImgCleanStd(void *p) {
      delete ((::MImgCleanStd*)p);
   }
   static void deleteArray_MImgCleanStd(void *p) {
      delete [] ((::MImgCleanStd*)p);
   }
   static void destruct_MImgCleanStd(void *p) {
      typedef ::MImgCleanStd current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MImgCleanStd

//______________________________________________________________________________
void MImgCleanTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MImgCleanTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MImgCleanTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MImgCleanTime::Class(),this);
   }
}

//______________________________________________________________________________
void MImgCleanTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MImgCleanTime.
      TClass *R__cl = ::MImgCleanTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinCount", &fMinCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinSize", &fMinSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaT", &fDeltaT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalCam", &fNameSignalCam);
      R__insp.InspectMember(fNameSignalCam, "fNameSignalCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIslands", (void*)&fIslands);
      R__insp.InspectMember("vector<Island>", (void*)&fIslands, "fIslands.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fContacts", (void*)&fContacts);
      R__insp.InspectMember("list<std::pair<uint16_t,uint16_t> >", (void*)&fContacts, "fContacts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLut", (void*)&fLut);
      R__insp.InspectMember("vector<uint16_t>", (void*)&fLut, "fLut.", false);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MImgCleanTime(void *p) {
      return  p ? new(p) ::MImgCleanTime : new ::MImgCleanTime;
   }
   static void *newArray_MImgCleanTime(Long_t nElements, void *p) {
      return p ? new(p) ::MImgCleanTime[nElements] : new ::MImgCleanTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MImgCleanTime(void *p) {
      delete ((::MImgCleanTime*)p);
   }
   static void deleteArray_MImgCleanTime(void *p) {
      delete [] ((::MImgCleanTime*)p);
   }
   static void destruct_MImgCleanTime(void *p) {
      typedef ::MImgCleanTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MImgCleanTime

//______________________________________________________________________________
void MImgCleanSimple::Streamer(TBuffer &R__b)
{
   // Stream an object of class MImgCleanSimple.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MImgCleanSimple::Class(),this);
   } else {
      R__b.WriteClassBuffer(MImgCleanSimple::Class(),this);
   }
}

//______________________________________________________________________________
void MImgCleanSimple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MImgCleanSimple.
      TClass *R__cl = ::MImgCleanSimple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleaningMethod", &fCleaningMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanLvl1", &fCleanLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCleanLvl2", &fCleanLvl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLvl1", &fTimeLvl1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeLvl2", &fTimeLvl2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameGeomCam", &fNameGeomCam);
      R__insp.InspectMember(fNameGeomCam, "fNameGeomCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSignalCam", &fNameSignalCam);
      R__insp.InspectMember(fNameSignalCam, "fNameSignalCam.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MImgCleanSimple(void *p) {
      return  p ? new(p) ::MImgCleanSimple : new ::MImgCleanSimple;
   }
   static void *newArray_MImgCleanSimple(Long_t nElements, void *p) {
      return p ? new(p) ::MImgCleanSimple[nElements] : new ::MImgCleanSimple[nElements];
   }
   // Wrapper around operator delete
   static void delete_MImgCleanSimple(void *p) {
      delete ((::MImgCleanSimple*)p);
   }
   static void deleteArray_MImgCleanSimple(void *p) {
      delete [] ((::MImgCleanSimple*)p);
   }
   static void destruct_MImgCleanSimple(void *p) {
      typedef ::MImgCleanSimple current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MImgCleanSimple

//______________________________________________________________________________
void MHillas::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHillas.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHillas::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHillas::Class(),this);
   }
}

//______________________________________________________________________________
void MHillas::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHillas.
      TClass *R__cl = ::MHillas::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDelta", &fDelta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanX", &fMeanX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanY", &fMeanY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSinDelta", &fSinDelta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosDelta", &fCosDelta);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHillas(void *p) {
      return  p ? new(p) ::MHillas : new ::MHillas;
   }
   static void *newArray_MHillas(Long_t nElements, void *p) {
      return p ? new(p) ::MHillas[nElements] : new ::MHillas[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHillas(void *p) {
      delete ((::MHillas*)p);
   }
   static void deleteArray_MHillas(void *p) {
      delete [] ((::MHillas*)p);
   }
   static void destruct_MHillas(void *p) {
      typedef ::MHillas current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHillas

//______________________________________________________________________________
void MHillasSrc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHillasSrc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHillasSrc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHillasSrc::Class(),this);
   }
}

//______________________________________________________________________________
void MHillasSrc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHillasSrc.
      TClass *R__cl = ::MHillasSrc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSrcPos", &fSrcPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist", &fDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosDeltaAlpha", &fCosDeltaAlpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCA", &fDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDCADelta", &fDCADelta);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHillasSrc(void *p) {
      return  p ? new(p) ::MHillasSrc : new ::MHillasSrc;
   }
   static void *newArray_MHillasSrc(Long_t nElements, void *p) {
      return p ? new(p) ::MHillasSrc[nElements] : new ::MHillasSrc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHillasSrc(void *p) {
      delete ((::MHillasSrc*)p);
   }
   static void deleteArray_MHillasSrc(void *p) {
      delete [] ((::MHillasSrc*)p);
   }
   static void destruct_MHillasSrc(void *p) {
      typedef ::MHillasSrc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHillasSrc

//______________________________________________________________________________
void MHillasExt::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHillasExt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHillasExt::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHillasExt::Class(),this);
   }
}

//______________________________________________________________________________
void MHillasExt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHillasExt.
      TClass *R__cl = ::MHillasExt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAsym", &fAsym);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM3Long", &fM3Long);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM3Trans", &fM3Trans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeLong", &fSlopeLong);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeTrans", &fSlopeTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeSpread", &fTimeSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeSpreadWeighted", &fTimeSpreadWeighted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeSpread", &fSlopeSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeSpreadWeighted", &fSlopeSpreadWeighted);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHillasExt(void *p) {
      return  p ? new(p) ::MHillasExt : new ::MHillasExt;
   }
   static void *newArray_MHillasExt(Long_t nElements, void *p) {
      return p ? new(p) ::MHillasExt[nElements] : new ::MHillasExt[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHillasExt(void *p) {
      delete ((::MHillasExt*)p);
   }
   static void deleteArray_MHillasExt(void *p) {
      delete [] ((::MHillasExt*)p);
   }
   static void destruct_MHillasExt(void *p) {
      typedef ::MHillasExt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHillasExt

//______________________________________________________________________________
void MHillasCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHillasCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHillasCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHillasCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MHillasCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHillasCalc.
      TClass *R__cl = ::MHillasCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCerPhotEvt", &fCerPhotEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillasExt", &fHillasExt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillasSrc", &fHillasSrc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fImagePar", &fImagePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNewImgPar", &fNewImgPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNewImgPar2", &fNewImgPar2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConc", &fConc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameHillas", &fNameHillas);
      R__insp.InspectMember(fNameHillas, "fNameHillas.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameHillasExt", &fNameHillasExt);
      R__insp.InspectMember(fNameHillasExt, "fNameHillasExt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameHillasSrc", &fNameHillasSrc);
      R__insp.InspectMember(fNameHillasSrc, "fNameHillasSrc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameSrcPosCam", &fNameSrcPosCam);
      R__insp.InspectMember(fNameSrcPosCam, "fNameSrcPosCam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameConc", &fNameConc);
      R__insp.InspectMember(fNameConc, "fNameConc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameImagePar", &fNameImagePar);
      R__insp.InspectMember(fNameImagePar, "fNameImagePar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameNewImagePar", &fNameNewImagePar);
      R__insp.InspectMember(fNameNewImagePar, "fNameNewImagePar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameNewImagePar2", &fNameNewImagePar2);
      R__insp.InspectMember(fNameNewImagePar2, "fNameNewImagePar2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fErrors", &fErrors);
      R__insp.InspectMember(fErrors, "fErrors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxIsland", &fIdxIsland);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHillasCalc(void *p) {
      return  p ? new(p) ::MHillasCalc : new ::MHillasCalc;
   }
   static void *newArray_MHillasCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MHillasCalc[nElements] : new ::MHillasCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHillasCalc(void *p) {
      delete ((::MHillasCalc*)p);
   }
   static void deleteArray_MHillasCalc(void *p) {
      delete [] ((::MHillasCalc*)p);
   }
   static void destruct_MHillasCalc(void *p) {
      typedef ::MHillasCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHillasCalc

//______________________________________________________________________________
void MImagePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MImagePar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MImagePar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MImagePar::Class(),this);
   }
}

//______________________________________________________________________________
void MImagePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MImagePar.
      TClass *R__cl = ::MImagePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumIslands", &fNumIslands);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSinglePixels", &fNumSinglePixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeSinglePixels", &fSizeSinglePixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeSubIslands", &fSizeSubIslands);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizeMainIsland", &fSizeMainIsland);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSatPixelsHG", &fNumSatPixelsHG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSatPixelsLG", &fNumSatPixelsLG);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MImagePar(void *p) {
      return  p ? new(p) ::MImagePar : new ::MImagePar;
   }
   static void *newArray_MImagePar(Long_t nElements, void *p) {
      return p ? new(p) ::MImagePar[nElements] : new ::MImagePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MImagePar(void *p) {
      delete ((::MImagePar*)p);
   }
   static void deleteArray_MImagePar(void *p) {
      delete [] ((::MImagePar*)p);
   }
   static void destruct_MImagePar(void *p) {
      typedef ::MImagePar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MImagePar

//______________________________________________________________________________
void MNewImagePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MNewImagePar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MNewImagePar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MNewImagePar::Class(),this);
   }
}

//______________________________________________________________________________
void MNewImagePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MNewImagePar.
      TClass *R__cl = ::MNewImagePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeakage1", &fLeakage1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeakage2", &fLeakage2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConc", &fConc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConc1", &fConc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConcCOG", &fConcCOG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConcCore", &fConcCore);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedArea", &fUsedArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreArea", &fCoreArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUsedPixels", &fNumUsedPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCorePixels", &fNumCorePixels);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MNewImagePar(void *p) {
      return  p ? new(p) ::MNewImagePar : new ::MNewImagePar;
   }
   static void *newArray_MNewImagePar(Long_t nElements, void *p) {
      return p ? new(p) ::MNewImagePar[nElements] : new ::MNewImagePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MNewImagePar(void *p) {
      delete ((::MNewImagePar*)p);
   }
   static void deleteArray_MNewImagePar(void *p) {
      delete [] ((::MNewImagePar*)p);
   }
   static void destruct_MNewImagePar(void *p) {
      typedef ::MNewImagePar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MNewImagePar

//______________________________________________________________________________
void MNewImagePar2::Streamer(TBuffer &R__b)
{
   // Stream an object of class MNewImagePar2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MNewImagePar2::Class(),this);
   } else {
      R__b.WriteClassBuffer(MNewImagePar2::Class(),this);
   }
}

//______________________________________________________________________________
void MNewImagePar2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MNewImagePar2.
      TClass *R__cl = ::MNewImagePar2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBorderLinePixel", &fBorderLinePixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBorderLineCenter", &fBorderLineCenter);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MNewImagePar2(void *p) {
      return  p ? new(p) ::MNewImagePar2 : new ::MNewImagePar2;
   }
   static void *newArray_MNewImagePar2(Long_t nElements, void *p) {
      return p ? new(p) ::MNewImagePar2[nElements] : new ::MNewImagePar2[nElements];
   }
   // Wrapper around operator delete
   static void delete_MNewImagePar2(void *p) {
      delete ((::MNewImagePar2*)p);
   }
   static void deleteArray_MNewImagePar2(void *p) {
      delete [] ((::MNewImagePar2*)p);
   }
   static void destruct_MNewImagePar2(void *p) {
      typedef ::MNewImagePar2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MNewImagePar2

//______________________________________________________________________________
void MConcentration::Streamer(TBuffer &R__b)
{
   // Stream an object of class MConcentration.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MConcentration::Class(),this);
   } else {
      R__b.WriteClassBuffer(MConcentration::Class(),this);
   }
}

//______________________________________________________________________________
void MConcentration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MConcentration.
      TClass *R__cl = ::MConcentration::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConc[9]", fConc);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MConcentration(void *p) {
      return  p ? new(p) ::MConcentration : new ::MConcentration;
   }
   static void *newArray_MConcentration(Long_t nElements, void *p) {
      return p ? new(p) ::MConcentration[nElements] : new ::MConcentration[nElements];
   }
   // Wrapper around operator delete
   static void delete_MConcentration(void *p) {
      delete ((::MConcentration*)p);
   }
   static void deleteArray_MConcentration(void *p) {
      delete [] ((::MConcentration*)p);
   }
   static void destruct_MConcentration(void *p) {
      typedef ::MConcentration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MConcentration

//______________________________________________________________________________
void MHHillas::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHHillas.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHHillas::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHHillas::Class(),this);
   }
}

//______________________________________________________________________________
void MHHillas::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHHillas.
      TClass *R__cl = ::MHHillas::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDistC", &fDistC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDelta", &fDelta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSize", &fSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCenter", &fCenter);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHHillas(void *p) {
      return  p ? new(p) ::MHHillas : new ::MHHillas;
   }
   static void *newArray_MHHillas(Long_t nElements, void *p) {
      return p ? new(p) ::MHHillas[nElements] : new ::MHHillas[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHHillas(void *p) {
      delete ((::MHHillas*)p);
   }
   static void deleteArray_MHHillas(void *p) {
      delete [] ((::MHHillas*)p);
   }
   static void destruct_MHHillas(void *p) {
      typedef ::MHHillas current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHHillas

//______________________________________________________________________________
void MHHillasSrc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHHillasSrc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHHillasSrc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHHillasSrc::Class(),this);
   }
}

//______________________________________________________________________________
void MHHillasSrc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHHillasSrc.
      TClass *R__cl = ::MHHillasSrc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDist", &fDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCosDA", &fCosDA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDCA", &fDCA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDCADelta", &fDCADelta);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHHillasSrc(void *p) {
      return  p ? new(p) ::MHHillasSrc : new ::MHHillasSrc;
   }
   static void *newArray_MHHillasSrc(Long_t nElements, void *p) {
      return p ? new(p) ::MHHillasSrc[nElements] : new ::MHHillasSrc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHHillasSrc(void *p) {
      delete ((::MHHillasSrc*)p);
   }
   static void deleteArray_MHHillasSrc(void *p) {
      delete [] ((::MHHillasSrc*)p);
   }
   static void destruct_MHHillasSrc(void *p) {
      typedef ::MHHillasSrc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHHillasSrc

//______________________________________________________________________________
void MHHillasExt::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHHillasExt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHHillasExt::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHHillasExt::Class(),this);
   }
}

//______________________________________________________________________________
void MHHillasExt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHHillasExt.
      TClass *R__cl = ::MHHillasExt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillasExt", &fHillasExt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHAsym", &fHAsym);
      R__insp.InspectMember(fHAsym, "fHAsym.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHM3Long", &fHM3Long);
      R__insp.InspectMember(fHM3Long, "fHM3Long.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHM3Trans", &fHM3Trans);
      R__insp.InspectMember(fHM3Trans, "fHM3Trans.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHSlopeL", &fHSlopeL);
      R__insp.InspectMember(fHSlopeL, "fHSlopeL.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTimeSpread", &fHTimeSpread);
      R__insp.InspectMember(fHTimeSpread, "fHTimeSpread.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTimeSpreadW", &fHTimeSpreadW);
      R__insp.InspectMember(fHTimeSpreadW, "fHTimeSpreadW.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHSlopeSpread", &fHSlopeSpread);
      R__insp.InspectMember(fHSlopeSpread, "fHSlopeSpread.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHSlopeSpreadW", &fHSlopeSpreadW);
      R__insp.InspectMember(fHSlopeSpreadW, "fHSlopeSpreadW.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHilName", &fHilName);
      R__insp.InspectMember(fHilName, "fHilName.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHHillasExt(void *p) {
      return  p ? new(p) ::MHHillasExt : new ::MHHillasExt;
   }
   static void *newArray_MHHillasExt(Long_t nElements, void *p) {
      return p ? new(p) ::MHHillasExt[nElements] : new ::MHHillasExt[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHHillasExt(void *p) {
      delete ((::MHHillasExt*)p);
   }
   static void deleteArray_MHHillasExt(void *p) {
      delete [] ((::MHHillasExt*)p);
   }
   static void destruct_MHHillasExt(void *p) {
      typedef ::MHHillasExt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHHillasExt

//______________________________________________________________________________
void MHImagePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHImagePar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHImagePar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHImagePar::Class(),this);
   }
}

//______________________________________________________________________________
void MHImagePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHImagePar.
      TClass *R__cl = ::MHImagePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSatHi", &fHistSatHi);
      R__insp.InspectMember(fHistSatHi, "fHistSatHi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSatLo", &fHistSatLo);
      R__insp.InspectMember(fHistSatLo, "fHistSatLo.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistIslands", &fHistIslands);
      R__insp.InspectMember(fHistIslands, "fHistIslands.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSizeSubIslands", &fHistSizeSubIslands);
      R__insp.InspectMember(fHistSizeSubIslands, "fHistSizeSubIslands.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSizeMainIsland", &fHistSizeMainIsland);
      R__insp.InspectMember(fHistSizeMainIsland, "fHistSizeMainIsland.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistNumSP", &fHistNumSP);
      R__insp.InspectMember(fHistNumSP, "fHistNumSP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSizeSP", &fHistSizeSP);
      R__insp.InspectMember(fHistSizeSP, "fHistSizeSP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSatPixelsHG", &fNumSatPixelsHG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSatPixelsLG", &fNumSatPixelsLG);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHImagePar(void *p) {
      return  p ? new(p) ::MHImagePar : new ::MHImagePar;
   }
   static void *newArray_MHImagePar(Long_t nElements, void *p) {
      return p ? new(p) ::MHImagePar[nElements] : new ::MHImagePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHImagePar(void *p) {
      delete ((::MHImagePar*)p);
   }
   static void deleteArray_MHImagePar(void *p) {
      delete [] ((::MHImagePar*)p);
   }
   static void destruct_MHImagePar(void *p) {
      typedef ::MHImagePar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHImagePar

//______________________________________________________________________________
void MHNewImagePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHNewImagePar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHNewImagePar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHNewImagePar::Class(),this);
   }
}

//______________________________________________________________________________
void MHNewImagePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHNewImagePar.
      TClass *R__cl = ::MHNewImagePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistLeakage1", &fHistLeakage1);
      R__insp.InspectMember(fHistLeakage1, "fHistLeakage1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistLeakage2", &fHistLeakage2);
      R__insp.InspectMember(fHistLeakage2, "fHistLeakage2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistUsedPix", &fHistUsedPix);
      R__insp.InspectMember(fHistUsedPix, "fHistUsedPix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistCorePix", &fHistCorePix);
      R__insp.InspectMember(fHistCorePix, "fHistCorePix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistUsedArea", &fHistUsedArea);
      R__insp.InspectMember(fHistUsedArea, "fHistUsedArea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistCoreArea", &fHistCoreArea);
      R__insp.InspectMember(fHistCoreArea, "fHistCoreArea.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistConc", &fHistConc);
      R__insp.InspectMember(fHistConc, "fHistConc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistConc1", &fHistConc1);
      R__insp.InspectMember(fHistConc1, "fHistConc1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistConcCOG", &fHistConcCOG);
      R__insp.InspectMember(fHistConcCOG, "fHistConcCOG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistConcCore", &fHistConcCore);
      R__insp.InspectMember(fHistConcCore, "fHistConcCore.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHNewImagePar(void *p) {
      return  p ? new(p) ::MHNewImagePar : new ::MHNewImagePar;
   }
   static void *newArray_MHNewImagePar(Long_t nElements, void *p) {
      return p ? new(p) ::MHNewImagePar[nElements] : new ::MHNewImagePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHNewImagePar(void *p) {
      delete ((::MHNewImagePar*)p);
   }
   static void deleteArray_MHNewImagePar(void *p) {
      delete [] ((::MHNewImagePar*)p);
   }
   static void destruct_MHNewImagePar(void *p) {
      typedef ::MHNewImagePar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHNewImagePar

//______________________________________________________________________________
void MHNewImagePar2::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHNewImagePar2.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHNewImagePar2::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHNewImagePar2::Class(),this);
   }
}

//______________________________________________________________________________
void MHNewImagePar2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHNewImagePar2.
      TClass *R__cl = ::MHNewImagePar2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBorder1", &fHistBorder1);
      R__insp.InspectMember(fHistBorder1, "fHistBorder1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBorder2", &fHistBorder2);
      R__insp.InspectMember(fHistBorder2, "fHistBorder2.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHNewImagePar2(void *p) {
      return  p ? new(p) ::MHNewImagePar2 : new ::MHNewImagePar2;
   }
   static void *newArray_MHNewImagePar2(Long_t nElements, void *p) {
      return p ? new(p) ::MHNewImagePar2[nElements] : new ::MHNewImagePar2[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHNewImagePar2(void *p) {
      delete ((::MHNewImagePar2*)p);
   }
   static void deleteArray_MHNewImagePar2(void *p) {
      delete [] ((::MHNewImagePar2*)p);
   }
   static void destruct_MHNewImagePar2(void *p) {
      typedef ::MHNewImagePar2 current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHNewImagePar2

//______________________________________________________________________________
void MHVsSize::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHVsSize.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHVsSize::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHVsSize::Class(),this);
   }
}

//______________________________________________________________________________
void MHVsSize::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHVsSize.
      TClass *R__cl = ::MHVsSize::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillasExt", &fHillasExt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNewImagePar", &fNewImagePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.InspectMember(fLength, "fLength.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.InspectMember(fWidth, "fWidth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist", &fDist);
      R__insp.InspectMember(fDist, "fDist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConc1", &fConc1);
      R__insp.InspectMember(fConc1, "fConc1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fM3Long", &fM3Long);
      R__insp.InspectMember(fM3Long, "fM3Long.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArea", &fArea);
      R__insp.InspectMember(fArea, "fArea.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHVsSize(void *p) {
      return  p ? new(p) ::MHVsSize : new ::MHVsSize;
   }
   static void *newArray_MHVsSize(Long_t nElements, void *p) {
      return p ? new(p) ::MHVsSize[nElements] : new ::MHVsSize[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHVsSize(void *p) {
      delete ((::MHVsSize*)p);
   }
   static void deleteArray_MHVsSize(void *p) {
      delete [] ((::MHVsSize*)p);
   }
   static void destruct_MHVsSize(void *p) {
      typedef ::MHVsSize current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHVsSize

//______________________________________________________________________________
void MStereoPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MStereoPar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MStereoPar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MStereoPar::Class(),this);
   }
}

//______________________________________________________________________________
void MStereoPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MStereoPar.
      TClass *R__cl = ::MStereoPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreX", &fCoreX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreY", &fCoreY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreX2", &fCoreX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCoreY2", &fCoreY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceX", &fSourceX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSourceY", &fSourceY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta2", &fTheta2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT1Impact", &fCT1Impact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT2Impact", &fCT2Impact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT1Impact2", &fCT1Impact2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT2Impact2", &fCT2Impact2);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MStereoPar(void *p) {
      return  p ? new(p) ::MStereoPar : new ::MStereoPar;
   }
   static void *newArray_MStereoPar(Long_t nElements, void *p) {
      return p ? new(p) ::MStereoPar[nElements] : new ::MStereoPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MStereoPar(void *p) {
      delete ((::MStereoPar*)p);
   }
   static void deleteArray_MStereoPar(void *p) {
      delete [] ((::MStereoPar*)p);
   }
   static void destruct_MStereoPar(void *p) {
      typedef ::MStereoPar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MStereoPar

//______________________________________________________________________________
void MStereoCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MStereoCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MStereoCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MStereoCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MStereoCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MStereoCalc.
      TClass *R__cl = ::MStereoCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam1", &fGeomCam1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas1", &fHillas1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointingPos1", &fPointingPos1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam2", &fGeomCam2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas2", &fHillas2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPointingPos2", &fPointingPos2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT1id", &fCT1id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT2id", &fCT2id);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT1x", &fCT1x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT1y", &fCT1y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT2x", &fCT2x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCT2y", &fCT2y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStereoPar", &fStereoPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStereoParName", &fStereoParName);
      R__insp.InspectMember(fStereoParName, "fStereoParName.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MStereoCalc(void *p) {
      return  p ? new(p) ::MStereoCalc : new ::MStereoCalc;
   }
   static void *newArray_MStereoCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MStereoCalc[nElements] : new ::MStereoCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MStereoCalc(void *p) {
      delete ((::MStereoCalc*)p);
   }
   static void deleteArray_MStereoCalc(void *p) {
      delete [] ((::MStereoCalc*)p);
   }
   static void destruct_MStereoCalc(void *p) {
      typedef ::MStereoCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MStereoCalc

/********************************************************
* ImageCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableImageCint();

extern "C" void G__set_cpp_environmentImageCint() {
  G__cpp_reset_tagtableImageCint();
}
#include <new>
extern "C" int G__cpp_dllrevImageCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MImgCleanStd */
static int G__ImageCint_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MImgCleanStd* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanStd(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MImgCleanStd(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanStd(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MImgCleanStd(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanStd((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MImgCleanStd((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanStd((const Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MImgCleanStd((const Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanStd[n];
       } else {
         p = new((void*) gvp) MImgCleanStd[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanStd;
       } else {
         p = new((void*) gvp) MImgCleanStd;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanStd*) G__getstructoffset())->GetCleanLvl0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanStd*) G__getstructoffset())->GetCleanLvl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanStd*) G__getstructoffset())->GetCleanLvl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanStd*) G__getstructoffset())->GetTimeLvl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanStd*) G__getstructoffset())->GetTimeLvl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetCleanLvl0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetCleanLvl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetCleanLvl2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetTimeLvl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetTimeLvl2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetCleanRings((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const MImgCleanStd*) G__getstructoffset())->GetCleanRings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetPostCleanType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetMethod((MImgCleanStd::CleaningMethod_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MImgCleanStd*) G__getstructoffset())->SetKeepIsolatedPixels((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MImgCleanStd*) G__getstructoffset())->SetKeepIsolatedPixels();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MImgCleanStd*) G__getstructoffset())->SetRecoverIsolatedPixels((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MImgCleanStd*) G__getstructoffset())->SetRecoverIsolatedPixels();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetNamePedPhotCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetNameSignalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MImgCleanStd::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanStd::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MImgCleanStd::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MImgCleanStd::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanStd*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanStd::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanStd::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanStd::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_187_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanStd::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_187_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MImgCleanStd* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MImgCleanStd(*(MImgCleanStd*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MImgCleanStd G__TMImgCleanStd;
static int G__ImageCint_187_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MImgCleanStd*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MImgCleanStd*) (soff+(sizeof(MImgCleanStd)*i)))->~G__TMImgCleanStd();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MImgCleanStd*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MImgCleanStd*) (soff))->~G__TMImgCleanStd();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MImgCleanTime */
static int G__ImageCint_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         Island* pobj;
         Island xobj = ((MImgCleanTime*) G__getstructoffset())->CalcIsland(*(MSignalPix*) libp->para[0].ref, *(MGeom*) libp->para[1].ref
, *(uint16_t*) G__UShortref(&libp->para[2]));
         pobj = new Island(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MImgCleanTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MImgCleanTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MImgCleanTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanTime[n];
       } else {
         p = new((void*) gvp) MImgCleanTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanTime;
       } else {
         p = new((void*) gvp) MImgCleanTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanTime*) G__getstructoffset())->SetMinCount((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanTime*) G__getstructoffset())->SetMinSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanTime*) G__getstructoffset())->SetDeltaT((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanTime*) G__getstructoffset())->SetNameSignalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MImgCleanTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MImgCleanTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MImgCleanTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_191_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MImgCleanTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MImgCleanTime(*(MImgCleanTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MImgCleanTime G__TMImgCleanTime;
static int G__ImageCint_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MImgCleanTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MImgCleanTime*) (soff+(sizeof(MImgCleanTime)*i)))->~G__TMImgCleanTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MImgCleanTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MImgCleanTime*) (soff))->~G__TMImgCleanTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MImgCleanSimple */
static int G__ImageCint_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MImgCleanSimple* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanSimple(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MImgCleanSimple(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanSimple(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MImgCleanSimple(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanSimple((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) MImgCleanSimple((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImgCleanSimple((const Float_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MImgCleanSimple((const Float_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanSimple[n];
       } else {
         p = new((void*) gvp) MImgCleanSimple[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImgCleanSimple;
       } else {
         p = new((void*) gvp) MImgCleanSimple;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanSimple*) G__getstructoffset())->GetCleanLvl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanSimple*) G__getstructoffset())->GetCleanLvl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanSimple*) G__getstructoffset())->GetTimeLvl1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImgCleanSimple*) G__getstructoffset())->GetTimeLvl2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetCleanLvl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetCleanLvl2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetTimeLvl1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetTimeLvl2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetMethod((MImgCleanSimple::CleaningMethod_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetNameSignalCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->SetNameGeomCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MImgCleanSimple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanSimple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MImgCleanSimple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MImgCleanSimple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImgCleanSimple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanSimple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanSimple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImgCleanSimple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_205_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImgCleanSimple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_205_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MImgCleanSimple* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MImgCleanSimple(*(MImgCleanSimple*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MImgCleanSimple G__TMImgCleanSimple;
static int G__ImageCint_205_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MImgCleanSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MImgCleanSimple*) (soff+(sizeof(MImgCleanSimple)*i)))->~G__TMImgCleanSimple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MImgCleanSimple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MImgCleanSimple*) (soff))->~G__TMImgCleanSimple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHillas */
static int G__ImageCint_209_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillas* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHillas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillas((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHillas((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillas[n];
       } else {
         p = new((void*) gvp) MHillas[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillas;
       } else {
         p = new((void*) gvp) MHillas;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillas));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((MHillas*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((MHillas*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHillas*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetMeanX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetMeanY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHillas*) G__getstructoffset())->GetDist0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MHillas*) G__getstructoffset())->GetMean();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector2* pobj;
         const TVector2 xobj = ((const MHillas*) G__getstructoffset())->GetNormAxis();
         pobj = new TVector2(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHillas*) G__getstructoffset())->GetBorderLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHillas*) G__getstructoffset())->GetArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetCosDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillas*) G__getstructoffset())->GetSinDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillas*) G__getstructoffset())->Set(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHillas::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillas::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHillas::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHillas::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillas*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillas::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillas::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillas::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_209_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillas::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_209_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHillas* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHillas(*(MHillas*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillas));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHillas G__TMHillas;
static int G__ImageCint_209_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHillas*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHillas*) (soff+(sizeof(MHillas)*i)))->~G__TMHillas();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHillas*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHillas*) (soff))->~G__TMHillas();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_209_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillas* dest = (MHillas*) G__getstructoffset();
   *dest = *(MHillas*) libp->para[0].ref;
   const MHillas& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHillasSrc */
static int G__ImageCint_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillasSrc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasSrc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHillasSrc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasSrc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHillasSrc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasSrc[n];
       } else {
         p = new((void*) gvp) MHillasSrc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasSrc;
       } else {
         p = new((void*) gvp) MHillasSrc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillasSrc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MHillasSrc(*(MHillasSrc*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MHillasSrc(*(MHillasSrc*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasSrc*) G__getstructoffset())->SetSrcPos((MSrcPosCam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHillasSrc*) G__getstructoffset())->GetSrcPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasSrc*) G__getstructoffset())->GetAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasSrc*) G__getstructoffset())->GetDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasSrc*) G__getstructoffset())->GetCosDeltaAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasSrc*) G__getstructoffset())->GetDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasSrc*) G__getstructoffset())->GetDCADelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHillasSrc*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MHillasSrc*) G__getstructoffset())->Calc(*(MHillas*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasSrc*) G__getstructoffset())->Set(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHillasSrc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasSrc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHillasSrc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHillasSrc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasSrc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasSrc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasSrc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasSrc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_211_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasSrc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHillasSrc G__TMHillasSrc;
static int G__ImageCint_211_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHillasSrc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHillasSrc*) (soff+(sizeof(MHillasSrc)*i)))->~G__TMHillasSrc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHillasSrc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHillasSrc*) (soff))->~G__TMHillasSrc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHillasExt */
static int G__ImageCint_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillasExt* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasExt((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHillasExt((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasExt((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHillasExt((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasExt[n];
       } else {
         p = new((void*) gvp) MHillasExt[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasExt;
       } else {
         p = new((void*) gvp) MHillasExt;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasExt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetAsym());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetM3Long());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetM3Trans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetSlopeLong());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetSlopeTrans());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetTimeSpread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetTimeSpreadWeighted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetSlopeSpread());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHillasExt*) G__getstructoffset())->GetSlopeSpreadWeighted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((MHillasExt*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref, (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((MHillasExt*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MHillasExt*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasExt*) G__getstructoffset())->Set(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHillasExt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasExt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHillasExt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHillasExt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasExt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasExt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasExt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasExt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_212_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasExt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_212_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHillasExt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHillasExt(*(MHillasExt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasExt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHillasExt G__TMHillasExt;
static int G__ImageCint_212_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHillasExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHillasExt*) (soff+(sizeof(MHillasExt)*i)))->~G__TMHillasExt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHillasExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHillasExt*) (soff))->~G__TMHillasExt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillasExt* dest = (MHillasExt*) G__getstructoffset();
   *dest = *(MHillasExt*) libp->para[0].ref;
   const MHillasExt& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MImagePar */
static int G__ImageCint_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MImagePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MImagePar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MImagePar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImagePar[n];
       } else {
         p = new((void*) gvp) MImagePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MImagePar;
       } else {
         p = new((void*) gvp) MImagePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MImagePar*) G__getstructoffset())->GetNumIslands());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MImagePar*) G__getstructoffset())->GetNumSatPixelsHG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MImagePar*) G__getstructoffset())->GetNumSatPixelsLG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MImagePar*) G__getstructoffset())->GetNumSinglePixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImagePar*) G__getstructoffset())->GetSizeSinglePixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImagePar*) G__getstructoffset())->GetSizeSubIslands());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MImagePar*) G__getstructoffset())->GetSizeMainIsland());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImagePar*) G__getstructoffset())->Calc(*(MSignalCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MImagePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImagePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MImagePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MImagePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MImagePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImagePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImagePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MImagePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_215_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MImagePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_215_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MImagePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MImagePar(*(MImagePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MImagePar G__TMImagePar;
static int G__ImageCint_215_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MImagePar*) (soff+(sizeof(MImagePar)*i)))->~G__TMImagePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MImagePar*) (soff))->~G__TMImagePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_215_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MImagePar* dest = (MImagePar*) G__getstructoffset();
   *dest = *(MImagePar*) libp->para[0].ref;
   const MImagePar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MNewImagePar */
static int G__ImageCint_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MNewImagePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MNewImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MNewImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MNewImagePar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MNewImagePar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MNewImagePar[n];
       } else {
         p = new((void*) gvp) MNewImagePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MNewImagePar;
       } else {
         p = new((void*) gvp) MNewImagePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetLeakage1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetLeakage2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetConc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetConc1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetConcCOG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetConcCore());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MNewImagePar*) G__getstructoffset())->GetNumUsedPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MNewImagePar*) G__getstructoffset())->GetNumCorePixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetUsedArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar*) G__getstructoffset())->GetCoreArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MNewImagePar*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MNewImagePar*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MNewImagePar*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MNewImagePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MNewImagePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MNewImagePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MNewImagePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MNewImagePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_216_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MNewImagePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_216_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MNewImagePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MNewImagePar(*(MNewImagePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MNewImagePar G__TMNewImagePar;
static int G__ImageCint_216_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MNewImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MNewImagePar*) (soff+(sizeof(MNewImagePar)*i)))->~G__TMNewImagePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MNewImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MNewImagePar*) (soff))->~G__TMNewImagePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_216_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MNewImagePar* dest = (MNewImagePar*) G__getstructoffset();
   *dest = *(MNewImagePar*) libp->para[0].ref;
   const MNewImagePar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MNewImagePar2 */
static int G__ImageCint_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MNewImagePar2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MNewImagePar2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MNewImagePar2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MNewImagePar2((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MNewImagePar2((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MNewImagePar2[n];
       } else {
         p = new((void*) gvp) MNewImagePar2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MNewImagePar2;
       } else {
         p = new((void*) gvp) MNewImagePar2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar2*) G__getstructoffset())->GetBorderLinePixel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MNewImagePar2*) G__getstructoffset())->GetBorderLineCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const MNewImagePar2*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((MNewImagePar2*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MNewImagePar2*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MNewImagePar2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MNewImagePar2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MNewImagePar2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MNewImagePar2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MNewImagePar2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MNewImagePar2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MNewImagePar2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_217_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MNewImagePar2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MNewImagePar2(*(MNewImagePar2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MNewImagePar2 G__TMNewImagePar2;
static int G__ImageCint_217_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MNewImagePar2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MNewImagePar2*) (soff+(sizeof(MNewImagePar2)*i)))->~G__TMNewImagePar2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MNewImagePar2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MNewImagePar2*) (soff))->~G__TMNewImagePar2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_217_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MNewImagePar2* dest = (MNewImagePar2*) G__getstructoffset();
   *dest = *(MNewImagePar2*) libp->para[0].ref;
   const MNewImagePar2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MConcentration */
static int G__ImageCint_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MConcentration* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MConcentration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MConcentration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MConcentration((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MConcentration((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MConcentration[n];
       } else {
         p = new((void*) gvp) MConcentration[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MConcentration;
       } else {
         p = new((void*) gvp) MConcentration;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MConcentration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MConcentration*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc6());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc7());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc8());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MConcentration*) G__getstructoffset())->GetConc9());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MConcentration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MConcentration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MConcentration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MConcentration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MConcentration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MConcentration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MConcentration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MConcentration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_218_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MConcentration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_218_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MConcentration* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MConcentration(*(MConcentration*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MConcentration));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MConcentration G__TMConcentration;
static int G__ImageCint_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MConcentration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MConcentration*) (soff+(sizeof(MConcentration)*i)))->~G__TMConcentration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MConcentration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MConcentration*) (soff))->~G__TMConcentration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_218_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MConcentration* dest = (MConcentration*) G__getstructoffset();
   *dest = *(MConcentration*) libp->para[0].ref;
   const MConcentration& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHillasCalc */
static int G__ImageCint_219_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHillasCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHillasCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHillasCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHillasCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasCalc[n];
       } else {
         p = new((void*) gvp) MHillasCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHillasCalc;
       } else {
         p = new((void*) gvp) MHillasCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetFlags((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->Enable((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->Disable((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHillasCalc*) G__getstructoffset())->TestFlag((MHillasCalc::CalcCont_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHillasCalc*) G__getstructoffset())->TestFlags((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameHillas((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameHillasExt((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameHillasSrc((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameNewImagePar((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameNewImagePar2((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameConc((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameImagePar((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetNameSrcPosCam((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->SetIdxIsland((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHillasCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHillasCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHillasCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHillasCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHillasCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_219_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHillasCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_219_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHillasCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHillasCalc(*(MHillasCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHillasCalc G__TMHillasCalc;
static int G__ImageCint_219_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHillasCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHillasCalc*) (soff+(sizeof(MHillasCalc)*i)))->~G__TMHillasCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHillasCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHillasCalc*) (soff))->~G__TMHillasCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHHillas */
static int G__ImageCint_271_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHHillas* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHHillas((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillas((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHHillas((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillas[n];
       } else {
         p = new((void*) gvp) MHHillas[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillas;
       } else {
         p = new((void*) gvp) MHHillas;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillas));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistDistC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistDelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillas*) G__getstructoffset())->GetHistCenter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHHillas::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillas::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHHillas::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHHillas::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHHillas*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillas::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillas::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillas::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_271_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillas::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_271_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHHillas* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHHillas(*(MHHillas*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillas));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHHillas G__TMHHillas;
static int G__ImageCint_271_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHHillas*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHHillas*) (soff+(sizeof(MHHillas)*i)))->~G__TMHHillas();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHHillas*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHHillas*) (soff))->~G__TMHHillas();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_271_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHHillas* dest = (MHHillas*) G__getstructoffset();
   *dest = *(MHHillas*) libp->para[0].ref;
   const MHHillas& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHHillasSrc */
static int G__ImageCint_272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHHillasSrc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillasSrc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHHillasSrc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillasSrc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHHillasSrc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillasSrc[n];
       } else {
         p = new((void*) gvp) MHHillasSrc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillasSrc;
       } else {
         p = new((void*) gvp) MHHillasSrc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillasSrc*) G__getstructoffset())->GetHistAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillasSrc*) G__getstructoffset())->GetHistDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillasSrc*) G__getstructoffset())->GetHistCosDeltaAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillasSrc*) G__getstructoffset())->GetHistDCA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHHillasSrc*) G__getstructoffset())->GetHistDCADelta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHHillasSrc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasSrc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHHillasSrc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHHillasSrc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHHillasSrc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasSrc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillasSrc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasSrc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_272_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillasSrc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_272_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHHillasSrc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHHillasSrc(*(MHHillasSrc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHHillasSrc G__TMHHillasSrc;
static int G__ImageCint_272_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHHillasSrc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHHillasSrc*) (soff+(sizeof(MHHillasSrc)*i)))->~G__TMHHillasSrc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHHillasSrc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHHillasSrc*) (soff))->~G__TMHHillasSrc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_272_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHHillasSrc* dest = (MHHillasSrc*) G__getstructoffset();
   *dest = *(MHHillasSrc*) libp->para[0].ref;
   const MHHillasSrc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHHillasExt */
static int G__ImageCint_273_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHHillasExt* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillasExt((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHHillasExt((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHHillasExt((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHHillasExt((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillasExt[n];
       } else {
         p = new((void*) gvp) MHHillasExt[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHHillasExt;
       } else {
         p = new((void*) gvp) MHHillasExt;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHHillasExt*) G__getstructoffset())->SetHillasName((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHHillasExt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasExt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHHillasExt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHHillasExt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHHillasExt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasExt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillasExt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHHillasExt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_273_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHHillasExt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_273_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHHillasExt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHHillasExt(*(MHHillasExt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHHillasExt G__TMHHillasExt;
static int G__ImageCint_273_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHHillasExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHHillasExt*) (soff+(sizeof(MHHillasExt)*i)))->~G__TMHHillasExt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHHillasExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHHillasExt*) (soff))->~G__TMHHillasExt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHImagePar */
static int G__ImageCint_274_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHImagePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHImagePar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHImagePar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHImagePar[n];
       } else {
         p = new((void*) gvp) MHImagePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHImagePar;
       } else {
         p = new((void*) gvp) MHImagePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHImagePar*) G__getstructoffset())->GetHistSatHi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHImagePar*) G__getstructoffset())->GetHistSatLo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHImagePar*) G__getstructoffset())->GetHistIslands();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHImagePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHImagePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHImagePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHImagePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHImagePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHImagePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHImagePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHImagePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_274_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHImagePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_274_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHImagePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHImagePar(*(MHImagePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHImagePar G__TMHImagePar;
static int G__ImageCint_274_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHImagePar*) (soff+(sizeof(MHImagePar)*i)))->~G__TMHImagePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHImagePar*) (soff))->~G__TMHImagePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHNewImagePar */
static int G__ImageCint_275_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHNewImagePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHNewImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHNewImagePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHNewImagePar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHNewImagePar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHNewImagePar[n];
       } else {
         p = new((void*) gvp) MHNewImagePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHNewImagePar;
       } else {
         p = new((void*) gvp) MHNewImagePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistLeakage1();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistLeakage2();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistUsedPix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistCorePix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistUsedArea();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistCoreArea();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistConc();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistConc1();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistConcCOG();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((MHNewImagePar*) G__getstructoffset())->GetHistConcCore();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHNewImagePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHNewImagePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHNewImagePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHNewImagePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHNewImagePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_275_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHNewImagePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_275_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHNewImagePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHNewImagePar(*(MHNewImagePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHNewImagePar G__TMHNewImagePar;
static int G__ImageCint_275_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHNewImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHNewImagePar*) (soff+(sizeof(MHNewImagePar)*i)))->~G__TMHNewImagePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHNewImagePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHNewImagePar*) (soff))->~G__TMHNewImagePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHNewImagePar2 */
static int G__ImageCint_276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHNewImagePar2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHNewImagePar2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHNewImagePar2((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHNewImagePar2((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHNewImagePar2((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHNewImagePar2[n];
       } else {
         p = new((void*) gvp) MHNewImagePar2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHNewImagePar2;
       } else {
         p = new((void*) gvp) MHNewImagePar2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHNewImagePar2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHNewImagePar2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHNewImagePar2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHNewImagePar2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHNewImagePar2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHNewImagePar2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_276_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHNewImagePar2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_276_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHNewImagePar2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHNewImagePar2(*(MHNewImagePar2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHNewImagePar2 G__TMHNewImagePar2;
static int G__ImageCint_276_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHNewImagePar2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHNewImagePar2*) (soff+(sizeof(MHNewImagePar2)*i)))->~G__TMHNewImagePar2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHNewImagePar2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHNewImagePar2*) (soff))->~G__TMHNewImagePar2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHVsSize */
static int G__ImageCint_277_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHVsSize* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHVsSize((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHVsSize((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHVsSize((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHVsSize((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHVsSize[n];
       } else {
         p = new((void*) gvp) MHVsSize[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHVsSize;
       } else {
         p = new((void*) gvp) MHVsSize;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHVsSize));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHVsSize::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsSize::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHVsSize::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHVsSize::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHVsSize*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsSize::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHVsSize::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsSize::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_277_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHVsSize::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_277_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHVsSize* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHVsSize(*(MHVsSize*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MHVsSize));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHVsSize G__TMHVsSize;
static int G__ImageCint_277_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHVsSize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHVsSize*) (soff+(sizeof(MHVsSize)*i)))->~G__TMHVsSize();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHVsSize*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHVsSize*) (soff))->~G__TMHVsSize();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MStereoPar */
static int G__ImageCint_311_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MStereoPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MStereoPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MStereoPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MStereoPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MStereoPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MStereoPar[n];
       } else {
         p = new((void*) gvp) MStereoPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MStereoPar;
       } else {
         p = new((void*) gvp) MStereoPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MStereoPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCoreX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCoreY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetSourceX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetSourceY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetTheta2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCT1Impact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCT2Impact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCT1Impact2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MStereoPar*) G__getstructoffset())->GetCT2Impact2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoPar*) G__getstructoffset())->Calc(
*(MHillas*) libp->para[0].ref, *(MPointingPos*) libp->para[1].ref
, *(MGeomCam*) libp->para[2].ref, (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), *(MHillas*) libp->para[5].ref
, *(MPointingPos*) libp->para[6].ref, *(MGeomCam*) libp->para[7].ref
, (const Float_t) G__double(libp->para[8]), (const Float_t) G__double(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MStereoPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MStereoPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MStereoPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MStereoPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_311_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MStereoPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_311_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MStereoPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MStereoPar(*(MStereoPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MStereoPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MStereoPar G__TMStereoPar;
static int G__ImageCint_311_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MStereoPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MStereoPar*) (soff+(sizeof(MStereoPar)*i)))->~G__TMStereoPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MStereoPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MStereoPar*) (soff))->~G__TMStereoPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ImageCint_311_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MStereoPar* dest = (MStereoPar*) G__getstructoffset();
   *dest = *(MStereoPar*) libp->para[0].ref;
   const MStereoPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MStereoCalc */
static int G__ImageCint_312_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MStereoCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MStereoCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MStereoCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MStereoCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MStereoCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MStereoCalc[n];
       } else {
         p = new((void*) gvp) MStereoCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MStereoCalc;
       } else {
         p = new((void*) gvp) MStereoCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoCalc*) G__getstructoffset())->SetNameStereoPar((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoCalc*) G__getstructoffset())->SetCTids((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoCalc*) G__getstructoffset())->SetCT1coor((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoCalc*) G__getstructoffset())->SetCT2coor((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MStereoCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MStereoCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MStereoCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MStereoCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MStereoCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MStereoCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ImageCint_312_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MStereoCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ImageCint_312_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MStereoCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MStereoCalc(*(MStereoCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MStereoCalc G__TMStereoCalc;
static int G__ImageCint_312_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MStereoCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MStereoCalc*) (soff+(sizeof(MStereoCalc)*i)))->~G__TMStereoCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MStereoCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MStereoCalc*) (soff))->~G__TMStereoCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MImgCleanStd */

/* MImgCleanTime */

/* MImgCleanSimple */

/* MHillas */

/* MHillasSrc */

/* MHillasExt */

/* MImagePar */

/* MNewImagePar */

/* MNewImagePar2 */

/* MConcentration */

/* MHillasCalc */

/* MHHillas */

/* MHHillasSrc */

/* MHHillasExt */

/* MHImagePar */

/* MHNewImagePar */

/* MHNewImagePar2 */

/* MHVsSize */

/* MStereoPar */

/* MStereoCalc */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncImageCint {
 public:
  G__Sizep2memfuncImageCint(): p(&G__Sizep2memfuncImageCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncImageCint::*p)();
};

size_t G__get_sizep2memfuncImageCint()
{
  G__Sizep2memfuncImageCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceImageCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd))) {
     MImgCleanStd *G__Lderived;
     G__Lderived=(MImgCleanStd*)0x1000;
     {
       MGTask *G__Lpbase=(MGTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd),G__get_linked_tagnum(&G__ImageCintLN_MGTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd),G__get_linked_tagnum(&G__ImageCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd),G__get_linked_tagnum(&G__ImageCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime))) {
     MImgCleanTime *G__Lderived;
     G__Lderived=(MImgCleanTime*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime),G__get_linked_tagnum(&G__ImageCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime),G__get_linked_tagnum(&G__ImageCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple))) {
     MImgCleanSimple *G__Lderived;
     G__Lderived=(MImgCleanSimple*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple),G__get_linked_tagnum(&G__ImageCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple),G__get_linked_tagnum(&G__ImageCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHillas))) {
     MHillas *G__Lderived;
     G__Lderived=(MHillas*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillas),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillas),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc))) {
     MHillasSrc *G__Lderived;
     G__Lderived=(MHillasSrc*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHillasExt))) {
     MHillasExt *G__Lderived;
     G__Lderived=(MHillasExt*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasExt),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasExt),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MImagePar))) {
     MImagePar *G__Lderived;
     G__Lderived=(MImagePar*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImagePar),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MImagePar),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar))) {
     MNewImagePar *G__Lderived;
     G__Lderived=(MNewImagePar*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2))) {
     MNewImagePar2 *G__Lderived;
     G__Lderived=(MNewImagePar2*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MConcentration))) {
     MConcentration *G__Lderived;
     G__Lderived=(MConcentration*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MConcentration),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MConcentration),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc))) {
     MHillasCalc *G__Lderived;
     G__Lderived=(MHillasCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc),G__get_linked_tagnum(&G__ImageCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc),G__get_linked_tagnum(&G__ImageCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHHillas))) {
     MHHillas *G__Lderived;
     G__Lderived=(MHHillas*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillas),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillas),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillas),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc))) {
     MHHillasSrc *G__Lderived;
     G__Lderived=(MHHillasSrc*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt))) {
     MHHillasExt *G__Lderived;
     G__Lderived=(MHHillasExt*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar))) {
     MHImagePar *G__Lderived;
     G__Lderived=(MHImagePar*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar))) {
     MHNewImagePar *G__Lderived;
     G__Lderived=(MHNewImagePar*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2))) {
     MHNewImagePar2 *G__Lderived;
     G__Lderived=(MHNewImagePar2*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize))) {
     MHVsSize *G__Lderived;
     G__Lderived=(MHVsSize*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize),G__get_linked_tagnum(&G__ImageCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MStereoPar))) {
     MStereoPar *G__Lderived;
     G__Lderived=(MStereoPar*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoPar),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoPar),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc))) {
     MStereoCalc *G__Lderived;
     G__Lderived=(MStereoCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc),G__get_linked_tagnum(&G__ImageCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc),G__get_linked_tagnum(&G__ImageCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc),G__get_linked_tagnum(&G__ImageCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc),G__get_linked_tagnum(&G__ImageCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableImageCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CleaningMethod_t",117,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),0,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint16_t",114,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Island>",117,G__get_linked_tagnum(&G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEIslandcOallocatorlEIslandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEIslandcOallocatorlEIslandgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<uint16_t,uint16_t>",117,G__get_linked_tagnum(&G__ImageCintLN_pairlEunsignedsPshortcOunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::pair<uint16_t,uint16_t> >",117,G__get_linked_tagnum(&G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<uint16_t,uint16_t> >",117,G__get_linked_tagnum(&G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<pair<unsigned short,unsigned short> >",117,G__get_linked_tagnum(&G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<uint16_t>",117,G__get_linked_tagnum(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ImageCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned short>",117,G__get_linked_tagnum(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("CleaningMethod_t",117,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t),0,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ImageCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MImgCleanStd */
static void G__setup_memvarMImgCleanStd(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd));
   { MImgCleanStd *p; p=(MImgCleanStd*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kStandard=%lldLL",(long long)MImgCleanStd::kStandard).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kScaled=%lldLL",(long long)MImgCleanStd::kScaled).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kDemocratic=%lldLL",(long long)MImgCleanStd::kDemocratic).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kProbability=%lldLL",(long long)MImgCleanStd::kProbability).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kAbsolute=%lldLL",(long long)MImgCleanStd::kAbsolute).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kTime=%lldLL",(long long)MImgCleanStd::kTime).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNamePedPhotCam=",0,"default name of the 'MPedPhotCam' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameGeomCam=",0,"default name of the 'MGeomCam' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameSignalCam=",0,"default name of the 'MSignalCam' container");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MSignalCam),-1,-1,4,"fEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MPedPhotCam),-1,-1,4,"fPed=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MCameraData),-1,-1,4,"fData=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t),G__defined_typename("CleaningMethod_t"),-1,4,"fCleaningMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCleanLvl0=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCleanLvl1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCleanLvl2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLvl1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLvl2=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fCleanRings=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fKeepIsolatedPixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRecoverIsolatedPixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPostCleanType=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNamePedPhotCam=",0,"name of the 'MPedPhotCam' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameGeomCam=",0,"name of the 'MGeomCam' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameSignalCam=",0,"name of the 'MSignalCam' container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MImgCleanTime */
static void G__setup_memvarMImgCleanTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime));
   { MImgCleanTime *p; p=(MImgCleanTime*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fCam)-(long)(p)),85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,1,"fCam=",0,"!");
   G__memvar_setup((void*)((long)(&p->fEvt)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MSignalCam),-1,-1,1,"fEvt=",0,"!");
   G__memvar_setup((void*)((long)(&p->fMinCount)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"fMinCount=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fMinSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMinSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fDeltaT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fDeltaT=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fNameSignalCam)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,1,"fNameSignalCam=",0,"name of the 'MSignalCam' container");
   G__memvar_setup((void*)((long)(&p->fIslands)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR),G__defined_typename("vector<Island>"),-1,1,"fIslands=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fContacts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR),G__defined_typename("list<std::pair<uint16_t,uint16_t> >"),-1,1,"fContacts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLut)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),G__defined_typename("vector<uint16_t>"),-1,1,"fLut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MImgCleanSimple */
static void G__setup_memvarMImgCleanSimple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple));
   { MImgCleanSimple *p; p=(MImgCleanSimple*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kStandard=%lldLL",(long long)MImgCleanSimple::kStandard).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kSum2=%lldLL",(long long)MImgCleanSimple::kSum2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t),-1,-2,1,G__FastAllocString(2048).Format("kSum3=%lldLL",(long long)MImgCleanSimple::kSum3).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameGeomCam=",0,"default name of the 'MGeomCam' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameSignalCam=",0,"default name of the 'MSignalCam' container");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MSignalCam),-1,-1,4,"fEvt=",0,"!");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t),G__defined_typename("CleaningMethod_t"),-1,4,"fCleaningMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCleanLvl1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCleanLvl2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLvl1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeLvl2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameGeomCam=",0,"name of the 'MGeomCam' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameSignalCam=",0,"name of the 'MSignalCam' container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHillas */
static void G__setup_memvarMHillas(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillas));
   { MHillas *p; p=(MHillas*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLength=",0,"[mm]        major axis of ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth=",0,"[mm]        minor axis of ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDelta=",0,"[rad]       angle of major axis with x-axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSize=",0,"[#CerPhot]  sum of content of all pixels (number of Cherenkov photons)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanX=",0,"[mm]        x-coordinate of center of ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanY=",0,"[mm]        y-coordinate of center of ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSinDelta=",0,"[1] sin of Delta (to be used in derived classes)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCosDelta=",0,"[1] cos of Delta (to be used in derived classes)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHillasSrc */
static void G__setup_memvarMHillasSrc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc));
   { MHillasSrc *p; p=(MHillasSrc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MSrcPosCam),-1,-1,4,"fSrcPos=",0,"! Source position in the camere");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAlpha=",0,"[deg]  angle of major axis with vector to src");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDist=",0,"[mm]   distance between src and center of ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCosDeltaAlpha=",0,"[1]    cosine of angle between d and a");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDCA=",0,"[mm]   Distance to closest approach 'DCA'");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDCADelta=",0,"[deg]  Angle of the shower axis with respect to the x-axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHillasExt */
static void G__setup_memvarMHillasExt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasExt));
   { MHillasExt *p; p=(MHillasExt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAsym=",0,"[mm] fDist minus dist: center of ellipse, highest pixel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fM3Long=",0,"[mm] 3rd moment (e-weighted) along major axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fM3Trans=",0,"[mm] 3rd moment (e-weighted) along minor axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeLong=",0,"[ns/mm] Slope of the arrival time along the major axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeTrans=",0,"[ns/mm] Slope of the arrival time along the minor axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeSpread=",0,"[ns] Spread (RMS) of the arrival times around the mean arrival time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeSpreadWeighted=",0,"[ns] Weighted spread (RMS) of the arrival times around the weighted mean arrival time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeSpread=",0,"[ns] Spread (RMS) of the arrival time around the slope along the major axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeSpreadWeighted=",0,"[ns] Weighted spread (RMS) of the arrival time around the slope along the major axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MImagePar */
static void G__setup_memvarMImagePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MImagePar));
   { MImagePar *p; p=(MImagePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumIslands=",0,"Number of islands found");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSinglePixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeSinglePixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeSubIslands=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSizeMainIsland=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSatPixelsHG=",0,"number of pixels with saturating hi-gains");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSatPixelsLG=",0,"number of pixels with saturating lo-gains");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MNewImagePar */
static void G__setup_memvarMNewImagePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar));
   { MNewImagePar *p; p=(MNewImagePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLeakage1=",0,"(photons in most outer ring of pixels) over fSize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLeakage2=",0,"(photons in the 2 outer rings of pixels) over fSize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConc=",0,"[ratio] concentration ratio: sum of the two highest pixels / fSize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConc1=",0,"[ratio] concentration ratio: sum of the highest pixel / fSize");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConcCOG=",0,"[ratio] concentration of the three pixels next to COG");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConcCore=",0,"[ratio] concentration of signals inside or touching the ellipse");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUsedArea=",0,"Area of pixels which survived the image cleaning");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreArea=",0,"Area of core pixels");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumUsedPixels=",0,"Number of pixels which survived the image cleaning");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumCorePixels=",0,"number of core pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MNewImagePar2 */
static void G__setup_memvarMNewImagePar2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2));
   { MNewImagePar2 *p; p=(MNewImagePar2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBorderLinePixel=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBorderLineCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MConcentration */
static void G__setup_memvarMConcentration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MConcentration));
   { MConcentration *p; p=(MConcentration*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConc[9]=",0,"[ratio] Num photons in i+1 pixels over size of event ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHillasCalc */
static void G__setup_memvarMHillasCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc));
   { MHillasCalc *p; p=(MHillasCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsDefName=",0,"default name");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsDefTitle=",0,"default title");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameHillas=",0,"default name of the 'MHillas' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameHillasExt=",0,"default name of the 'MHillasExt' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameNewImagePar=",0,"default name of the 'MNewImagePar' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameNewImagePar2=",0,"default name of the 'MNewImagePar' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameConc=",0,"default name of the 'MConcentration' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameImagePar=",0,"default name of the 'MImagePar' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameHillasSrc=",0,"default name of the 'MHillasSrc' container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-2,4,"gsNameSrcPosCam=",0,"default name of the 'MSrcPosCam' container");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"! Camera Geometry used to calculate Hillas");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MSignalCam),-1,-1,4,"fCerPhotEvt=",0,"! Cerenkov Photon Event used for calculation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillas),-1,-1,4,"fHillas=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillasExt),-1,-1,4,"fHillasExt=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc),-1,-1,4,"fHillasSrc=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MImagePar),-1,-1,4,"fImagePar=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar),-1,-1,4,"fNewImgPar=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2),-1,-1,4,"fNewImgPar2=",0,"! output container to store result");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MConcentration),-1,-1,4,"fConc=",0,"! output container to store result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameHillas=",0,"name of the 'MHillas' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameHillasExt=",0,"name of the 'MHillasExt' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameHillasSrc=",0,"name of the 'MHillasSrc' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameSrcPosCam=",0,"name of the 'MSrcPosCam' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameConc=",0,"name of the 'MConcentration' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameImagePar=",0,"name of the 'MImagePar' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameNewImagePar=",0,"name of the 'MNewImagePar' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fNameNewImagePar2=",0,"name of the 'MNewImagePar' container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TArrayL),-1,-1,4,"fErrors=",0,"! Error counter. Do we have to change to Double?");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFlags=",0,"Flags defining the behaviour of MHillasCalc");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fIdxIsland=",0,"Number of island to use for calculation");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcHillas=%lldLL",(long long)MHillasCalc::kCalcHillas).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcHillasExt=%lldLL",(long long)MHillasCalc::kCalcHillasExt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcHillasSrc=%lldLL",(long long)MHillasCalc::kCalcHillasSrc).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcNewImagePar=%lldLL",(long long)MHillasCalc::kCalcNewImagePar).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcNewImagePar2=%lldLL",(long long)MHillasCalc::kCalcNewImagePar2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcConc=%lldLL",(long long)MHillasCalc::kCalcConc).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillasCalccLcLCalcCont_t),-1,-2,1,G__FastAllocString(2048).Format("kCalcImagePar=%lldLL",(long long)MHillasCalc::kCalcImagePar).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHHillas */
static void G__setup_memvarMHHillas(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillas));
   { MHHillas *p; p=(MHHillas*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"! Camera geometry for plots (for the moment this is a feature for a loop only!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fLength=",0,"-> Length");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fWidth=",0,"-> Width");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fDistC=",0,"-> Distance to Camera Center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fDelta=",0,"-> Angle between Length axis and x-axis");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fSize=",0,"-> Sum of used pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fCenter=",0,"-> Center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHHillasSrc */
static void G__setup_memvarMHHillasSrc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc));
   { MHHillasSrc *p; p=(MHHillasSrc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! conversion mm to deg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fAlpha=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fDist=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fCosDA=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fDCA=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fDCADelta=",0,"->");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHHillasExt */
static void G__setup_memvarMHHillasExt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt));
   { MHHillasExt *p; p=(MHHillasExt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! conversion mm to deg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillas),-1,-1,4,"fHillas=",0,"! Pointer to the MHillas container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillasExt),-1,-1,4,"fHillasExt=",0,"! Pointer to the MHillasExt container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHAsym=",0,"[mm] fDist minus dist: center of ellipse, highest pixel");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHM3Long=",0,"[mm] 3rd moment (e-weighted) along major axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHM3Trans=",0,"[mm] 3rd moment (e-weighted) along minor axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fHSlopeL=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHTimeSpread=",0,"[ns] Spread (rms) of arrival time around mean");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHTimeSpreadW=",0,"[ns] Weighted spread (rms) of arrival time around weighted mean");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHSlopeSpread=",0,"[ns] Spread (rms) of arrival time around slope");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHSlopeSpreadW=",0,"[ns] Weighted spread (rms) of arrival time around slope");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fHilName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHImagePar */
static void G__setup_memvarMHImagePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar));
   { MHImagePar *p; p=(MHImagePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistSatHi=",0,"Number of pixels with sat hi-gain");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistSatLo=",0,"Number of pixels with sat lo-gain");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistIslands=",0,"Number of islands per event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistSizeSubIslands=",0,"Size of sub islands");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistSizeMainIsland=",0,"Size of main island");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistNumSP=",0,"Number of single core pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistSizeSP=",0,"size of single core pixels");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSatPixelsHG=",0,"number of pixels with saturating hi-gains");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumSatPixelsLG=",0,"number of pixels with saturating lo-gains");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHNewImagePar */
static void G__setup_memvarMHNewImagePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar));
   { MHNewImagePar *p; p=(MHNewImagePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion from mm to deg");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistLeakage1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistLeakage2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistUsedPix=",0,"Number of used pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistCorePix=",0,"Number of core pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistUsedArea=",0,"Area of used pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistCoreArea=",0,"Area of core pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistConc=",0,"[ratio] concentration ratio: sum of the two highest pixels / fSize");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistConc1=",0,"[ratio] concentration ratio: sum of the highest pixel / fSize");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistConcCOG=",0,"[ratio] concentration of the three pixels next to COG");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistConcCore=",0,"[ratio] concentration of signals inside or touching the ellipse");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHNewImagePar2 */
static void G__setup_memvarMHNewImagePar2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2));
   { MHNewImagePar2 *p; p=(MHNewImagePar2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! conversion mm to deg");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistBorder1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH1F),-1,-1,4,"fHistBorder2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHVsSize */
static void G__setup_memvarMHVsSize(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize));
   { MHVsSize *p; p=(MHVsSize*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion from mm to deg");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillas),-1,-1,4,"fHillas=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MHillasExt),-1,-1,4,"fHillasExt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar),-1,-1,4,"fNewImagePar=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fLength=",0,"Length");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fWidth=",0,"Width");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fDist=",0,"Distance to Camera Center");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fConc1=",0,"Angle between Length axis and x-axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fM3Long=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TH2F),-1,-1,4,"fArea=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MStereoPar */
static void G__setup_memvarMStereoPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoPar));
   { MStereoPar *p; p=(MStereoPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreX=",0,"Estimated core position on ground x");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreY=",0,"Estimated core position on ground y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreX2=",0,"Estimated core position on ground assuming that");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCoreY2=",0,"the source direction is paralel to the tel. axis.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSourceX=",0,"Estimated source position on the camera");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSourceY=",0,"Units are degrees! ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta2=",0,"deg^2; Squared angular distance of estimated source position to cameracenter.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT1Impact=",0,"Estimated shower impact parameter from CT1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT2Impact=",0,"Estimated shower impact parameter from CT2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT1Impact2=",0,"Estimated shower impact parameter from CT1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT2Impact2=",0,"Estimated shower impact parameter from CT2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MStereoCalc */
static void G__setup_memvarMStereoCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc));
   { MStereoCalc *p; p=(MStereoCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeomCam1=",0,"! CT1: Camera Geometry");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillas),-1,-1,4,"fHillas1=",0,"! CT1: Hillas parameters");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MPointingPos),-1,-1,4,"fPointingPos1=",0,"! CT1: Pointing Direction");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MGeomCam),-1,-1,4,"fGeomCam2=",0,"! CT2: Camera Geometry");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MHillas),-1,-1,4,"fHillas2=",0,"! CT2: Hillas parameters");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ImageCintLN_MPointingPos),-1,-1,4,"fPointingPos2=",0,"! CT2: pointing direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCT1id=",0,"CT1: Identifier number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCT2id=",0,"CT2: Identifier number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT1x=",0,"! FIXME -> Move to parameter list");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT1y=",0,"! Position of first telescope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT2x=",0,"! FIXME -> Move to parameter list");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCT2y=",0,"! Position of second telescope");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_MStereoPar),-1,-1,4,"fStereoPar=",0,"! output container to store result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ImageCintLN_TString),-1,-1,4,"fStereoParName=",0,"name of the 'MStereoPar' container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ImageCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarImageCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMImgCleanStd(void) {
   /* MImgCleanStd */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd));
   G__memfunc_setup("HasCoreNeighbors",1606,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "u 'MGeom' - 11 - gpix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasUsedNeighbors",1614,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 8, "u 'MGeom' - 11 - gpix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsedNeighbors",1630,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'MGeom' - 11 - gpix i - 'Int_t' 0 '1' r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoCleaning",980,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "f - 'Float_t' 1 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCleaning",1316,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecoverIsolatedPixels",2176,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "f - 'Float_t' 1 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanTime",882,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - n d - 'Double_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanStepTime",1294,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateGuiElements",1718,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGGroupFrame' - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MImgCleanStd",1144,G__ImageCint_187_0_14, 105, G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 '3.0' lvl1 f - 'Float_t' 10 '2.5' lvl2 "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCleanLvl0",1121,G__ImageCint_187_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCleanLvl1",1122,G__ImageCint_187_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCleanLvl2",1123,G__ImageCint_187_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeLvl1",1038,G__ImageCint_187_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeLvl2",1039,G__ImageCint_187_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanLvl0",1133,G__ImageCint_187_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanLvl1",1134,G__ImageCint_187_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanLvl2",1135,G__ImageCint_187_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLvl1",1050,G__ImageCint_187_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLvl2",1051,G__ImageCint_187_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanRings",1298,G__ImageCint_187_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCleanRings",1286,G__ImageCint_187_0_27, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPostCleanType",1623,G__ImageCint_187_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMethod",909,G__ImageCint_187_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MImgCleanStd::CleaningMethod_t' 'MImgCleanStd::CleaningMethod_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetKeepIsolatedPixels",2139,G__ImageCint_187_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRecoverIsolatedPixels",2476,G__ImageCint_187_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessMessage",1444,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - msg i - 'Int_t' 0 - submsg "
"l - 'Long_t' 0 - param1 l - 'Long_t' 0 - param2", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNamePedPhotCam",1650,G__ImageCint_187_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalCam",1564,G__ImageCint_187_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__ImageCint_187_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_187_0_36, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MImgCleanStd::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_187_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanStd::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_187_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MImgCleanStd::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_187_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MImgCleanStd::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_187_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_187_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanStd::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_187_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanStd::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_187_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanStd::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_187_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanStd::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MImgCleanStd", 1144, G__ImageCint_187_0_48, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MImgCleanStd), -1, 0, 1, 1, 1, 0, "u 'MImgCleanStd' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MImgCleanStd", 1270, G__ImageCint_187_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMImgCleanTime(void) {
   /* MImgCleanTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime));
   G__memfunc_setup("CalcIsland",974,G__ImageCint_191_0_1, 117, G__get_linked_tagnum(&G__ImageCintLN_Island), -1, 0, 3, 1, 1, 0, 
"u 'MSignalPix' - 1 - - u 'MGeom' - 11 - - "
"r - 'uint16_t' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MImgCleanTime",1244,G__ImageCint_191_0_5, 105, G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinCount",1113,G__ImageCint_191_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinSize",1003,G__ImageCint_191_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDeltaT",874,G__ImageCint_191_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalCam",1564,G__ImageCint_191_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_191_0_10, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MImgCleanTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_191_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_191_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MImgCleanTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_191_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MImgCleanTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_191_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_191_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_191_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_191_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_191_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanTime::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MImgCleanTime", 1244, G__ImageCint_191_0_22, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MImgCleanTime), -1, 0, 1, 1, 1, 0, "u 'MImgCleanTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MImgCleanTime", 1370, G__ImageCint_191_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMImgCleanSimple(void) {
   /* MImgCleanSimple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple));
   G__memfunc_setup("ResetCleaning",1316,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoCleanStd",961,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoCleanSum2",1021,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoCleanSum3",1022,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MImgCleanSimple",1463,G__ImageCint_205_0_8, 105, G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 '2.0' lvl1 f - 'Float_t' 10 '1.75' lvl2 "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCleanLvl1",1122,G__ImageCint_205_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCleanLvl2",1123,G__ImageCint_205_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeLvl1",1038,G__ImageCint_205_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeLvl2",1039,G__ImageCint_205_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanLvl1",1134,G__ImageCint_205_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCleanLvl2",1135,G__ImageCint_205_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLvl1",1050,G__ImageCint_205_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeLvl2",1051,G__ImageCint_205_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMethod",909,G__ImageCint_205_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MImgCleanSimple::CleaningMethod_t' 'MImgCleanSimple::CleaningMethod_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSignalCam",1564,G__ImageCint_205_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameGeomCam",1350,G__ImageCint_205_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_205_0_21, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MImgCleanSimple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_205_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanSimple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_205_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MImgCleanSimple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_205_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MImgCleanSimple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_205_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_205_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanSimple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_205_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanSimple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_205_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImgCleanSimple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_205_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImgCleanSimple::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MImgCleanSimple", 1463, G__ImageCint_205_0_33, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MImgCleanSimple), -1, 0, 1, 1, 1, 0, "u 'MImgCleanSimple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MImgCleanSimple", 1589, G__ImageCint_205_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHillas(void) {
   /* MHillas */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillas));
   G__memfunc_setup("MHillas",682,G__ImageCint_209_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHillas), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calc",371,G__ImageCint_209_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - pix "
"i - 'Int_t' 0 '-1' island", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__ImageCint_209_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLength",898,G__ImageCint_209_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWidth",800,G__ImageCint_209_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDelta",778,G__ImageCint_209_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__ImageCint_209_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanX",761,G__ImageCint_209_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanY",762,G__ImageCint_209_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist0",740,G__ImageCint_209_0_13, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMean",673,G__ImageCint_209_0_14, 117, G__get_linked_tagnum(&G__ImageCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNormAxis",1105,G__ImageCint_209_0_15, 117, G__get_linked_tagnum(&G__ImageCintLN_TVector2), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBorderLine",1286,G__ImageCint_209_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArea",665,G__ImageCint_209_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosDelta",1071,G__ImageCint_209_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSinDelta",1076,G__ImageCint_209_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__ImageCint_209_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 11 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_209_0_21, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHillas::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_209_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillas::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_209_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHillas::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_209_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHillas::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_209_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_209_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillas::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_209_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillas::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_209_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillas::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_209_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillas::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHillas", 682, G__ImageCint_209_0_33, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHillas), -1, 0, 1, 1, 1, 0, "u 'MHillas' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHillas", 808, G__ImageCint_209_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_209_0_35, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MHillas), -1, 1, 1, 1, 1, 0, "u 'MHillas' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHillasSrc(void) {
   /* MHillasSrc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc));
   G__memfunc_setup("MHillasSrc",978,G__ImageCint_211_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHillasSrc",978,G__ImageCint_211_0_2, 105, G__get_linked_tagnum(&G__ImageCintLN_MHillasSrc), -1, 0, 1, 1, 1, 0, "u 'MHillasSrc' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSrcPos",902,G__ImageCint_211_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MSrcPosCam' - 10 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSrcPos",890,G__ImageCint_211_0_5, 85, G__get_linked_tagnum(&G__ImageCintLN_MSrcPosCam), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlpha",774,G__ImageCint_211_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__ImageCint_211_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCosDeltaAlpha",1557,G__ImageCint_211_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDCA",488,G__ImageCint_211_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDCADelta",978,G__ImageCint_211_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__ImageCint_211_0_13, 121, -1, -1, 0, 1, 1, 1, 8, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calc",371,G__ImageCint_211_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'MHillas' - 11 - hillas", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set",300,G__ImageCint_211_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 11 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_211_0_17, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHillasSrc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_211_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasSrc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_211_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHillasSrc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_211_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHillasSrc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_211_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_211_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasSrc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_211_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasSrc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_211_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasSrc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_211_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasSrc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHillasSrc", 1104, G__ImageCint_211_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHillasExt(void) {
   /* MHillasExt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasExt));
   G__memfunc_setup("MHillasExt",987,G__ImageCint_212_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHillasExt), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAsym",698,G__ImageCint_212_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetM3Long",816,G__ImageCint_212_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetM3Trans",936,G__ImageCint_212_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeLong",1203,G__ImageCint_212_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeTrans",1323,G__ImageCint_212_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSpread",1294,G__ImageCint_212_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeSpreadWeighted",2111,G__ImageCint_212_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeSpread",1410,G__ImageCint_212_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlopeSpreadWeighted",2227,G__ImageCint_212_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,G__ImageCint_212_0_12, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - pix "
"u 'MHillas' - 11 - hil i - 'Int_t' 0 '-1' island", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__ImageCint_212_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set",300,G__ImageCint_212_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 11 - arr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_212_0_17, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHillasExt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_212_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasExt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_212_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHillasExt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_212_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHillasExt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_212_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_212_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasExt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_212_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasExt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_212_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasExt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_212_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasExt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHillasExt", 987, G__ImageCint_212_0_29, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHillasExt), -1, 0, 1, 1, 1, 0, "u 'MHillasExt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHillasExt", 1113, G__ImageCint_212_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_212_0_31, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MHillasExt), -1, 1, 1, 1, 1, 0, "u 'MHillasExt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMImagePar(void) {
   /* MImagePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MImagePar));
   G__memfunc_setup("MImagePar",851,G__ImageCint_215_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MImagePar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumIslands",1310,G__ImageCint_215_0_3, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSatPixelsHG",1660,G__ImageCint_215_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSatPixelsLG",1664,G__ImageCint_215_0_5, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSinglePixels",1831,G__ImageCint_215_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeSinglePixels",1938,G__ImageCint_215_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeSubIslands",1715,G__ImageCint_215_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSizeMainIsland",1691,G__ImageCint_215_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calc",371,G__ImageCint_215_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MSignalCam' - 11 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_215_0_12, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MImagePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_215_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImagePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_215_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MImagePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_215_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MImagePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_215_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_215_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImagePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_215_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImagePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_215_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MImagePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_215_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MImagePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MImagePar", 851, G__ImageCint_215_0_24, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MImagePar), -1, 0, 1, 1, 1, 0, "u 'MImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MImagePar", 977, G__ImageCint_215_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_215_0_26, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MImagePar), -1, 1, 1, 1, 1, 0, "u 'MImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMNewImagePar(void) {
   /* MNewImagePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar));
   G__memfunc_setup("MNewImagePar",1149,G__ImageCint_216_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLeakage1",1019,G__ImageCint_216_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeakage2",1020,G__ImageCint_216_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc",675,G__ImageCint_216_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc1",724,G__ImageCint_216_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConcCOG",892,G__ImageCint_216_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConcCore",1068,G__ImageCint_216_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumUsedPixels",1622,G__ImageCint_216_0_9, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumCorePixels",1614,G__ImageCint_216_0_10, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUsedArea",1066,G__ImageCint_216_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoreArea",1058,G__ImageCint_216_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__ImageCint_216_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,G__ImageCint_216_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - evt "
"u 'MHillas' - 11 - hillas i - 'Int_t' 0 '-1' island", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_216_0_16, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MNewImagePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_216_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_216_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MNewImagePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_216_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MNewImagePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_216_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_216_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_216_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MNewImagePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_216_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_216_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MNewImagePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MNewImagePar", 1149, G__ImageCint_216_0_28, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar), -1, 0, 1, 1, 1, 0, "u 'MNewImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MNewImagePar", 1275, G__ImageCint_216_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_216_0_30, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar), -1, 1, 1, 1, 1, 0, "u 'MNewImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMNewImagePar2(void) {
   /* MNewImagePar2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2));
   G__memfunc_setup("MNewImagePar2",1199,G__ImageCint_217_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBorderLinePixel",1800,G__ImageCint_217_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBorderLineCenter",1895,G__ImageCint_217_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__ImageCint_217_0_6, 121, -1, -1, 0, 1, 1, 1, 8, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,G__ImageCint_217_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - evt "
"i - 'Int_t' 0 '-1' island", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_217_0_8, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MNewImagePar2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_217_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_217_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MNewImagePar2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_217_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MNewImagePar2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_217_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_217_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_217_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MNewImagePar2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_217_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MNewImagePar2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_217_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MNewImagePar2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MNewImagePar2", 1199, G__ImageCint_217_0_20, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2), -1, 0, 1, 1, 1, 0, "u 'MNewImagePar2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MNewImagePar2", 1325, G__ImageCint_217_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_217_0_22, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MNewImagePar2), -1, 1, 1, 1, 1, 0, "u 'MNewImagePar2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMConcentration(void) {
   /* MConcentration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MConcentration));
   G__memfunc_setup("MConcentration",1444,G__ImageCint_218_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MConcentration), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Calc",371,G__ImageCint_218_0_3, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - pix "
"u 'MHillas' - 11 - hil", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConc1",724,G__ImageCint_218_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc2",725,G__ImageCint_218_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc3",726,G__ImageCint_218_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc4",727,G__ImageCint_218_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc5",728,G__ImageCint_218_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc6",729,G__ImageCint_218_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc7",730,G__ImageCint_218_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc8",731,G__ImageCint_218_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConc9",732,G__ImageCint_218_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_218_0_14, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MConcentration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_218_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MConcentration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_218_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MConcentration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_218_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MConcentration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_218_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_218_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MConcentration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_218_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MConcentration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_218_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MConcentration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_218_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MConcentration::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MConcentration", 1444, G__ImageCint_218_0_26, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MConcentration), -1, 0, 1, 1, 1, 0, "u 'MConcentration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MConcentration", 1570, G__ImageCint_218_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_218_0_28, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MConcentration), -1, 1, 1, 1, 1, 0, "u 'MConcentration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHillasCalc(void) {
   /* MHillasCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHillasCalc",1053,G__ImageCint_219_0_6, 105, G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFlags",793,G__ImageCint_219_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Enable",583,G__ImageCint_219_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disable",692,G__ImageCint_219_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestFlag",794,G__ImageCint_219_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i 'MHillasCalc::CalcCont_t' - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestFlags",909,G__ImageCint_219_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameHillas",1290,G__ImageCint_219_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameHillasExt",1595,G__ImageCint_219_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameHillasSrc",1586,G__ImageCint_219_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameNewImagePar",1757,G__ImageCint_219_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameNewImagePar2",1807,G__ImageCint_219_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameConc",1072,G__ImageCint_219_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameImagePar",1459,G__ImageCint_219_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameSrcPosCam",1560,G__ImageCint_219_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdxIsland",1196,G__ImageCint_219_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_219_0_22, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHillasCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_219_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_219_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHillasCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_219_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHillasCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_219_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_219_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_219_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_219_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHillasCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_219_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHillasCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHillasCalc", 1053, G__ImageCint_219_0_34, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHillasCalc), -1, 0, 1, 1, 1, 0, "u 'MHillasCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHillasCalc", 1179, G__ImageCint_219_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHHillas(void) {
   /* MHHillas */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillas));
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHHillas",754,G__ImageCint_271_0_2, 105, G__get_linked_tagnum(&G__ImageCintLN_MHHillas), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistLength",1306,G__ImageCint_271_0_8, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistWidth",1208,G__ImageCint_271_0_9, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistDistC",1167,G__ImageCint_271_0_10, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistDelta",1186,G__ImageCint_271_0_11, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistSize",1107,G__ImageCint_271_0_12, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistCenter",1305,G__ImageCint_271_0_13, 85, G__get_linked_tagnum(&G__ImageCintLN_TH2F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_271_0_15, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHHillas::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_271_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillas::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_271_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHHillas::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_271_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHHillas::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_271_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_271_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillas::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_271_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillas::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_271_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillas::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_271_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillas::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHHillas", 754, G__ImageCint_271_0_27, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHHillas), -1, 0, 1, 1, 1, 0, "u 'MHHillas' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHHillas", 880, G__ImageCint_271_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_271_0_29, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MHHillas), -1, 1, 1, 1, 1, 0, "u 'MHHillas' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHHillasSrc(void) {
   /* MHHillasSrc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc));
   G__memfunc_setup("MHHillasSrc",1050,G__ImageCint_272_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistAlpha",1182,G__ImageCint_272_0_7, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistDist",1100,G__ImageCint_272_0_8, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistCosDeltaAlpha",1965,G__ImageCint_272_0_9, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistDCA",896,G__ImageCint_272_0_10, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistDCADelta",1386,G__ImageCint_272_0_11, 85, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_272_0_14, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHHillasSrc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_272_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasSrc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_272_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHHillasSrc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_272_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHHillasSrc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_272_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_272_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasSrc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_272_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillasSrc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_272_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasSrc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_272_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillasSrc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHHillasSrc", 1050, G__ImageCint_272_0_26, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc), -1, 0, 1, 1, 1, 0, "u 'MHHillasSrc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHHillasSrc", 1176, G__ImageCint_272_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_272_0_28, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MHHillasSrc), -1, 1, 1, 1, 1, 0, "u 'MHHillasSrc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHHillasExt(void) {
   /* MHHillasExt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt));
   G__memfunc_setup("MHHillasExt",1059,G__ImageCint_273_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHillasName",1290,G__ImageCint_273_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_273_0_9, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHHillasExt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_273_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasExt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_273_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHHillasExt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_273_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHHillasExt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_273_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_273_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasExt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_273_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillasExt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_273_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHHillasExt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_273_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHHillasExt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHHillasExt", 1059, G__ImageCint_273_0_21, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHHillasExt), -1, 0, 1, 1, 1, 0, "u 'MHHillasExt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHHillasExt", 1185, G__ImageCint_273_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHImagePar(void) {
   /* MHImagePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHImagePar));
   G__memfunc_setup("MHImagePar",923,G__ImageCint_274_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHImagePar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistSatHi",1169,G__ImageCint_274_0_7, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistSatLo",1179,G__ImageCint_274_0_8, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistIslands",1414,G__ImageCint_274_0_9, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_274_0_12, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHImagePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_274_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHImagePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_274_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHImagePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_274_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHImagePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_274_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_274_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHImagePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_274_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHImagePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_274_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHImagePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_274_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHImagePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHImagePar", 923, G__ImageCint_274_0_24, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHImagePar), -1, 0, 1, 1, 1, 0, "u 'MHImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHImagePar", 1049, G__ImageCint_274_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHNewImagePar(void) {
   /* MHNewImagePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar));
   G__memfunc_setup("MHNewImagePar",1221,G__ImageCint_275_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindObject",984,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistLeakage1",1427,G__ImageCint_275_0_7, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistLeakage2",1428,G__ImageCint_275_0_8, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistUsedPix",1402,G__ImageCint_275_0_9, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistCorePix",1394,G__ImageCint_275_0_10, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistUsedArea",1474,G__ImageCint_275_0_11, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistCoreArea",1466,G__ImageCint_275_0_12, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistConc",1083,G__ImageCint_275_0_13, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistConc1",1132,G__ImageCint_275_0_14, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistConcCOG",1300,G__ImageCint_275_0_15, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistConcCore",1476,G__ImageCint_275_0_16, 117, G__get_linked_tagnum(&G__ImageCintLN_TH1F), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_275_0_19, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHNewImagePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_275_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_275_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHNewImagePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_275_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHNewImagePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_275_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_275_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_275_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHNewImagePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_275_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_275_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHNewImagePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHNewImagePar", 1221, G__ImageCint_275_0_31, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar), -1, 0, 1, 1, 1, 0, "u 'MHNewImagePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHNewImagePar", 1347, G__ImageCint_275_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHNewImagePar2(void) {
   /* MHNewImagePar2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2));
   G__memfunc_setup("MHNewImagePar2",1271,G__ImageCint_276_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_276_0_5, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHNewImagePar2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_276_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_276_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHNewImagePar2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_276_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHNewImagePar2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_276_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_276_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_276_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHNewImagePar2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_276_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHNewImagePar2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_276_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHNewImagePar2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHNewImagePar2", 1271, G__ImageCint_276_0_17, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHNewImagePar2), -1, 0, 1, 1, 1, 0, "u 'MHNewImagePar2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHNewImagePar2", 1397, G__ImageCint_276_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHVsSize(void) {
   /* MHVsSize */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MHVsSize));
   G__memfunc_setup("MHVsSize",761,G__ImageCint_277_0_1, 105, G__get_linked_tagnum(&G__ImageCintLN_MHVsSize), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ImageCint_277_0_5, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHVsSize::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_277_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsSize::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_277_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHVsSize::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_277_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHVsSize::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_277_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_277_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsSize::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_277_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHVsSize::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_277_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsSize::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_277_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHVsSize::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHVsSize", 761, G__ImageCint_277_0_17, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MHVsSize), -1, 0, 1, 1, 1, 0, "u 'MHVsSize' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHVsSize", 887, G__ImageCint_277_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMStereoPar(void) {
   /* MStereoPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoPar));
   G__memfunc_setup("CamToDir",755,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ImageCintLN_TVector3), -1, 0, 4, 1, 4, 8, 
"u 'MGeomCam' - 11 - geom u 'MPointingPos' - 11 - pos "
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CamToDir",755,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ImageCintLN_TVector3), -1, 0, 3, 1, 4, 8, 
"u 'MGeomCam' - 11 - geom u 'MPointingPos' - 11 - pos "
"u 'TVector2' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCT",522,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 8, 
"u 'MHillas' - 11 - h u 'MPointingPos' - 11 - p "
"u 'MGeomCam' - 11 - g u 'TVector2' - 1 - cv1 "
"u 'TVector2' - 1 - cv2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VersorToCore",1229,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__ImageCintLN_TVector2), -1, 0, 4, 1, 4, 8, 
"u 'TVector2' - 11 - v1 u 'TVector2' - 11 - v2 "
"u 'TVector2' - 11 - p1 u 'TVector2' - 11 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcImpact",977,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"u 'TVector2' - 11 - w u 'TVector2' - 11 - v "
"u 'TVector2' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcImpact",977,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 8, 
"u 'TVector3' - 11 - v u 'TVector2' - 11 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcImpact",977,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"u 'TVector2' - 11 - core u 'TVector2' - 11 - p "
"u 'MPointingPos' - 11 - point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MStereoPar",994,G__ImageCint_311_0_8, 105, G__get_linked_tagnum(&G__ImageCintLN_MStereoPar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCoreX",769,G__ImageCint_311_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoreY",770,G__ImageCint_311_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceX",1001,G__ImageCint_311_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceY",1002,G__ImageCint_311_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta2",840,G__ImageCint_311_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCT1Impact",1094,G__ImageCint_311_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCT2Impact",1095,G__ImageCint_311_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCT1Impact2",1144,G__ImageCint_311_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCT2Impact2",1145,G__ImageCint_311_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,G__ImageCint_311_0_19, 121, -1, -1, 0, 10, 1, 1, 0, 
"u 'MHillas' - 11 - h1 u 'MPointingPos' - 11 - p1 "
"u 'MGeomCam' - 11 - g1 f - 'Float_t' 10 - ct1_x "
"f - 'Float_t' 10 - ct1_y u 'MHillas' - 11 - h2 "
"u 'MPointingPos' - 11 - p2 u 'MGeomCam' - 11 - g2 "
"f - 'Float_t' 10 - ct2_x f - 'Float_t' 10 - ct2_y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_311_0_20, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MStereoPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_311_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_311_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MStereoPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_311_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MStereoPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_311_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_311_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_311_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MStereoPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_311_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_311_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MStereoPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MStereoPar", 994, G__ImageCint_311_0_32, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MStereoPar), -1, 0, 1, 1, 1, 0, "u 'MStereoPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MStereoPar", 1120, G__ImageCint_311_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ImageCint_311_0_34, (int) ('u'), G__get_linked_tagnum(&G__ImageCintLN_MStereoPar), -1, 1, 1, 1, 1, 0, "u 'MStereoPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMStereoCalc(void) {
   /* MStereoCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MStereoCalc",1074,G__ImageCint_312_0_3, 105, G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameStereoPar",1602,G__ImageCint_312_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCTids",771,G__ImageCint_312_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCT1coor",935,G__ImageCint_312_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", "in m", (void*) NULL, 0);
   G__memfunc_setup("SetCT2coor",936,G__ImageCint_312_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", "in m", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ImageCint_312_0_8, 85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MStereoCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ImageCint_312_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ImageCint_312_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MStereoCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ImageCint_312_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MStereoCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ImageCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ImageCint_312_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ImageCint_312_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ImageCint_312_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MStereoCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ImageCint_312_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MStereoCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ImageCint_312_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MStereoCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MStereoCalc", 1074, G__ImageCint_312_0_20, (int) ('i'), G__get_linked_tagnum(&G__ImageCintLN_MStereoCalc), -1, 0, 1, 1, 1, 0, "u 'MStereoCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MStereoCalc", 1200, G__ImageCint_312_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncImageCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalImageCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcImageCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ImageCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ImageCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MGGroupFrame = { "MGGroupFrame" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MGTask = { "MGTask" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MGeom = { "MGeom" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MPedPhotCam = { "MPedPhotCam" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MCameraData = { "MCameraData" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MImgCleanStd = { "MImgCleanStd" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t = { "MImgCleanStd::CleaningMethod_t" , 101 , -1 };
G__linked_taginfo G__ImageCintLN_MSignalPix = { "MSignalPix" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_Island = { "Island" , 115 , -1 };
G__linked_taginfo G__ImageCintLN_MImgCleanTime = { "MImgCleanTime" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR = { "vector<Island,allocator<Island> >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_reverse_iteratorlEvectorlEIslandcOallocatorlEIslandgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Island,allocator<Island> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_pairlEunsignedsPshortcOunsignedsPshortgR = { "pair<unsigned short,unsigned short>" , 115 , -1 };
G__linked_taginfo G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR = { "list<pair<unsigned short,unsigned short>,allocator<pair<unsigned short,unsigned short> > >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned short,allocator<unsigned short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MImgCleanSimple = { "MImgCleanSimple" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t = { "MImgCleanSimple::CleaningMethod_t" , 101 , -1 };
G__linked_taginfo G__ImageCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TVector2 = { "TVector2" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHillas = { "MHillas" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MSrcPosCam = { "MSrcPosCam" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHillasSrc = { "MHillasSrc" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHillasExt = { "MHillasExt" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TArrayL = { "TArrayL" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MImagePar = { "MImagePar" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MNewImagePar = { "MNewImagePar" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MNewImagePar2 = { "MNewImagePar2" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MConcentration = { "MConcentration" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHillasCalc = { "MHillasCalc" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHillasCalccLcLCalcCont_t = { "MHillasCalc::CalcCont_t" , 101 , -1 };
G__linked_taginfo G__ImageCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHHillas = { "MHHillas" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHHillasSrc = { "MHHillasSrc" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHHillasExt = { "MHHillasExt" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHImagePar = { "MHImagePar" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHNewImagePar = { "MHNewImagePar" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHNewImagePar2 = { "MHNewImagePar2" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MHVsSize = { "MHVsSize" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MPointingPos = { "MPointingPos" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MStereoPar = { "MStereoPar" , 99 , -1 };
G__linked_taginfo G__ImageCintLN_MStereoCalc = { "MStereoCalc" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableImageCint() {
  G__ImageCintLN_TClass.tagnum = -1 ;
  G__ImageCintLN_TBuffer.tagnum = -1 ;
  G__ImageCintLN_TMemberInspector.tagnum = -1 ;
  G__ImageCintLN_TObject.tagnum = -1 ;
  G__ImageCintLN_TString.tagnum = -1 ;
  G__ImageCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ImageCintLN_TEnv.tagnum = -1 ;
  G__ImageCintLN_MParContainer.tagnum = -1 ;
  G__ImageCintLN_MInputStreamID.tagnum = -1 ;
  G__ImageCintLN_MParList.tagnum = -1 ;
  G__ImageCintLN_MTask.tagnum = -1 ;
  G__ImageCintLN_MGGroupFrame.tagnum = -1 ;
  G__ImageCintLN_MGTask.tagnum = -1 ;
  G__ImageCintLN_MGeomCam.tagnum = -1 ;
  G__ImageCintLN_MGeom.tagnum = -1 ;
  G__ImageCintLN_MSignalCam.tagnum = -1 ;
  G__ImageCintLN_MPedPhotCam.tagnum = -1 ;
  G__ImageCintLN_MCameraData.tagnum = -1 ;
  G__ImageCintLN_MImgCleanStd.tagnum = -1 ;
  G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t.tagnum = -1 ;
  G__ImageCintLN_MSignalPix.tagnum = -1 ;
  G__ImageCintLN_Island.tagnum = -1 ;
  G__ImageCintLN_MImgCleanTime.tagnum = -1 ;
  G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR.tagnum = -1 ;
  G__ImageCintLN_reverse_iteratorlEvectorlEIslandcOallocatorlEIslandgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ImageCintLN_pairlEunsignedsPshortcOunsignedsPshortgR.tagnum = -1 ;
  G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR.tagnum = -1 ;
  G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__ImageCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ImageCintLN_MImgCleanSimple.tagnum = -1 ;
  G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t.tagnum = -1 ;
  G__ImageCintLN_TArrayF.tagnum = -1 ;
  G__ImageCintLN_TVector2.tagnum = -1 ;
  G__ImageCintLN_MHillas.tagnum = -1 ;
  G__ImageCintLN_MSrcPosCam.tagnum = -1 ;
  G__ImageCintLN_MHillasSrc.tagnum = -1 ;
  G__ImageCintLN_MHillasExt.tagnum = -1 ;
  G__ImageCintLN_TArrayL.tagnum = -1 ;
  G__ImageCintLN_MImagePar.tagnum = -1 ;
  G__ImageCintLN_MNewImagePar.tagnum = -1 ;
  G__ImageCintLN_MNewImagePar2.tagnum = -1 ;
  G__ImageCintLN_MConcentration.tagnum = -1 ;
  G__ImageCintLN_MHillasCalc.tagnum = -1 ;
  G__ImageCintLN_MHillasCalccLcLCalcCont_t.tagnum = -1 ;
  G__ImageCintLN_TH1.tagnum = -1 ;
  G__ImageCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ImageCintLN_TH1F.tagnum = -1 ;
  G__ImageCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ImageCintLN_TH2F.tagnum = -1 ;
  G__ImageCintLN_MH.tagnum = -1 ;
  G__ImageCintLN_MHHillas.tagnum = -1 ;
  G__ImageCintLN_MHHillasSrc.tagnum = -1 ;
  G__ImageCintLN_MHHillasExt.tagnum = -1 ;
  G__ImageCintLN_MHImagePar.tagnum = -1 ;
  G__ImageCintLN_MHNewImagePar.tagnum = -1 ;
  G__ImageCintLN_MHNewImagePar2.tagnum = -1 ;
  G__ImageCintLN_MHVsSize.tagnum = -1 ;
  G__ImageCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ImageCintLN_TVector3.tagnum = -1 ;
  G__ImageCintLN_MPointingPos.tagnum = -1 ;
  G__ImageCintLN_MStereoPar.tagnum = -1 ;
  G__ImageCintLN_MStereoCalc.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableImageCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TString);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MGGroupFrame);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MGTask);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MGeom);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MSignalCam);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MPedPhotCam);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MCameraData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MImgCleanStd),sizeof(MImgCleanStd),-1,323840,"task doing the image cleaning",G__setup_memvarMImgCleanStd,G__setup_memfuncMImgCleanStd);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MImgCleanStdcLcLCleaningMethod_t);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MSignalPix);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_Island);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MImgCleanTime),sizeof(MImgCleanTime),-1,323840,"task doing the image cleaning",G__setup_memvarMImgCleanTime,G__setup_memfuncMImgCleanTime);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_vectorlEIslandcOallocatorlEIslandgRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_reverse_iteratorlEvectorlEIslandcOallocatorlEIslandgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_pairlEunsignedsPshortcOunsignedsPshortgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_listlEpairlEunsignedsPshortcOunsignedsPshortgRcOallocatorlEpairlEunsignedsPshortcOunsignedsPshortgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MImgCleanSimple),sizeof(MImgCleanSimple),-1,323840,"task doing the image cleaning",G__setup_memvarMImgCleanSimple,G__setup_memfuncMImgCleanSimple);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MImgCleanSimplecLcLCleaningMethod_t);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TVector2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHillas),sizeof(MHillas),-1,323840,"Storage Container for Hillas Parameter",G__setup_memvarMHillas,G__setup_memfuncMHillas);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MSrcPosCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHillasSrc),sizeof(MHillasSrc),-1,324352,"Container to hold source position dependant parameters",G__setup_memvarMHillasSrc,G__setup_memfuncMHillasSrc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHillasExt),sizeof(MHillasExt),-1,323840,"Storage Container for extended Hillas Parameter",G__setup_memvarMHillasExt,G__setup_memfuncMHillasExt);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TArrayL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MImagePar),sizeof(MImagePar),-1,323840,"Container to hold (geometry and island independant) image parameters",G__setup_memvarMImagePar,G__setup_memfuncMImagePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MNewImagePar),sizeof(MNewImagePar),-1,323840,"Container to hold new image parameters",G__setup_memvarMNewImagePar,G__setup_memfuncMNewImagePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MNewImagePar2),sizeof(MNewImagePar2),-1,323840,"Container to hold new image parameters 2",G__setup_memvarMNewImagePar2,G__setup_memfuncMNewImagePar2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MConcentration),sizeof(MConcentration),-1,323840,"Storage Container for Concentration Parameter",G__setup_memvarMConcentration,G__setup_memfuncMConcentration);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHillasCalc),sizeof(MHillasCalc),-1,323840,"Task to calculate Hillas and other image parameters",G__setup_memvarMHillasCalc,G__setup_memfuncMHillasCalc);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MHillasCalccLcLCalcCont_t);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHHillas),sizeof(MHHillas),-1,324864,"Container which holds histograms for the source independent image parameters",G__setup_memvarMHHillas,G__setup_memfuncMHHillas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHHillasSrc),sizeof(MHHillasSrc),-1,324864,"Container which holds histograms for the source dependant parameters",G__setup_memvarMHHillasSrc,G__setup_memfuncMHHillasSrc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHHillasExt),sizeof(MHHillasExt),-1,323840,"Container which holds histograms for the extended hillas parameters",G__setup_memvarMHHillasExt,G__setup_memfuncMHHillasExt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHImagePar),sizeof(MHImagePar),-1,323840,"Histograms of image parameters",G__setup_memvarMHImagePar,G__setup_memfuncMHImagePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHNewImagePar),sizeof(MHNewImagePar),-1,323840,"Histograms of new image parameters",G__setup_memvarMHNewImagePar,G__setup_memfuncMHNewImagePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHNewImagePar2),sizeof(MHNewImagePar2),-1,323840,"Histograms of new image parameters",G__setup_memvarMHNewImagePar2,G__setup_memfuncMHNewImagePar2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MHVsSize),sizeof(MHVsSize),-1,323840,"Container which holds histograms for image parameters vs size",G__setup_memvarMHVsSize,G__setup_memfuncMHVsSize);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_TVector3);
   G__get_linked_tagnum_fwd(&G__ImageCintLN_MPointingPos);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MStereoPar),sizeof(MStereoPar),-1,323840,"Container to hold new image parameters",G__setup_memvarMStereoPar,G__setup_memfuncMStereoPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ImageCintLN_MStereoCalc),sizeof(MStereoCalc),-1,323840,"Task to calculate some shower parameters in stereo mode",G__setup_memvarMStereoCalc,G__setup_memfuncMStereoCalc);
}
extern "C" void G__cpp_setupImageCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupImageCint()");
  G__set_cpp_environmentImageCint();
  G__cpp_setup_tagtableImageCint();

  G__cpp_setup_inheritanceImageCint();

  G__cpp_setup_typetableImageCint();

  G__cpp_setup_memvarImageCint();

  G__cpp_setup_memfuncImageCint();
  G__cpp_setup_globalImageCint();
  G__cpp_setup_funcImageCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncImageCint();
  return;
}
class G__cpp_setup_initImageCint {
  public:
    G__cpp_setup_initImageCint() { G__add_setup_func("ImageCint",(G__incsetup)(&G__cpp_setupImageCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initImageCint() { G__remove_setup_func("ImageCint"); }
};
G__cpp_setup_initImageCint G__cpp_setup_initializerImageCint;

