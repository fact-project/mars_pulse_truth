//
// File generated by rootcint at Mon Nov 28 11:07:45 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MuonCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MuonCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MMuonSearchPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMuonSearchPar(void *p = 0);
   static void *newArray_MMuonSearchPar(Long_t size, void *p);
   static void delete_MMuonSearchPar(void *p);
   static void deleteArray_MMuonSearchPar(void *p);
   static void destruct_MMuonSearchPar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMuonSearchPar*)
   {
      ::MMuonSearchPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMuonSearchPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMuonSearchPar", ::MMuonSearchPar::Class_Version(), "./MMuonSearchPar.h", 17,
                  typeid(::MMuonSearchPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMuonSearchPar::Dictionary, isa_proxy, 4,
                  sizeof(::MMuonSearchPar) );
      instance.SetNew(&new_MMuonSearchPar);
      instance.SetNewArray(&newArray_MMuonSearchPar);
      instance.SetDelete(&delete_MMuonSearchPar);
      instance.SetDeleteArray(&deleteArray_MMuonSearchPar);
      instance.SetDestructor(&destruct_MMuonSearchPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMuonSearchPar*)
   {
      return GenerateInitInstanceLocal((::MMuonSearchPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMuonSearchPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMuonSearchParCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMuonSearchParCalc(void *p = 0);
   static void *newArray_MMuonSearchParCalc(Long_t size, void *p);
   static void delete_MMuonSearchParCalc(void *p);
   static void deleteArray_MMuonSearchParCalc(void *p);
   static void destruct_MMuonSearchParCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMuonSearchParCalc*)
   {
      ::MMuonSearchParCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMuonSearchParCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMuonSearchParCalc", ::MMuonSearchParCalc::Class_Version(), "./MMuonSearchParCalc.h", 14,
                  typeid(::MMuonSearchParCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMuonSearchParCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MMuonSearchParCalc) );
      instance.SetNew(&new_MMuonSearchParCalc);
      instance.SetNewArray(&newArray_MMuonSearchParCalc);
      instance.SetDelete(&delete_MMuonSearchParCalc);
      instance.SetDeleteArray(&deleteArray_MMuonSearchParCalc);
      instance.SetDestructor(&destruct_MMuonSearchParCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMuonSearchParCalc*)
   {
      return GenerateInitInstanceLocal((::MMuonSearchParCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMuonSearchParCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMuonCalibPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMuonCalibPar(void *p = 0);
   static void *newArray_MMuonCalibPar(Long_t size, void *p);
   static void delete_MMuonCalibPar(void *p);
   static void deleteArray_MMuonCalibPar(void *p);
   static void destruct_MMuonCalibPar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMuonCalibPar*)
   {
      ::MMuonCalibPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMuonCalibPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMuonCalibPar", ::MMuonCalibPar::Class_Version(), "./MMuonCalibPar.h", 16,
                  typeid(::MMuonCalibPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMuonCalibPar::Dictionary, isa_proxy, 4,
                  sizeof(::MMuonCalibPar) );
      instance.SetNew(&new_MMuonCalibPar);
      instance.SetNewArray(&newArray_MMuonCalibPar);
      instance.SetDelete(&delete_MMuonCalibPar);
      instance.SetDeleteArray(&deleteArray_MMuonCalibPar);
      instance.SetDestructor(&destruct_MMuonCalibPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMuonCalibPar*)
   {
      return GenerateInitInstanceLocal((::MMuonCalibPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMuonCalibPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMuonSetup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMuonSetup(void *p = 0);
   static void *newArray_MMuonSetup(Long_t size, void *p);
   static void delete_MMuonSetup(void *p);
   static void deleteArray_MMuonSetup(void *p);
   static void destruct_MMuonSetup(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMuonSetup*)
   {
      ::MMuonSetup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMuonSetup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMuonSetup", ::MMuonSetup::Class_Version(), "./MMuonSetup.h", 9,
                  typeid(::MMuonSetup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMuonSetup::Dictionary, isa_proxy, 4,
                  sizeof(::MMuonSetup) );
      instance.SetNew(&new_MMuonSetup);
      instance.SetNewArray(&newArray_MMuonSetup);
      instance.SetDelete(&delete_MMuonSetup);
      instance.SetDeleteArray(&deleteArray_MMuonSetup);
      instance.SetDestructor(&destruct_MMuonSetup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMuonSetup*)
   {
      return GenerateInitInstanceLocal((::MMuonSetup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMuonSetup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHSingleMuon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHSingleMuon(void *p = 0);
   static void *newArray_MHSingleMuon(Long_t size, void *p);
   static void delete_MHSingleMuon(void *p);
   static void deleteArray_MHSingleMuon(void *p);
   static void destruct_MHSingleMuon(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHSingleMuon*)
   {
      ::MHSingleMuon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHSingleMuon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHSingleMuon", ::MHSingleMuon::Class_Version(), "./MHSingleMuon.h", 18,
                  typeid(::MHSingleMuon), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHSingleMuon::Dictionary, isa_proxy, 4,
                  sizeof(::MHSingleMuon) );
      instance.SetNew(&new_MHSingleMuon);
      instance.SetNewArray(&newArray_MHSingleMuon);
      instance.SetDelete(&delete_MHSingleMuon);
      instance.SetDeleteArray(&deleteArray_MHSingleMuon);
      instance.SetDestructor(&destruct_MHSingleMuon);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHSingleMuon*)
   {
      return GenerateInitInstanceLocal((::MHSingleMuon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHSingleMuon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMuonCalibParCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMuonCalibParCalc(void *p = 0);
   static void *newArray_MMuonCalibParCalc(Long_t size, void *p);
   static void delete_MMuonCalibParCalc(void *p);
   static void deleteArray_MMuonCalibParCalc(void *p);
   static void destruct_MMuonCalibParCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMuonCalibParCalc*)
   {
      ::MMuonCalibParCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMuonCalibParCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMuonCalibParCalc", ::MMuonCalibParCalc::Class_Version(), "./MMuonCalibParCalc.h", 15,
                  typeid(::MMuonCalibParCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMuonCalibParCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MMuonCalibParCalc) );
      instance.SetNew(&new_MMuonCalibParCalc);
      instance.SetNewArray(&newArray_MMuonCalibParCalc);
      instance.SetDelete(&delete_MMuonCalibParCalc);
      instance.SetDeleteArray(&deleteArray_MMuonCalibParCalc);
      instance.SetDestructor(&destruct_MMuonCalibParCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMuonCalibParCalc*)
   {
      return GenerateInitInstanceLocal((::MMuonCalibParCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMuonCalibParCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHMuonPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHMuonPar(void *p = 0);
   static void *newArray_MHMuonPar(Long_t size, void *p);
   static void delete_MHMuonPar(void *p);
   static void deleteArray_MHMuonPar(void *p);
   static void destruct_MHMuonPar(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHMuonPar*)
   {
      ::MHMuonPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHMuonPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHMuonPar", ::MHMuonPar::Class_Version(), "./MHMuonPar.h", 19,
                  typeid(::MHMuonPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHMuonPar::Dictionary, isa_proxy, 4,
                  sizeof(::MHMuonPar) );
      instance.SetNew(&new_MHMuonPar);
      instance.SetNewArray(&newArray_MHMuonPar);
      instance.SetDelete(&delete_MHMuonPar);
      instance.SetDeleteArray(&deleteArray_MHMuonPar);
      instance.SetDestructor(&destruct_MHMuonPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHMuonPar*)
   {
      return GenerateInitInstanceLocal((::MHMuonPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHMuonPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MMuonSearchPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMuonSearchPar::Class_Name()
{
   return "MMuonSearchPar";
}

//______________________________________________________________________________
const char *MMuonSearchPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMuonSearchPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMuonSearchPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMuonSearchPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMuonSearchParCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMuonSearchParCalc::Class_Name()
{
   return "MMuonSearchParCalc";
}

//______________________________________________________________________________
const char *MMuonSearchParCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchParCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMuonSearchParCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchParCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMuonSearchParCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchParCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMuonSearchParCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSearchParCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMuonCalibPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMuonCalibPar::Class_Name()
{
   return "MMuonCalibPar";
}

//______________________________________________________________________________
const char *MMuonCalibPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMuonCalibPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMuonCalibPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMuonCalibPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMuonSetup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMuonSetup::Class_Name()
{
   return "MMuonSetup";
}

//______________________________________________________________________________
const char *MMuonSetup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSetup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMuonSetup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSetup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMuonSetup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSetup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMuonSetup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonSetup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHSingleMuon::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHSingleMuon::Class_Name()
{
   return "MHSingleMuon";
}

//______________________________________________________________________________
const char *MHSingleMuon::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSingleMuon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHSingleMuon::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSingleMuon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHSingleMuon::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSingleMuon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHSingleMuon::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSingleMuon*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMuonCalibParCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMuonCalibParCalc::Class_Name()
{
   return "MMuonCalibParCalc";
}

//______________________________________________________________________________
const char *MMuonCalibParCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibParCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMuonCalibParCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibParCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMuonCalibParCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibParCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMuonCalibParCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMuonCalibParCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHMuonPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHMuonPar::Class_Name()
{
   return "MHMuonPar";
}

//______________________________________________________________________________
const char *MHMuonPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHMuonPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHMuonPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHMuonPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHMuonPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHMuonPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHMuonPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHMuonPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MMuonSearchPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMuonSearchPar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMuonSearchPar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMuonSearchPar::Class(),this);
   }
}

//______________________________________________________________________________
void MMuonSearchPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMuonSearchPar.
      TClass *R__cl = ::MMuonSearchPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadius", &fRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeviation", &fDeviation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCenterX", &fCenterX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCenterY", &fCenterY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeRms", &fTimeRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignal", &fSignal);
      R__insp.InspectMember(fSignal, "fSignal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.InspectMember(fX, "fX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.InspectMember(fY, "fY.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMuonSearchPar(void *p) {
      return  p ? new(p) ::MMuonSearchPar : new ::MMuonSearchPar;
   }
   static void *newArray_MMuonSearchPar(Long_t nElements, void *p) {
      return p ? new(p) ::MMuonSearchPar[nElements] : new ::MMuonSearchPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMuonSearchPar(void *p) {
      delete ((::MMuonSearchPar*)p);
   }
   static void deleteArray_MMuonSearchPar(void *p) {
      delete [] ((::MMuonSearchPar*)p);
   }
   static void destruct_MMuonSearchPar(void *p) {
      typedef ::MMuonSearchPar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMuonSearchPar

//______________________________________________________________________________
void MMuonCalibPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMuonCalibPar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMuonCalibPar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMuonCalibPar::Class(),this);
   }
}

//______________________________________________________________________________
void MMuonCalibPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMuonCalibPar.
      TClass *R__cl = ::MMuonCalibPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArcPhi", &fArcPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArcWidth", &fArcWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChiArcPhi", &fChiArcPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChiArcWidth", &fChiArcWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMuonSize", &fMuonSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPeakPhi", &fPeakPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRelTimeMean", &fRelTimeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRelTimeSigma", &fRelTimeSigma);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMuonCalibPar(void *p) {
      return  p ? new(p) ::MMuonCalibPar : new ::MMuonCalibPar;
   }
   static void *newArray_MMuonCalibPar(Long_t nElements, void *p) {
      return p ? new(p) ::MMuonCalibPar[nElements] : new ::MMuonCalibPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMuonCalibPar(void *p) {
      delete ((::MMuonCalibPar*)p);
   }
   static void deleteArray_MMuonCalibPar(void *p) {
      delete [] ((::MMuonCalibPar*)p);
   }
   static void destruct_MMuonCalibPar(void *p) {
      typedef ::MMuonCalibPar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMuonCalibPar

//______________________________________________________________________________
void MMuonSetup::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMuonSetup.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMuonSetup::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMuonSetup::Class(),this);
   }
}

//______________________________________________________________________________
void MMuonSetup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMuonSetup.
      TClass *R__cl = ::MMuonSetup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMargin", &fMargin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThresholdArcPhi", &fThresholdArcPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThresholdArcWidth", &fThresholdArcWidth);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMuonSetup(void *p) {
      return  p ? new(p) ::MMuonSetup : new ::MMuonSetup;
   }
   static void *newArray_MMuonSetup(Long_t nElements, void *p) {
      return p ? new(p) ::MMuonSetup[nElements] : new ::MMuonSetup[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMuonSetup(void *p) {
      delete ((::MMuonSetup*)p);
   }
   static void deleteArray_MMuonSetup(void *p) {
      delete [] ((::MMuonSetup*)p);
   }
   static void destruct_MMuonSetup(void *p) {
      typedef ::MMuonSetup current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMuonSetup

//______________________________________________________________________________
void MMuonSearchParCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMuonSearchParCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMuonSearchParCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMuonSearchParCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MMuonSearchParCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMuonSearchParCalc.
      TClass *R__cl = ::MMuonSearchParCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalCam", &fSignalCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHillas", &fHillas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonPar", &fMuonPar);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMuonSearchParCalc(void *p) {
      return  p ? new(p) ::MMuonSearchParCalc : new ::MMuonSearchParCalc;
   }
   static void *newArray_MMuonSearchParCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MMuonSearchParCalc[nElements] : new ::MMuonSearchParCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMuonSearchParCalc(void *p) {
      delete ((::MMuonSearchParCalc*)p);
   }
   static void deleteArray_MMuonSearchParCalc(void *p) {
      delete [] ((::MMuonSearchParCalc*)p);
   }
   static void destruct_MMuonSearchParCalc(void *p) {
      typedef ::MMuonSearchParCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMuonSearchParCalc

//______________________________________________________________________________
void MMuonCalibParCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMuonCalibParCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMuonCalibParCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMuonCalibParCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MMuonCalibParCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMuonCalibParCalc.
      TClass *R__cl = ::MMuonCalibParCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonCalibPar", &fMuonCalibPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonSearchPar", &fMuonSearchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonSetup", &fMuonSetup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHist", &fHist);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMuonCalibParCalc(void *p) {
      return  p ? new(p) ::MMuonCalibParCalc : new ::MMuonCalibParCalc;
   }
   static void *newArray_MMuonCalibParCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MMuonCalibParCalc[nElements] : new ::MMuonCalibParCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMuonCalibParCalc(void *p) {
      delete ((::MMuonCalibParCalc*)p);
   }
   static void deleteArray_MMuonCalibParCalc(void *p) {
      delete [] ((::MMuonCalibParCalc*)p);
   }
   static void destruct_MMuonCalibParCalc(void *p) {
      typedef ::MMuonCalibParCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMuonCalibParCalc

//______________________________________________________________________________
void MHMuonPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHMuonPar.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHMuonPar::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHMuonPar::Class(),this);
   }
}

//______________________________________________________________________________
void MHMuonPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHMuonPar.
      TClass *R__cl = ::MHMuonPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonSearchPar", &fMuonSearchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonCalibPar", &fMuonCalibPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistRadius", &fHistRadius);
      R__insp.InspectMember(fHistRadius, "fHistRadius.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistArcWidth", &fHistArcWidth);
      R__insp.InspectMember(fHistArcWidth, "fHistArcWidth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistBroad", &fHistBroad);
      R__insp.InspectMember(fHistBroad, "fHistBroad.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistSize", &fHistSize);
      R__insp.InspectMember(fHistSize, "fHistSize.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHMuonPar(void *p) {
      return  p ? new(p) ::MHMuonPar : new ::MHMuonPar;
   }
   static void *newArray_MHMuonPar(Long_t nElements, void *p) {
      return p ? new(p) ::MHMuonPar[nElements] : new ::MHMuonPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHMuonPar(void *p) {
      delete ((::MHMuonPar*)p);
   }
   static void deleteArray_MHMuonPar(void *p) {
      delete [] ((::MHMuonPar*)p);
   }
   static void destruct_MHMuonPar(void *p) {
      typedef ::MHMuonPar current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHMuonPar

//______________________________________________________________________________
void MHSingleMuon::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHSingleMuon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHSingleMuon::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHSingleMuon::Class(),this);
   }
}

//______________________________________________________________________________
void MHSingleMuon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHSingleMuon.
      TClass *R__cl = ::MHSingleMuon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalCam", &fSignalCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonSearchPar", &fMuonSearchPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMargin", &fMargin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistPhi", &fHistPhi);
      R__insp.InspectMember(fHistPhi, "fHistPhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistWidth", &fHistWidth);
      R__insp.InspectMember(fHistWidth, "fHistWidth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistTime", &fHistTime);
      R__insp.InspectMember(fHistTime, "fHistTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRelTimeMean", &fRelTimeMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRelTimeSigma", &fRelTimeSigma);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHSingleMuon(void *p) {
      return  p ? new(p) ::MHSingleMuon : new ::MHSingleMuon;
   }
   static void *newArray_MHSingleMuon(Long_t nElements, void *p) {
      return p ? new(p) ::MHSingleMuon[nElements] : new ::MHSingleMuon[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHSingleMuon(void *p) {
      delete ((::MHSingleMuon*)p);
   }
   static void deleteArray_MHSingleMuon(void *p) {
      delete [] ((::MHSingleMuon*)p);
   }
   static void destruct_MHSingleMuon(void *p) {
      typedef ::MHSingleMuon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHSingleMuon

/********************************************************
* MuonCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMuonCint();

extern "C" void G__set_cpp_environmentMuonCint() {
  G__cpp_reset_tagtableMuonCint();
}
#include <new>
extern "C" int G__cpp_dllrevMuonCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MMuonSearchPar */
static int G__MuonCint_177_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSearchPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSearchPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMuonSearchPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSearchPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMuonSearchPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSearchPar[n];
       } else {
         p = new((void*) gvp) MMuonSearchPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSearchPar;
       } else {
         p = new((void*) gvp) MMuonSearchPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetDeviation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSearchPar*) G__getstructoffset())->GetTimeRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSearchPar*) G__getstructoffset())->CalcMinimumDeviation(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(Double_t*) G__Doubleref(&libp->para[4]), *(Double_t*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSearchPar*) G__getstructoffset())->Calc(*(MGeomCam*) libp->para[0].ref, *(MSignalCam*) libp->para[1].ref
, *(MHillas*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((const MMuonSearchPar*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref, (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const MMuonSearchPar*) G__getstructoffset())->Print(*(MGeomCam*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMuonSearchPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMuonSearchPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMuonSearchPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSearchPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSearchPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_177_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSearchPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_177_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMuonSearchPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMuonSearchPar(*(MMuonSearchPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMuonSearchPar G__TMMuonSearchPar;
static int G__MuonCint_177_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMuonSearchPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMuonSearchPar*) (soff+(sizeof(MMuonSearchPar)*i)))->~G__TMMuonSearchPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMuonSearchPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMuonSearchPar*) (soff))->~G__TMMuonSearchPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MuonCint_177_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSearchPar* dest = (MMuonSearchPar*) G__getstructoffset();
   *dest = *(MMuonSearchPar*) libp->para[0].ref;
   const MMuonSearchPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMuonSearchParCalc */
static int G__MuonCint_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSearchParCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSearchParCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMuonSearchParCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSearchParCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMuonSearchParCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSearchParCalc[n];
       } else {
         p = new((void*) gvp) MMuonSearchParCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSearchParCalc;
       } else {
         p = new((void*) gvp) MMuonSearchParCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMuonSearchParCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchParCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMuonSearchParCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMuonSearchParCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSearchParCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchParCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSearchParCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSearchParCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSearchParCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMuonSearchParCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMuonSearchParCalc(*(MMuonSearchParCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMuonSearchParCalc G__TMMuonSearchParCalc;
static int G__MuonCint_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMuonSearchParCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMuonSearchParCalc*) (soff+(sizeof(MMuonSearchParCalc)*i)))->~G__TMMuonSearchParCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMuonSearchParCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMuonSearchParCalc*) (soff))->~G__TMMuonSearchParCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MuonCint_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSearchParCalc* dest = (MMuonSearchParCalc*) G__getstructoffset();
   *dest = *(MMuonSearchParCalc*) libp->para[0].ref;
   const MMuonSearchParCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMuonCalibPar */
static int G__MuonCint_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonCalibPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonCalibPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMuonCalibPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonCalibPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMuonCalibPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonCalibPar[n];
       } else {
         p = new((void*) gvp) MMuonCalibPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonCalibPar;
       } else {
         p = new((void*) gvp) MMuonCalibPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetArcPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetArcWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetChiArcPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetChiArcWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetMuonSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetPeakPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetRelTimeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonCalibPar*) G__getstructoffset())->GetRelTimeSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetArcPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetArcWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetChiArcPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetChiArcWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetMuonSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetPeakPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->SetTime((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMuonCalibPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMuonCalibPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMuonCalibPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonCalibPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_215_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonCalibPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_215_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMuonCalibPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMuonCalibPar(*(MMuonCalibPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMuonCalibPar G__TMMuonCalibPar;
static int G__MuonCint_215_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMuonCalibPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMuonCalibPar*) (soff+(sizeof(MMuonCalibPar)*i)))->~G__TMMuonCalibPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMuonCalibPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMuonCalibPar*) (soff))->~G__TMMuonCalibPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MuonCint_215_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonCalibPar* dest = (MMuonCalibPar*) G__getstructoffset();
   *dest = *(MMuonCalibPar*) libp->para[0].ref;
   const MMuonCalibPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMuonSetup */
static int G__MuonCint_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSetup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSetup((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMuonSetup((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonSetup((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMuonSetup((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSetup[n];
       } else {
         p = new((void*) gvp) MMuonSetup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonSetup;
       } else {
         p = new((void*) gvp) MMuonSetup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSetup*) G__getstructoffset())->GetMargin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSetup*) G__getstructoffset())->GetThresholdArcPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMuonSetup*) G__getstructoffset())->GetThresholdArcWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSetup*) G__getstructoffset())->SetMargin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSetup*) G__getstructoffset())->SetThresholdArcPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSetup*) G__getstructoffset())->SetThresholdArcWidth((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMuonSetup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSetup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMuonSetup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMuonSetup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonSetup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSetup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSetup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonSetup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonSetup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMuonSetup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMuonSetup(*(MMuonSetup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMuonSetup G__TMMuonSetup;
static int G__MuonCint_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMuonSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMuonSetup*) (soff+(sizeof(MMuonSetup)*i)))->~G__TMMuonSetup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMuonSetup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMuonSetup*) (soff))->~G__TMMuonSetup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MuonCint_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonSetup* dest = (MMuonSetup*) G__getstructoffset();
   *dest = *(MMuonSetup*) libp->para[0].ref;
   const MMuonSetup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHSingleMuon */
static int G__MuonCint_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHSingleMuon* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSingleMuon((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHSingleMuon((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSingleMuon((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHSingleMuon((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSingleMuon[n];
       } else {
         p = new((void*) gvp) MHSingleMuon[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSingleMuon;
       } else {
         p = new((void*) gvp) MHSingleMuon;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MHSingleMuon*) G__getstructoffset())->CalcPhi((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHSingleMuon*) G__getstructoffset())->CalcWidth((Double_t) G__double(libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TProfile& obj = ((const MHSingleMuon*) G__getstructoffset())->GetHistPhi();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((const MHSingleMuon*) G__getstructoffset())->GetHistTime();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TProfile& obj = ((const MHSingleMuon*) G__getstructoffset())->GetHistWidth();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHSingleMuon*) G__getstructoffset())->GetRelTimeMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHSingleMuon*) G__getstructoffset())->GetRelTimeSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MHSingleMuon*) G__getstructoffset())->CalcSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHSingleMuon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSingleMuon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHSingleMuon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHSingleMuon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSingleMuon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSingleMuon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSingleMuon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSingleMuon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_217_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSingleMuon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_217_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHSingleMuon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHSingleMuon(*(MHSingleMuon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHSingleMuon G__TMHSingleMuon;
static int G__MuonCint_217_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHSingleMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHSingleMuon*) (soff+(sizeof(MHSingleMuon)*i)))->~G__TMHSingleMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHSingleMuon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHSingleMuon*) (soff))->~G__TMHSingleMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMuonCalibParCalc */
static int G__MuonCint_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonCalibParCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonCalibParCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMuonCalibParCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMuonCalibParCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMuonCalibParCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonCalibParCalc[n];
       } else {
         p = new((void*) gvp) MMuonCalibParCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMuonCalibParCalc;
       } else {
         p = new((void*) gvp) MMuonCalibParCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMuonCalibParCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibParCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMuonCalibParCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMuonCalibParCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMuonCalibParCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibParCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonCalibParCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMuonCalibParCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMuonCalibParCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_218_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMuonCalibParCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMuonCalibParCalc(*(MMuonCalibParCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMuonCalibParCalc G__TMMuonCalibParCalc;
static int G__MuonCint_218_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMuonCalibParCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMuonCalibParCalc*) (soff+(sizeof(MMuonCalibParCalc)*i)))->~G__TMMuonCalibParCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMuonCalibParCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMuonCalibParCalc*) (soff))->~G__TMMuonCalibParCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MuonCint_218_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMuonCalibParCalc* dest = (MMuonCalibParCalc*) G__getstructoffset();
   *dest = *(MMuonCalibParCalc*) libp->para[0].ref;
   const MMuonCalibParCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHMuonPar */
static int G__MuonCint_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHMuonPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMuonPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHMuonPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHMuonPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHMuonPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHMuonPar[n];
       } else {
         p = new((void*) gvp) MHMuonPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHMuonPar;
       } else {
         p = new((void*) gvp) MHMuonPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((const MHMuonPar*) G__getstructoffset())->GetHistRadius();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((const MHMuonPar*) G__getstructoffset())->GetHistArcWidth();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TProfile& obj = ((const MHMuonPar*) G__getstructoffset())->GetHistBroad();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TProfile& obj = ((const MHMuonPar*) G__getstructoffset())->GetHistSize();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHMuonPar*) G__getstructoffset())->GetMeanSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHMuonPar*) G__getstructoffset())->GetMeanWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MHMuonPar*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHMuonPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMuonPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHMuonPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHMuonPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHMuonPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMuonPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHMuonPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHMuonPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MuonCint_241_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHMuonPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MuonCint_241_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHMuonPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHMuonPar(*(MHMuonPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHMuonPar G__TMHMuonPar;
static int G__MuonCint_241_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHMuonPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHMuonPar*) (soff+(sizeof(MHMuonPar)*i)))->~G__TMHMuonPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHMuonPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHMuonPar*) (soff))->~G__TMHMuonPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MMuonSearchPar */

/* MMuonSearchParCalc */

/* MMuonCalibPar */

/* MMuonSetup */

/* MHSingleMuon */

/* MMuonCalibParCalc */

/* MHMuonPar */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMuonCint {
 public:
  G__Sizep2memfuncMuonCint(): p(&G__Sizep2memfuncMuonCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMuonCint::*p)();
};

size_t G__get_sizep2memfuncMuonCint()
{
  G__Sizep2memfuncMuonCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMuonCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar))) {
     MMuonSearchPar *G__Lderived;
     G__Lderived=(MMuonSearchPar*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc))) {
     MMuonSearchParCalc *G__Lderived;
     G__Lderived=(MMuonSearchParCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc),G__get_linked_tagnum(&G__MuonCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc),G__get_linked_tagnum(&G__MuonCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar))) {
     MMuonCalibPar *G__Lderived;
     G__Lderived=(MMuonCalibPar*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup))) {
     MMuonSetup *G__Lderived;
     G__Lderived=(MMuonSetup*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon))) {
     MHSingleMuon *G__Lderived;
     G__Lderived=(MHSingleMuon*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon),G__get_linked_tagnum(&G__MuonCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc))) {
     MMuonCalibParCalc *G__Lderived;
     G__Lderived=(MMuonCalibParCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc),G__get_linked_tagnum(&G__MuonCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc),G__get_linked_tagnum(&G__MuonCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MH))) {
     MH *G__Lderived;
     G__Lderived=(MH*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MH),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MH),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar))) {
     MHMuonPar *G__Lderived;
     G__Lderived=(MHMuonPar*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar),G__get_linked_tagnum(&G__MuonCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar),G__get_linked_tagnum(&G__MuonCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar),G__get_linked_tagnum(&G__MuonCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMuonCint() {

   /* Setting up typedef entry */
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Stat_t",100,-1,0,-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MuonCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MuonCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MuonCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MuonCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MuonCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MuonCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MuonCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MuonCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MMuonSearchPar */
static void G__setup_memvarMMuonSearchPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar));
   { MMuonSearchPar *p; p=(MMuonSearchPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRadius=",0,"An estimated radius of the muon ring [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDeviation=",0,"The standard deviation from the estimated ring [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCenterX=",0,"An estimated center position in X of the muon ring [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCenterY=",0,"An estimated center position in Y of the muon ring [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime=",0,"Mean arrival time of core pixels");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeRms=",0,"Rms of arrival time of core pixels");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_MArrayF),-1,-1,4,"fSignal=",0,"! Temporary storage for signal");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_MArrayF),-1,-1,4,"fX=",0,"! Temporary storage for pixels X-position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_MArrayF),-1,-1,4,"fY=",0,"! Temporary storage for pixels Y-position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMuonSearchParCalc */
static void G__setup_memvarMMuonSearchParCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc));
   { MMuonSearchParCalc *p; p=(MMuonSearchParCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MSignalCam),-1,-1,4,"fSignalCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MHillas),-1,-1,4,"fHillas=",0,"! Pointer to the source independent hillas parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),-1,-1,4,"fMuonPar=",0,"! Pointer to the output container for the new image parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMuonCalibPar */
static void G__setup_memvarMMuonCalibPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar));
   { MMuonCalibPar *p; p=(MMuonCalibPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArcPhi=",0,"A opening angle of a muon arc [deg.]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fArcWidth=",0,"A width of a muon [deg.] (1 sigma of gaussian fit)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChiArcPhi=",0,"A chisquare value of the cosine fit for arc phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChiArcWidth=",0,"A chisquare value of the cosine fit for arc wid");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMuonSize=",0,"A SIZE of muon which is defined as a SIZE around the estimated circle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPeakPhi=",0,"The angle which indicates the peak position in the estimated circle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRelTimeMean=",0,"[ns] Result of the gaus fit to the arrival time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRelTimeSigma=",0,"[ns] Result of the gaus fit to the arrival time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMuonSetup */
static void G__setup_memvarMMuonSetup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup));
   { MMuonSetup *p; p=(MMuonSetup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMargin=",0,"[deg] margin to evaluate muons. The defaut value is 0.2 deg (60mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThresholdArcPhi=",0,"[phe] The threshold value to define ArcPhi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThresholdArcWidth=",0,"[phe] The threshold value to define ArcWidth");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHSingleMuon */
static void G__setup_memvarMHSingleMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon));
   { MHSingleMuon *p; p=(MHSingleMuon*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MSignalCam),-1,-1,4,"fSignalCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),-1,-1,4,"fMuonSearchPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMargin=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TProfile),-1,-1,4,"fHistPhi=",0,"Histogram of photon distribution along the arc.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TProfile),-1,-1,4,"fHistWidth=",0,"Histogram of radial photon distribution of the arc.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TH1F),-1,-1,4,"fHistTime=",0,"Histogram of arrival time distribution along the arc.");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRelTimeMean=",0,"Result of the gaus fit to the arrival time");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRelTimeSigma=",0,"Result of the gaus fit to the arrival time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMuonCalibParCalc */
static void G__setup_memvarMMuonCalibParCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc));
   { MMuonCalibParCalc *p; p=(MMuonCalibParCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar),-1,-1,4,"fMuonCalibPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),-1,-1,4,"fMuonSearchPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup),-1,-1,4,"fMuonSetup=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon),-1,-1,4,"fHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHMuonPar */
static void G__setup_memvarMHMuonPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar));
   { MHMuonPar *p; p=(MHMuonPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgIntegralLoLim=",0,"lower limit of integral");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"fgIntegralUpLim=",0,"upper limit of integral");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar),-1,-1,4,"fMuonSearchPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar),-1,-1,4,"fMuonCalibPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_MGeomCam),-1,-1,4,"fGeom=",0,"! Conversion mm to deg");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TH1F),-1,-1,4,"fHistRadius=",0,"Radius");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TH1F),-1,-1,4,"fHistArcWidth=",0,"ArcWidth");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TProfile),-1,-1,4,"fHistBroad=",0,"ArcWidth/Radius Vs Radius");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MuonCintLN_TProfile),-1,-1,4,"fHistSize=",0,"MuonSize Vs Radius");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MuonCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMuonCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMMuonSearchPar(void) {
   /* MMuonSearchPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar));
   G__memfunc_setup("fcn",311,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 3, 4, 0, 
"i - 'Int_t' 1 - npar D - 'Double_t' 0 - gin "
"d - 'Double_t' 1 - f D - 'Double_t' 0 - par "
"i - 'Int_t' 0 - iflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fcn",279,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMuonSearchPar",1381,G__MuonCint_177_0_3, 105, G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRadius",904,G__MuonCint_177_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeviation",1219,G__MuonCint_177_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterX",985,G__MuonCint_177_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCenterY",986,G__MuonCint_177_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDist",692,G__MuonCint_177_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__MuonCint_177_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeRms",993,G__MuonCint_177_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcMinimumDeviation",2034,G__MuonCint_177_0_12, 121, -1, -1, 0, 6, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - evt "
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - sigma d - 'Double_t' 1 - rad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calc",371,G__MuonCint_177_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MGeomCam' - 11 - geom u 'MSignalCam' - 11 - evt "
"u 'MHillas' - 11 - hillas", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__MuonCint_177_0_16, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'MGeomCam' - 11 - geom C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MuonCint_177_0_17, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMuonSearchPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_177_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_177_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMuonSearchPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_177_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMuonSearchPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_177_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_177_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_177_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSearchPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_177_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_177_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSearchPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMuonSearchPar", 1381, G__MuonCint_177_0_29, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar), -1, 0, 1, 1, 1, 0, "u 'MMuonSearchPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMuonSearchPar", 1507, G__MuonCint_177_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MuonCint_177_0_31, (int) ('u'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchPar), -1, 1, 1, 1, 1, 0, "u 'MMuonSearchPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMuonSearchParCalc(void) {
   /* MMuonSearchParCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMuonSearchParCalc",1752,G__MuonCint_184_0_3, 105, G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MuonCint_184_0_4, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMuonSearchParCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_184_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchParCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_184_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMuonSearchParCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_184_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMuonSearchParCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_184_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_184_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchParCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_184_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSearchParCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_184_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSearchParCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_184_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSearchParCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMuonSearchParCalc", 1752, G__MuonCint_184_0_16, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc), -1, 0, 1, 1, 1, 0, "u 'MMuonSearchParCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMuonSearchParCalc", 1878, G__MuonCint_184_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MuonCint_184_0_18, (int) ('u'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSearchParCalc), -1, 1, 1, 1, 1, 0, "u 'MMuonSearchParCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMuonCalibPar(void) {
   /* MMuonCalibPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar));
   G__memfunc_setup("MMuonCalibPar",1258,G__MuonCint_215_0_1, 105, G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetArcPhi",855,G__MuonCint_215_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArcWidth",1078,G__MuonCint_215_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChiArcPhi",1131,G__MuonCint_215_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChiArcWidth",1354,G__MuonCint_215_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMuonSize",1114,G__MuonCint_215_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPeakPhi",962,G__MuonCint_215_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRelTimeMean",1363,G__MuonCint_215_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRelTimeSigma",1475,G__MuonCint_215_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArcPhi",867,G__MuonCint_215_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetArcWidth",1090,G__MuonCint_215_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - wid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChiArcPhi",1143,G__MuonCint_215_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChiArcWidth",1366,G__MuonCint_215_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - chi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMuonSize",1126,G__MuonCint_215_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPeakPhi",974,G__MuonCint_215_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTime",699,G__MuonCint_215_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - mean f - 'Float_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MuonCint_215_0_19, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMuonCalibPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_215_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_215_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMuonCalibPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_215_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMuonCalibPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_215_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_215_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_215_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonCalibPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_215_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_215_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonCalibPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMuonCalibPar", 1258, G__MuonCint_215_0_31, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar), -1, 0, 1, 1, 1, 0, "u 'MMuonCalibPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMuonCalibPar", 1384, G__MuonCint_215_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MuonCint_215_0_33, (int) ('u'), G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibPar), -1, 1, 1, 1, 1, 0, "u 'MMuonCalibPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMuonSetup(void) {
   /* MMuonSetup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMuonSetup",1021,G__MuonCint_216_0_2, 105, G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMargin",894,G__MuonCint_216_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdArcPhi",1796,G__MuonCint_216_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetThresholdArcWidth",2019,G__MuonCint_216_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMargin",906,G__MuonCint_216_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - margin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThresholdArcPhi",1808,G__MuonCint_216_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThresholdArcWidth",2031,G__MuonCint_216_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - thres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MuonCint_216_0_9, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMuonSetup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_216_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSetup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_216_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMuonSetup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_216_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMuonSetup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_216_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_216_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSetup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_216_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSetup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_216_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonSetup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_216_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonSetup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMuonSetup", 1021, G__MuonCint_216_0_21, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup), -1, 0, 1, 1, 1, 0, "u 'MMuonSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMuonSetup", 1147, G__MuonCint_216_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MuonCint_216_0_23, (int) ('u'), G__get_linked_tagnum(&G__MuonCintLN_MMuonSetup), -1, 1, 1, 1, 1, 0, "u 'MMuonSetup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHSingleMuon(void) {
   /* MHSingleMuon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon));
   G__memfunc_setup("FindRangeAboveThreshold",2312,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 8, 
"u 'TProfile' - 11 - h f - 'Float_t' 0 - thres "
"i - 'Int_t' 1 - first i - 'Int_t' 1 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHSingleMuon",1174,G__MuonCint_217_0_2, 105, G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcPhi",660,G__MuonCint_217_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcWidth",883,G__MuonCint_217_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 1 - - "
"d - 'Double_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistPhi",985,G__MuonCint_217_0_7, 117, G__get_linked_tagnum(&G__MuonCintLN_TProfile), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistTime",1095,G__MuonCint_217_0_8, 117, G__get_linked_tagnum(&G__MuonCintLN_TH1F), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistWidth",1208,G__MuonCint_217_0_9, 117, G__get_linked_tagnum(&G__MuonCintLN_TProfile), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRelTimeMean",1363,G__MuonCint_217_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRelTimeSigma",1475,G__MuonCint_217_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcSize",782,G__MuonCint_217_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MuonCint_217_0_15, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHSingleMuon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_217_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSingleMuon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_217_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHSingleMuon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_217_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHSingleMuon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_217_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_217_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSingleMuon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_217_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSingleMuon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_217_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSingleMuon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_217_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSingleMuon::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHSingleMuon", 1174, G__MuonCint_217_0_27, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MHSingleMuon), -1, 0, 1, 1, 1, 0, "u 'MHSingleMuon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHSingleMuon", 1300, G__MuonCint_217_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMuonCalibParCalc(void) {
   /* MMuonCalibParCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillHist",799,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcPhi",660,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcImpact",977,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - effbinnum f - 'Float_t' 0 - startfitval "
"f - 'Float_t' 0 - endfitval", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcWidth",883,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMuonCalibParCalc",1629,G__MuonCint_218_0_7, 105, G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MuonCint_218_0_8, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMuonCalibParCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_218_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibParCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_218_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMuonCalibParCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_218_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMuonCalibParCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_218_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_218_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibParCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_218_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonCalibParCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_218_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMuonCalibParCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_218_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMuonCalibParCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMuonCalibParCalc", 1629, G__MuonCint_218_0_20, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc), -1, 0, 1, 1, 1, 0, "u 'MMuonCalibParCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMuonCalibParCalc", 1755, G__MuonCint_218_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MuonCint_218_0_22, (int) ('u'), G__get_linked_tagnum(&G__MuonCintLN_MMuonCalibParCalc), -1, 1, 1, 1, 1, 0, "u 'MMuonCalibParCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHMuonPar(void) {
   /* MHMuonPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar));
   G__memfunc_setup("Integral",822,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 8, 
"u 'TProfile' - 11 - p f - 'Float_t' 0 'fgIntegralLoLim' a "
"f - 'Float_t' 0 'fgIntegralUpLim' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHMuonPar",855,G__MuonCint_241_0_2, 105, G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistRadius",1312,G__MuonCint_241_0_5, 117, G__get_linked_tagnum(&G__MuonCintLN_TH1F), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistArcWidth",1486,G__MuonCint_241_0_6, 117, G__get_linked_tagnum(&G__MuonCintLN_TH1F), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistBroad",1184,G__MuonCint_241_0_7, 117, G__get_linked_tagnum(&G__MuonCintLN_TProfile), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistSize",1107,G__MuonCint_241_0_8, 117, G__get_linked_tagnum(&G__MuonCintLN_TProfile), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanSize",1084,G__MuonCint_241_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMeanWidth",1185,G__MuonCint_241_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__MuonCint_241_0_11, 100, -1, G__defined_typename("Stat_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MuonCint_241_0_14, 85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHMuonPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MuonCint_241_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMuonPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MuonCint_241_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHMuonPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MuonCint_241_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHMuonPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MuonCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MuonCint_241_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MuonCint_241_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMuonPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MuonCint_241_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHMuonPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MuonCint_241_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHMuonPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MuonCint_241_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHMuonPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHMuonPar", 855, G__MuonCint_241_0_26, (int) ('i'), G__get_linked_tagnum(&G__MuonCintLN_MHMuonPar), -1, 0, 1, 1, 1, 0, "u 'MHMuonPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHMuonPar", 981, G__MuonCint_241_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMuonCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMuonCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMuonCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MuonCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MuonCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MHillas = { "MHillas" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MMuonSearchPar = { "MMuonSearchPar" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MMuonSearchParCalc = { "MMuonSearchParCalc" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MMuonCalibPar = { "MMuonCalibPar" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MMuonSetup = { "MMuonSetup" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MHSingleMuon = { "MHSingleMuon" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MMuonCalibParCalc = { "MMuonCalibParCalc" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__MuonCintLN_MHMuonPar = { "MHMuonPar" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMuonCint() {
  G__MuonCintLN_TClass.tagnum = -1 ;
  G__MuonCintLN_TBuffer.tagnum = -1 ;
  G__MuonCintLN_TMemberInspector.tagnum = -1 ;
  G__MuonCintLN_TObject.tagnum = -1 ;
  G__MuonCintLN_TString.tagnum = -1 ;
  G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MuonCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MuonCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MuonCintLN_TEnv.tagnum = -1 ;
  G__MuonCintLN_MParContainer.tagnum = -1 ;
  G__MuonCintLN_MArrayF.tagnum = -1 ;
  G__MuonCintLN_MHillas.tagnum = -1 ;
  G__MuonCintLN_MGeomCam.tagnum = -1 ;
  G__MuonCintLN_MSignalCam.tagnum = -1 ;
  G__MuonCintLN_MMuonSearchPar.tagnum = -1 ;
  G__MuonCintLN_MInputStreamID.tagnum = -1 ;
  G__MuonCintLN_MParList.tagnum = -1 ;
  G__MuonCintLN_MTask.tagnum = -1 ;
  G__MuonCintLN_MMuonSearchParCalc.tagnum = -1 ;
  G__MuonCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MuonCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MuonCintLN_TH1F.tagnum = -1 ;
  G__MuonCintLN_MMuonCalibPar.tagnum = -1 ;
  G__MuonCintLN_MMuonSetup.tagnum = -1 ;
  G__MuonCintLN_MHSingleMuon.tagnum = -1 ;
  G__MuonCintLN_MMuonCalibParCalc.tagnum = -1 ;
  G__MuonCintLN_TProfile.tagnum = -1 ;
  G__MuonCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MuonCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MuonCintLN_MH.tagnum = -1 ;
  G__MuonCintLN_MHMuonPar.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMuonCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MHillas);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MSignalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MMuonSearchPar),sizeof(MMuonSearchPar),-1,323840,"Container to hold muon search parameters",G__setup_memvarMMuonSearchPar,G__setup_memfuncMMuonSearchPar);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MTask);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MMuonSearchParCalc),sizeof(MMuonSearchParCalc),-1,323840,"task to calculate muon parameters",G__setup_memvarMMuonSearchParCalc,G__setup_memfuncMMuonSearchParCalc);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MMuonCalibPar),sizeof(MMuonCalibPar),-1,323840,"Container to hold muon calibration parameters",G__setup_memvarMMuonCalibPar,G__setup_memfuncMMuonCalibPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MMuonSetup),sizeof(MMuonSetup),-1,323840,"Container to hold setup for muon analysis",G__setup_memvarMMuonSetup,G__setup_memfuncMMuonSetup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MHSingleMuon),sizeof(MHSingleMuon),-1,323840,(char*)NULL,G__setup_memvarMHSingleMuon,G__setup_memfuncMHSingleMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MMuonCalibParCalc),sizeof(MMuonCalibParCalc),-1,323840,"task to calculate muon parameters",G__setup_memvarMMuonCalibParCalc,G__setup_memfuncMMuonCalibParCalc);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TProfile);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MuonCintLN_MH);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MuonCintLN_MHMuonPar),sizeof(MHMuonPar),-1,323840,(char*)NULL,G__setup_memvarMHMuonPar,G__setup_memfuncMHMuonPar);
}
extern "C" void G__cpp_setupMuonCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMuonCint()");
  G__set_cpp_environmentMuonCint();
  G__cpp_setup_tagtableMuonCint();

  G__cpp_setup_inheritanceMuonCint();

  G__cpp_setup_typetableMuonCint();

  G__cpp_setup_memvarMuonCint();

  G__cpp_setup_memfuncMuonCint();
  G__cpp_setup_globalMuonCint();
  G__cpp_setup_funcMuonCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMuonCint();
  return;
}
class G__cpp_setup_initMuonCint {
  public:
    G__cpp_setup_initMuonCint() { G__add_setup_func("MuonCint",(G__incsetup)(&G__cpp_setupMuonCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMuonCint() { G__remove_setup_func("MuonCint"); }
};
G__cpp_setup_initMuonCint G__cpp_setup_initializerMuonCint;

