//
// File generated by rootcint at Mon Nov 28 11:07:49 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME ToolsCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ToolsCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MChisqEval_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MChisqEval(void *p = 0);
   static void *newArray_MChisqEval(Long_t size, void *p);
   static void delete_MChisqEval(void *p);
   static void deleteArray_MChisqEval(void *p);
   static void destruct_MChisqEval(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MChisqEval*)
   {
      ::MChisqEval *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MChisqEval >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MChisqEval", ::MChisqEval::Class_Version(), "./MChisqEval.h", 12,
                  typeid(::MChisqEval), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MChisqEval::Dictionary, isa_proxy, 4,
                  sizeof(::MChisqEval) );
      instance.SetNew(&new_MChisqEval);
      instance.SetNewArray(&newArray_MChisqEval);
      instance.SetDelete(&delete_MChisqEval);
      instance.SetDeleteArray(&deleteArray_MChisqEval);
      instance.SetDestructor(&destruct_MChisqEval);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MChisqEval*)
   {
      return GenerateInitInstanceLocal((::MChisqEval*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MChisqEval*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MTFillMatrix_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MTFillMatrix(void *p = 0);
   static void *newArray_MTFillMatrix(Long_t size, void *p);
   static void delete_MTFillMatrix(void *p);
   static void deleteArray_MTFillMatrix(void *p);
   static void destruct_MTFillMatrix(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MTFillMatrix*)
   {
      ::MTFillMatrix *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MTFillMatrix >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MTFillMatrix", ::MTFillMatrix::Class_Version(), "./MTFillMatrix.h", 18,
                  typeid(::MTFillMatrix), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MTFillMatrix::Dictionary, isa_proxy, 4,
                  sizeof(::MTFillMatrix) );
      instance.SetNew(&new_MTFillMatrix);
      instance.SetNewArray(&newArray_MTFillMatrix);
      instance.SetDelete(&delete_MTFillMatrix);
      instance.SetDeleteArray(&deleteArray_MTFillMatrix);
      instance.SetDestructor(&destruct_MTFillMatrix);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MTFillMatrix*)
   {
      return GenerateInitInstanceLocal((::MTFillMatrix*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MTFillMatrix*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHSimulatedAnnealing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHSimulatedAnnealing(void *p = 0);
   static void *newArray_MHSimulatedAnnealing(Long_t size, void *p);
   static void delete_MHSimulatedAnnealing(void *p);
   static void deleteArray_MHSimulatedAnnealing(void *p);
   static void destruct_MHSimulatedAnnealing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHSimulatedAnnealing*)
   {
      ::MHSimulatedAnnealing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHSimulatedAnnealing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHSimulatedAnnealing", ::MHSimulatedAnnealing::Class_Version(), "./MHSimulatedAnnealing.h", 26,
                  typeid(::MHSimulatedAnnealing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHSimulatedAnnealing::Dictionary, isa_proxy, 4,
                  sizeof(::MHSimulatedAnnealing) );
      instance.SetNew(&new_MHSimulatedAnnealing);
      instance.SetNewArray(&newArray_MHSimulatedAnnealing);
      instance.SetDelete(&delete_MHSimulatedAnnealing);
      instance.SetDeleteArray(&deleteArray_MHSimulatedAnnealing);
      instance.SetDestructor(&destruct_MHSimulatedAnnealing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHSimulatedAnnealing*)
   {
      return GenerateInitInstanceLocal((::MHSimulatedAnnealing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHSimulatedAnnealing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSimulatedAnnealing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSimulatedAnnealing(void *p = 0);
   static void *newArray_MSimulatedAnnealing(Long_t size, void *p);
   static void delete_MSimulatedAnnealing(void *p);
   static void deleteArray_MSimulatedAnnealing(void *p);
   static void destruct_MSimulatedAnnealing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSimulatedAnnealing*)
   {
      ::MSimulatedAnnealing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSimulatedAnnealing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSimulatedAnnealing", ::MSimulatedAnnealing::Class_Version(), "./MSimulatedAnnealing.h", 20,
                  typeid(::MSimulatedAnnealing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSimulatedAnnealing::Dictionary, isa_proxy, 4,
                  sizeof(::MSimulatedAnnealing) );
      instance.SetNew(&new_MSimulatedAnnealing);
      instance.SetNewArray(&newArray_MSimulatedAnnealing);
      instance.SetDelete(&delete_MSimulatedAnnealing);
      instance.SetDeleteArray(&deleteArray_MSimulatedAnnealing);
      instance.SetDestructor(&destruct_MSimulatedAnnealing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSimulatedAnnealing*)
   {
      return GenerateInitInstanceLocal((::MSimulatedAnnealing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSimulatedAnnealing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MFFT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MFFT(void *p = 0);
   static void *newArray_MFFT(Long_t size, void *p);
   static void delete_MFFT(void *p);
   static void deleteArray_MFFT(void *p);
   static void destruct_MFFT(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MFFT*)
   {
      ::MFFT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MFFT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MFFT", ::MFFT::Class_Version(), "./MFFT.h", 28,
                  typeid(::MFFT), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MFFT::Dictionary, isa_proxy, 4,
                  sizeof(::MFFT) );
      instance.SetNew(&new_MFFT);
      instance.SetNewArray(&newArray_MFFT);
      instance.SetDelete(&delete_MFFT);
      instance.SetDeleteArray(&deleteArray_MFFT);
      instance.SetDestructor(&destruct_MFFT);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MFFT*)
   {
      return GenerateInitInstanceLocal((::MFFT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MFFT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCubicCoeff_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCubicCoeff(void *p = 0);
   static void *newArray_MCubicCoeff(Long_t size, void *p);
   static void delete_MCubicCoeff(void *p);
   static void deleteArray_MCubicCoeff(void *p);
   static void destruct_MCubicCoeff(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCubicCoeff*)
   {
      ::MCubicCoeff *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCubicCoeff >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCubicCoeff", ::MCubicCoeff::Class_Version(), "./MCubicCoeff.h", 9,
                  typeid(::MCubicCoeff), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCubicCoeff::Dictionary, isa_proxy, 4,
                  sizeof(::MCubicCoeff) );
      instance.SetNew(&new_MCubicCoeff);
      instance.SetNewArray(&newArray_MCubicCoeff);
      instance.SetDelete(&delete_MCubicCoeff);
      instance.SetDeleteArray(&deleteArray_MCubicCoeff);
      instance.SetDestructor(&destruct_MCubicCoeff);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCubicCoeff*)
   {
      return GenerateInitInstanceLocal((::MCubicCoeff*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCubicCoeff*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCubicSpline_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MCubicSpline(void *p);
   static void deleteArray_MCubicSpline(void *p);
   static void destruct_MCubicSpline(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCubicSpline*)
   {
      ::MCubicSpline *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCubicSpline >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCubicSpline", ::MCubicSpline::Class_Version(), "./MCubicSpline.h", 15,
                  typeid(::MCubicSpline), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCubicSpline::Dictionary, isa_proxy, 4,
                  sizeof(::MCubicSpline) );
      instance.SetDelete(&delete_MCubicSpline);
      instance.SetDeleteArray(&deleteArray_MCubicSpline);
      instance.SetDestructor(&destruct_MCubicSpline);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCubicSpline*)
   {
      return GenerateInitInstanceLocal((::MCubicSpline*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCubicSpline*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MagicReversi_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MagicReversi(void *p = 0);
   static void *newArray_MagicReversi(Long_t size, void *p);
   static void delete_MagicReversi(void *p);
   static void deleteArray_MagicReversi(void *p);
   static void destruct_MagicReversi(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MagicReversi*)
   {
      ::MagicReversi *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MagicReversi >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MagicReversi", ::MagicReversi::Class_Version(), "./MagicReversi.h", 22,
                  typeid(::MagicReversi), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MagicReversi::Dictionary, isa_proxy, 4,
                  sizeof(::MagicReversi) );
      instance.SetNew(&new_MagicReversi);
      instance.SetNewArray(&newArray_MagicReversi);
      instance.SetDelete(&delete_MagicReversi);
      instance.SetDeleteArray(&deleteArray_MagicReversi);
      instance.SetDestructor(&destruct_MagicReversi);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MagicReversi*)
   {
      return GenerateInitInstanceLocal((::MagicReversi*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MagicReversi*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MagicSnake_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MagicSnake(void *p = 0);
   static void *newArray_MagicSnake(Long_t size, void *p);
   static void delete_MagicSnake(void *p);
   static void deleteArray_MagicSnake(void *p);
   static void destruct_MagicSnake(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MagicSnake*)
   {
      ::MagicSnake *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MagicSnake >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MagicSnake", ::MagicSnake::Class_Version(), "./MagicSnake.h", 28,
                  typeid(::MagicSnake), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MagicSnake::Dictionary, isa_proxy, 4,
                  sizeof(::MagicSnake) );
      instance.SetNew(&new_MagicSnake);
      instance.SetNewArray(&newArray_MagicSnake);
      instance.SetDelete(&delete_MagicSnake);
      instance.SetDeleteArray(&deleteArray_MagicSnake);
      instance.SetDestructor(&destruct_MagicSnake);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MagicSnake*)
   {
      return GenerateInitInstanceLocal((::MagicSnake*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MagicSnake*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MagicShow_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MagicShow(void *p = 0);
   static void *newArray_MagicShow(Long_t size, void *p);
   static void delete_MagicShow(void *p);
   static void deleteArray_MagicShow(void *p);
   static void destruct_MagicShow(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MagicShow*)
   {
      ::MagicShow *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MagicShow >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MagicShow", ::MagicShow::Class_Version(), "./MagicShow.h", 28,
                  typeid(::MagicShow), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MagicShow::Dictionary, isa_proxy, 4,
                  sizeof(::MagicShow) );
      instance.SetNew(&new_MagicShow);
      instance.SetNewArray(&newArray_MagicShow);
      instance.SetDelete(&delete_MagicShow);
      instance.SetDeleteArray(&deleteArray_MagicShow);
      instance.SetDestructor(&destruct_MagicShow);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MagicShow*)
   {
      return GenerateInitInstanceLocal((::MagicShow*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MagicShow*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MagicDomino_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MagicDomino(void *p = 0);
   static void *newArray_MagicDomino(Long_t size, void *p);
   static void delete_MagicDomino(void *p);
   static void deleteArray_MagicDomino(void *p);
   static void destruct_MagicDomino(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MagicDomino*)
   {
      ::MagicDomino *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MagicDomino >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MagicDomino", ::MagicDomino::Class_Version(), "./MagicDomino.h", 25,
                  typeid(::MagicDomino), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MagicDomino::Dictionary, isa_proxy, 4,
                  sizeof(::MagicDomino) );
      instance.SetNew(&new_MagicDomino);
      instance.SetNewArray(&newArray_MagicDomino);
      instance.SetDelete(&delete_MagicDomino);
      instance.SetDeleteArray(&deleteArray_MagicDomino);
      instance.SetDestructor(&destruct_MagicDomino);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MagicDomino*)
   {
      return GenerateInitInstanceLocal((::MagicDomino*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MagicDomino*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MagicCivilization_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MagicCivilization(void *p = 0);
   static void *newArray_MagicCivilization(Long_t size, void *p);
   static void delete_MagicCivilization(void *p);
   static void deleteArray_MagicCivilization(void *p);
   static void destruct_MagicCivilization(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MagicCivilization*)
   {
      ::MagicCivilization *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MagicCivilization >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MagicCivilization", ::MagicCivilization::Class_Version(), "./MagicCivilization.h", 28,
                  typeid(::MagicCivilization), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MagicCivilization::Dictionary, isa_proxy, 4,
                  sizeof(::MagicCivilization) );
      instance.SetNew(&new_MagicCivilization);
      instance.SetNewArray(&newArray_MagicCivilization);
      instance.SetDelete(&delete_MagicCivilization);
      instance.SetDeleteArray(&deleteArray_MagicCivilization);
      instance.SetDestructor(&destruct_MagicCivilization);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MagicCivilization*)
   {
      return GenerateInitInstanceLocal((::MagicCivilization*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MagicCivilization*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MineSweeper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MineSweeper(void *p = 0);
   static void *newArray_MineSweeper(Long_t size, void *p);
   static void delete_MineSweeper(void *p);
   static void deleteArray_MineSweeper(void *p);
   static void destruct_MineSweeper(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MineSweeper*)
   {
      ::MineSweeper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MineSweeper >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MineSweeper", ::MineSweeper::Class_Version(), "./MineSweeper.h", 23,
                  typeid(::MineSweeper), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MineSweeper::Dictionary, isa_proxy, 4,
                  sizeof(::MineSweeper) );
      instance.SetNew(&new_MineSweeper);
      instance.SetNewArray(&newArray_MineSweeper);
      instance.SetDelete(&delete_MineSweeper);
      instance.SetDeleteArray(&deleteArray_MineSweeper);
      instance.SetDestructor(&destruct_MineSweeper);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MineSweeper*)
   {
      return GenerateInitInstanceLocal((::MineSweeper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MineSweeper*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MRolke_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MRolke(void *p = 0);
   static void *newArray_MRolke(Long_t size, void *p);
   static void delete_MRolke(void *p);
   static void deleteArray_MRolke(void *p);
   static void destruct_MRolke(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MRolke*)
   {
      ::MRolke *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MRolke >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MRolke", ::MRolke::Class_Version(), "./MRolke.h", 19,
                  typeid(::MRolke), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MRolke::Dictionary, isa_proxy, 4,
                  sizeof(::MRolke) );
      instance.SetNew(&new_MRolke);
      instance.SetNewArray(&newArray_MRolke);
      instance.SetDelete(&delete_MRolke);
      instance.SetDeleteArray(&deleteArray_MRolke);
      instance.SetDestructor(&destruct_MRolke);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MRolke*)
   {
      return GenerateInitInstanceLocal((::MRolke*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MRolke*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MChisqEval::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MChisqEval::Class_Name()
{
   return "MChisqEval";
}

//______________________________________________________________________________
const char *MChisqEval::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MChisqEval*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MChisqEval::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MChisqEval*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MChisqEval::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MChisqEval*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MChisqEval::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MChisqEval*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MTFillMatrix::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MTFillMatrix::Class_Name()
{
   return "MTFillMatrix";
}

//______________________________________________________________________________
const char *MTFillMatrix::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTFillMatrix*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MTFillMatrix::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MTFillMatrix*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MTFillMatrix::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTFillMatrix*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MTFillMatrix::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MTFillMatrix*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHSimulatedAnnealing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHSimulatedAnnealing::Class_Name()
{
   return "MHSimulatedAnnealing";
}

//______________________________________________________________________________
const char *MHSimulatedAnnealing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSimulatedAnnealing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHSimulatedAnnealing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSimulatedAnnealing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHSimulatedAnnealing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSimulatedAnnealing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHSimulatedAnnealing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSimulatedAnnealing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSimulatedAnnealing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSimulatedAnnealing::Class_Name()
{
   return "MSimulatedAnnealing";
}

//______________________________________________________________________________
const char *MSimulatedAnnealing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimulatedAnnealing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSimulatedAnnealing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSimulatedAnnealing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSimulatedAnnealing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimulatedAnnealing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSimulatedAnnealing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSimulatedAnnealing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MFFT::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MFFT::Class_Name()
{
   return "MFFT";
}

//______________________________________________________________________________
const char *MFFT::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFFT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MFFT::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MFFT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MFFT::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFFT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MFFT::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MFFT*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCubicCoeff::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCubicCoeff::Class_Name()
{
   return "MCubicCoeff";
}

//______________________________________________________________________________
const char *MCubicCoeff::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicCoeff*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCubicCoeff::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicCoeff*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCubicCoeff::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicCoeff*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCubicCoeff::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicCoeff*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCubicSpline::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCubicSpline::Class_Name()
{
   return "MCubicSpline";
}

//______________________________________________________________________________
const char *MCubicSpline::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicSpline*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCubicSpline::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicSpline*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCubicSpline::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicSpline*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCubicSpline::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCubicSpline*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MagicReversi::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MagicReversi::Class_Name()
{
   return "MagicReversi";
}

//______________________________________________________________________________
const char *MagicReversi::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicReversi*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MagicReversi::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicReversi*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MagicReversi::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicReversi*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MagicReversi::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicReversi*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MagicSnake::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MagicSnake::Class_Name()
{
   return "MagicSnake";
}

//______________________________________________________________________________
const char *MagicSnake::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicSnake*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MagicSnake::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicSnake*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MagicSnake::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicSnake*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MagicSnake::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicSnake*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MagicShow::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MagicShow::Class_Name()
{
   return "MagicShow";
}

//______________________________________________________________________________
const char *MagicShow::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicShow*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MagicShow::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicShow*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MagicShow::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicShow*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MagicShow::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicShow*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MagicDomino::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MagicDomino::Class_Name()
{
   return "MagicDomino";
}

//______________________________________________________________________________
const char *MagicDomino::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicDomino*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MagicDomino::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicDomino*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MagicDomino::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicDomino*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MagicDomino::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicDomino*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MagicCivilization::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MagicCivilization::Class_Name()
{
   return "MagicCivilization";
}

//______________________________________________________________________________
const char *MagicCivilization::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicCivilization*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MagicCivilization::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MagicCivilization*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MagicCivilization::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicCivilization*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MagicCivilization::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MagicCivilization*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MineSweeper::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MineSweeper::Class_Name()
{
   return "MineSweeper";
}

//______________________________________________________________________________
const char *MineSweeper::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MineSweeper*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MineSweeper::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MineSweeper*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MineSweeper::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MineSweeper*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MineSweeper::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MineSweeper*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MRolke::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MRolke::Class_Name()
{
   return "MRolke";
}

//______________________________________________________________________________
const char *MRolke::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRolke*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MRolke::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MRolke*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MRolke::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRolke*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MRolke::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MRolke*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MChisqEval::Streamer(TBuffer &R__b)
{
   // Stream an object of class MChisqEval.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MChisqEval::Class(),this);
   } else {
      R__b.WriteClassBuffer(MChisqEval::Class(),this);
   }
}

//______________________________________________________________________________
void MChisqEval::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MChisqEval.
      TClass *R__cl = ::MChisqEval::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData0", &fData0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData1", &fData1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameResult", &fNameResult);
      R__insp.InspectMember(fNameResult, "fNameResult.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameWeight", &fNameWeight);
      R__insp.InspectMember(fNameWeight, "fNameWeight.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChisq", &fChisq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumW", &fSumW);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MChisqEval(void *p) {
      return  p ? new(p) ::MChisqEval : new ::MChisqEval;
   }
   static void *newArray_MChisqEval(Long_t nElements, void *p) {
      return p ? new(p) ::MChisqEval[nElements] : new ::MChisqEval[nElements];
   }
   // Wrapper around operator delete
   static void delete_MChisqEval(void *p) {
      delete ((::MChisqEval*)p);
   }
   static void deleteArray_MChisqEval(void *p) {
      delete [] ((::MChisqEval*)p);
   }
   static void destruct_MChisqEval(void *p) {
      typedef ::MChisqEval current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MChisqEval

//______________________________________________________________________________
void MTFillMatrix::Streamer(TBuffer &R__b)
{
   // Stream an object of class MTFillMatrix.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MTFillMatrix::Class(),this);
   } else {
      R__b.WriteClassBuffer(MTFillMatrix::Class(),this);
   }
}

//______________________________________________________________________________
void MTFillMatrix::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MTFillMatrix.
      TClass *R__cl = ::MTFillMatrix::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReference", &fReference);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReader", &fReader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDestMatrix1", &fDestMatrix1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDestMatrix2", &fDestMatrix2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumDestEvents1", &fNumDestEvents1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumDestEvents2", &fNumDestEvents2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumMaxEvents", &fNumMaxEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWriteFile1", &fWriteFile1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWriteFile2", &fWriteFile2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreCuts", &fPreCuts);
      R__insp.InspectMember(fPreCuts, "fPreCuts.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPreTasks", &fPreTasks);
      R__insp.InspectMember(fPreTasks, "fPreTasks.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPostTasks", &fPostTasks);
      R__insp.InspectMember(fPostTasks, "fPostTasks.");
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MTFillMatrix(void *p) {
      return  p ? new(p) ::MTFillMatrix : new ::MTFillMatrix;
   }
   static void *newArray_MTFillMatrix(Long_t nElements, void *p) {
      return p ? new(p) ::MTFillMatrix[nElements] : new ::MTFillMatrix[nElements];
   }
   // Wrapper around operator delete
   static void delete_MTFillMatrix(void *p) {
      delete ((::MTFillMatrix*)p);
   }
   static void deleteArray_MTFillMatrix(void *p) {
      delete [] ((::MTFillMatrix*)p);
   }
   static void destruct_MTFillMatrix(void *p) {
      typedef ::MTFillMatrix current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MTFillMatrix

//______________________________________________________________________________
void MFFT::Streamer(TBuffer &R__b)
{
   // Stream an object of class MFFT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MFFT::Class(),this);
   } else {
      R__b.WriteClassBuffer(MFFT::Class(),this);
   }
}

//______________________________________________________________________________
void MFFT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MFFT.
      TClass *R__cl = ::MFFT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDim", &fDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataF", &fDataF);
      R__insp.InspectMember(fDataF, "fDataF.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataD", &fDataD);
      R__insp.InspectMember(fDataD, "fDataD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowF", &fWindowF);
      R__insp.InspectMember(fWindowF, "fWindowF.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWindowD", &fWindowD);
      R__insp.InspectMember(fWindowD, "fWindowD.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MFFT(void *p) {
      return  p ? new(p) ::MFFT : new ::MFFT;
   }
   static void *newArray_MFFT(Long_t nElements, void *p) {
      return p ? new(p) ::MFFT[nElements] : new ::MFFT[nElements];
   }
   // Wrapper around operator delete
   static void delete_MFFT(void *p) {
      delete ((::MFFT*)p);
   }
   static void deleteArray_MFFT(void *p) {
      delete [] ((::MFFT*)p);
   }
   static void destruct_MFFT(void *p) {
      typedef ::MFFT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MFFT

//______________________________________________________________________________
void MHSimulatedAnnealing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHSimulatedAnnealing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHSimulatedAnnealing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHSimulatedAnnealing::Class(),this);
   }
}

//______________________________________________________________________________
void MHSimulatedAnnealing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHSimulatedAnnealing.
      TClass *R__cl = ::MHSimulatedAnnealing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDim", &fDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMoves", &fMoves);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeEvolution", &fTimeEvolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBestEver", &fBestEver);
      R__insp.InspectMember(fBestEver, "fBestEver.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBestFuncEval", &fBestFuncEval);
      R__insp.InspectMember(fBestFuncEval, "fBestFuncEval.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHSimulatedAnnealing(void *p) {
      return  p ? new(p) ::MHSimulatedAnnealing : new ::MHSimulatedAnnealing;
   }
   static void *newArray_MHSimulatedAnnealing(Long_t nElements, void *p) {
      return p ? new(p) ::MHSimulatedAnnealing[nElements] : new ::MHSimulatedAnnealing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHSimulatedAnnealing(void *p) {
      delete ((::MHSimulatedAnnealing*)p);
   }
   static void deleteArray_MHSimulatedAnnealing(void *p) {
      delete [] ((::MHSimulatedAnnealing*)p);
   }
   static void destruct_MHSimulatedAnnealing(void *p) {
      typedef ::MHSimulatedAnnealing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHSimulatedAnnealing

//______________________________________________________________________________
void MSimulatedAnnealing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSimulatedAnnealing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSimulatedAnnealing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSimulatedAnnealing::Class(),this);
   }
}

//______________________________________________________________________________
void MSimulatedAnnealing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSimulatedAnnealing.
      TClass *R__cl = ::MSimulatedAnnealing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRandom", &fRandom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTolerance", &fTolerance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdim", &fNdim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMpts", &fMpts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfMoves", &fNumberOfMoves);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartTemperature", &fStartTemperature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFullStorage", &fFullStorage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInit", &fInit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.InspectMember(fP, "fP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPsum", &fPsum);
      R__insp.InspectMember(fPsum, "fPsum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP0", &fP0);
      R__insp.InspectMember(fP0, "fP0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP1", &fP1);
      R__insp.InspectMember(fP1, "fP1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.InspectMember(fY, "fY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYb", &fYb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYconv", &fYconv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPb", &fPb);
      R__insp.InspectMember(fPb, "fPb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPconv", &fPconv);
      R__insp.InspectMember(fPconv, "fPconv.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBorder", &fBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVerbose", &fVerbose);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSimulatedAnnealing(void *p) {
      return  p ? new(p) ::MSimulatedAnnealing : new ::MSimulatedAnnealing;
   }
   static void *newArray_MSimulatedAnnealing(Long_t nElements, void *p) {
      return p ? new(p) ::MSimulatedAnnealing[nElements] : new ::MSimulatedAnnealing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSimulatedAnnealing(void *p) {
      delete ((::MSimulatedAnnealing*)p);
   }
   static void deleteArray_MSimulatedAnnealing(void *p) {
      delete [] ((::MSimulatedAnnealing*)p);
   }
   static void destruct_MSimulatedAnnealing(void *p) {
      typedef ::MSimulatedAnnealing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSimulatedAnnealing

//______________________________________________________________________________
void MCubicCoeff::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCubicCoeff.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCubicCoeff::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCubicCoeff::Class(),this);
   }
}

//______________________________________________________________________________
void MCubicCoeff::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCubicCoeff.
      TClass *R__cl = ::MCubicCoeff::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXNext", &fXNext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fB", &fB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fC", &fC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYNext", &fYNext);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fH", &fH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMin", &fMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbMin", &fAbMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAbMax", &fAbMax);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCubicCoeff(void *p) {
      return  p ? new(p) ::MCubicCoeff : new ::MCubicCoeff;
   }
   static void *newArray_MCubicCoeff(Long_t nElements, void *p) {
      return p ? new(p) ::MCubicCoeff[nElements] : new ::MCubicCoeff[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCubicCoeff(void *p) {
      delete ((::MCubicCoeff*)p);
   }
   static void deleteArray_MCubicCoeff(void *p) {
      delete [] ((::MCubicCoeff*)p);
   }
   static void destruct_MCubicCoeff(void *p) {
      typedef ::MCubicCoeff current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCubicCoeff

//______________________________________________________________________________
void MCubicSpline::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCubicSpline.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCubicSpline::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCubicSpline::Class(),this);
   }
}

//______________________________________________________________________________
void MCubicSpline::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCubicSpline.
      TClass *R__cl = ::MCubicSpline::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCoeff", &fCoeff);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MCubicSpline(void *p) {
      delete ((::MCubicSpline*)p);
   }
   static void deleteArray_MCubicSpline(void *p) {
      delete [] ((::MCubicSpline*)p);
   }
   static void destruct_MCubicSpline(void *p) {
      typedef ::MCubicSpline current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCubicSpline

//______________________________________________________________________________
void MineSweeper::Streamer(TBuffer &R__b)
{
   // Stream an object of class MineSweeper.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MineSweeper::Class(),this);
   } else {
      R__b.WriteClassBuffer(MineSweeper::Class(),this);
   }
}

//______________________________________________________________________________
void MineSweeper::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MineSweeper.
      TClass *R__cl = ::MineSweeper::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBombs", &fNumBombs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fText", &fText);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDone", &fDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShow", &fShow);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MineSweeper(void *p) {
      return  p ? new(p) ::MineSweeper : new ::MineSweeper;
   }
   static void *newArray_MineSweeper(Long_t nElements, void *p) {
      return p ? new(p) ::MineSweeper[nElements] : new ::MineSweeper[nElements];
   }
   // Wrapper around operator delete
   static void delete_MineSweeper(void *p) {
      delete ((::MineSweeper*)p);
   }
   static void deleteArray_MineSweeper(void *p) {
      delete [] ((::MineSweeper*)p);
   }
   static void destruct_MineSweeper(void *p) {
      typedef ::MineSweeper current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MineSweeper

//______________________________________________________________________________
void MagicReversi::Streamer(TBuffer &R__b)
{
   // Stream an object of class MagicReversi.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MagicReversi::Class(),this);
   } else {
      R__b.WriteClassBuffer(MagicReversi::Class(),this);
   }
}

//______________________________________________________________________________
void MagicReversi::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MagicReversi.
      TClass *R__cl = ::MagicReversi::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fText", &fText);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFlags", &fFlags);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDone", &fDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUsrTxt[6]", &fUsrTxt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUsers", &fNumUsers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumUser", &fNumUser);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsrPts[6]", fUsrPts);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MagicReversi(void *p) {
      return  p ? new(p) ::MagicReversi : new ::MagicReversi;
   }
   static void *newArray_MagicReversi(Long_t nElements, void *p) {
      return p ? new(p) ::MagicReversi[nElements] : new ::MagicReversi[nElements];
   }
   // Wrapper around operator delete
   static void delete_MagicReversi(void *p) {
      delete ((::MagicReversi*)p);
   }
   static void deleteArray_MagicReversi(void *p) {
      delete [] ((::MagicReversi*)p);
   }
   static void destruct_MagicReversi(void *p) {
      typedef ::MagicReversi current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MagicReversi

//______________________________________________________________________________
void MagicSnake::Streamer(TBuffer &R__b)
{
   // Stream an object of class MagicSnake.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MagicSnake::Class(),this);
   } else {
      R__b.WriteClassBuffer(MagicSnake::Class(),this);
   }
}

//______________________________________________________________________________
void MagicSnake::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MagicSnake.
      TClass *R__cl = ::MagicSnake::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLength", &fLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirection", &fDirection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimer", &fTimer);
      R__insp.InspectMember(fTimer, "fTimer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTransport[2]", fTransport);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumBombs", &fNumBombs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFood", &fNumFood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDone", &fDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPaused", &fPaused);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShow", &fShow);
      R__insp.InspectMember(fShow, "fShow.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDrawingPad", &fDrawingPad);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MagicSnake(void *p) {
      return  p ? new(p) ::MagicSnake : new ::MagicSnake;
   }
   static void *newArray_MagicSnake(Long_t nElements, void *p) {
      return p ? new(p) ::MagicSnake[nElements] : new ::MagicSnake[nElements];
   }
   // Wrapper around operator delete
   static void delete_MagicSnake(void *p) {
      delete ((::MagicSnake*)p);
   }
   static void deleteArray_MagicSnake(void *p) {
      delete [] ((::MagicSnake*)p);
   }
   static void destruct_MagicSnake(void *p) {
      typedef ::MagicSnake current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MagicSnake

//______________________________________________________________________________
void MagicShow::Streamer(TBuffer &R__b)
{
   // Stream an object of class MagicShow.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MagicShow::Class(),this);
   } else {
      R__b.WriteClassBuffer(MagicShow::Class(),this);
   }
}

//______________________________________________________________________________
void MagicShow::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MagicShow.
      TClass *R__cl = ::MagicShow::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimer", &fTimer);
      R__insp.InspectMember(fTimer, "fTimer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixel", &fNumPixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAuto", &fAuto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fShow", &fShow);
      R__insp.InspectMember(fShow, "fShow.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fText[6]", &fText);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MagicShow(void *p) {
      return  p ? new(p) ::MagicShow : new ::MagicShow;
   }
   static void *newArray_MagicShow(Long_t nElements, void *p) {
      return p ? new(p) ::MagicShow[nElements] : new ::MagicShow[nElements];
   }
   // Wrapper around operator delete
   static void delete_MagicShow(void *p) {
      delete ((::MagicShow*)p);
   }
   static void deleteArray_MagicShow(void *p) {
      delete [] ((::MagicShow*)p);
   }
   static void destruct_MagicShow(void *p) {
      typedef ::MagicShow current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MagicShow

//______________________________________________________________________________
void MagicDomino::Streamer(TBuffer &R__b)
{
   // Stream an object of class MagicDomino.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MagicDomino::Class(),this);
   } else {
      R__b.WriteClassBuffer(MagicDomino::Class(),this);
   }
}

//______________________________________________________________________________
void MagicDomino::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MagicDomino.
      TClass *R__cl = ::MagicDomino::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixel", &fNumPixel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumTile", &fNumTile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPoints", &fPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDir", &fDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOldColors[7]", fOldColors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNewColors[6]", fNewColors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipped", &fSkipped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDomino", &fDomino);
      R__insp.InspectMember(fDomino, "fDomino.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fText[6]", &fText);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDone", &fDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MagicDomino(void *p) {
      return  p ? new(p) ::MagicDomino : new ::MagicDomino;
   }
   static void *newArray_MagicDomino(Long_t nElements, void *p) {
      return p ? new(p) ::MagicDomino[nElements] : new ::MagicDomino[nElements];
   }
   // Wrapper around operator delete
   static void delete_MagicDomino(void *p) {
      delete ((::MagicDomino*)p);
   }
   static void deleteArray_MagicDomino(void *p) {
      delete [] ((::MagicDomino*)p);
   }
   static void destruct_MagicDomino(void *p) {
      typedef ::MagicDomino current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MagicDomino

//______________________________________________________________________________
void MagicCivilization::Streamer(TBuffer &R__b)
{
   // Stream an object of class MagicCivilization.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MagicCivilization::Class(),this);
   } else {
      R__b.WriteClassBuffer(MagicCivilization::Class(),this);
   }
}

//______________________________________________________________________________
void MagicCivilization::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MagicCivilization.
      TClass *R__cl = ::MagicCivilization::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimer", &fTimer);
      R__insp.InspectMember(fTimer, "fTimer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCam", &fGeomCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumInit", &fNumInit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRange", &fRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAuto", &fAuto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLimit", &fLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumCivilizations", &fNumCivilizations);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStep", &fStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCivilization", &fCivilization);
      R__insp.InspectMember(fCivilization, "fCivilization.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColors", &fColors);
      R__insp.InspectMember(fColors, "fColors.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MagicCivilization(void *p) {
      return  p ? new(p) ::MagicCivilization : new ::MagicCivilization;
   }
   static void *newArray_MagicCivilization(Long_t nElements, void *p) {
      return p ? new(p) ::MagicCivilization[nElements] : new ::MagicCivilization[nElements];
   }
   // Wrapper around operator delete
   static void delete_MagicCivilization(void *p) {
      delete ((::MagicCivilization*)p);
   }
   static void deleteArray_MagicCivilization(void *p) {
      delete [] ((::MagicCivilization*)p);
   }
   static void destruct_MagicCivilization(void *p) {
      typedef ::MagicCivilization current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MagicCivilization

//______________________________________________________________________________
void MRolke::Streamer(TBuffer &R__b)
{
   // Stream an object of class MRolke.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MRolke::Class(),this);
   } else {
      R__b.WriteClassBuffer(MRolke::Class(),this);
   }
}

//______________________________________________________________________________
void MRolke::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MRolke.
      TClass *R__cl = ::MRolke::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCL", &fCL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpperLimit", &fUpperLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerLimit", &fLowerLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSwitch", &fSwitch);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MRolke(void *p) {
      return  p ? new(p) ::MRolke : new ::MRolke;
   }
   static void *newArray_MRolke(Long_t nElements, void *p) {
      return p ? new(p) ::MRolke[nElements] : new ::MRolke[nElements];
   }
   // Wrapper around operator delete
   static void delete_MRolke(void *p) {
      delete ((::MRolke*)p);
   }
   static void deleteArray_MRolke(void *p) {
      delete [] ((::MRolke*)p);
   }
   static void destruct_MRolke(void *p) {
      typedef ::MRolke current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MRolke

/********************************************************
* ToolsCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableToolsCint();

extern "C" void G__set_cpp_environmentToolsCint() {
  G__cpp_reset_tagtableToolsCint();
}
#include <new>
extern "C" int G__cpp_dllrevToolsCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MChisqEval */
static int G__ToolsCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MChisqEval* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MChisqEval((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MChisqEval((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MChisqEval[n];
       } else {
         p = new((void*) gvp) MChisqEval[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MChisqEval;
       } else {
         p = new((void*) gvp) MChisqEval;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MChisqEval* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval(
(MData*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MChisqEval(
(MData*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval((MData*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MChisqEval((MData*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval((MData*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MChisqEval((MData*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MChisqEval* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval(
(MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MChisqEval(
(MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval(
(MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MChisqEval(
(MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MChisqEval((MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MChisqEval((MData*) G__int(libp->para[0]), (MData*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MChisqEval*) G__getstructoffset())->SetY1((MData*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MChisqEval*) G__getstructoffset())->SetY2((MData*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MChisqEval*) G__getstructoffset())->SetY1(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MChisqEval*) G__getstructoffset())->SetY2(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MChisqEval*) G__getstructoffset())->SetOwner((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MChisqEval*) G__getstructoffset())->SetOwner();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MChisqEval*) G__getstructoffset())->SetNameWeight(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((MChisqEval*) G__getstructoffset())->SetNameWeight();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MChisqEval*) G__getstructoffset())->GetChisq());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MChisqEval::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MChisqEval::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MChisqEval::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MChisqEval::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MChisqEval*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MChisqEval::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MChisqEval::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MChisqEval::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MChisqEval::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MChisqEval G__TMChisqEval;
static int G__ToolsCint_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MChisqEval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MChisqEval*) (soff+(sizeof(MChisqEval)*i)))->~G__TMChisqEval();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MChisqEval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MChisqEval*) (soff))->~G__TMChisqEval();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MTFillMatrix */
static int G__ToolsCint_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTFillMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTFillMatrix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTFillMatrix((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTFillMatrix((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTFillMatrix((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTFillMatrix[n];
       } else {
         p = new((void*) gvp) MTFillMatrix[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MTFillMatrix;
       } else {
         p = new((void*) gvp) MTFillMatrix;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MTFillMatrix* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTFillMatrix(
(MH3*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MTFillMatrix(
(MH3*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTFillMatrix((MH3*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MTFillMatrix((MH3*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MTFillMatrix((MH3*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MTFillMatrix((MH3*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MTFillMatrix*) G__getstructoffset())->SetDestMatrix1((MHMatrix*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MTFillMatrix*) G__getstructoffset())->SetDestMatrix1((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MTFillMatrix*) G__getstructoffset())->SetWriteFile1((MTask*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MTFillMatrix*) G__getstructoffset())->SetWriteFile1((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MTFillMatrix*) G__getstructoffset())->SetDestMatrix2((MHMatrix*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MTFillMatrix*) G__getstructoffset())->SetDestMatrix2((MHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MTFillMatrix*) G__getstructoffset())->SetWriteFile2((MTask*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MTFillMatrix*) G__getstructoffset())->SetWriteFile2((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->SetNumDestEvents1((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->SetNumDestEvents2((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->SetMaxEvents((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->SetReader((MRead*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPreCut((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPreCut((MFilter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPreCuts(*(TList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->ClearPreCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->ClearPreTasks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->ClearPostTasks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPreTask((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPreTasks(*(TList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPostTask((MTask*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->AddPostTasks(*(TList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((MTFillMatrix*) G__getstructoffset())->Process(*(MParList*) libp->para[0].ref));
      break;
   case 0:
      G__letint(result7, 103, (long) ((MTFillMatrix*) G__getstructoffset())->Process());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MTFillMatrix*) G__getstructoffset())->WriteMatrix1(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MTFillMatrix*) G__getstructoffset())->WriteMatrix2(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MTFillMatrix*) G__getstructoffset())->WriteMatrices(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MTFillMatrix::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTFillMatrix::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MTFillMatrix::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MTFillMatrix::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MTFillMatrix*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTFillMatrix::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTFillMatrix::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MTFillMatrix::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_249_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MTFillMatrix::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MTFillMatrix G__TMTFillMatrix;
static int G__ToolsCint_249_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MTFillMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MTFillMatrix*) (soff+(sizeof(MTFillMatrix)*i)))->~G__TMTFillMatrix();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MTFillMatrix*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MTFillMatrix*) (soff))->~G__TMTFillMatrix();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHSimulatedAnnealing */
static int G__ToolsCint_310_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHSimulatedAnnealing* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSimulatedAnnealing(
(UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MHSimulatedAnnealing(
(UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSimulatedAnnealing(
(UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHSimulatedAnnealing(
(UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSimulatedAnnealing((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHSimulatedAnnealing((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSimulatedAnnealing((UShort_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHSimulatedAnnealing((UShort_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSimulatedAnnealing[n];
       } else {
         p = new((void*) gvp) MHSimulatedAnnealing[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSimulatedAnnealing;
       } else {
         p = new((void*) gvp) MHSimulatedAnnealing;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSimulatedAnnealing*) G__getstructoffset())->InitFullSimplex();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHSimulatedAnnealing*) G__getstructoffset())->StoreFullSimplex(*(TMatrix*) libp->para[0].ref, (const UShort_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHSimulatedAnnealing*) G__getstructoffset())->StoreBestValueEver(*(TVector*) libp->para[0].ref, (const Float_t) G__double(libp->para[1])
, (const UShort_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHSimulatedAnnealing*) G__getstructoffset())->ChangeTitle((const UShort_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSimulatedAnnealing*) G__getstructoffset())->ChangeFuncTitle((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHSimulatedAnnealing*) G__getstructoffset())->GetTimeEvolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH2F& obj = ((const MHSimulatedAnnealing*) G__getstructoffset())->GetBestEver();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TH1F& obj = ((const MHSimulatedAnnealing*) G__getstructoffset())->GetBestFuncEval();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHSimulatedAnnealing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSimulatedAnnealing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHSimulatedAnnealing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHSimulatedAnnealing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSimulatedAnnealing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSimulatedAnnealing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSimulatedAnnealing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSimulatedAnnealing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_310_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSimulatedAnnealing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHSimulatedAnnealing G__TMHSimulatedAnnealing;
static int G__ToolsCint_310_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHSimulatedAnnealing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHSimulatedAnnealing*) (soff+(sizeof(MHSimulatedAnnealing)*i)))->~G__TMHSimulatedAnnealing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHSimulatedAnnealing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHSimulatedAnnealing*) (soff))->~G__TMHSimulatedAnnealing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSimulatedAnnealing */
static int G__ToolsCint_312_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimulatedAnnealing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimulatedAnnealing[n];
     } else {
       p = new((void*) gvp) MSimulatedAnnealing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSimulatedAnnealing;
     } else {
       p = new((void*) gvp) MSimulatedAnnealing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->ModifyTolerance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->ModifyBorderFlag((MSimulatedAnnealing::BorderFlag_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MSimulatedAnnealing*) G__getstructoffset())->Initialize(*(TMatrix*) libp->para[0].ref, *(TVector*) libp->para[1].ref
, *(TVector*) libp->para[2].ref, *(TVector*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->SetNumberOfMoves((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->SetStartTemperature((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->SetFullStorage();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->SetVerbosityLevel((MSimulatedAnnealing::Verbosity_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->SetRandom((TRandom*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector& obj = ((const MSimulatedAnnealing*) G__getstructoffset())->GetPb();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSimulatedAnnealing*) G__getstructoffset())->GetYb());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector& obj = ((const MSimulatedAnnealing*) G__getstructoffset())->GetPconv();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MSimulatedAnnealing*) G__getstructoffset())->GetYconv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MSimulatedAnnealing*) G__getstructoffset())->GetResult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MSimulatedAnnealing*) G__getstructoffset())->RunMinimization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSimulatedAnnealing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimulatedAnnealing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSimulatedAnnealing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSimulatedAnnealing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSimulatedAnnealing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimulatedAnnealing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimulatedAnnealing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSimulatedAnnealing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_312_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSimulatedAnnealing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_312_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MSimulatedAnnealing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MSimulatedAnnealing(*(MSimulatedAnnealing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSimulatedAnnealing G__TMSimulatedAnnealing;
static int G__ToolsCint_312_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSimulatedAnnealing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSimulatedAnnealing*) (soff+(sizeof(MSimulatedAnnealing)*i)))->~G__TMSimulatedAnnealing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSimulatedAnnealing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSimulatedAnnealing*) (soff))->~G__TMSimulatedAnnealing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_312_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSimulatedAnnealing* dest = (MSimulatedAnnealing*) G__getstructoffset();
   *dest = *(MSimulatedAnnealing*) libp->para[0].ref;
   const MSimulatedAnnealing& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MFFT */
static int G__ToolsCint_316_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFFT* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFFT[n];
     } else {
       p = new((void*) gvp) MFFT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MFFT;
     } else {
       p = new((void*) gvp) MFFT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MFFT));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->RealFunctionFFT((TArrayF*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->RealFunctionIFFT((TArrayF*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->RealFunctionFFT((TArrayD*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->RealFunctionIFFT((TArrayD*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((MFFT*) G__getstructoffset())->RealFunctionFFT((const Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((MFFT*) G__getstructoffset())->RealFunctionIFFT((const Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MFFT*) G__getstructoffset())->RealFunctionFFT((const Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((MFFT*) G__getstructoffset())->RealFunctionIFFT((const Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TH1*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TH1F*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TH1I*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TH1D*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TArrayI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TArrayF*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((TArrayD*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((MArrayI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((MArrayF*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->PowerSpectrumDensity((MArrayD*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MFFT*) G__getstructoffset())->RealFunctionSpectrum((TArrayF*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MFFT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFFT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MFFT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MFFT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MFFT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFFT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFFT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MFFT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_316_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MFFT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_316_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MFFT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MFFT(*(MFFT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MFFT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MFFT G__TMFFT;
static int G__ToolsCint_316_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MFFT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MFFT*) (soff+(sizeof(MFFT)*i)))->~G__TMFFT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MFFT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MFFT*) (soff))->~G__TMFFT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_316_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MFFT* dest = (MFFT*) G__getstructoffset();
   *dest = *(MFFT*) libp->para[0].ref;
   const MFFT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCubicCoeff */
static int G__ToolsCint_317_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicCoeff* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCubicCoeff[n];
     } else {
       p = new((void*) gvp) MCubicCoeff[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCubicCoeff;
     } else {
       p = new((void*) gvp) MCubicCoeff;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicCoeff* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MCubicCoeff(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) MCubicCoeff(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetAbMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->GetAbMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicCoeff*) G__getstructoffset())->Eval((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCubicCoeff*) G__getstructoffset())->EvalMinMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((MCubicCoeff*) G__getstructoffset())->FindCardanRoot((Double_t) G__double(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MCubicCoeff*) G__getstructoffset())->IsIn((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCubicCoeff::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicCoeff::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCubicCoeff::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCubicCoeff::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCubicCoeff*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicCoeff::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCubicCoeff::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicCoeff::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_317_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCubicCoeff::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_317_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCubicCoeff* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCubicCoeff(*(MCubicCoeff*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCubicCoeff G__TMCubicCoeff;
static int G__ToolsCint_317_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCubicCoeff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCubicCoeff*) (soff+(sizeof(MCubicCoeff)*i)))->~G__TMCubicCoeff();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCubicCoeff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCubicCoeff*) (soff))->~G__TMCubicCoeff();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_317_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicCoeff* dest = (MCubicCoeff*) G__getstructoffset();
   *dest = *(MCubicCoeff*) libp->para[0].ref;
   const MCubicCoeff& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCubicSpline */
static int G__ToolsCint_318_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicSpline* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) MCubicSpline(
(const Byte_t*) G__int(libp->para[0]), (const Byte_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicSpline* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MCubicSpline((const Byte_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCubicSpline((const Byte_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->Eval((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->EvalMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->EvalMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->EvalAbMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->EvalAbMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCubicSpline*) G__getstructoffset())->FindVal((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Char_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCubicSpline::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicSpline::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCubicSpline::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCubicSpline::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCubicSpline*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicSpline::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCubicSpline::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCubicSpline::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_318_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCubicSpline::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_318_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCubicSpline* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCubicSpline(*(MCubicSpline*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCubicSpline G__TMCubicSpline;
static int G__ToolsCint_318_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCubicSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCubicSpline*) (soff+(sizeof(MCubicSpline)*i)))->~G__TMCubicSpline();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCubicSpline*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCubicSpline*) (soff))->~G__TMCubicSpline();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_318_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCubicSpline* dest = (MCubicSpline*) G__getstructoffset();
   *dest = *(MCubicSpline*) libp->para[0].ref;
   const MCubicSpline& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MagicReversi */
static int G__ToolsCint_324_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicReversi* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicReversi[n];
     } else {
       p = new((void*) gvp) MagicReversi[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicReversi;
     } else {
       p = new((void*) gvp) MagicReversi;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicReversi* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MagicReversi(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MagicReversi(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->TwoPlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->ThreePlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->FourPlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->FivePlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->SixPlayer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MagicReversi::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicReversi::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MagicReversi::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MagicReversi::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicReversi*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicReversi::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicReversi::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicReversi::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_324_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicReversi::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_324_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MagicReversi* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MagicReversi(*(MagicReversi*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MagicReversi G__TMagicReversi;
static int G__ToolsCint_324_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MagicReversi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MagicReversi*) (soff+(sizeof(MagicReversi)*i)))->~G__TMagicReversi();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MagicReversi*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MagicReversi*) (soff))->~G__TMagicReversi();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_324_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicReversi* dest = (MagicReversi*) G__getstructoffset();
   *dest = *(MagicReversi*) libp->para[0].ref;
   const MagicReversi& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MagicSnake */
static int G__ToolsCint_359_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicSnake* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicSnake[n];
     } else {
       p = new((void*) gvp) MagicSnake[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicSnake;
     } else {
       p = new((void*) gvp) MagicSnake;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicSnake* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MagicSnake(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MagicSnake(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicSnake*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicSnake*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MagicSnake::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicSnake::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MagicSnake::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MagicSnake::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicSnake*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicSnake::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicSnake::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicSnake::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_359_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicSnake::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MagicSnake G__TMagicSnake;
static int G__ToolsCint_359_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MagicSnake*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MagicSnake*) (soff+(sizeof(MagicSnake)*i)))->~G__TMagicSnake();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MagicSnake*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MagicSnake*) (soff))->~G__TMagicSnake();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MagicShow */
static int G__ToolsCint_361_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicShow* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicShow[n];
     } else {
       p = new((void*) gvp) MagicShow[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicShow;
     } else {
       p = new((void*) gvp) MagicShow;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicShow));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicShow* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MagicShow(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MagicShow(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicShow));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicShow*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MagicShow::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicShow::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MagicShow::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MagicShow::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicShow*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicShow::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicShow::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicShow::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_361_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicShow::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MagicShow G__TMagicShow;
static int G__ToolsCint_361_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MagicShow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MagicShow*) (soff+(sizeof(MagicShow)*i)))->~G__TMagicShow();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MagicShow*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MagicShow*) (soff))->~G__TMagicShow();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MagicDomino */
static int G__ToolsCint_363_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicDomino* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicDomino[n];
     } else {
       p = new((void*) gvp) MagicDomino[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicDomino;
     } else {
       p = new((void*) gvp) MagicDomino;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicDomino* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MagicDomino(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MagicDomino(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicDomino*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicDomino*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MagicDomino::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicDomino::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MagicDomino::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MagicDomino::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicDomino*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicDomino::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicDomino::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicDomino::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_363_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicDomino::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_363_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MagicDomino* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MagicDomino(*(MagicDomino*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MagicDomino G__TMagicDomino;
static int G__ToolsCint_363_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MagicDomino*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MagicDomino*) (soff+(sizeof(MagicDomino)*i)))->~G__TMagicDomino();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MagicDomino*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MagicDomino*) (soff))->~G__TMagicDomino();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_363_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicDomino* dest = (MagicDomino*) G__getstructoffset();
   *dest = *(MagicDomino*) libp->para[0].ref;
   const MagicDomino& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MagicCivilization */
static int G__ToolsCint_365_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MagicCivilization* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicCivilization((Byte_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MagicCivilization((Byte_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MagicCivilization((Byte_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MagicCivilization((Byte_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MagicCivilization[n];
       } else {
         p = new((void*) gvp) MagicCivilization[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MagicCivilization;
       } else {
         p = new((void*) gvp) MagicCivilization;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicCivilization*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicCivilization*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MagicCivilization::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicCivilization::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MagicCivilization::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MagicCivilization::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MagicCivilization*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicCivilization::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicCivilization::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MagicCivilization::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_365_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MagicCivilization::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MagicCivilization G__TMagicCivilization;
static int G__ToolsCint_365_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MagicCivilization*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MagicCivilization*) (soff+(sizeof(MagicCivilization)*i)))->~G__TMagicCivilization();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MagicCivilization*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MagicCivilization*) (soff))->~G__TMagicCivilization();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MineSweeper */
static int G__ToolsCint_368_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MineSweeper* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MineSweeper[n];
     } else {
       p = new((void*) gvp) MineSweeper[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MineSweeper;
     } else {
       p = new((void*) gvp) MineSweeper;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MineSweeper* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MineSweeper(*(MGeomCam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) MineSweeper(*(MGeomCam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MineSweeper*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MineSweeper*) G__getstructoffset())->ChangeCamera();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MineSweeper::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MineSweeper::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MineSweeper::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MineSweeper::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MineSweeper*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MineSweeper::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MineSweeper::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MineSweeper::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_368_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MineSweeper::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_368_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MineSweeper* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MineSweeper(*(MineSweeper*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MineSweeper G__TMineSweeper;
static int G__ToolsCint_368_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MineSweeper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MineSweeper*) (soff+(sizeof(MineSweeper)*i)))->~G__TMineSweeper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MineSweeper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MineSweeper*) (soff))->~G__TMineSweeper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_368_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MineSweeper* dest = (MineSweeper*) G__getstructoffset();
   *dest = *(MineSweeper*) libp->para[0].ref;
   const MineSweeper& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MRolke */
static int G__ToolsCint_370_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRolke* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRolke((Double_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MRolke((Double_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MRolke((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) MRolke((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRolke[n];
       } else {
         p = new((void*) gvp) MRolke[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MRolke;
       } else {
         p = new((void*) gvp) MRolke;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MRolke));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MRolke*) G__getstructoffset())->CalculateInterval(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Int_t) G__int(libp->para[11])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRolke*) G__getstructoffset())->GetUpperLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRolke*) G__getstructoffset())->GetLowerLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MRolke*) G__getstructoffset())->GetSwitch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRolke*) G__getstructoffset())->SetSwitch((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MRolke*) G__getstructoffset())->GetCL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRolke*) G__getstructoffset())->SetCL((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MRolke::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRolke::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MRolke::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MRolke::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MRolke*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRolke::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRolke::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MRolke::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ToolsCint_370_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MRolke::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ToolsCint_370_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MRolke* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MRolke(*(MRolke*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ToolsCintLN_MRolke));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MRolke G__TMRolke;
static int G__ToolsCint_370_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MRolke*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MRolke*) (soff+(sizeof(MRolke)*i)))->~G__TMRolke();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MRolke*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MRolke*) (soff))->~G__TMRolke();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ToolsCint_370_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MRolke* dest = (MRolke*) G__getstructoffset();
   *dest = *(MRolke*) libp->para[0].ref;
   const MRolke& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MChisqEval */

/* MTFillMatrix */

/* MHSimulatedAnnealing */

/* MSimulatedAnnealing */

/* MFFT */

/* MCubicCoeff */

/* MCubicSpline */

/* MagicReversi */

/* MagicSnake */

/* MagicShow */

/* MagicDomino */

/* MagicCivilization */

/* MineSweeper */

/* MRolke */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncToolsCint {
 public:
  G__Sizep2memfuncToolsCint(): p(&G__Sizep2memfuncToolsCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncToolsCint::*p)();
};

size_t G__get_sizep2memfuncToolsCint()
{
  G__Sizep2memfuncToolsCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceToolsCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval))) {
     MChisqEval *G__Lderived;
     G__Lderived=(MChisqEval*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval),G__get_linked_tagnum(&G__ToolsCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval),G__get_linked_tagnum(&G__ToolsCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval),G__get_linked_tagnum(&G__ToolsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix))) {
     MTFillMatrix *G__Lderived;
     G__Lderived=(MTFillMatrix*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix),G__get_linked_tagnum(&G__ToolsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing))) {
     MHSimulatedAnnealing *G__Lderived;
     G__Lderived=(MHSimulatedAnnealing*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing),G__get_linked_tagnum(&G__ToolsCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing),G__get_linked_tagnum(&G__ToolsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing))) {
     MSimulatedAnnealing *G__Lderived;
     G__Lderived=(MSimulatedAnnealing*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MFFT))) {
     MFFT *G__Lderived;
     G__Lderived=(MFFT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MFFT),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff))) {
     MCubicCoeff *G__Lderived;
     G__Lderived=(MCubicCoeff*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline))) {
     MCubicSpline *G__Lderived;
     G__Lderived=(MCubicSpline*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi))) {
     MagicReversi *G__Lderived;
     G__Lderived=(MagicReversi*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake))) {
     MagicSnake *G__Lderived;
     G__Lderived=(MagicSnake*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MagicShow))) {
     MagicShow *G__Lderived;
     G__Lderived=(MagicShow*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicShow),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino))) {
     MagicDomino *G__Lderived;
     G__Lderived=(MagicDomino*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization))) {
     MagicCivilization *G__Lderived;
     G__Lderived=(MagicCivilization*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper))) {
     MineSweeper *G__Lderived;
     G__Lderived=(MineSweeper*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ToolsCintLN_MRolke))) {
     MRolke *G__Lderived;
     G__Lderived=(MRolke*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ToolsCintLN_MRolke),G__get_linked_tagnum(&G__ToolsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableToolsCint() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ToolsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ToolsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ToolsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ToolsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ToolsCintLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrix",117,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVector",117,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MChisqEval */
static void G__setup_memvarMChisqEval(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval));
   { MChisqEval *p; p=(MChisqEval*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ToolsCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__ToolsCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MData),-1,-1,4,"fData0=",0,"Data Member one (monte carlo data or chisq function)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MData),-1,-1,4,"fData1=",0,"Data Member two (measured data)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MParameterD),-1,-1,4,"fWeight=",0,"! Storage for weight");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MParameterD),-1,-1,4,"fResult=",0,"! Storage for result");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TString),-1,-1,4,"fNameResult=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TString),-1,-1,4,"fNameWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fChisq=",0,"! Evaluated chi square");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSumW=",0,"! Sum of weights");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MChisqEvalcLcLdA),-1,-2,4,"kIsOwner=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MTFillMatrix */
static void G__setup_memvarMTFillMatrix(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix));
   { MTFillMatrix *p; p=(MTFillMatrix*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MH3),-1,-1,4,"fReference=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MRead),-1,-1,4,"fReader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MHMatrix),-1,-1,4,"fDestMatrix1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MHMatrix),-1,-1,4,"fDestMatrix2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumDestEvents1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumDestEvents2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumMaxEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MTask),-1,-1,4,"fWriteFile1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MTask),-1,-1,4,"fWriteFile2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TList),-1,-1,4,"fPreCuts=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TList),-1,-1,4,"fPreTasks=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TList),-1,-1,4,"fPostTasks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHSimulatedAnnealing */
static void G__setup_memvarMHSimulatedAnnealing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing));
   { MHSimulatedAnnealing *p; p=(MHSimulatedAnnealing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fDim=",0,"The dimension of the whole thing");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fMoves=",0,"The total number of moves");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TObjArray),-1,-1,4,"fTimeEvolution=",0,"-> Display the time evolution of the simplex in TH1D's");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TH2F),-1,-1,4,"fBestEver=",0,"The best values ever found during search");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TH1F),-1,-1,4,"fBestFuncEval=",0,"The best function values ever found during search");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSimulatedAnnealing */
static void G__setup_memvarMSimulatedAnnealing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing));
   { MSimulatedAnnealing *p; p=(MSimulatedAnnealing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gsYtryStr=",0,"Fixed high value to keep the simplex inside the borders");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"gsYtryCon=",0,"Fixed high value to keep the simplex inside the borders");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsMaxDim=0LL",0,"Fixed maximum number of dimensions");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsMaxStep=0LL",0,"Fixed maximum number of loops with temperature=0");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing),-1,-1,4,"fResult=",0,"! The histogram output container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TRandom),-1,-1,4,"fRandom=",0,"The random number generator -> random numbers between 0 and 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Real_t"),-1,4,"fTolerance=",0,"The convergence break condition");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNdim=",0,"The number of parameters ");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fMpts=",0,"The number of simplex points (=fNdim+1)");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumberOfMoves=",0,"The total number of moves (== CPU time) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Real_t"),-1,4,"fStartTemperature=",0,"The start temperature -> will slowly get decreased to 0");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFullStorage=",0,"kTRUE -> the whole simplex gets stored in MHSimlutedAnnealing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fInit=",0,"kTRUE -> initialization was succesful");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TMatrixTlEfloatgR),G__defined_typename("TMatrix"),-1,4,"fP=",0,"The (ndim+1,ndim) matrix containing the simplex ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fPsum=",0,"The sum of each point of the simplex");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fP0=",0,"The boundary conditions on the weak side");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fP1=",0,"The boundary conditions on the strong side");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fY=",0,"The array containing the function evaluation results");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Real_t"),-1,4,"fYb=",0,"The best function evaluation value ever found");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Real_t"),-1,4,"fYconv=",0,"The function evaluation value at the convergence point");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fPb=",0,"The parameters belonging to fYb");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,4,"fPconv=",0,"The parameters belonging to fYconv");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t),-1,-2,1,G__FastAllocString(2048).Format("kENoBorder=%lldLL",(long long)MSimulatedAnnealing::kENoBorder).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t),-1,-2,1,G__FastAllocString(2048).Format("kEStrictBorder=%lldLL",(long long)MSimulatedAnnealing::kEStrictBorder).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t),-1,-2,1,G__FastAllocString(2048).Format("kEContractBorder=%lldLL",(long long)MSimulatedAnnealing::kEContractBorder).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t),-1,-2,1,G__FastAllocString(2048).Format("kEDefault=%lldLL",(long long)MSimulatedAnnealing::kEDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t),-1,-2,1,G__FastAllocString(2048).Format("kEVerbose=%lldLL",(long long)MSimulatedAnnealing::kEVerbose).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t),-1,-2,1,G__FastAllocString(2048).Format("kEDebug=%lldLL",(long long)MSimulatedAnnealing::kEDebug).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t),-1,-1,4,"fBorder=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t),-1,-1,4,"fVerbose=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MFFT */
static void G__setup_memvarMFFT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MFFT));
   { MFFT *p; p=(MFFT*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayF),-1,-1,4,"fDataF=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayD),-1,-1,4,"fDataD=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayF),-1,-1,4,"fWindowF=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayD),-1,-1,4,"fWindowD=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCubicCoeff */
static void G__setup_memvarMCubicCoeff(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff));
   { MCubicCoeff *p; p=(MCubicCoeff*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fX=",0,"abscissa");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fXNext=",0,"abscissa of the next point");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fA=",0,"3rd order coeff");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fB=",0,"2nd order coeff");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fC=",0,"1st order coeff");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fY=",0,"constant term");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fYNext=",0,"value in the next point");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fH=",0,"interval width");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMin=",0,"minimum value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMax=",0,"maximum value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAbMin=",0,"abscissa of the min");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAbMax=",0,"abscissa of the max");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCubicSpline */
static void G__setup_memvarMCubicSpline(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline));
   { MCubicSpline *p; p=(MCubicSpline*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TObjArray),-1,-1,4,"fCoeff=",0,"array of the coefficients");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MagicReversi */
static void G__setup_memvarMagicReversi(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi));
   { MagicReversi *p; p=(MagicReversi*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClonesArray),-1,-1,4,"fText=",0,"array of all texts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClonesArray),-1,-1,4,"fFlags=",0,"array of all texts");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fDone=",0,"TText showing the 'Game over'");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fUsrTxt[6]=",0,"TText showing the numbers of pixels and bombs");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumUsers=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumUser=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUsrPts[6]=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversicLcLdA),-1,-2,4,"kEmpty=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversicLcLdA),-1,-2,4,"kIsVisible=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversicLcLdA),-1,-2,4,"kHasBomb=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversicLcLdA),-1,-2,4,"kHasFlag=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicReversicLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MagicSnake */
static void G__setup_memvarMagicSnake(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake));
   { MagicSnake *p; p=(MagicSnake*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kRightTop=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kRight=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kRightBottom=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kLeftBottom=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kLeft=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kLeftTop=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kBackground=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kHasBomb=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kHasFood=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kHasWorm=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kHasTransport=524288LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kHasDoor=1048576LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicSnakecLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fLength=",0,"actual length of worm");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fArray=",0,"inices of pixels which are 'wormed'");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fDirection=",0,"actual direction of worm");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TTimer),-1,-1,4,"fTimer=",0,"timer rising the 500ms interrputs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fTransport[2]=",0,"pixel ids with the yellow transpoters");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumBombs=",0,"number of bombs in the field");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fNumFood=",0,"number of food packages");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fDone=",0,"TText showing the 'Game over'");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fPaused=",0,"TText showing the 'Game over'");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fShow=",0,"TText showing the numbers of pixels and bombs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TVirtualPad),-1,-1,4,"fDrawingPad=",0,"pad in which we are drawing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MagicShow */
static void G__setup_memvarMagicShow(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicShow));
   { MagicShow *p; p=(MagicShow*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicShowcLcLdA),-1,-2,4,"kBackground=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicShowcLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TTimer),-1,-1,4,"fTimer=",0,"timer rising the 500ms interrputs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumPixel=",0,"number of pixel actually shown");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAuto=",0,"automatic stepping on/off");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fShow=",0,"TText showing the numbers of pixels and bombs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fText[6]=",0,"ttext showing the pixel numbers of the neighbors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MagicDomino */
static void G__setup_memvarMagicDomino(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino));
   { MagicDomino *p; p=(MagicDomino*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kBackground=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kIsTile=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kRight=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kLeft=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kTop=524288LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kBottom=1048576LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kBottomLeft=1310720LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kBottomRight=1179648LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kTopLeft=786432LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicDominocLcLdA),-1,-2,4,"kTopRight=655360LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumPixel=",0,"number of actual pixel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumTile=",0,"number of setteled tiles");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPoints=",0,"points you got");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDir=",0,"direction you move the tile");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fOldColors[7]=",0,"colors of hexagons which are under the tile");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNewColors[6]=",0,"colors of the tile itself");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fPosition=",0,"rotation position of colors in tile");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fSkipped=",0,"number of skipped tiles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fDomino=",0,"TText showing status informations");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fText[6]=",0,"ttext showing the six numbers in the tile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fDone=",0,"game over text");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MagicCivilization */
static void G__setup_memvarMagicCivilization(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization));
   { MagicCivilization *p; p=(MagicCivilization*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilizationcLcLdA),-1,-2,4,"kBackground=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilizationcLcLdA),-1,-2,4,"kHasFlag=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilizationcLcLdA),-1,-2,4,"kHasCreation=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilizationcLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TTimer),-1,-1,4,"fTimer=",0,"timer rising the 500ms interrputs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fNumInit=",0,"number of bombs in the field");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAuto=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fNumCivilizations=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fCivilization=",0,"TText showing the numbers of pixels and bombs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MineSweeper */
static void G__setup_memvarMineSweeper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper));
   { MineSweeper *p; p=(MineSweeper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fColorBombs[7]=",0,"colors for the hexagons");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_MGeomCam),-1,-1,4,"fGeomCam=",0,"pointer to camera geometry");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,"number of pixels in the present geometry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumBombs=",0,"number of bombs in total");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRange=",0,"the range in millimeters of the present geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClonesArray),-1,-1,4,"fText=",0,"array of all texts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClonesArray),-1,-1,4,"fFlags=",0,"array of all texts");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TArrayI),-1,-1,4,"fColors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fDone=",0,"TText showing the 'Game over'");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TText),-1,-1,4,"fShow=",0,"TText showing the numbers of pixels and bombs");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MineSweepercLcLdA),-1,-2,4,"kHidden=50LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MineSweepercLcLdA),-1,-2,4,"kIsVisible=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MineSweepercLcLdA),-1,-2,4,"kHasBomb=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MineSweepercLcLdA),-1,-2,4,"kHasFlag=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__ToolsCintLN_MineSweepercLcLdA),-1,-2,4,"kUserBits=8372224LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MRolke */
static void G__setup_memvarMRolke(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ToolsCintLN_MRolke));
   { MRolke *p; p=(MRolke*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCL=",0,"confidence level as a fraction [e.g. 90% = 0.9]");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fUpperLimit=",0,"the calculated upper limit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLowerLimit=",0,"the calculated lower limit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSwitch=",0,"0: for unbounded likelihood");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ToolsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarToolsCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMChisqEval(void) {
   /* MChisqEval */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MChisqEval",973,G__ToolsCint_179_0_5, 105, G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MChisqEval",973,G__ToolsCint_179_0_6, 105, G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval), -1, 0, 3, 1, 1, 0, 
"U 'MData' - 0 - y1 C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MChisqEval",973,G__ToolsCint_179_0_7, 105, G__get_linked_tagnum(&G__ToolsCintLN_MChisqEval), -1, 0, 4, 1, 1, 0, 
"U 'MData' - 0 - y1 U 'MData' - 0 - y2 "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY1",438,G__ToolsCint_179_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MData' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY2",439,G__ToolsCint_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MData' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY1",438,G__ToolsCint_179_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetY2",439,G__ToolsCint_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwner",823,G__ToolsCint_179_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameWeight",1301,G__ToolsCint_179_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"MWeight\"' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChisq",792,G__ToolsCint_179_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_179_0_15, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MChisqEval::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_179_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MChisqEval::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_179_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MChisqEval::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_179_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MChisqEval::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_179_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_179_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MChisqEval::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_179_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MChisqEval::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_179_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MChisqEval::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_179_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MChisqEval::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MChisqEval", 1099, G__ToolsCint_179_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMTFillMatrix(void) {
   /* MTFillMatrix */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - name C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'TList' - 11 - src U 'TClass' - 10 - cls "
"u 'TList' - 1 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckResult",1117,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"U 'MHMatrix' - 0 - m i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMatrix",1152,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 4, 8, 
"U 'MHMatrix' - 0 - m u 'TString' - 11 - fname "
"i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MTFillMatrix",1181,G__ToolsCint_249_0_6, 105, G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MTFillMatrix",1181,G__ToolsCint_249_0_7, 105, G__get_linked_tagnum(&G__ToolsCintLN_MTFillMatrix), -1, 0, 3, 1, 1, 0, 
"U 'MH3' - 10 - ref C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDestMatrix1",1378,G__ToolsCint_249_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - matrix h - 'UInt_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWriteFile1",1256,G__ToolsCint_249_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MTask' - 0 - write h - 'UInt_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDestMatrix2",1379,G__ToolsCint_249_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MHMatrix' - 0 - matrix h - 'UInt_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWriteFile2",1257,G__ToolsCint_249_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'MTask' - 0 - write h - 'UInt_t' 0 '0' num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumDestEvents1",1682,G__ToolsCint_249_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumDestEvents2",1683,G__ToolsCint_249_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxEvents",1223,G__ToolsCint_249_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetReader",895,G__ToolsCint_249_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MRead' - 0 - task", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreCut",860,G__ToolsCint_249_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreCut",860,G__ToolsCint_249_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MFilter' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreCuts",975,G__ToolsCint_249_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TList' - 11 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearPreCuts",1197,G__ToolsCint_249_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearPreTasks",1300,G__ToolsCint_249_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearPostTasks",1427,G__ToolsCint_249_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreTask",963,G__ToolsCint_249_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPreTasks",1078,G__ToolsCint_249_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TList' - 11 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPostTask",1090,G__ToolsCint_249_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'MTask' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPostTasks",1205,G__ToolsCint_249_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TList' - 11 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,G__ToolsCint_249_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'MParList' - 11 'MParList()' plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMatrix1",1201,G__ToolsCint_249_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 11 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMatrix2",1202,G__ToolsCint_249_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 11 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMatrices",1347,G__ToolsCint_249_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 11 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_249_0_30, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MTFillMatrix::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_249_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTFillMatrix::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_249_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MTFillMatrix::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_249_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MTFillMatrix::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_249_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_249_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTFillMatrix::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_249_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTFillMatrix::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_249_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MTFillMatrix::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_249_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MTFillMatrix::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MTFillMatrix", 1307, G__ToolsCint_249_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHSimulatedAnnealing(void) {
   /* MHSimulatedAnnealing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing));
   G__memfunc_setup("MHSimulatedAnnealing",1994,G__ToolsCint_310_0_1, 105, G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing), -1, 0, 4, 1, 1, 0, 
"r - 'UShort_t' 0 '0' moves r - 'UShort_t' 0 '0' ndim "
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFullSimplex",1545,G__ToolsCint_310_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreFullSimplex",1666,G__ToolsCint_310_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 11 - p r - 'UShort_t' 10 - move", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StoreBestValueEver",1834,G__ToolsCint_310_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TVectorT<float>' 'TVector' 11 - y f - 'Float_t' 10 - yb "
"r - 'UShort_t' 10 - move", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeTitle",1096,G__ToolsCint_310_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"r - 'UShort_t' 10 - index C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeFuncTitle",1492,G__ToolsCint_310_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeEvolution",1652,G__ToolsCint_310_0_7, 85, G__get_linked_tagnum(&G__ToolsCintLN_TObjArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBestEver",1088,G__ToolsCint_310_0_8, 117, G__get_linked_tagnum(&G__ToolsCintLN_TH2F), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBestFuncEval",1474,G__ToolsCint_310_0_9, 117, G__get_linked_tagnum(&G__ToolsCintLN_TH1F), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClone",895,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ToolsCint_310_0_12, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHSimulatedAnnealing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_310_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSimulatedAnnealing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_310_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHSimulatedAnnealing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_310_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHSimulatedAnnealing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_310_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_310_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSimulatedAnnealing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_310_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSimulatedAnnealing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_310_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSimulatedAnnealing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_310_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSimulatedAnnealing::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHSimulatedAnnealing", 2120, G__ToolsCint_310_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSimulatedAnnealing(void) {
   /* MSimulatedAnnealing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing));
   G__memfunc_setup("Amebsa",585,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - iter f - 'Real_t' 10 - temp", "The function deciding if the simplex has to get reflected, expanded or contracted", (void*) NULL, 0);
   G__memfunc_setup("Amotsa",613,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Real_t"), 0, 4, 1, 4, 0, 
"f - 'Float_t' 10 - fac r - 'UShort_t' 10 - ihi "
"f - 'Real_t' 1 - yhi f - 'Real_t' 10 - temp", "The function reflecting, expanding and contracting the simplex: fac=-1 -> reflection, fac=0.5 -> contraction, fac=2.0 -> expansion", (void*) NULL, 0);
   G__memfunc_setup("GetPsum",709,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FunctionToMinimize",1867,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "u 'TVectorT<float>' 'TVector' 11 - arr", "The optimization function  ", (void*) NULL, 1);
   G__memfunc_setup("MSimulatedAnnealing",1922,G__ToolsCint_312_0_5, 105, G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ModifyTolerance",1541,G__ToolsCint_312_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ModifyBorderFlag",1600,G__ToolsCint_312_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MSimulatedAnnealing::BorderFlag_t' - 0 - border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__ToolsCint_312_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"u 'TMatrixT<float>' 'TMatrix' 11 - p u 'TVectorT<float>' 'TVector' 11 - y "
"u 'TVectorT<float>' 'TVector' 11 - p0 u 'TVectorT<float>' 'TVector' 11 - p1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberOfMoves",1620,G__ToolsCint_312_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - moves", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStartTemperature",1992,G__ToolsCint_312_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - temp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFullStorage",1428,G__ToolsCint_312_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVerbosityLevel",1771,G__ToolsCint_312_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MSimulatedAnnealing::Verbosity_t' - 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRandom",909,G__ToolsCint_312_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TRandom' - 0 - rand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPb",466,G__ToolsCint_312_0_14, 117, G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR), G__defined_typename("TVector"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYb",475,G__ToolsCint_312_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPconv",806,G__ToolsCint_312_0_16, 117, G__get_linked_tagnum(&G__ToolsCintLN_TVectorTlEfloatgR), G__defined_typename("TVector"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYconv",815,G__ToolsCint_312_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResult",927,G__ToolsCint_312_0_18, 85, G__get_linked_tagnum(&G__ToolsCintLN_MHSimulatedAnnealing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunMinimization",1581,G__ToolsCint_312_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_312_0_20, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSimulatedAnnealing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_312_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimulatedAnnealing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_312_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSimulatedAnnealing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_312_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSimulatedAnnealing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_312_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_312_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimulatedAnnealing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_312_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimulatedAnnealing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_312_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSimulatedAnnealing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_312_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSimulatedAnnealing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MSimulatedAnnealing", 1922, G__ToolsCint_312_0_32, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing), -1, 0, 1, 1, 1, 0, "u 'MSimulatedAnnealing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MSimulatedAnnealing", 2048, G__ToolsCint_312_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_312_0_34, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MSimulatedAnnealing), -1, 1, 1, 1, 1, 0, "u 'MSimulatedAnnealing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMFFT(void) {
   /* MFFT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MFFT));
   G__memfunc_setup("Swap",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"f - 'Float_t' 1 - a f - 'Float_t' 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Swap",411,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 1 - a d - 'Double_t' 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformF",1026,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - isign u 'TArrayF' - 1 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransformD",1024,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"i - 'Int_t' 10 - isign u 'TArrayD' - 1 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFTF",612,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 10 - isign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFTD",610,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 10 - isign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckDim",760,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckHist",886,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ToolsCintLN_TH1), -1, 0, 2, 1, 4, 0, 
"U 'TH1' - 10 - hist i - 'Int_t' 10 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyWindow",1150,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 4, 8, 
"i - 'Int_t' 10 - j f - 'Float_t' 10 - a "
"f - 'Float_t' 10 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MFFT",301,G__ToolsCint_316_0_10, 105, G__get_linked_tagnum(&G__ToolsCintLN_MFFT), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionFFT",1450,G__ToolsCint_316_0_11, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayF), -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionIFFT",1523,G__ToolsCint_316_0_12, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayF), -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionFFT",1450,G__ToolsCint_316_0_13, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'TArrayD' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionIFFT",1523,G__ToolsCint_316_0_14, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'TArrayD' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionFFT",1450,G__ToolsCint_316_0_15, 70, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - n F - 'Float_t' 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionIFFT",1523,G__ToolsCint_316_0_16, 70, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - n F - 'Float_t' 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionFFT",1450,G__ToolsCint_316_0_17, 68, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - n D - 'Double_t' 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionIFFT",1523,G__ToolsCint_316_0_18, 68, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - n D - 'Double_t' 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_19, 85, G__get_linked_tagnum(&G__ToolsCintLN_TH1F), -1, 0, 1, 1, 1, 0, "U 'TH1' - 10 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_20, 85, G__get_linked_tagnum(&G__ToolsCintLN_TH1F), -1, 0, 1, 1, 1, 0, "U 'TH1F' - 10 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_21, 85, G__get_linked_tagnum(&G__ToolsCintLN_TH1F), -1, 0, 1, 1, 1, 0, "U 'TH1I' - 10 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_22, 85, G__get_linked_tagnum(&G__ToolsCintLN_TH1D), -1, 0, 1, 1, 1, 0, "U 'TH1D' - 10 - hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_23, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayF), -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_24, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayF), -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_25, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayD), -1, 0, 1, 1, 1, 0, "U 'TArrayD' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_26, 85, G__get_linked_tagnum(&G__ToolsCintLN_MArrayF), -1, 0, 1, 1, 1, 0, "U 'MArrayI' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_27, 85, G__get_linked_tagnum(&G__ToolsCintLN_MArrayF), -1, 0, 1, 1, 1, 0, "U 'MArrayF' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PowerSpectrumDensity",2112,G__ToolsCint_316_0_28, 85, G__get_linked_tagnum(&G__ToolsCintLN_MArrayD), -1, 0, 1, 1, 1, 0, "U 'MArrayD' - 10 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RealFunctionSpectrum",2077,G__ToolsCint_316_0_29, 85, G__get_linked_tagnum(&G__ToolsCintLN_TArrayF), -1, 0, 1, 1, 1, 0, "U 'TArrayF' - 10 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_316_0_30, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MFFT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_316_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFFT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_316_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MFFT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_316_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MFFT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_316_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_316_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFFT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_316_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFFT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_316_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MFFT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_316_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MFFT::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MFFT", 301, G__ToolsCint_316_0_42, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MFFT), -1, 0, 1, 1, 1, 0, "u 'MFFT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MFFT", 427, G__ToolsCint_316_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_316_0_44, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MFFT), -1, 1, 1, 1, 1, 0, "u 'MFFT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCubicCoeff(void) {
   /* MCubicCoeff */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff));
   G__memfunc_setup("MCubicCoeff",1046,G__ToolsCint_317_0_1, 105, G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCubicCoeff",1046,G__ToolsCint_317_0_2, 105, G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff), -1, 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - xNext "
"d - 'Double_t' 0 - y d - 'Double_t' 0 - yNext "
"d - 'Double_t' 0 - a d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__ToolsCint_317_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetB",354,G__ToolsCint_317_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetC",355,G__ToolsCint_317_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMin",580,G__ToolsCint_317_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__ToolsCint_317_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbMin",743,G__ToolsCint_317_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbMax",745,G__ToolsCint_317_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__ToolsCint_317_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", "Evaluate the spline at a point x", (void*) NULL, 0);
   G__memfunc_setup("EvalMinMax",978,G__ToolsCint_317_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "Finds min & max", (void*) NULL, 0);
   G__memfunc_setup("FindCardanRoot",1390,G__ToolsCint_317_0_12, 115, -1, G__defined_typename("Short_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - y D - 'Double_t' 0 - x", "Evaluate the abscissa of the spline given y ", (void*) NULL, 0);
   G__memfunc_setup("IsIn",371,G__ToolsCint_317_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_317_0_14, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCubicCoeff::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_317_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicCoeff::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_317_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCubicCoeff::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_317_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCubicCoeff::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_317_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_317_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicCoeff::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_317_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCubicCoeff::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_317_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicCoeff::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_317_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCubicCoeff::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCubicCoeff", 1046, G__ToolsCint_317_0_26, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff), -1, 0, 1, 1, 1, 0, "u 'MCubicCoeff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCubicCoeff", 1172, G__ToolsCint_317_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_317_0_28, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MCubicCoeff), -1, 1, 1, 1, 1, 0, "u 'MCubicCoeff' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCubicSpline(void) {
   /* MCubicSpline */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline));
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 4, 0, 
"B - 'Byte_t' 10 - y B - 'Byte_t' 10 - x "
"g - 'Bool_t' 0 - areAllEq i - 'Int_t' 0 - n "
"d - 'Double_t' 0 - begSD d - 'Double_t' 0 - endSD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCubicSpline",1182,G__ToolsCint_318_0_2, 105, G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline), -1, 0, 6, 1, 1, 0, 
"B - 'Byte_t' 10 - y B - 'Byte_t' 10 - x "
"g - 'Bool_t' 0 - areAllEq i - 'Int_t' 0 - n "
"d - 'Double_t' 0 '0.0' begSD d - 'Double_t' 0 '0.0' endSD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCubicSpline",1182,G__ToolsCint_318_0_3, 105, G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline), -1, 0, 1, 1, 1, 0, "B - 'Byte_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__ToolsCint_318_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", "Eval the spline at a point x", (void*) NULL, 0);
   G__memfunc_setup("EvalMax",686,G__ToolsCint_318_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "Eval the max", (void*) NULL, 0);
   G__memfunc_setup("EvalMin",684,G__ToolsCint_318_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "Eval the min", (void*) NULL, 0);
   G__memfunc_setup("EvalAbMax",849,G__ToolsCint_318_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "Eval the abscissa of the max", (void*) NULL, 0);
   G__memfunc_setup("EvalAbMin",847,G__ToolsCint_318_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", "Eval the abscissa of the min", (void*) NULL, 0);
   G__memfunc_setup("FindVal",676,G__ToolsCint_318_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - y d - 'Double_t' 0 - x0 "
"c - 'Char_t' 0 - direction", "Finds the abscissa where the spline reaches y", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_318_0_10, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCubicSpline::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_318_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicSpline::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_318_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCubicSpline::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_318_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCubicSpline::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_318_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_318_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicSpline::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_318_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCubicSpline::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_318_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCubicSpline::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_318_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCubicSpline::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCubicSpline", 1182, G__ToolsCint_318_0_22, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline), -1, 0, 1, 1, 1, 0, "u 'MCubicSpline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCubicSpline", 1308, G__ToolsCint_318_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_318_0_24, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MCubicSpline), -1, 1, 1, 1, 1, 0, "u 'MCubicSpline' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMagicReversi(void) {
   /* MagicReversi */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi));
   G__memfunc_setup("GetText",709,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ToolsCintLN_TText), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ToolsCintLN_TMarker), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Done",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Flip",395,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - idx g - 'Bool_t' 0 - flip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckMoves",1000,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MagicReversi",1217,G__ToolsCint_324_0_14, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MagicReversi",1217,G__ToolsCint_324_0_15, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ToolsCint_324_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_324_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("TwoPlayer",935,G__ToolsCint_324_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ThreePlayer",1125,G__ToolsCint_324_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("FourPlayer",1033,G__ToolsCint_324_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("FivePlayer",1015,G__ToolsCint_324_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SixPlayer",929,G__ToolsCint_324_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_324_0_23, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MagicReversi::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_324_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicReversi::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_324_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MagicReversi::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_324_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MagicReversi::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_324_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_324_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicReversi::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_324_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicReversi::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_324_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicReversi::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_324_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicReversi::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MagicReversi", 1217, G__ToolsCint_324_0_35, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi), -1, 0, 1, 1, 1, 0, "u 'MagicReversi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MagicReversi", 1343, G__ToolsCint_324_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_324_0_37, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MagicReversi), -1, 1, 1, 1, 1, 0, "u 'MagicReversi' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMagicSnake(void) {
   /* MagicSnake */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake));
   G__memfunc_setup("Done",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - - i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Step",412,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - newpix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawHexagons",1227,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanNeighbours",1435,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWormColor",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pause",510,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTimer",1101,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'TTimer' - 0 - timer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MagicSnake",979,G__ToolsCint_359_0_16, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MagicSnake",979,G__ToolsCint_359_0_17, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicSnake), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ToolsCint_359_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_359_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_359_0_20, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MagicSnake::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_359_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicSnake::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_359_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MagicSnake::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_359_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MagicSnake::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_359_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_359_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicSnake::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_359_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicSnake::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_359_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicSnake::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_359_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicSnake::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MagicSnake", 1105, G__ToolsCint_359_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMagicShow(void) {
   /* MagicShow */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicShow));
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangePixel",1096,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTimer",1101,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'TTimer' - 0 - timer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MagicShow",898,G__ToolsCint_361_0_11, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicShow), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MagicShow",898,G__ToolsCint_361_0_12, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicShow), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_361_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_361_0_14, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MagicShow::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_361_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicShow::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_361_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MagicShow::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_361_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MagicShow::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_361_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_361_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicShow::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_361_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicShow::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_361_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicShow::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_361_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicShow::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MagicShow", 1024, G__ToolsCint_361_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMagicDomino(void) {
   /* MagicDomino */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino));
   G__memfunc_setup("CheckTile",876,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewTile",696,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewColors",924,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HideTile",776,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowTile",815,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotateTile",1021,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Done",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveNumbers",1354,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangePixel",1096,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Step",412,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AnalysePixel",1231,(G__InterfaceMethod) NULL, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSortedNeighbors",1842,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "I - 'Int_t' 0 - indices", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MagicDomino",1095,G__ToolsCint_363_0_21, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MagicDomino",1095,G__ToolsCint_363_0_22, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ToolsCint_363_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_363_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_363_0_25, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MagicDomino::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_363_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicDomino::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_363_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MagicDomino::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_363_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MagicDomino::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_363_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_363_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicDomino::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_363_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicDomino::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_363_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicDomino::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_363_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicDomino::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MagicDomino", 1095, G__ToolsCint_363_0_37, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino), -1, 0, 1, 1, 1, 0, "u 'MagicDomino' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MagicDomino", 1221, G__ToolsCint_363_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_363_0_39, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MagicDomino), -1, 1, 1, 1, 1, 0, "u 'MagicDomino' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMagicCivilization(void) {
   /* MagicCivilization */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization));
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandleTimer",1101,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'TTimer' - 0 - timer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MagicCivilization",1750,G__ToolsCint_365_0_9, 105, G__get_linked_tagnum(&G__ToolsCintLN_MagicCivilization), -1, 0, 2, 1, 1, 0, 
"b - 'Byte_t' 0 '2' lim r - 'UShort_t' 0 '200' init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_365_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ToolsCint_365_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_365_0_12, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MagicCivilization::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_365_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicCivilization::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_365_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MagicCivilization::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_365_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MagicCivilization::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_365_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_365_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicCivilization::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_365_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicCivilization::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_365_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MagicCivilization::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_365_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MagicCivilization::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MagicCivilization", 1876, G__ToolsCint_365_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMineSweeper(void) {
   /* MineSweeper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper));
   G__memfunc_setup("GetText",709,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ToolsCintLN_TText), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlag",666,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ToolsCintLN_TMarker), -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OpenHexagon",1116,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Done",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNewCamera",1183,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'MGeomCam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PaintPrimitives",1576,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Free",386,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistancetoPrimitive",1991,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - px i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MineSweeper",1124,G__ToolsCint_368_0_14, 105, G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MineSweeper",1124,G__ToolsCint_368_0_15, 105, G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper), -1, 0, 1, 1, 1, 0, "u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__ToolsCint_368_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("ChangeCamera",1167,G__ToolsCint_368_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_368_0_18, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MineSweeper::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_368_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MineSweeper::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_368_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MineSweeper::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_368_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MineSweeper::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_368_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_368_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MineSweeper::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_368_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MineSweeper::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_368_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MineSweeper::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_368_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MineSweeper::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MineSweeper", 1124, G__ToolsCint_368_0_30, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper), -1, 0, 1, 1, 1, 0, "u 'MineSweeper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MineSweeper", 1250, G__ToolsCint_368_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_368_0_32, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MineSweeper), -1, 1, 1, 1, 1, 0, "u 'MineSweeper' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMRolke(void) {
   /* MRolke */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ToolsCintLN_MRolke));
   G__memfunc_setup("Interval",837,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 12, 1, 2, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - z d - 'Double_t' 0 - bm "
"d - 'Double_t' 0 - em d - 'Double_t' 0 - e "
"i - 'Int_t' 0 - mid d - 'Double_t' 0 - sde "
"d - 'Double_t' 0 - sdb d - 'Double_t' 0 - tau "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Likelihood",1028,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 14, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y i - 'Int_t' 0 - z "
"d - 'Double_t' 0 - bm d - 'Double_t' 0 - em "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - mid "
"d - 'Double_t' 0 - sde d - 'Double_t' 0 - sdb "
"d - 'Double_t' 0 - tau d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod1",1118,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y i - 'Int_t' 0 - z "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - tau "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod1",726,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y i - 'Int_t' 0 - z "
"d - 'Double_t' 0 - tau i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProfLikeMod1",1133,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 1 - b "
"d - 'Double_t' 1 - e i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y i - 'Int_t' 0 - z "
"d - 'Double_t' 0 - tau i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeGradMod1",1108,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"d - 'Double_t' 0 - e d - 'Double_t' 0 - mu "
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - z d - 'Double_t' 0 - tau "
"i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod2",1119,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y d - 'Double_t' 0 - em "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - sde "
"d - 'Double_t' 0 - tau d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod2",727,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y d - 'Double_t' 0 - em "
"d - 'Double_t' 0 - tau d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod3",1120,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 9, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"d - 'Double_t' 0 - bm d - 'Double_t' 0 - em "
"d - 'Double_t' 0 - e d - 'Double_t' 0 - sde "
"d - 'Double_t' 0 - sdb d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod3",728,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 8, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - x "
"d - 'Double_t' 0 - bm d - 'Double_t' 0 - em "
"d - 'Double_t' 0 - u d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod4",1121,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - y d - 'Double_t' 0 - tau "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod4",729,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"d - 'Double_t' 0 - tau", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod5",1122,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"d - 'Double_t' 0 - bm d - 'Double_t' 0 - sdb "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod5",730,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - x d - 'Double_t' 0 - bm "
"d - 'Double_t' 0 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod6",1123,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - z d - 'Double_t' 0 - e "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod6",731,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - x "
"i - 'Int_t' 0 - z i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalLikeMod7",1124,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 2, 0, 
"d - 'Double_t' 0 - mu i - 'Int_t' 0 - x "
"d - 'Double_t' 0 - em d - 'Double_t' 0 - e "
"d - 'Double_t' 0 - sde d - 'Double_t' 0 - b "
"i - 'Int_t' 0 - what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LikeMod7",732,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 2, 0, 
"d - 'Double_t' 0 - mu d - 'Double_t' 0 - b "
"d - 'Double_t' 0 - e i - 'Int_t' 0 - x "
"d - 'Double_t' 0 - em d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalPolynomial",1452,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 2, 0, 
"d - 'Double_t' 0 - x I - 'Int_t' 10 - coef "
"i - 'Int_t' 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EvalMonomial",1220,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 2, 0, 
"d - 'Double_t' 0 - x I - 'Int_t' 10 - coef "
"i - 'Int_t' 0 - N", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogFactorial",1207,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 2, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MRolke",586,G__ToolsCint_370_0_22, 105, G__get_linked_tagnum(&G__ToolsCintLN_MRolke), -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '0.9' CL C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateInterval",1747,G__ToolsCint_370_0_23, 100, -1, G__defined_typename("Double_t"), 0, 12, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - z d - 'Double_t' 0 - bm "
"d - 'Double_t' 0 - em d - 'Double_t' 0 - e "
"i - 'Int_t' 0 - mid d - 'Double_t' 0 - sde "
"d - 'Double_t' 0 - sdb d - 'Double_t' 0 - tau "
"d - 'Double_t' 0 - b i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUpperLimit",1323,G__ToolsCint_370_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLowerLimit",1320,G__ToolsCint_370_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSwitch",914,G__ToolsCint_370_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSwitch",926,G__ToolsCint_370_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCL",431,G__ToolsCint_370_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCL",443,G__ToolsCint_370_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - CL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ToolsCint_370_0_30, 85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MRolke::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ToolsCint_370_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRolke::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ToolsCint_370_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MRolke::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ToolsCint_370_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MRolke::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ToolsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ToolsCint_370_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ToolsCint_370_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRolke::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ToolsCint_370_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRolke::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ToolsCint_370_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MRolke::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ToolsCint_370_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MRolke::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MRolke", 586, G__ToolsCint_370_0_42, (int) ('i'), G__get_linked_tagnum(&G__ToolsCintLN_MRolke), -1, 0, 1, 1, 1, 0, "u 'MRolke' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MRolke", 712, G__ToolsCint_370_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ToolsCint_370_0_44, (int) ('u'), G__get_linked_tagnum(&G__ToolsCintLN_MRolke), -1, 1, 1, 1, 1, 0, "u 'MRolke' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncToolsCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalToolsCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcToolsCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ToolsCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TTimer = { "TTimer" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ToolsCintLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MFilter = { "MFilter" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MData = { "MData" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MChisqEval = { "MChisqEval" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MChisqEvalcLcLdA = { "MChisqEval::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MArrayF = { "MArrayF" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MArrayD = { "MArrayD" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MH3 = { "MH3" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MTFillMatrix = { "MTFillMatrix" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MHSimulatedAnnealing = { "MHSimulatedAnnealing" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MSimulatedAnnealing = { "MSimulatedAnnealing" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t = { "MSimulatedAnnealing::BorderFlag_t" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t = { "MSimulatedAnnealing::Verbosity_t" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MArrayI = { "MArrayI" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MFFT = { "MFFT" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MCubicCoeff = { "MCubicCoeff" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MCubicSpline = { "MCubicSpline" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TText = { "TText" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_TMarker = { "TMarker" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicReversi = { "MagicReversi" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicReversicLcLdA = { "MagicReversi::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicSnake = { "MagicSnake" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicSnakecLcLdA = { "MagicSnake::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicShow = { "MagicShow" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicShowcLcLdA = { "MagicShow::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicDomino = { "MagicDomino" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicDominocLcLdA = { "MagicDomino::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicCivilization = { "MagicCivilization" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MagicCivilizationcLcLdA = { "MagicCivilization::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MineSweeper = { "MineSweeper" , 99 , -1 };
G__linked_taginfo G__ToolsCintLN_MineSweepercLcLdA = { "MineSweeper::$" , 101 , -1 };
G__linked_taginfo G__ToolsCintLN_MRolke = { "MRolke" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableToolsCint() {
  G__ToolsCintLN_TClass.tagnum = -1 ;
  G__ToolsCintLN_TBuffer.tagnum = -1 ;
  G__ToolsCintLN_TMemberInspector.tagnum = -1 ;
  G__ToolsCintLN_TObject.tagnum = -1 ;
  G__ToolsCintLN_TString.tagnum = -1 ;
  G__ToolsCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ToolsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ToolsCintLN_TList.tagnum = -1 ;
  G__ToolsCintLN_TObjArray.tagnum = -1 ;
  G__ToolsCintLN_TTimer.tagnum = -1 ;
  G__ToolsCintLN_TClonesArray.tagnum = -1 ;
  G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ToolsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ToolsCintLN_TVirtualPad.tagnum = -1 ;
  G__ToolsCintLN_TEnv.tagnum = -1 ;
  G__ToolsCintLN_TArrayD.tagnum = -1 ;
  G__ToolsCintLN_MParContainer.tagnum = -1 ;
  G__ToolsCintLN_MInputStreamID.tagnum = -1 ;
  G__ToolsCintLN_MFilter.tagnum = -1 ;
  G__ToolsCintLN_MParList.tagnum = -1 ;
  G__ToolsCintLN_MTask.tagnum = -1 ;
  G__ToolsCintLN_MData.tagnum = -1 ;
  G__ToolsCintLN_MParameterD.tagnum = -1 ;
  G__ToolsCintLN_MChisqEval.tagnum = -1 ;
  G__ToolsCintLN_MChisqEvalcLcLdA.tagnum = -1 ;
  G__ToolsCintLN_TArrayI.tagnum = -1 ;
  G__ToolsCintLN_TArrayF.tagnum = -1 ;
  G__ToolsCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ToolsCintLN_TH1D.tagnum = -1 ;
  G__ToolsCintLN_TH1.tagnum = -1 ;
  G__ToolsCintLN_TH1I.tagnum = -1 ;
  G__ToolsCintLN_TH1F.tagnum = -1 ;
  G__ToolsCintLN_MArrayF.tagnum = -1 ;
  G__ToolsCintLN_MArrayD.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ToolsCintLN_TH2F.tagnum = -1 ;
  G__ToolsCintLN_MH.tagnum = -1 ;
  G__ToolsCintLN_MH3.tagnum = -1 ;
  G__ToolsCintLN_MRead.tagnum = -1 ;
  G__ToolsCintLN_MHMatrix.tagnum = -1 ;
  G__ToolsCintLN_MTFillMatrix.tagnum = -1 ;
  G__ToolsCintLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ToolsCintLN_MHSimulatedAnnealing.tagnum = -1 ;
  G__ToolsCintLN_TRandom.tagnum = -1 ;
  G__ToolsCintLN_MSimulatedAnnealing.tagnum = -1 ;
  G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t.tagnum = -1 ;
  G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t.tagnum = -1 ;
  G__ToolsCintLN_MArrayI.tagnum = -1 ;
  G__ToolsCintLN_MFFT.tagnum = -1 ;
  G__ToolsCintLN_MCubicCoeff.tagnum = -1 ;
  G__ToolsCintLN_MCubicSpline.tagnum = -1 ;
  G__ToolsCintLN_TText.tagnum = -1 ;
  G__ToolsCintLN_TMarker.tagnum = -1 ;
  G__ToolsCintLN_MGeomCam.tagnum = -1 ;
  G__ToolsCintLN_MagicReversi.tagnum = -1 ;
  G__ToolsCintLN_MagicReversicLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MagicSnake.tagnum = -1 ;
  G__ToolsCintLN_MagicSnakecLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MagicShow.tagnum = -1 ;
  G__ToolsCintLN_MagicShowcLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MagicDomino.tagnum = -1 ;
  G__ToolsCintLN_MagicDominocLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MagicCivilization.tagnum = -1 ;
  G__ToolsCintLN_MagicCivilizationcLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MineSweeper.tagnum = -1 ;
  G__ToolsCintLN_MineSweepercLcLdA.tagnum = -1 ;
  G__ToolsCintLN_MRolke.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableToolsCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TString);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TList);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TTimer);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MFilter);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MData);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MParameterD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MChisqEval),sizeof(MChisqEval),-1,324864,(char*)NULL,G__setup_memvarMChisqEval,G__setup_memfuncMChisqEval);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MChisqEvalcLcLdA);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TH1D);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TH1I);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MArrayF);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MArrayD);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MH);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MH3);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MRead);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MHMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MTFillMatrix),sizeof(MTFillMatrix),-1,324864,"Tool to fill matrices (eg. trainings- and test-matrices)",G__setup_memvarMTFillMatrix,G__setup_memfuncMTFillMatrix);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMatrixTSparseDiaglEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MHSimulatedAnnealing),sizeof(MHSimulatedAnnealing),-1,324864,"Storage Histogram Container for Cuteval Results",G__setup_memvarMHSimulatedAnnealing,G__setup_memfuncMHSimulatedAnnealing);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TRandom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MSimulatedAnnealing),sizeof(MSimulatedAnnealing),-1,292096,"Class to perform a Simulated Annealing Minimization",G__setup_memvarMSimulatedAnnealing,G__setup_memfuncMSimulatedAnnealing);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MSimulatedAnnealingcLcLBorderFlag_t);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MSimulatedAnnealingcLcLVerbosity_t);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MFFT),sizeof(MFFT),-1,292096,"Class to perform a Fast Fourier Transform",G__setup_memvarMFFT,G__setup_memfuncMFFT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MCubicCoeff),sizeof(MCubicCoeff),-1,323840,"Class to contain spline coefficients",G__setup_memvarMCubicCoeff,G__setup_memfuncMCubicCoeff);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MCubicSpline),sizeof(MCubicSpline),-1,324608,"Class to contain spline coefficients",G__setup_memvarMCubicSpline,G__setup_memfuncMCubicSpline);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TText);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_TMarker);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MGeomCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicReversi),sizeof(MagicReversi),-1,324864,"Magic Camera Games: Reversi",G__setup_memvarMagicReversi,G__setup_memfuncMagicReversi);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicReversicLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicSnake),sizeof(MagicSnake),-1,324864,"Magic Camera Games: Snake",G__setup_memvarMagicSnake,G__setup_memfuncMagicSnake);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicSnakecLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicShow),sizeof(MagicShow),-1,324864,"Tool to visualize next neighbours",G__setup_memvarMagicShow,G__setup_memfuncMagicShow);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicShowcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicDomino),sizeof(MagicDomino),-1,324864,"Magic Camera Games: Some kind of Domino",G__setup_memvarMagicDomino,G__setup_memfuncMagicDomino);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicDominocLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicCivilization),sizeof(MagicCivilization),-1,292096,"Tool to visualize next neighbours",G__setup_memvarMagicCivilization,G__setup_memfuncMagicCivilization);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MagicCivilizationcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MineSweeper),sizeof(MineSweeper),-1,324864,"Magic Camera Games: Mine Sweeper",G__setup_memvarMineSweeper,G__setup_memfuncMineSweeper);
   G__get_linked_tagnum_fwd(&G__ToolsCintLN_MineSweepercLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ToolsCintLN_MRolke),sizeof(MRolke),-1,292096,"calculate confidence limits using the Rolke method",G__setup_memvarMRolke,G__setup_memfuncMRolke);
}
extern "C" void G__cpp_setupToolsCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupToolsCint()");
  G__set_cpp_environmentToolsCint();
  G__cpp_setup_tagtableToolsCint();

  G__cpp_setup_inheritanceToolsCint();

  G__cpp_setup_typetableToolsCint();

  G__cpp_setup_memvarToolsCint();

  G__cpp_setup_memfuncToolsCint();
  G__cpp_setup_globalToolsCint();
  G__cpp_setup_funcToolsCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncToolsCint();
  return;
}
class G__cpp_setup_initToolsCint {
  public:
    G__cpp_setup_initToolsCint() { G__add_setup_func("ToolsCint",(G__incsetup)(&G__cpp_setupToolsCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initToolsCint() { G__remove_setup_func("ToolsCint"); }
};
G__cpp_setup_initToolsCint G__cpp_setup_initializerToolsCint;

