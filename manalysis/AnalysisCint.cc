//
// File generated by rootcint at Mon Nov 28 11:05:45 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME AnalysisCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "AnalysisCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MGeomApply_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MGeomApply(void *p = 0);
   static void *newArray_MGeomApply(Long_t size, void *p);
   static void delete_MGeomApply(void *p);
   static void deleteArray_MGeomApply(void *p);
   static void destruct_MGeomApply(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MGeomApply*)
   {
      ::MGeomApply *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MGeomApply >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MGeomApply", ::MGeomApply::Class_Version(), "./MGeomApply.h", 12,
                  typeid(::MGeomApply), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MGeomApply::Dictionary, isa_proxy, 4,
                  sizeof(::MGeomApply) );
      instance.SetNew(&new_MGeomApply);
      instance.SetNewArray(&newArray_MGeomApply);
      instance.SetDelete(&delete_MGeomApply);
      instance.SetDeleteArray(&deleteArray_MGeomApply);
      instance.SetDestructor(&destruct_MGeomApply);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MGeomApply*)
   {
      return GenerateInitInstanceLocal((::MGeomApply*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MGeomApply*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCameraData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCameraData(void *p = 0);
   static void *newArray_MCameraData(Long_t size, void *p);
   static void delete_MCameraData(void *p);
   static void deleteArray_MCameraData(void *p);
   static void destruct_MCameraData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCameraData*)
   {
      ::MCameraData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCameraData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCameraData", ::MCameraData::Class_Version(), "./MCameraData.h", 22,
                  typeid(::MCameraData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCameraData::Dictionary, isa_proxy, 4,
                  sizeof(::MCameraData) );
      instance.SetNew(&new_MCameraData);
      instance.SetNewArray(&newArray_MCameraData);
      instance.SetDelete(&delete_MCameraData);
      instance.SetDeleteArray(&deleteArray_MCameraData);
      instance.SetDestructor(&destruct_MCameraData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCameraData*)
   {
      return GenerateInitInstanceLocal((::MCameraData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCameraData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MParameterCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MParameterCalc(void *p = 0);
   static void *newArray_MParameterCalc(Long_t size, void *p);
   static void delete_MParameterCalc(void *p);
   static void deleteArray_MParameterCalc(void *p);
   static void destruct_MParameterCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MParameterCalc*)
   {
      ::MParameterCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MParameterCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MParameterCalc", ::MParameterCalc::Class_Version(), "./MParameterCalc.h", 12,
                  typeid(::MParameterCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MParameterCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MParameterCalc) );
      instance.SetNew(&new_MParameterCalc);
      instance.SetNewArray(&newArray_MParameterCalc);
      instance.SetDelete(&delete_MParameterCalc);
      instance.SetDeleteArray(&deleteArray_MParameterCalc);
      instance.SetDestructor(&destruct_MParameterCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MParameterCalc*)
   {
      return GenerateInitInstanceLocal((::MParameterCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MParameterCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MEnergyEstimate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MEnergyEstimate(void *p = 0);
   static void *newArray_MEnergyEstimate(Long_t size, void *p);
   static void delete_MEnergyEstimate(void *p);
   static void deleteArray_MEnergyEstimate(void *p);
   static void destruct_MEnergyEstimate(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MEnergyEstimate*)
   {
      ::MEnergyEstimate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MEnergyEstimate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MEnergyEstimate", ::MEnergyEstimate::Class_Version(), "./MEnergyEstimate.h", 9,
                  typeid(::MEnergyEstimate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MEnergyEstimate::Dictionary, isa_proxy, 4,
                  sizeof(::MEnergyEstimate) );
      instance.SetNew(&new_MEnergyEstimate);
      instance.SetNewArray(&newArray_MEnergyEstimate);
      instance.SetDelete(&delete_MEnergyEstimate);
      instance.SetDeleteArray(&deleteArray_MEnergyEstimate);
      instance.SetDestructor(&destruct_MEnergyEstimate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MEnergyEstimate*)
   {
      return GenerateInitInstanceLocal((::MEnergyEstimate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MEnergyEstimate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMatrixLoop_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_MMatrixLoop(void *p);
   static void deleteArray_MMatrixLoop(void *p);
   static void destruct_MMatrixLoop(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMatrixLoop*)
   {
      ::MMatrixLoop *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMatrixLoop >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMatrixLoop", ::MMatrixLoop::Class_Version(), "./MMatrixLoop.h", 11,
                  typeid(::MMatrixLoop), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMatrixLoop::Dictionary, isa_proxy, 4,
                  sizeof(::MMatrixLoop) );
      instance.SetDelete(&delete_MMatrixLoop);
      instance.SetDeleteArray(&deleteArray_MMatrixLoop);
      instance.SetDestructor(&destruct_MMatrixLoop);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMatrixLoop*)
   {
      return GenerateInitInstanceLocal((::MMatrixLoop*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMatrixLoop*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMultiDimDistCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMultiDimDistCalc(void *p = 0);
   static void *newArray_MMultiDimDistCalc(Long_t size, void *p);
   static void delete_MMultiDimDistCalc(void *p);
   static void deleteArray_MMultiDimDistCalc(void *p);
   static void destruct_MMultiDimDistCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMultiDimDistCalc*)
   {
      ::MMultiDimDistCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMultiDimDistCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMultiDimDistCalc", ::MMultiDimDistCalc::Class_Version(), "./MMultiDimDistCalc.h", 14,
                  typeid(::MMultiDimDistCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMultiDimDistCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MMultiDimDistCalc) );
      instance.SetNew(&new_MMultiDimDistCalc);
      instance.SetNewArray(&newArray_MMultiDimDistCalc);
      instance.SetDelete(&delete_MMultiDimDistCalc);
      instance.SetDeleteArray(&deleteArray_MMultiDimDistCalc);
      instance.SetDestructor(&destruct_MMultiDimDistCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMultiDimDistCalc*)
   {
      return GenerateInitInstanceLocal((::MMultiDimDistCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMultiDimDistCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MEventRate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MEventRate(void *p = 0);
   static void *newArray_MEventRate(Long_t size, void *p);
   static void delete_MEventRate(void *p);
   static void deleteArray_MEventRate(void *p);
   static void destruct_MEventRate(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MEventRate*)
   {
      ::MEventRate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MEventRate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MEventRate", ::MEventRate::Class_Version(), "./MEventRate.h", 9,
                  typeid(::MEventRate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MEventRate::Dictionary, isa_proxy, 4,
                  sizeof(::MEventRate) );
      instance.SetNew(&new_MEventRate);
      instance.SetNewArray(&newArray_MEventRate);
      instance.SetDelete(&delete_MEventRate);
      instance.SetDeleteArray(&deleteArray_MEventRate);
      instance.SetDestructor(&destruct_MEventRate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MEventRate*)
   {
      return GenerateInitInstanceLocal((::MEventRate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MEventRate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MEventRateCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MEventRateCalc(void *p = 0);
   static void *newArray_MEventRateCalc(Long_t size, void *p);
   static void delete_MEventRateCalc(void *p);
   static void deleteArray_MEventRateCalc(void *p);
   static void destruct_MEventRateCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MEventRateCalc*)
   {
      ::MEventRateCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MEventRateCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MEventRateCalc", ::MEventRateCalc::Class_Version(), "./MEventRateCalc.h", 16,
                  typeid(::MEventRateCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MEventRateCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MEventRateCalc) );
      instance.SetNew(&new_MEventRateCalc);
      instance.SetNewArray(&newArray_MEventRateCalc);
      instance.SetDelete(&delete_MEventRateCalc);
      instance.SetDeleteArray(&deleteArray_MEventRateCalc);
      instance.SetDestructor(&destruct_MEventRateCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MEventRateCalc*)
   {
      return GenerateInitInstanceLocal((::MEventRateCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MEventRateCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMcCalibrationUpdate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMcCalibrationUpdate(void *p = 0);
   static void *newArray_MMcCalibrationUpdate(Long_t size, void *p);
   static void delete_MMcCalibrationUpdate(void *p);
   static void deleteArray_MMcCalibrationUpdate(void *p);
   static void destruct_MMcCalibrationUpdate(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMcCalibrationUpdate*)
   {
      ::MMcCalibrationUpdate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMcCalibrationUpdate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMcCalibrationUpdate", ::MMcCalibrationUpdate::Class_Version(), "./MMcCalibrationUpdate.h", 20,
                  typeid(::MMcCalibrationUpdate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMcCalibrationUpdate::Dictionary, isa_proxy, 4,
                  sizeof(::MMcCalibrationUpdate) );
      instance.SetNew(&new_MMcCalibrationUpdate);
      instance.SetNewArray(&newArray_MMcCalibrationUpdate);
      instance.SetDelete(&delete_MMcCalibrationUpdate);
      instance.SetDeleteArray(&deleteArray_MMcCalibrationUpdate);
      instance.SetDestructor(&destruct_MMcCalibrationUpdate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMcCalibrationUpdate*)
   {
      return GenerateInitInstanceLocal((::MMcCalibrationUpdate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMcCalibrationUpdate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSoftwareTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSoftwareTrigger(void *p = 0);
   static void *newArray_MSoftwareTrigger(Long_t size, void *p);
   static void delete_MSoftwareTrigger(void *p);
   static void deleteArray_MSoftwareTrigger(void *p);
   static void destruct_MSoftwareTrigger(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSoftwareTrigger*)
   {
      ::MSoftwareTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSoftwareTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSoftwareTrigger", ::MSoftwareTrigger::Class_Version(), "./MSoftwareTrigger.h", 9,
                  typeid(::MSoftwareTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSoftwareTrigger::Dictionary, isa_proxy, 4,
                  sizeof(::MSoftwareTrigger) );
      instance.SetNew(&new_MSoftwareTrigger);
      instance.SetNewArray(&newArray_MSoftwareTrigger);
      instance.SetDelete(&delete_MSoftwareTrigger);
      instance.SetDeleteArray(&deleteArray_MSoftwareTrigger);
      instance.SetDestructor(&destruct_MSoftwareTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSoftwareTrigger*)
   {
      return GenerateInitInstanceLocal((::MSoftwareTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSoftwareTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MSoftwareTriggerCalc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MSoftwareTriggerCalc(void *p = 0);
   static void *newArray_MSoftwareTriggerCalc(Long_t size, void *p);
   static void delete_MSoftwareTriggerCalc(void *p);
   static void deleteArray_MSoftwareTriggerCalc(void *p);
   static void destruct_MSoftwareTriggerCalc(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MSoftwareTriggerCalc*)
   {
      ::MSoftwareTriggerCalc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MSoftwareTriggerCalc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MSoftwareTriggerCalc", ::MSoftwareTriggerCalc::Class_Version(), "./MSoftwareTriggerCalc.h", 13,
                  typeid(::MSoftwareTriggerCalc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MSoftwareTriggerCalc::Dictionary, isa_proxy, 4,
                  sizeof(::MSoftwareTriggerCalc) );
      instance.SetNew(&new_MSoftwareTriggerCalc);
      instance.SetNewArray(&newArray_MSoftwareTriggerCalc);
      instance.SetDelete(&delete_MSoftwareTriggerCalc);
      instance.SetDeleteArray(&deleteArray_MSoftwareTriggerCalc);
      instance.SetDestructor(&destruct_MSoftwareTriggerCalc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MSoftwareTriggerCalc*)
   {
      return GenerateInitInstanceLocal((::MSoftwareTriggerCalc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MSoftwareTriggerCalc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MGeomApply::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MGeomApply::Class_Name()
{
   return "MGeomApply";
}

//______________________________________________________________________________
const char *MGeomApply::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomApply*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MGeomApply::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomApply*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MGeomApply::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomApply*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MGeomApply::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MGeomApply*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCameraData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCameraData::Class_Name()
{
   return "MCameraData";
}

//______________________________________________________________________________
const char *MCameraData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCameraData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCameraData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCameraData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCameraData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MParameterCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MParameterCalc::Class_Name()
{
   return "MParameterCalc";
}

//______________________________________________________________________________
const char *MParameterCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MParameterCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MParameterCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MParameterCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MParameterCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MParameterCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MParameterCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MParameterCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MEnergyEstimate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MEnergyEstimate::Class_Name()
{
   return "MEnergyEstimate";
}

//______________________________________________________________________________
const char *MEnergyEstimate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEnergyEstimate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MEnergyEstimate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEnergyEstimate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MEnergyEstimate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEnergyEstimate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MEnergyEstimate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEnergyEstimate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMatrixLoop::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMatrixLoop::Class_Name()
{
   return "MMatrixLoop";
}

//______________________________________________________________________________
const char *MMatrixLoop::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMatrixLoop*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMatrixLoop::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMatrixLoop*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMatrixLoop::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMatrixLoop*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMatrixLoop::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMatrixLoop*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMultiDimDistCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMultiDimDistCalc::Class_Name()
{
   return "MMultiDimDistCalc";
}

//______________________________________________________________________________
const char *MMultiDimDistCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMultiDimDistCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMultiDimDistCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMultiDimDistCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMultiDimDistCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMultiDimDistCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMultiDimDistCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMultiDimDistCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MEventRate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MEventRate::Class_Name()
{
   return "MEventRate";
}

//______________________________________________________________________________
const char *MEventRate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MEventRate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MEventRate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MEventRate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MEventRateCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MEventRateCalc::Class_Name()
{
   return "MEventRateCalc";
}

//______________________________________________________________________________
const char *MEventRateCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRateCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MEventRateCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRateCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MEventRateCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRateCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MEventRateCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MEventRateCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMcCalibrationUpdate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMcCalibrationUpdate::Class_Name()
{
   return "MMcCalibrationUpdate";
}

//______________________________________________________________________________
const char *MMcCalibrationUpdate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCalibrationUpdate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMcCalibrationUpdate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCalibrationUpdate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMcCalibrationUpdate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCalibrationUpdate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMcCalibrationUpdate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMcCalibrationUpdate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSoftwareTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSoftwareTrigger::Class_Name()
{
   return "MSoftwareTrigger";
}

//______________________________________________________________________________
const char *MSoftwareTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSoftwareTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSoftwareTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSoftwareTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MSoftwareTriggerCalc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MSoftwareTriggerCalc::Class_Name()
{
   return "MSoftwareTriggerCalc";
}

//______________________________________________________________________________
const char *MSoftwareTriggerCalc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTriggerCalc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MSoftwareTriggerCalc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTriggerCalc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MSoftwareTriggerCalc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTriggerCalc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MSoftwareTriggerCalc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MSoftwareTriggerCalc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MCameraData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCameraData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCameraData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCameraData::Class(),this);
   }
}

//______________________________________________________________________________
void MCameraData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCameraData.
      TClass *R__cl = ::MCameraData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", &fData);
      R__insp.InspectMember(fData, "fData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fValidity", &fValidity);
      R__insp.InspectMember(fValidity, "fValidity.");
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCameraData(void *p) {
      return  p ? new(p) ::MCameraData : new ::MCameraData;
   }
   static void *newArray_MCameraData(Long_t nElements, void *p) {
      return p ? new(p) ::MCameraData[nElements] : new ::MCameraData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCameraData(void *p) {
      delete ((::MCameraData*)p);
   }
   static void deleteArray_MCameraData(void *p) {
      delete [] ((::MCameraData*)p);
   }
   static void destruct_MCameraData(void *p) {
      typedef ::MCameraData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCameraData

//______________________________________________________________________________
void MGeomApply::Streamer(TBuffer &R__b)
{
   // Stream an object of class MGeomApply.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MGeomApply::Class(),this);
   } else {
      R__b.WriteClassBuffer(MGeomApply::Class(),this);
   }
}

//______________________________________________________________________________
void MGeomApply::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MGeomApply.
      TClass *R__cl = ::MGeomApply::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGeomName", &fGeomName);
      R__insp.InspectMember(fGeomName, "fGeomName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNamesList", &fNamesList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fList", &fList);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MGeomApply(void *p) {
      return  p ? new(p) ::MGeomApply : new ::MGeomApply;
   }
   static void *newArray_MGeomApply(Long_t nElements, void *p) {
      return p ? new(p) ::MGeomApply[nElements] : new ::MGeomApply[nElements];
   }
   // Wrapper around operator delete
   static void delete_MGeomApply(void *p) {
      delete ((::MGeomApply*)p);
   }
   static void deleteArray_MGeomApply(void *p) {
      delete [] ((::MGeomApply*)p);
   }
   static void destruct_MGeomApply(void *p) {
      typedef ::MGeomApply current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MGeomApply

//______________________________________________________________________________
void MMultiDimDistCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMultiDimDistCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMultiDimDistCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMultiDimDistCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MMultiDimDistCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMultiDimDistCalc.
      TClass *R__cl = ::MMultiDimDistCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNum", &fNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseKernel", &fUseKernel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHadronnessName", &fHadronnessName);
      R__insp.InspectMember(fHadronnessName, "fHadronnessName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMGammas", &fMGammas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMHadrons", &fMHadrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHadronness", &fHadronness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMultiDimDistCalc(void *p) {
      return  p ? new(p) ::MMultiDimDistCalc : new ::MMultiDimDistCalc;
   }
   static void *newArray_MMultiDimDistCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MMultiDimDistCalc[nElements] : new ::MMultiDimDistCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMultiDimDistCalc(void *p) {
      delete ((::MMultiDimDistCalc*)p);
   }
   static void deleteArray_MMultiDimDistCalc(void *p) {
      delete [] ((::MMultiDimDistCalc*)p);
   }
   static void destruct_MMultiDimDistCalc(void *p) {
      typedef ::MMultiDimDistCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMultiDimDistCalc

//______________________________________________________________________________
void MEnergyEstimate::Streamer(TBuffer &R__b)
{
   // Stream an object of class MEnergyEstimate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MEnergyEstimate::Class(),this);
   } else {
      R__b.WriteClassBuffer(MEnergyEstimate::Class(),this);
   }
}

//______________________________________________________________________________
void MEnergyEstimate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MEnergyEstimate.
      TClass *R__cl = ::MEnergyEstimate::IsA();
      if (R__cl || R__insp.IsA()) { }
      MParameterCalc::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MEnergyEstimate(void *p) {
      return  p ? new(p) ::MEnergyEstimate : new ::MEnergyEstimate;
   }
   static void *newArray_MEnergyEstimate(Long_t nElements, void *p) {
      return p ? new(p) ::MEnergyEstimate[nElements] : new ::MEnergyEstimate[nElements];
   }
   // Wrapper around operator delete
   static void delete_MEnergyEstimate(void *p) {
      delete ((::MEnergyEstimate*)p);
   }
   static void deleteArray_MEnergyEstimate(void *p) {
      delete [] ((::MEnergyEstimate*)p);
   }
   static void destruct_MEnergyEstimate(void *p) {
      typedef ::MEnergyEstimate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MEnergyEstimate

//______________________________________________________________________________
void MParameterCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MParameterCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MParameterCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MParameterCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MParameterCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MParameterCalc.
      TClass *R__cl = ::MParameterCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParameter", &fParameter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameParameter", &fNameParameter);
      R__insp.InspectMember(fNameParameter, "fNameParameter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCounter[2]", fCounter);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MParameterCalc(void *p) {
      return  p ? new(p) ::MParameterCalc : new ::MParameterCalc;
   }
   static void *newArray_MParameterCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MParameterCalc[nElements] : new ::MParameterCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MParameterCalc(void *p) {
      delete ((::MParameterCalc*)p);
   }
   static void deleteArray_MParameterCalc(void *p) {
      delete [] ((::MParameterCalc*)p);
   }
   static void destruct_MParameterCalc(void *p) {
      typedef ::MParameterCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MParameterCalc

//______________________________________________________________________________
void MMatrixLoop::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMatrixLoop.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMatrixLoop::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMatrixLoop::Class(),this);
   }
}

//______________________________________________________________________________
void MMatrixLoop::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMatrixLoop.
      TClass *R__cl = ::MMatrixLoop::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMatrix", &fMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumRow", &fNumRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOperationMode", &fOperationMode);
      MRead::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_MMatrixLoop(void *p) {
      delete ((::MMatrixLoop*)p);
   }
   static void deleteArray_MMatrixLoop(void *p) {
      delete [] ((::MMatrixLoop*)p);
   }
   static void destruct_MMatrixLoop(void *p) {
      typedef ::MMatrixLoop current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMatrixLoop

//______________________________________________________________________________
void MEventRate::Streamer(TBuffer &R__b)
{
   // Stream an object of class MEventRate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MEventRate::Class(),this);
   } else {
      R__b.WriteClassBuffer(MEventRate::Class(),this);
   }
}

//______________________________________________________________________________
void MEventRate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MEventRate.
      TClass *R__cl = ::MEventRate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRate", &fRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MEventRate(void *p) {
      return  p ? new(p) ::MEventRate : new ::MEventRate;
   }
   static void *newArray_MEventRate(Long_t nElements, void *p) {
      return p ? new(p) ::MEventRate[nElements] : new ::MEventRate[nElements];
   }
   // Wrapper around operator delete
   static void delete_MEventRate(void *p) {
      delete ((::MEventRate*)p);
   }
   static void deleteArray_MEventRate(void *p) {
      delete [] ((::MEventRate*)p);
   }
   static void destruct_MEventRate(void *p) {
      typedef ::MEventRate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MEventRate

//______________________________________________________________________________
void MEventRateCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MEventRateCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MEventRateCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MEventRateCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MEventRateCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MEventRateCalc.
      TClass *R__cl = ::MEventRateCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeRate", &fTimeRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRate", &fRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTimeDiff", &fTimeDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameEventRate", &fNameEventRate);
      R__insp.InspectMember(fNameEventRate, "fNameEventRate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTime", &fNameTime);
      R__insp.InspectMember(fNameTime, "fNameTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTimeRate", &fNameTimeRate);
      R__insp.InspectMember(fNameTimeRate, "fNameTimeRate.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTimeDiff", &fNameTimeDiff);
      R__insp.InspectMember(fNameTimeDiff, "fNameTimeDiff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimes", &fTimes);
      R__insp.InspectMember(fTimes, "fTimes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumFirstEvent", &fNumFirstEvent);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MEventRateCalc(void *p) {
      return  p ? new(p) ::MEventRateCalc : new ::MEventRateCalc;
   }
   static void *newArray_MEventRateCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MEventRateCalc[nElements] : new ::MEventRateCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MEventRateCalc(void *p) {
      delete ((::MEventRateCalc*)p);
   }
   static void deleteArray_MEventRateCalc(void *p) {
      delete [] ((::MEventRateCalc*)p);
   }
   static void destruct_MEventRateCalc(void *p) {
      typedef ::MEventRateCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MEventRateCalc

//______________________________________________________________________________
void MMcCalibrationUpdate::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMcCalibrationUpdate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMcCalibrationUpdate::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMcCalibrationUpdate::Class(),this);
   }
}

//______________________________________________________________________________
void MMcCalibrationUpdate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMcCalibrationUpdate.
      TClass *R__cl = ::MMcCalibrationUpdate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCam", &fCalCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQECam", &fQECam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPedPhotCam", &fPedPhotCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeom", &fGeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeaderFadc", &fHeaderFadc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignalCam", &fSignalCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC2PhElInner", &fADC2PhElInner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fADC2PhElOuter", &fADC2PhElOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFillCalibrationCam", &fFillCalibrationCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterPixelsGainScaling", &fOuterPixelsGainScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitude", &fAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitudeOuter", &fAmplitudeOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fConversionHiLo", &fConversionHiLo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHeaderLow2HiGainFactor", &fHeaderLow2HiGainFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUserLow2HiGainFactor", &fUserLow2HiGainFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOuterPixelsLightCollection", &fOuterPixelsLightCollection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignalType", &fSignalType);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMcCalibrationUpdate(void *p) {
      return  p ? new(p) ::MMcCalibrationUpdate : new ::MMcCalibrationUpdate;
   }
   static void *newArray_MMcCalibrationUpdate(Long_t nElements, void *p) {
      return p ? new(p) ::MMcCalibrationUpdate[nElements] : new ::MMcCalibrationUpdate[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMcCalibrationUpdate(void *p) {
      delete ((::MMcCalibrationUpdate*)p);
   }
   static void deleteArray_MMcCalibrationUpdate(void *p) {
      delete [] ((::MMcCalibrationUpdate*)p);
   }
   static void destruct_MMcCalibrationUpdate(void *p) {
      typedef ::MMcCalibrationUpdate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMcCalibrationUpdate

//______________________________________________________________________________
void MSoftwareTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSoftwareTrigger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSoftwareTrigger::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSoftwareTrigger::Class(),this);
   }
}

//______________________________________________________________________________
void MSoftwareTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSoftwareTrigger.
      TClass *R__cl = ::MSoftwareTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPatch", &fPatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBaseline", &fBaseline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPosition", &fPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitude", &fAmplitude);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSoftwareTrigger(void *p) {
      return  p ? new(p) ::MSoftwareTrigger : new ::MSoftwareTrigger;
   }
   static void *newArray_MSoftwareTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::MSoftwareTrigger[nElements] : new ::MSoftwareTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSoftwareTrigger(void *p) {
      delete ((::MSoftwareTrigger*)p);
   }
   static void deleteArray_MSoftwareTrigger(void *p) {
      delete [] ((::MSoftwareTrigger*)p);
   }
   static void destruct_MSoftwareTrigger(void *p) {
      typedef ::MSoftwareTrigger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSoftwareTrigger

//______________________________________________________________________________
void MSoftwareTriggerCalc::Streamer(TBuffer &R__b)
{
   // Stream an object of class MSoftwareTriggerCalc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MSoftwareTriggerCalc::Class(),this);
   } else {
      R__b.WriteClassBuffer(MSoftwareTriggerCalc::Class(),this);
   }
}

//______________________________________________________________________________
void MSoftwareTriggerCalc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MSoftwareTriggerCalc.
      TClass *R__cl = ::MSoftwareTriggerCalc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrigger", &fTrigger);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MSoftwareTriggerCalc(void *p) {
      return  p ? new(p) ::MSoftwareTriggerCalc : new ::MSoftwareTriggerCalc;
   }
   static void *newArray_MSoftwareTriggerCalc(Long_t nElements, void *p) {
      return p ? new(p) ::MSoftwareTriggerCalc[nElements] : new ::MSoftwareTriggerCalc[nElements];
   }
   // Wrapper around operator delete
   static void delete_MSoftwareTriggerCalc(void *p) {
      delete ((::MSoftwareTriggerCalc*)p);
   }
   static void deleteArray_MSoftwareTriggerCalc(void *p) {
      delete [] ((::MSoftwareTriggerCalc*)p);
   }
   static void destruct_MSoftwareTriggerCalc(void *p) {
      typedef ::MSoftwareTriggerCalc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MSoftwareTriggerCalc

/********************************************************
* AnalysisCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableAnalysisCint();

extern "C" void G__set_cpp_environmentAnalysisCint() {
  G__cpp_reset_tagtableAnalysisCint();
}
#include <new>
extern "C" int G__cpp_dllrevAnalysisCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MGeomApply */
static int G__AnalysisCint_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomApply* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomApply((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MGeomApply((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MGeomApply((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MGeomApply((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomApply[n];
       } else {
         p = new((void*) gvp) MGeomApply[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MGeomApply;
       } else {
         p = new((void*) gvp) MGeomApply;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomApply*) G__getstructoffset())->SetGeometry(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomApply*) G__getstructoffset())->AddCamEvent((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomApply*) G__getstructoffset())->AddCamEvent((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MGeomApply::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomApply::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MGeomApply::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MGeomApply::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MGeomApply*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomApply::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomApply::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MGeomApply::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MGeomApply::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MGeomApply* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MGeomApply(*(MGeomApply*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MGeomApply G__TMGeomApply;
static int G__AnalysisCint_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MGeomApply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MGeomApply*) (soff+(sizeof(MGeomApply)*i)))->~G__TMGeomApply();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MGeomApply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MGeomApply*) (soff))->~G__TMGeomApply();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_178_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MGeomApply* dest = (MGeomApply*) G__getstructoffset();
   *dest = *(MGeomApply*) libp->para[0].ref;
   const MGeomApply& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCameraData */
static int G__AnalysisCint_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCameraData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCameraData((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCameraData((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraData[n];
       } else {
         p = new((void*) gvp) MCameraData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCameraData;
       } else {
         p = new((void*) gvp) MCameraData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MCameraData*) G__getstructoffset())->GetNumPixels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningLevel(*(MSignalCam*) libp->para[0].ref, *(MPedPhotCam*) libp->para[1].ref
, *(MGeomCam*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningLevel(*(MSignalCam*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, *(MGeomCam*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningLevel2(*(MSignalCam*) libp->para[0].ref, *(MPedPhotCam*) libp->para[1].ref
, *(MGeomCam*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningLevelDemocratic(*(MSignalCam*) libp->para[0].ref, *(MPedPhotCam*) libp->para[1].ref
, *(MGeomCam*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningProbability(*(MSignalCam*) libp->para[0].ref, *(MPedPhotCam*) libp->para[1].ref
, *(MGeomCam*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningAbsolute(*(MSignalCam*) libp->para[0].ref, *(MGeomCam*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->CalcCleaningArrivalTime(*(MSignalCam*) libp->para[0].ref, *(MGeomCam*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayD& obj = ((const MCameraData*) G__getstructoffset())->GetData();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayC& obj = ((const MCameraData*) G__getstructoffset())->GetValidity();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCameraData*) G__getstructoffset())->operator[]((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCameraData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCameraData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCameraData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCameraData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCameraData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_184_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCameraData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_184_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCameraData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCameraData(*(MCameraData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCameraData G__TMCameraData;
static int G__AnalysisCint_184_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCameraData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCameraData*) (soff+(sizeof(MCameraData)*i)))->~G__TMCameraData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCameraData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCameraData*) (soff))->~G__TMCameraData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_184_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCameraData* dest = (MCameraData*) G__getstructoffset();
   *dest = *(MCameraData*) libp->para[0].ref;
   const MCameraData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MParameterCalc */
static int G__AnalysisCint_187_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MParameterCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MParameterCalc(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MParameterCalc(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MParameterCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MParameterCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MParameterCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MParameterCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MParameterCalc[n];
       } else {
         p = new((void*) gvp) MParameterCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MParameterCalc;
       } else {
         p = new((void*) gvp) MParameterCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MParameterCalc*) G__getstructoffset())->SetRule((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MParameterCalc*) G__getstructoffset())->SetNameParameter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MParameterCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MParameterCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MParameterCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MParameterCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MParameterCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MParameterCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MParameterCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MParameterCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_187_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MParameterCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_187_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MParameterCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MParameterCalc(*(MParameterCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MParameterCalc G__TMParameterCalc;
static int G__AnalysisCint_187_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MParameterCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MParameterCalc*) (soff+(sizeof(MParameterCalc)*i)))->~G__TMParameterCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MParameterCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MParameterCalc*) (soff))->~G__TMParameterCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_187_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MParameterCalc* dest = (MParameterCalc*) G__getstructoffset();
   *dest = *(MParameterCalc*) libp->para[0].ref;
   const MParameterCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MEnergyEstimate */
static int G__AnalysisCint_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEnergyEstimate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEnergyEstimate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MEnergyEstimate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEnergyEstimate((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MEnergyEstimate((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEnergyEstimate[n];
       } else {
         p = new((void*) gvp) MEnergyEstimate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEnergyEstimate;
       } else {
         p = new((void*) gvp) MEnergyEstimate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MEnergyEstimate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEnergyEstimate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MEnergyEstimate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MEnergyEstimate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEnergyEstimate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEnergyEstimate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEnergyEstimate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEnergyEstimate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEnergyEstimate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MEnergyEstimate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MEnergyEstimate(*(MEnergyEstimate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MEnergyEstimate G__TMEnergyEstimate;
static int G__AnalysisCint_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MEnergyEstimate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MEnergyEstimate*) (soff+(sizeof(MEnergyEstimate)*i)))->~G__TMEnergyEstimate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MEnergyEstimate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MEnergyEstimate*) (soff))->~G__TMEnergyEstimate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEnergyEstimate* dest = (MEnergyEstimate*) G__getstructoffset();
   *dest = *(MEnergyEstimate*) libp->para[0].ref;
   const MEnergyEstimate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMatrixLoop */
static int G__AnalysisCint_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMatrixLoop* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMatrixLoop(
(MHMatrix*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MMatrixLoop(
(MHMatrix*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMatrixLoop((MHMatrix*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMatrixLoop((MHMatrix*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMatrixLoop((MHMatrix*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMatrixLoop((MHMatrix*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMatrixLoop*) G__getstructoffset())->SetOperationMode((MMatrixLoop::OperationMode_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMatrixLoop::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMatrixLoop::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMatrixLoop::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMatrixLoop::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMatrixLoop*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMatrixLoop::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMatrixLoop::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMatrixLoop::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMatrixLoop::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMatrixLoop* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMatrixLoop(*(MMatrixLoop*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMatrixLoop G__TMMatrixLoop;
static int G__AnalysisCint_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMatrixLoop*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMatrixLoop*) (soff+(sizeof(MMatrixLoop)*i)))->~G__TMMatrixLoop();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMatrixLoop*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMatrixLoop*) (soff))->~G__TMMatrixLoop();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMatrixLoop* dest = (MMatrixLoop*) G__getstructoffset();
   *dest = *(MMatrixLoop*) libp->para[0].ref;
   const MMatrixLoop& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMultiDimDistCalc */
static int G__AnalysisCint_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMultiDimDistCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMultiDimDistCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMultiDimDistCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMultiDimDistCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMultiDimDistCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMultiDimDistCalc[n];
       } else {
         p = new((void*) gvp) MMultiDimDistCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMultiDimDistCalc;
       } else {
         p = new((void*) gvp) MMultiDimDistCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMultiDimDistCalc*) G__getstructoffset())->SetHadronnessName(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MMultiDimDistCalc*) G__getstructoffset())->GetHadronnessName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMultiDimDistCalc*) G__getstructoffset())->SetUseNumRows((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMultiDimDistCalc*) G__getstructoffset())->SetUseNumRows();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MMultiDimDistCalc*) G__getstructoffset())->SetUseKernelMethod((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MMultiDimDistCalc*) G__getstructoffset())->SetUseKernelMethod();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMultiDimDistCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMultiDimDistCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMultiDimDistCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMultiDimDistCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMultiDimDistCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMultiDimDistCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMultiDimDistCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMultiDimDistCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMultiDimDistCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMultiDimDistCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMultiDimDistCalc(*(MMultiDimDistCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMultiDimDistCalc G__TMMultiDimDistCalc;
static int G__AnalysisCint_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMultiDimDistCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMultiDimDistCalc*) (soff+(sizeof(MMultiDimDistCalc)*i)))->~G__TMMultiDimDistCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMultiDimDistCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMultiDimDistCalc*) (soff))->~G__TMMultiDimDistCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMultiDimDistCalc* dest = (MMultiDimDistCalc*) G__getstructoffset();
   *dest = *(MMultiDimDistCalc*) libp->para[0].ref;
   const MMultiDimDistCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MEventRate */
static int G__AnalysisCint_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEventRate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEventRate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MEventRate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEventRate((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MEventRate((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEventRate[n];
       } else {
         p = new((void*) gvp) MEventRate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEventRate;
       } else {
         p = new((void*) gvp) MEventRate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRate*) G__getstructoffset())->SetRate((Double_t) G__double(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MEventRate*) G__getstructoffset())->GetRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MEventRate*) G__getstructoffset())->GetError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MEventRate*) G__getstructoffset())->GetNumEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MEventRate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MEventRate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MEventRate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEventRate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEventRate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MEventRate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MEventRate(*(MEventRate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MEventRate G__TMEventRate;
static int G__AnalysisCint_196_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MEventRate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MEventRate*) (soff+(sizeof(MEventRate)*i)))->~G__TMEventRate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MEventRate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MEventRate*) (soff))->~G__TMEventRate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_196_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEventRate* dest = (MEventRate*) G__getstructoffset();
   *dest = *(MEventRate*) libp->para[0].ref;
   const MEventRate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MEventRateCalc */
static int G__AnalysisCint_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEventRateCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEventRateCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MEventRateCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MEventRateCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MEventRateCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEventRateCalc[n];
       } else {
         p = new((void*) gvp) MEventRateCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MEventRateCalc;
       } else {
         p = new((void*) gvp) MEventRateCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->SetNumEvents((ULong_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->SetNameEventRate((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->SetNameTime((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->SetNameTimeDiff((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->SetNameTimeRate((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MEventRateCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRateCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MEventRateCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MEventRateCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MEventRateCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRateCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEventRateCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MEventRateCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_198_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MEventRateCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_198_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MEventRateCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MEventRateCalc(*(MEventRateCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MEventRateCalc G__TMEventRateCalc;
static int G__AnalysisCint_198_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MEventRateCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MEventRateCalc*) (soff+(sizeof(MEventRateCalc)*i)))->~G__TMEventRateCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MEventRateCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MEventRateCalc*) (soff))->~G__TMEventRateCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_198_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MEventRateCalc* dest = (MEventRateCalc*) G__getstructoffset();
   *dest = *(MEventRateCalc*) libp->para[0].ref;
   const MEventRateCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMcCalibrationUpdate */
static int G__AnalysisCint_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcCalibrationUpdate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcCalibrationUpdate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMcCalibrationUpdate((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMcCalibrationUpdate((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMcCalibrationUpdate((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcCalibrationUpdate[n];
       } else {
         p = new((void*) gvp) MMcCalibrationUpdate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMcCalibrationUpdate;
       } else {
         p = new((void*) gvp) MMcCalibrationUpdate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCalibrationUpdate*) G__getstructoffset())->SetOuterPixelsGainScaling((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCalibrationUpdate*) G__getstructoffset())->SetUserLow2HiGainFactor((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCalibrationUpdate*) G__getstructoffset())->SetSignalType((MCalibrateData::SignalType_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MMcCalibrationUpdate*) G__getstructoffset())->GetSignalType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMcCalibrationUpdate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCalibrationUpdate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMcCalibrationUpdate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMcCalibrationUpdate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMcCalibrationUpdate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCalibrationUpdate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcCalibrationUpdate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMcCalibrationUpdate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMcCalibrationUpdate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_213_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MMcCalibrationUpdate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MMcCalibrationUpdate(*(MMcCalibrationUpdate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMcCalibrationUpdate G__TMMcCalibrationUpdate;
static int G__AnalysisCint_213_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMcCalibrationUpdate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMcCalibrationUpdate*) (soff+(sizeof(MMcCalibrationUpdate)*i)))->~G__TMMcCalibrationUpdate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMcCalibrationUpdate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMcCalibrationUpdate*) (soff))->~G__TMMcCalibrationUpdate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_213_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMcCalibrationUpdate* dest = (MMcCalibrationUpdate*) G__getstructoffset();
   *dest = *(MMcCalibrationUpdate*) libp->para[0].ref;
   const MMcCalibrationUpdate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSoftwareTrigger */
static int G__AnalysisCint_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSoftwareTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSoftwareTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSoftwareTrigger((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSoftwareTrigger((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSoftwareTrigger((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSoftwareTrigger[n];
       } else {
         p = new((void*) gvp) MSoftwareTrigger[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSoftwareTrigger;
       } else {
         p = new((void*) gvp) MSoftwareTrigger;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSoftwareTrigger*) G__getstructoffset())->SetData((Short_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (UShort_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSoftwareTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSoftwareTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSoftwareTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSoftwareTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSoftwareTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSoftwareTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MSoftwareTrigger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MSoftwareTrigger(*(MSoftwareTrigger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSoftwareTrigger G__TMSoftwareTrigger;
static int G__AnalysisCint_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSoftwareTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSoftwareTrigger*) (soff+(sizeof(MSoftwareTrigger)*i)))->~G__TMSoftwareTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSoftwareTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSoftwareTrigger*) (soff))->~G__TMSoftwareTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSoftwareTrigger* dest = (MSoftwareTrigger*) G__getstructoffset();
   *dest = *(MSoftwareTrigger*) libp->para[0].ref;
   const MSoftwareTrigger& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MSoftwareTriggerCalc */
static int G__AnalysisCint_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSoftwareTriggerCalc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSoftwareTriggerCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MSoftwareTriggerCalc((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MSoftwareTriggerCalc((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MSoftwareTriggerCalc((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSoftwareTriggerCalc[n];
       } else {
         p = new((void*) gvp) MSoftwareTriggerCalc[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MSoftwareTriggerCalc;
       } else {
         p = new((void*) gvp) MSoftwareTriggerCalc;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MSoftwareTriggerCalc*) G__getstructoffset())->InitArrays((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MSoftwareTriggerCalc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTriggerCalc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MSoftwareTriggerCalc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MSoftwareTriggerCalc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MSoftwareTriggerCalc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTriggerCalc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSoftwareTriggerCalc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MSoftwareTriggerCalc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__AnalysisCint_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MSoftwareTriggerCalc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__AnalysisCint_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MSoftwareTriggerCalc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MSoftwareTriggerCalc(*(MSoftwareTriggerCalc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MSoftwareTriggerCalc G__TMSoftwareTriggerCalc;
static int G__AnalysisCint_217_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MSoftwareTriggerCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MSoftwareTriggerCalc*) (soff+(sizeof(MSoftwareTriggerCalc)*i)))->~G__TMSoftwareTriggerCalc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MSoftwareTriggerCalc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MSoftwareTriggerCalc*) (soff))->~G__TMSoftwareTriggerCalc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__AnalysisCint_217_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MSoftwareTriggerCalc* dest = (MSoftwareTriggerCalc*) G__getstructoffset();
   *dest = *(MSoftwareTriggerCalc*) libp->para[0].ref;
   const MSoftwareTriggerCalc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MGeomApply */

/* MCameraData */

/* MParameterCalc */

/* MEnergyEstimate */

/* MMatrixLoop */

/* MMultiDimDistCalc */

/* MEventRate */

/* MEventRateCalc */

/* MMcCalibrationUpdate */

/* MSoftwareTrigger */

/* MSoftwareTriggerCalc */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncAnalysisCint {
 public:
  G__Sizep2memfuncAnalysisCint(): p(&G__Sizep2memfuncAnalysisCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncAnalysisCint::*p)();
};

size_t G__get_sizep2memfuncAnalysisCint()
{
  G__Sizep2memfuncAnalysisCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceAnalysisCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply))) {
     MGeomApply *G__Lderived;
     G__Lderived=(MGeomApply*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData))) {
     MCameraData *G__Lderived;
     G__Lderived=(MCameraData*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData),G__get_linked_tagnum(&G__AnalysisCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc))) {
     MParameterCalc *G__Lderived;
     G__Lderived=(MParameterCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate))) {
     MEnergyEstimate *G__Lderived;
     G__Lderived=(MEnergyEstimate*)0x1000;
     {
       MParameterCalc *G__Lpbase=(MParameterCalc*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate),G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop))) {
     MMatrixLoop *G__Lderived;
     G__Lderived=(MMatrixLoop*)0x1000;
     {
       MRead *G__Lpbase=(MRead*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop),G__get_linked_tagnum(&G__AnalysisCintLN_MRead),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc))) {
     MMultiDimDistCalc *G__Lderived;
     G__Lderived=(MMultiDimDistCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate))) {
     MEventRate *G__Lderived;
     G__Lderived=(MEventRate*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc))) {
     MEventRateCalc *G__Lderived;
     G__Lderived=(MEventRateCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate))) {
     MMcCalibrationUpdate *G__Lderived;
     G__Lderived=(MMcCalibrationUpdate*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger))) {
     MSoftwareTrigger *G__Lderived;
     G__Lderived=(MSoftwareTrigger*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc))) {
     MSoftwareTriggerCalc *G__Lderived;
     G__Lderived=(MSoftwareTriggerCalc*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc),G__get_linked_tagnum(&G__AnalysisCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc),G__get_linked_tagnum(&G__AnalysisCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableAnalysisCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__AnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__AnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MGeomApply */
static void G__setup_memvarMGeomApply(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply));
   { MGeomApply *p; p=(MGeomApply*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fGeomName=",0,"Name of geometry class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TList),-1,-1,4,"fNamesList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TList),-1,-1,4,"fList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCameraData */
static void G__setup_memvarMCameraData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData));
   { MCameraData *p; p=(MCameraData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TArrayD),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TArrayC),-1,-1,4,"fValidity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MParameterCalc */
static void G__setup_memvarMParameterCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc));
   { MParameterCalc *p; p=(MParameterCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MData),-1,-1,4,"fData=",0,"-> Input MDataPhrase with rule");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MParameterD),-1,-1,4,"fParameter=",0,"!  Output parameter");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fNameParameter=",0,"!  Name for output parameter");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("ULong_t"),-1,4,"fCounter[2]=",0,"!  Counterf for continues");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MEnergyEstimate */
static void G__setup_memvarMEnergyEstimate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate));
   { MEnergyEstimate *p; p=(MEnergyEstimate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMatrixLoop */
static void G__setup_memvarMMatrixLoop(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop));
   { MMatrixLoop *p; p=(MMatrixLoop*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kDefault=%lldLL",(long long)MMatrixLoop::kDefault).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kEven=%lldLL",(long long)MMatrixLoop::kEven).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t),-1,-2,1,G__FastAllocString(2048).Format("kOdd=%lldLL",(long long)MMatrixLoop::kOdd).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MHMatrix),-1,-1,4,"fMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumRow=",0,"! Number of dimensions of histogram");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,4,"fOperationMode=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMultiDimDistCalc */
static void G__setup_memvarMMultiDimDistCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc));
   { MMultiDimDistCalc *p; p=(MMultiDimDistCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNum=",0,"number of distances used for an avarage");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseKernel=",0,"Flag whether kernel method should be used");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fHadronnessName=",0,"Name of container storing hadronness");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MHMatrix),-1,-1,4,"fMGammas=",0,"! Gammas describing matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MHMatrix),-1,-1,4,"fMHadrons=",0,"! Hadrons (non gammas) describing matrix");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MParameterD),-1,-1,4,"fHadronness=",0,"! Output container for calculated hadroness");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MDataArray),-1,-1,4,"fData=",0,"! Used to store the MDataChains to get the event values");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MEventRate */
static void G__setup_memvarMEventRate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate));
   { MEventRate *p; p=(MEventRate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRate=",0,"[Hz] Event rate");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"Number of events correspoding to this rate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MEventRateCalc */
static void G__setup_memvarMEventRateCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc));
   { MEventRateCalc *p; p=(MEventRateCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsDefName=",0,"! Default name of container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsDefTitle=",0,"! Default title of container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsNameEventRate=",0,"! default name of rate container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsNameTime=",0,"! Default name of time container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsNameTimeDiff=",0,"! default name of time-diff container");
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-2,4,"gsNameTimeRate=",0,"! default name of time-rate container");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"gsNumEvents=0LL",0,"! Default number of events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MTime),-1,-1,4,"fTime=",0,"! pointer to event time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MTime),-1,-1,4,"fTimeRate=",0,"! pointer to time of event rate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate),-1,-1,4,"fRate=",0,"! pointer to rate storage container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MParameterD),-1,-1,4,"fTimeDiff=",0,"! Difference of time between two consecutive events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fNameEventRate=",0,"name of event rate container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fNameTime=",0,"name of time container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fNameTimeRate=",0,"name of event rate time container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TString),-1,-1,4,"fNameTimeDiff=",0,"name of time-diff container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TArrayD),-1,-1,4,"fTimes=",0,"! internal array to store the last n event times");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNumFirstEvent=",0,"! Number of first event in file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMcCalibrationUpdate */
static void G__setup_memvarMMcCalibrationUpdate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate));
   { MMcCalibrationUpdate *p; p=(MMcCalibrationUpdate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MCalibrationChargeCam),-1,-1,4,"fCalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MCalibrationQECam),-1,-1,4,"fQECam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MPedPhotCam),-1,-1,4,"fPedPhotCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MGeomCam),-1,-1,4,"fGeom=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MMcFadcHeader),-1,-1,4,"fHeaderFadc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MExtractedSignalCam),-1,-1,4,"fSignalCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADC2PhElInner=",0,"Conversion factor from ADC counts to photo-electrons");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fADC2PhElOuter=",0,"for inner and outer pixels.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFillCalibrationCam=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOuterPixelsGainScaling=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplitude=",0,"FADC parameters from camera simulation (see camera manual)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplitudeOuter=",0,"to be read from the MMcFadcHeader.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fConversionHiLo=",0,"Ratio of high to low gain to be used for low gain signal calibration.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fHeaderLow2HiGainFactor=",0,"Ratio of high to low gain, as read from the MMcFadcHeader");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUserLow2HiGainFactor=",0,"Ratio of high to low gain, as set manually by the user");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOuterPixelsLightCollection=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MCalibrateDatacLcLSignalType_t),-1,-1,4,"fSignalType=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSoftwareTrigger */
static void G__setup_memvarMSoftwareTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger));
   { MSoftwareTrigger *p; p=(MSoftwareTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fPatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBaseline=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fPosition=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAmplitude=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MSoftwareTriggerCalc */
static void G__setup_memvarMSoftwareTriggerCalc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc));
   { MSoftwareTriggerCalc *p; p=(MSoftwareTriggerCalc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MRawEvtData),-1,-1,4,"fRawEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MPedestalSubtractedEvt),-1,-1,4,"fSignal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger),-1,-1,4,"fTrigger=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__AnalysisCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarAnalysisCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMGeomApply(void) {
   /* MGeomApply */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply));
   G__memfunc_setup("ProcessAutomatic",1670,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'MParList' - 1 - plist u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessManual",1341,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 8, 
"u 'MParList' - 1 - plist u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MGeomApply",987,G__AnalysisCint_178_0_6, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeometry",1144,G__AnalysisCint_178_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCamEvent",1052,G__AnalysisCint_178_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCamEvent",1052,G__AnalysisCint_178_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_178_0_10, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MGeomApply::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_178_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomApply::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_178_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MGeomApply::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_178_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MGeomApply::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_178_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_178_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomApply::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_178_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomApply::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_178_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MGeomApply::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_178_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MGeomApply::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MGeomApply", 987, G__AnalysisCint_178_0_22, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply), -1, 0, 1, 1, 1, 0, "u 'MGeomApply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MGeomApply", 1113, G__AnalysisCint_178_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_178_0_24, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MGeomApply), -1, 1, 1, 1, 1, 0, "u 'MGeomApply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCameraData(void) {
   /* MCameraData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData));
   G__memfunc_setup("MCameraData",1040,G__AnalysisCint_184_0_1, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPixels",1221,G__AnalysisCint_184_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningLevel",1676,G__AnalysisCint_184_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MPedPhotCam' - 11 - fCam "
"u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningLevel",1676,G__AnalysisCint_184_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt d - 'Double_t' 0 - noise "
"u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningLevel2",1726,G__AnalysisCint_184_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MPedPhotCam' - 11 - fCam "
"u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningLevelDemocratic",2695,G__AnalysisCint_184_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MPedPhotCam' - 11 - cam "
"u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningProbability",2325,G__AnalysisCint_184_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MPedPhotCam' - 11 - pcam "
"u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningAbsolute",2003,G__AnalysisCint_184_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcCleaningArrivalTime",2292,G__AnalysisCint_184_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'MSignalCam' - 11 - evt u 'MGeomCam' - 11 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__AnalysisCint_184_0_10, 117, G__get_linked_tagnum(&G__AnalysisCintLN_TArrayD), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidity",1126,G__AnalysisCint_184_0_11, 117, G__get_linked_tagnum(&G__AnalysisCintLN_TArrayC), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__AnalysisCint_184_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__AnalysisCint_184_0_16, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCameraData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_184_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_184_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCameraData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_184_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCameraData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_184_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_184_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_184_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_184_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCameraData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_184_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCameraData::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCameraData", 1040, G__AnalysisCint_184_0_28, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData), -1, 0, 1, 1, 1, 0, "u 'MCameraData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCameraData", 1166, G__AnalysisCint_184_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_184_0_30, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MCameraData), -1, 1, 1, 1, 1, 0, "u 'MCameraData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMParameterCalc(void) {
   /* MParameterCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc));
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MParameterCalc",1377,G__AnalysisCint_187_0_5, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc), -1, 0, 3, 1, 1, 0, 
"C - - 10 '0' def C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRule",708,G__AnalysisCint_187_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - - 10 - rule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVariables",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNameParameter",1614,G__AnalysisCint_187_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' o", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__AnalysisCint_187_0_10, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MParameterCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_187_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MParameterCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_187_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MParameterCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_187_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MParameterCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_187_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_187_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MParameterCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_187_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MParameterCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_187_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MParameterCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_187_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MParameterCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MParameterCalc", 1377, G__AnalysisCint_187_0_22, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc), -1, 0, 1, 1, 1, 0, "u 'MParameterCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MParameterCalc", 1503, G__AnalysisCint_187_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_187_0_24, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MParameterCalc), -1, 1, 1, 1, 1, 0, "u 'MParameterCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMEnergyEstimate(void) {
   /* MEnergyEstimate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate));
   G__memfunc_setup("MEnergyEstimate",1523,G__AnalysisCint_188_0_1, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_188_0_2, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MEnergyEstimate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_188_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEnergyEstimate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_188_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MEnergyEstimate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_188_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MEnergyEstimate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_188_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_188_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEnergyEstimate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_188_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEnergyEstimate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_188_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEnergyEstimate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_188_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEnergyEstimate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MEnergyEstimate", 1523, G__AnalysisCint_188_0_14, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate), -1, 0, 1, 1, 1, 0, "u 'MEnergyEstimate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MEnergyEstimate", 1649, G__AnalysisCint_188_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_188_0_16, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MEnergyEstimate), -1, 1, 1, 1, 1, 0, "u 'MEnergyEstimate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMatrixLoop(void) {
   /* MMatrixLoop */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop));
   G__memfunc_setup("GetEntries",1018,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFullFileName",1460,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__AnalysisCintLN_TString), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Rewind",617,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddFile",649,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"C - - 10 - fname i - 'Int_t' 0 '-1' entries", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddFiles",764,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'MDirIter' - 1 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMatrixLoop",1116,G__AnalysisCint_192_0_8, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop), -1, 0, 3, 1, 1, 0, 
"U 'MHMatrix' - 0 - mat C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOperationMode",1634,G__AnalysisCint_192_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MMatrixLoop::OperationMode_t' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_192_0_10, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMatrixLoop::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_192_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMatrixLoop::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_192_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMatrixLoop::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_192_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMatrixLoop::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_192_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_192_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMatrixLoop::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_192_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMatrixLoop::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_192_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMatrixLoop::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_192_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMatrixLoop::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMatrixLoop", 1116, G__AnalysisCint_192_0_22, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop), -1, 0, 1, 1, 1, 0, "u 'MMatrixLoop' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMatrixLoop", 1242, G__AnalysisCint_192_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_192_0_24, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MMatrixLoop), -1, 1, 1, 1, 1, 0, "u 'MMatrixLoop' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMultiDimDistCalc(void) {
   /* MMultiDimDistCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc));
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMultiDimDistCalc",1657,G__AnalysisCint_195_0_4, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHadronnessName",1730,G__AnalysisCint_195_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHadronnessName",1718,G__AnalysisCint_195_0_6, 117, G__get_linked_tagnum(&G__AnalysisCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseNumRows",1332,G__AnalysisCint_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseKernelMethod",1819,G__AnalysisCint_195_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_195_0_9, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMultiDimDistCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_195_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMultiDimDistCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_195_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMultiDimDistCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_195_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMultiDimDistCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_195_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_195_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMultiDimDistCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_195_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMultiDimDistCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_195_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMultiDimDistCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_195_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMultiDimDistCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMultiDimDistCalc", 1657, G__AnalysisCint_195_0_21, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc), -1, 0, 1, 1, 1, 0, "u 'MMultiDimDistCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMultiDimDistCalc", 1783, G__AnalysisCint_195_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_195_0_23, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MMultiDimDistCalc), -1, 1, 1, 1, 1, 0, "u 'MMultiDimDistCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMEventRate(void) {
   /* MEventRate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate));
   G__memfunc_setup("MEventRate",987,G__AnalysisCint_196_0_1, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRate",696,G__AnalysisCint_196_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - r h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRate",684,G__AnalysisCint_196_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetError",810,G__AnalysisCint_196_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", "{ return TMath::Sqrt(1./fNumEvents); }", (void*) NULL, 0);
   G__memfunc_setup("GetNumEvents",1221,G__AnalysisCint_196_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_196_0_6, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MEventRate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_196_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_196_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MEventRate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_196_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MEventRate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_196_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_196_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_196_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEventRate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_196_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_196_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEventRate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MEventRate", 987, G__AnalysisCint_196_0_18, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate), -1, 0, 1, 1, 1, 0, "u 'MEventRate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MEventRate", 1113, G__AnalysisCint_196_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_196_0_20, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MEventRate), -1, 1, 1, 1, 1, 0, "u 'MEventRate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMEventRateCalc(void) {
   /* MEventRateCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc));
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamPrimitive",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - out", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MEventRateCalc",1358,G__AnalysisCint_198_0_6, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__AnalysisCint_198_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'ULong_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameEventRate",1595,G__AnalysisCint_198_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTime",1084,G__AnalysisCint_198_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTimeDiff",1461,G__AnalysisCint_198_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTimeRate",1480,G__AnalysisCint_198_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_198_0_12, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MEventRateCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_198_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRateCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_198_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MEventRateCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_198_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MEventRateCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_198_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_198_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRateCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_198_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEventRateCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_198_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MEventRateCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_198_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MEventRateCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MEventRateCalc", 1358, G__AnalysisCint_198_0_24, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc), -1, 0, 1, 1, 1, 0, "u 'MEventRateCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MEventRateCalc", 1484, G__AnalysisCint_198_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_198_0_26, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MEventRateCalc), -1, 1, 1, 1, 1, 0, "u 'MEventRateCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMcCalibrationUpdate(void) {
   /* MMcCalibrationUpdate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMcCalibrationUpdate",1992,G__AnalysisCint_213_0_4, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOuterPixelsGainScaling",2544,G__AnalysisCint_213_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - tf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserLow2HiGainFactor",2238,G__AnalysisCint_213_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignalType",1324,G__AnalysisCint_213_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i 'MCalibrateData::SignalType_t' - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSignalType",1312,G__AnalysisCint_213_0_8, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MCalibrateDatacLcLSignalType_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_213_0_9, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMcCalibrationUpdate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_213_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCalibrationUpdate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_213_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMcCalibrationUpdate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_213_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMcCalibrationUpdate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_213_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_213_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCalibrationUpdate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_213_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcCalibrationUpdate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_213_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMcCalibrationUpdate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_213_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMcCalibrationUpdate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MMcCalibrationUpdate", 1992, G__AnalysisCint_213_0_21, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate), -1, 0, 1, 1, 1, 0, "u 'MMcCalibrationUpdate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MMcCalibrationUpdate", 2118, G__AnalysisCint_213_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_213_0_23, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MMcCalibrationUpdate), -1, 1, 1, 1, 1, 0, "u 'MMcCalibrationUpdate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSoftwareTrigger(void) {
   /* MSoftwareTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger));
   G__memfunc_setup("MSoftwareTrigger",1644,G__AnalysisCint_214_0_1, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetData",678,G__AnalysisCint_214_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"s - 'Short_t' 0 - i d - 'Double_t' 0 - bl "
"r - 'UShort_t' 0 - pos d - 'Double_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__AnalysisCint_214_0_3, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSoftwareTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_214_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_214_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSoftwareTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_214_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSoftwareTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_214_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_214_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_214_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSoftwareTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_214_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_214_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSoftwareTrigger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MSoftwareTrigger", 1644, G__AnalysisCint_214_0_15, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger), -1, 0, 1, 1, 1, 0, "u 'MSoftwareTrigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MSoftwareTrigger", 1770, G__AnalysisCint_214_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_214_0_17, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTrigger), -1, 1, 1, 1, 1, 0, "u 'MSoftwareTrigger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMSoftwareTriggerCalc(void) {
   /* MSoftwareTriggerCalc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MSoftwareTriggerCalc",2015,G__AnalysisCint_217_0_5, 105, G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitArrays",1030,G__AnalysisCint_217_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__AnalysisCint_217_0_7, 85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MSoftwareTriggerCalc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__AnalysisCint_217_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTriggerCalc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__AnalysisCint_217_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MSoftwareTriggerCalc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__AnalysisCint_217_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MSoftwareTriggerCalc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__AnalysisCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__AnalysisCint_217_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__AnalysisCint_217_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTriggerCalc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__AnalysisCint_217_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSoftwareTriggerCalc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__AnalysisCint_217_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MSoftwareTriggerCalc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__AnalysisCint_217_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MSoftwareTriggerCalc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MSoftwareTriggerCalc", 2015, G__AnalysisCint_217_0_19, (int) ('i'), G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc), -1, 0, 1, 1, 1, 0, "u 'MSoftwareTriggerCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MSoftwareTriggerCalc", 2141, G__AnalysisCint_217_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__AnalysisCint_217_0_21, (int) ('u'), G__get_linked_tagnum(&G__AnalysisCintLN_MSoftwareTriggerCalc), -1, 1, 1, 1, 1, 0, "u 'MSoftwareTriggerCalc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncAnalysisCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalAnalysisCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcAnalysisCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__AnalysisCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__AnalysisCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MGeomApply = { "MGeomApply" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MPedPhotCam = { "MPedPhotCam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCameraData = { "MCameraData" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MData = { "MData" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MParameterD = { "MParameterD" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MParameterCalc = { "MParameterCalc" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MEnergyEstimate = { "MEnergyEstimate" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MDirIter = { "MDirIter" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MRead = { "MRead" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MHMatrix = { "MHMatrix" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MMatrixLoop = { "MMatrixLoop" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t = { "MMatrixLoop::OperationMode_t" , 101 , -1 };
G__linked_taginfo G__AnalysisCintLN_MDataArray = { "MDataArray" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MMultiDimDistCalc = { "MMultiDimDistCalc" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MEventRate = { "MEventRate" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MEventRateCalc = { "MEventRateCalc" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MExtractedSignalCam = { "MExtractedSignalCam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCalibrationChargeCam = { "MCalibrationChargeCam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCalibrationQECam = { "MCalibrationQECam" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCalibrateData = { "MCalibrateData" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MCalibrateDatacLcLSignalType_t = { "MCalibrateData::SignalType_t" , 101 , -1 };
G__linked_taginfo G__AnalysisCintLN_MMcFadcHeader = { "MMcFadcHeader" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MMcCalibrationUpdate = { "MMcCalibrationUpdate" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MSoftwareTrigger = { "MSoftwareTrigger" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MPedestalSubtractedEvt = { "MPedestalSubtractedEvt" , 99 , -1 };
G__linked_taginfo G__AnalysisCintLN_MSoftwareTriggerCalc = { "MSoftwareTriggerCalc" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableAnalysisCint() {
  G__AnalysisCintLN_TClass.tagnum = -1 ;
  G__AnalysisCintLN_TBuffer.tagnum = -1 ;
  G__AnalysisCintLN_TMemberInspector.tagnum = -1 ;
  G__AnalysisCintLN_TObject.tagnum = -1 ;
  G__AnalysisCintLN_TString.tagnum = -1 ;
  G__AnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__AnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AnalysisCintLN_TList.tagnum = -1 ;
  G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__AnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__AnalysisCintLN_TEnv.tagnum = -1 ;
  G__AnalysisCintLN_TArrayD.tagnum = -1 ;
  G__AnalysisCintLN_MParContainer.tagnum = -1 ;
  G__AnalysisCintLN_MInputStreamID.tagnum = -1 ;
  G__AnalysisCintLN_MParList.tagnum = -1 ;
  G__AnalysisCintLN_MTask.tagnum = -1 ;
  G__AnalysisCintLN_MGeomCam.tagnum = -1 ;
  G__AnalysisCintLN_MGeomApply.tagnum = -1 ;
  G__AnalysisCintLN_TArrayC.tagnum = -1 ;
  G__AnalysisCintLN_MCamEvent.tagnum = -1 ;
  G__AnalysisCintLN_MSignalCam.tagnum = -1 ;
  G__AnalysisCintLN_MPedPhotCam.tagnum = -1 ;
  G__AnalysisCintLN_MCameraData.tagnum = -1 ;
  G__AnalysisCintLN_MData.tagnum = -1 ;
  G__AnalysisCintLN_MParameterD.tagnum = -1 ;
  G__AnalysisCintLN_MParameterCalc.tagnum = -1 ;
  G__AnalysisCintLN_MEnergyEstimate.tagnum = -1 ;
  G__AnalysisCintLN_MDirIter.tagnum = -1 ;
  G__AnalysisCintLN_MRead.tagnum = -1 ;
  G__AnalysisCintLN_MHMatrix.tagnum = -1 ;
  G__AnalysisCintLN_MMatrixLoop.tagnum = -1 ;
  G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t.tagnum = -1 ;
  G__AnalysisCintLN_MDataArray.tagnum = -1 ;
  G__AnalysisCintLN_MMultiDimDistCalc.tagnum = -1 ;
  G__AnalysisCintLN_MEventRate.tagnum = -1 ;
  G__AnalysisCintLN_MTime.tagnum = -1 ;
  G__AnalysisCintLN_MEventRateCalc.tagnum = -1 ;
  G__AnalysisCintLN_MExtractedSignalCam.tagnum = -1 ;
  G__AnalysisCintLN_MCalibrationChargeCam.tagnum = -1 ;
  G__AnalysisCintLN_MCalibrationQECam.tagnum = -1 ;
  G__AnalysisCintLN_MCalibrateData.tagnum = -1 ;
  G__AnalysisCintLN_MCalibrateDatacLcLSignalType_t.tagnum = -1 ;
  G__AnalysisCintLN_MMcFadcHeader.tagnum = -1 ;
  G__AnalysisCintLN_MMcCalibrationUpdate.tagnum = -1 ;
  G__AnalysisCintLN_MSoftwareTrigger.tagnum = -1 ;
  G__AnalysisCintLN_MRawEvtData.tagnum = -1 ;
  G__AnalysisCintLN_MPedestalSubtractedEvt.tagnum = -1 ;
  G__AnalysisCintLN_MSoftwareTriggerCalc.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableAnalysisCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TString);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TList);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MGeomCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MGeomApply),sizeof(MGeomApply),-1,324864,"Task to apply geometry settings",G__setup_memvarMGeomApply,G__setup_memfuncMGeomApply);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_TArrayC);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MSignalCam);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MPedPhotCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCameraData),sizeof(MCameraData),-1,324864,"Generalized storage class for camera data",G__setup_memvarMCameraData,G__setup_memfuncMCameraData);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MData);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MParameterD);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MParameterCalc),sizeof(MParameterCalc),-1,324864,"Task to estimate the energy by a rule",G__setup_memvarMParameterCalc,G__setup_memfuncMParameterCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MEnergyEstimate),sizeof(MEnergyEstimate),-1,323840,"Task to estimate the energy by a rule",G__setup_memvarMEnergyEstimate,G__setup_memfuncMEnergyEstimate);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MDirIter);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MRead);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MHMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MMatrixLoop),sizeof(MMatrixLoop),-1,323584,"Task 'reading' events from a MHMatrix",G__setup_memvarMMatrixLoop,G__setup_memfuncMMatrixLoop);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MMatrixLoopcLcLOperationMode_t);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MDataArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MMultiDimDistCalc),sizeof(MMultiDimDistCalc),-1,323840,"Task to calculate nearest neighbor-/kernel-hadronness",G__setup_memvarMMultiDimDistCalc,G__setup_memfuncMMultiDimDistCalc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MEventRate),sizeof(MEventRate),-1,323840,"Storage Container for the event rate",G__setup_memvarMEventRate,G__setup_memfuncMEventRate);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MEventRateCalc),sizeof(MEventRateCalc),-1,323840,"Task to calculate event rates",G__setup_memvarMEventRateCalc,G__setup_memfuncMEventRateCalc);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MExtractedSignalCam);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCalibrationChargeCam);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCalibrationQECam);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCalibrateData);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MCalibrateDatacLcLSignalType_t);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MMcFadcHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MMcCalibrationUpdate),sizeof(MMcCalibrationUpdate),-1,323840,"Task which obtains, for MC files, the pedestal mean and rms, and the calibration factor from ADC counts to photons. ",G__setup_memvarMMcCalibrationUpdate,G__setup_memfuncMMcCalibrationUpdate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MSoftwareTrigger),sizeof(MSoftwareTrigger),-1,323840,"Storage Container for software trigger",G__setup_memvarMSoftwareTrigger,G__setup_memfuncMSoftwareTrigger);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MRawEvtData);
   G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MPedestalSubtractedEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__AnalysisCintLN_MSoftwareTriggerCalc),sizeof(MSoftwareTriggerCalc),-1,323840,"Time And Charge Extractor Base Class",G__setup_memvarMSoftwareTriggerCalc,G__setup_memfuncMSoftwareTriggerCalc);
}
extern "C" void G__cpp_setupAnalysisCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupAnalysisCint()");
  G__set_cpp_environmentAnalysisCint();
  G__cpp_setup_tagtableAnalysisCint();

  G__cpp_setup_inheritanceAnalysisCint();

  G__cpp_setup_typetableAnalysisCint();

  G__cpp_setup_memvarAnalysisCint();

  G__cpp_setup_memfuncAnalysisCint();
  G__cpp_setup_globalAnalysisCint();
  G__cpp_setup_funcAnalysisCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncAnalysisCint();
  return;
}
class G__cpp_setup_initAnalysisCint {
  public:
    G__cpp_setup_initAnalysisCint() { G__add_setup_func("AnalysisCint",(G__incsetup)(&G__cpp_setupAnalysisCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initAnalysisCint() { G__remove_setup_func("AnalysisCint"); }
};
G__cpp_setup_initAnalysisCint G__cpp_setup_initializerAnalysisCint;

