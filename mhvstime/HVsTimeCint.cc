//
// File generated by rootcint at Mon Nov 28 11:05:32 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME HVsTimeCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "HVsTimeCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MHVsTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHVsTime(void *p = 0);
   static void *newArray_MHVsTime(Long_t size, void *p);
   static void delete_MHVsTime(void *p);
   static void deleteArray_MHVsTime(void *p);
   static void destruct_MHVsTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHVsTime*)
   {
      ::MHVsTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHVsTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHVsTime", ::MHVsTime::Class_Version(), "./MHVsTime.h", 16,
                  typeid(::MHVsTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHVsTime::Dictionary, isa_proxy, 4,
                  sizeof(::MHVsTime) );
      instance.SetNew(&new_MHVsTime);
      instance.SetNewArray(&newArray_MHVsTime);
      instance.SetDelete(&delete_MHVsTime);
      instance.SetDeleteArray(&deleteArray_MHVsTime);
      instance.SetDestructor(&destruct_MHVsTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHVsTime*)
   {
      return GenerateInitInstanceLocal((::MHVsTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHVsTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHPixVsTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHPixVsTime(void *p = 0);
   static void *newArray_MHPixVsTime(Long_t size, void *p);
   static void delete_MHPixVsTime(void *p);
   static void deleteArray_MHPixVsTime(void *p);
   static void destruct_MHPixVsTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHPixVsTime*)
   {
      ::MHPixVsTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHPixVsTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHPixVsTime", ::MHPixVsTime::Class_Version(), "./MHPixVsTime.h", 20,
                  typeid(::MHPixVsTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHPixVsTime::Dictionary, isa_proxy, 4,
                  sizeof(::MHPixVsTime) );
      instance.SetNew(&new_MHPixVsTime);
      instance.SetNewArray(&newArray_MHPixVsTime);
      instance.SetDelete(&delete_MHPixVsTime);
      instance.SetDeleteArray(&deleteArray_MHPixVsTime);
      instance.SetDestructor(&destruct_MHPixVsTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHPixVsTime*)
   {
      return GenerateInitInstanceLocal((::MHPixVsTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHPixVsTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHSectorVsTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHSectorVsTime(void *p = 0);
   static void *newArray_MHSectorVsTime(Long_t size, void *p);
   static void delete_MHSectorVsTime(void *p);
   static void deleteArray_MHSectorVsTime(void *p);
   static void destruct_MHSectorVsTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHSectorVsTime*)
   {
      ::MHSectorVsTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHSectorVsTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHSectorVsTime", ::MHSectorVsTime::Class_Version(), "./MHSectorVsTime.h", 24,
                  typeid(::MHSectorVsTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHSectorVsTime::Dictionary, isa_proxy, 4,
                  sizeof(::MHSectorVsTime) );
      instance.SetNew(&new_MHSectorVsTime);
      instance.SetNewArray(&newArray_MHSectorVsTime);
      instance.SetDelete(&delete_MHSectorVsTime);
      instance.SetDeleteArray(&deleteArray_MHSectorVsTime);
      instance.SetDestructor(&destruct_MHSectorVsTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHSectorVsTime*)
   {
      return GenerateInitInstanceLocal((::MHSectorVsTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHSectorVsTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MHVsTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHVsTime::Class_Name()
{
   return "MHVsTime";
}

//______________________________________________________________________________
const char *MHVsTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHVsTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHVsTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHVsTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHVsTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHPixVsTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHPixVsTime::Class_Name()
{
   return "MHPixVsTime";
}

//______________________________________________________________________________
const char *MHPixVsTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPixVsTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHPixVsTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHPixVsTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHPixVsTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPixVsTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHPixVsTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHPixVsTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHSectorVsTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHSectorVsTime::Class_Name()
{
   return "MHSectorVsTime";
}

//______________________________________________________________________________
const char *MHSectorVsTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSectorVsTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHSectorVsTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHSectorVsTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHSectorVsTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSectorVsTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHSectorVsTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHSectorVsTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MHVsTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHVsTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHVsTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHVsTime::Class(),this);
   }
}

//______________________________________________________________________________
void MHVsTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHVsTime.
      TClass *R__cl = ::MHVsTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraph", &fGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fError", &fError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale", &fScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxPts", &fMaxPts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMean", &fMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanErr", &fMeanErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLast", &fLast);
      R__insp.InspectMember(fLast, "fLast.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimum", &fMinimum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximum", &fMaximum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMin", &fMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseEventNumber", &fUseEventNumber);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHVsTime(void *p) {
      return  p ? new(p) ::MHVsTime : new ::MHVsTime;
   }
   static void *newArray_MHVsTime(Long_t nElements, void *p) {
      return p ? new(p) ::MHVsTime[nElements] : new ::MHVsTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHVsTime(void *p) {
      delete ((::MHVsTime*)p);
   }
   static void deleteArray_MHVsTime(void *p) {
      delete [] ((::MHVsTime*)p);
   }
   static void destruct_MHVsTime(void *p) {
      typedef ::MHVsTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHVsTime

//______________________________________________________________________________
void MHPixVsTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHPixVsTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHPixVsTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHPixVsTime::Class(),this);
   }
}

//______________________________________________________________________________
void MHPixVsTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHPixVsTime.
      TClass *R__cl = ::MHPixVsTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraph", &fGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameEvt", &fNameEvt);
      R__insp.InspectMember(fNameEvt, "fNameEvt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTime", &fNameTime);
      R__insp.InspectMember(fNameTime, "fNameTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTypeErr", &fTypeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimum", &fMinimum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximum", &fMaximum);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHPixVsTime(void *p) {
      return  p ? new(p) ::MHPixVsTime : new ::MHPixVsTime;
   }
   static void *newArray_MHPixVsTime(Long_t nElements, void *p) {
      return p ? new(p) ::MHPixVsTime[nElements] : new ::MHPixVsTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHPixVsTime(void *p) {
      delete ((::MHPixVsTime*)p);
   }
   static void deleteArray_MHPixVsTime(void *p) {
      delete [] ((::MHPixVsTime*)p);
   }
   static void destruct_MHPixVsTime(void *p) {
      typedef ::MHPixVsTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHPixVsTime

//______________________________________________________________________________
void MHSectorVsTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHSectorVsTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHSectorVsTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHSectorVsTime::Class(),this);
   }
}

//______________________________________________________________________________
void MHSectorVsTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHSectorVsTime.
      TClass *R__cl = ::MHSectorVsTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGraph", &fGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCamera", &fHCamera);
      R__insp.InspectMember(fHCamera, "fHCamera.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMin", &fMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinimum", &fMinimum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaximum", &fMaximum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseMedian", &fUseMedian);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameEvt", &fNameEvt);
      R__insp.InspectMember(fNameEvt, "fNameEvt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameTime", &fNameTime);
      R__insp.InspectMember(fNameTime, "fNameTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTypeErr", &fTypeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectors", &fSectors);
      R__insp.InspectMember(fSectors, "fSectors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAreaIndex", &fAreaIndex);
      R__insp.InspectMember(fAreaIndex, "fAreaIndex.");
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHSectorVsTime(void *p) {
      return  p ? new(p) ::MHSectorVsTime : new ::MHSectorVsTime;
   }
   static void *newArray_MHSectorVsTime(Long_t nElements, void *p) {
      return p ? new(p) ::MHSectorVsTime[nElements] : new ::MHSectorVsTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHSectorVsTime(void *p) {
      delete ((::MHSectorVsTime*)p);
   }
   static void deleteArray_MHSectorVsTime(void *p) {
      delete [] ((::MHSectorVsTime*)p);
   }
   static void destruct_MHSectorVsTime(void *p) {
      typedef ::MHSectorVsTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHSectorVsTime

/********************************************************
* HVsTimeCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableHVsTimeCint();

extern "C" void G__set_cpp_environmentHVsTimeCint() {
  G__cpp_reset_tagtableHVsTimeCint();
}
#include <new>
extern "C" int G__cpp_dllrevHVsTimeCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MHVsTime */
static int G__HVsTimeCint_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHVsTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHVsTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHVsTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHVsTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHVsTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHVsTime[n];
       } else {
         p = new((void*) gvp) MHVsTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHVsTime;
       } else {
         p = new((void*) gvp) MHVsTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHVsTime*) G__getstructoffset())->SetScale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHVsTime*) G__getstructoffset())->SetMinimum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHVsTime*) G__getstructoffset())->SetMinimum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHVsTime*) G__getstructoffset())->SetMaximum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHVsTime*) G__getstructoffset())->SetMaximum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const MHVsTime*) G__getstructoffset())->GetNbins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHVsTime*) G__getstructoffset())->SetLogy((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHVsTime*) G__getstructoffset())->SetLogy();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const MHVsTime*) G__getstructoffset())->GetRule();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MHVsTime*) G__getstructoffset())->GetGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHVsTime*) G__getstructoffset())->GetGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHVsTime*) G__getstructoffset())->SetUseEventNumber((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHVsTime*) G__getstructoffset())->SetUseEventNumber();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHVsTime*) G__getstructoffset())->SetNumEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHVsTime*) G__getstructoffset())->SetMaxPts((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHVsTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHVsTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHVsTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHVsTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHVsTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHVsTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_230_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHVsTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHVsTime G__TMHVsTime;
static int G__HVsTimeCint_230_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHVsTime*) (soff+(sizeof(MHVsTime)*i)))->~G__TMHVsTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHVsTime*) (soff))->~G__TMHVsTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHPixVsTime */
static int G__HVsTimeCint_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHPixVsTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPixVsTime(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) MHPixVsTime(
(Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPixVsTime((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHPixVsTime((Int_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHPixVsTime((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHPixVsTime((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPixVsTime[n];
       } else {
         p = new((void*) gvp) MHPixVsTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHPixVsTime;
       } else {
         p = new((void*) gvp) MHPixVsTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPixVsTime*) G__getstructoffset())->SetNameEvt(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPixVsTime*) G__getstructoffset())->SetNameTime(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MHPixVsTime*) G__getstructoffset())->SetType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHPixVsTime*) G__getstructoffset())->SetType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHPixVsTime*) G__getstructoffset())->SetMinimum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHPixVsTime*) G__getstructoffset())->SetMinimum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHPixVsTime*) G__getstructoffset())->SetMaximum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHPixVsTime*) G__getstructoffset())->SetMaximum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const MHPixVsTime*) G__getstructoffset())->GetHistByName(*((const TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const MHPixVsTime*) G__getstructoffset())->GetHistByName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHPixVsTime*) G__getstructoffset())->GetGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHPixVsTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPixVsTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHPixVsTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHPixVsTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHPixVsTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPixVsTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPixVsTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHPixVsTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHPixVsTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHPixVsTime G__TMHPixVsTime;
static int G__HVsTimeCint_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHPixVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHPixVsTime*) (soff+(sizeof(MHPixVsTime)*i)))->~G__TMHPixVsTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHPixVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHPixVsTime*) (soff))->~G__TMHPixVsTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHSectorVsTime */
static int G__HVsTimeCint_303_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHSectorVsTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSectorVsTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHSectorVsTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHSectorVsTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHSectorVsTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSectorVsTime[n];
       } else {
         p = new((void*) gvp) MHSectorVsTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHSectorVsTime;
       } else {
         p = new((void*) gvp) MHSectorVsTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSectorVsTime*) G__getstructoffset())->SetNameEvt(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSectorVsTime*) G__getstructoffset())->SetNameTime(*((const TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((MHSectorVsTime*) G__getstructoffset())->SetType((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MHSectorVsTime*) G__getstructoffset())->SetType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSectorVsTime*) G__getstructoffset())->SetSectors(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSectorVsTime*) G__getstructoffset())->SetAreaIndex(*(TArrayI*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHSectorVsTime*) G__getstructoffset())->SetMinimum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHSectorVsTime*) G__getstructoffset())->SetMinimum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHSectorVsTime*) G__getstructoffset())->SetMaximum((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHSectorVsTime*) G__getstructoffset())->SetMaximum();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MHSectorVsTime*) G__getstructoffset())->SetUseMedian((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MHSectorVsTime*) G__getstructoffset())->SetUseMedian();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((const MHSectorVsTime*) G__getstructoffset())->GetHistByName(*((const TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((const MHSectorVsTime*) G__getstructoffset())->GetHistByName());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MHSectorVsTime*) G__getstructoffset())->GetGraph());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHSectorVsTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSectorVsTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHSectorVsTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHSectorVsTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHSectorVsTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSectorVsTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSectorVsTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHSectorVsTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__HVsTimeCint_303_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHSectorVsTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHSectorVsTime G__TMHSectorVsTime;
static int G__HVsTimeCint_303_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHSectorVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHSectorVsTime*) (soff+(sizeof(MHSectorVsTime)*i)))->~G__TMHSectorVsTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHSectorVsTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHSectorVsTime*) (soff))->~G__TMHSectorVsTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MHVsTime */

/* MHPixVsTime */

/* MHSectorVsTime */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncHVsTimeCint {
 public:
  G__Sizep2memfuncHVsTimeCint(): p(&G__Sizep2memfuncHVsTimeCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncHVsTimeCint::*p)();
};

size_t G__get_sizep2memfuncHVsTimeCint()
{
  G__Sizep2memfuncHVsTimeCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceHVsTimeCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime))) {
     MHVsTime *G__Lderived;
     G__Lderived=(MHVsTime*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime))) {
     MHPixVsTime *G__Lderived;
     G__Lderived=(MHPixVsTime*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime))) {
     MHSectorVsTime *G__Lderived;
     G__Lderived=(MHSectorVsTime*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime),G__get_linked_tagnum(&G__HVsTimeCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableHVsTimeCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MHVsTime */
static void G__setup_memvarMHVsTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime));
   { MHVsTime *p; p=(MHVsTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph),-1,-1,2,"fGraph=",0,"Histogram to fill");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MData),-1,-1,2,"fData=",0,"Object from which the data is filled");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MData),-1,-1,2,"fError=",0,"Object from which the error is filled");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fScale=",0,"Scale for axis (eg unit)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxPts=",0,"Maximum number of data points");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumEvents=",0,"Number of events to average");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMean=",0,"! Mean value");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMeanErr=",0,"! Mean error");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fN=",0,"! Number of entries in fMean");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MTime),-1,-1,2,"fLast=",0,"! For checks");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMinimum=",0,"User defined minimum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMaximum=",0,"User defined maximum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMin=",0,"! Calculation of minimum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMax=",0,"! Calculation of maximum");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTimecLcLdA),-1,-2,2,"kIsLogy=262144LL",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fUseEventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHPixVsTime */
static void G__setup_memvarMHPixVsTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime));
   { MHPixVsTime *p; p=(MHPixVsTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TGraphErrors),-1,-1,4,"fGraph=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MCamEvent),-1,-1,4,"fEvt=",0,"! the current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MGeomCam),-1,-1,4,"fCam=",0,"! the camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MRawEvtHeader),-1,-1,4,"fHeader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MTime),-1,-1,4,"fTime=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-1,4,"fNameEvt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-1,4,"fNameTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTypeErr=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinimum=",0,"User defined minimum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaximum=",0,"User defined maximum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHSectorVsTime */
static void G__setup_memvarMHSectorVsTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime));
   { MHSectorVsTime *p; p=(MHSectorVsTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,1,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-2,4,"gsDefTitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph),-1,-1,4,"fGraph=",0,"The TGraph output to the display");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MCamEvent),-1,-1,4,"fEvt=",0,"! pointer to the current event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MGeomCam),-1,-1,4,"fCam=",0,"! pointer the camera geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MRawEvtHeader),-1,-1,4,"fHeader=",0,"! pointer to the event header (DAQ Evt number instead of counter)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MTime),-1,-1,4,"fTime=",0,"! pointer to event time (time instead of number)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_MHCamera),-1,-1,4,"fHCamera=",0,"! The camera to be used for calculation");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMin=",0,"! Calculation of minimum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMax=",0,"! Calculation of maximum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMinimum=",0,"User defined minimum");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMaximum=",0,"User defined maximum");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseMedian=",0,"Whether to display median/dev instead of mean/rms");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-1,4,"fNameEvt=",0,"Name of MCamEvent to be displayed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TString),-1,-1,4,"fNameTime=",0,"Name of MTime container to be used");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fType=",0,"Type for mean  used in GetPixelContent");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTypeErr=",0,"Type for error used in GetPixelContent (-1 = no error)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TArrayI),-1,-1,4,"fSectors=",0,"Which sectors shell be displayed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TArrayI),-1,-1,4,"fAreaIndex=",0,"Which pixel sized should be displayed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__HVsTimeCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarHVsTimeCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMHVsTime(void) {
   /* MHVsTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime));
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHVsTime",749,G__HVsTimeCint_230_0_2, 105, G__get_linked_tagnum(&G__HVsTimeCintLN_MHVsTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' rule C - - 10 '0' ruleerr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetScale",788,G__HVsTimeCint_230_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinimum",1032,G__HVsTimeCint_230_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaximum",1034,G__HVsTimeCint_230_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbins",794,G__HVsTimeCint_230_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLogy",711,G__HVsTimeCint_230_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDataMember",1266,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__HVsTimeCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRule",696,G__HVsTimeCint_230_0_13, 117, G__get_linked_tagnum(&G__HVsTimeCintLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraph",786,G__HVsTimeCint_230_0_14, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGraph",786,G__HVsTimeCint_230_0_15, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseEventNumber",1732,G__HVsTimeCint_230_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__HVsTimeCint_230_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("New",298,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HVsTimeCintLN_MParContainer), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMaxPts",905,G__HVsTimeCint_230_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__HVsTimeCint_230_0_21, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHVsTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HVsTimeCint_230_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HVsTimeCint_230_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHVsTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HVsTimeCint_230_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHVsTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HVsTimeCint_230_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HVsTimeCint_230_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HVsTimeCint_230_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHVsTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HVsTimeCint_230_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHVsTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HVsTimeCint_230_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHVsTime::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHVsTime", 875, G__HVsTimeCint_230_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHPixVsTime(void) {
   /* MHPixVsTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime));
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHPixVsTime",1054,G__HVsTimeCint_239_0_3, 105, G__get_linked_tagnum(&G__HVsTimeCintLN_MHPixVsTime), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 '0' idx C - - 10 '0' name "
"C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameEvt",988,G__HVsTimeCint_239_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTime",1084,G__HVsTimeCint_239_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__HVsTimeCint_239_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 '-1' e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinimum",1032,G__HVsTimeCint_239_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaximum",1034,G__HVsTimeCint_239_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistByName",1268,G__HVsTimeCint_239_0_11, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGraph",786,G__HVsTimeCint_239_0_12, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HVsTimeCint_239_0_14, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHPixVsTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HVsTimeCint_239_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPixVsTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HVsTimeCint_239_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHPixVsTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HVsTimeCint_239_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHPixVsTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HVsTimeCint_239_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HVsTimeCint_239_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPixVsTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HVsTimeCint_239_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPixVsTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HVsTimeCint_239_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHPixVsTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HVsTimeCint_239_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHPixVsTime::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHPixVsTime", 1180, G__HVsTimeCint_239_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHSectorVsTime(void) {
   /* MHSectorVsTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime));
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MHSectorVsTime",1373,G__HVsTimeCint_303_0_4, 105, G__get_linked_tagnum(&G__HVsTimeCintLN_MHSectorVsTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameEvt",988,G__HVsTimeCint_303_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameTime",1084,G__HVsTimeCint_303_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__HVsTimeCint_303_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 '-1' e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSectors",1039,G__HVsTimeCint_303_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAreaIndex",1181,G__HVsTimeCint_303_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinimum",1032,G__HVsTimeCint_303_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaximum",1034,G__HVsTimeCint_303_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseMedian",1191,G__HVsTimeCint_303_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHistByName",1268,G__HVsTimeCint_303_0_13, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TH1), -1, 0, 1, 1, 1, 8, "u 'TString' - 10 '\"\"' name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGraph",786,G__HVsTimeCint_303_0_14, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '0' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RecursiveRemove",1574,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__HVsTimeCint_303_0_19, 85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHSectorVsTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__HVsTimeCint_303_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSectorVsTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__HVsTimeCint_303_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHSectorVsTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__HVsTimeCint_303_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHSectorVsTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__HVsTimeCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__HVsTimeCint_303_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__HVsTimeCint_303_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSectorVsTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__HVsTimeCint_303_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSectorVsTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__HVsTimeCint_303_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHSectorVsTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__HVsTimeCint_303_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHSectorVsTime::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MHSectorVsTime", 1499, G__HVsTimeCint_303_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncHVsTimeCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalHVsTimeCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcHVsTimeCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__HVsTimeCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MTime = { "MTime" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MData = { "MData" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MHVsTime = { "MHVsTime" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MHVsTimecLcLdA = { "MHVsTime::$" , 101 , -1 };
G__linked_taginfo G__HVsTimeCintLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MHCamera = { "MHCamera" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MHPixVsTime = { "MHPixVsTime" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__HVsTimeCintLN_MHSectorVsTime = { "MHSectorVsTime" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableHVsTimeCint() {
  G__HVsTimeCintLN_TClass.tagnum = -1 ;
  G__HVsTimeCintLN_TBuffer.tagnum = -1 ;
  G__HVsTimeCintLN_TMemberInspector.tagnum = -1 ;
  G__HVsTimeCintLN_TObject.tagnum = -1 ;
  G__HVsTimeCintLN_TString.tagnum = -1 ;
  G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__HVsTimeCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__HVsTimeCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__HVsTimeCintLN_MParContainer.tagnum = -1 ;
  G__HVsTimeCintLN_TH1.tagnum = -1 ;
  G__HVsTimeCintLN_MParList.tagnum = -1 ;
  G__HVsTimeCintLN_TArrayI.tagnum = -1 ;
  G__HVsTimeCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__HVsTimeCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__HVsTimeCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__HVsTimeCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__HVsTimeCintLN_MH.tagnum = -1 ;
  G__HVsTimeCintLN_MTime.tagnum = -1 ;
  G__HVsTimeCintLN_TGraph.tagnum = -1 ;
  G__HVsTimeCintLN_MData.tagnum = -1 ;
  G__HVsTimeCintLN_MHVsTime.tagnum = -1 ;
  G__HVsTimeCintLN_MHVsTimecLcLdA.tagnum = -1 ;
  G__HVsTimeCintLN_TGraphErrors.tagnum = -1 ;
  G__HVsTimeCintLN_MHCamera.tagnum = -1 ;
  G__HVsTimeCintLN_MCamEvent.tagnum = -1 ;
  G__HVsTimeCintLN_MGeomCam.tagnum = -1 ;
  G__HVsTimeCintLN_MRawEvtHeader.tagnum = -1 ;
  G__HVsTimeCintLN_MHPixVsTime.tagnum = -1 ;
  G__HVsTimeCintLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__HVsTimeCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__HVsTimeCintLN_MHSectorVsTime.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableHVsTimeCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TString);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MH);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MTime);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TGraph);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MHVsTime),sizeof(MHVsTime),-1,324864,"Generalized 1/2/3D-histogram for Mars variables",G__setup_memvarMHVsTime,G__setup_memfuncMHVsTime);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MHVsTimecLcLdA);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MHCamera);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MRawEvtHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MHPixVsTime),sizeof(MHPixVsTime),-1,324864,"Histogram to sum camera events",G__setup_memvarMHPixVsTime,G__setup_memfuncMHPixVsTime);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__HVsTimeCintLN_MHSectorVsTime),sizeof(MHSectorVsTime),-1,324864,"Histogram to sum camera events",G__setup_memvarMHSectorVsTime,G__setup_memfuncMHSectorVsTime);
}
extern "C" void G__cpp_setupHVsTimeCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupHVsTimeCint()");
  G__set_cpp_environmentHVsTimeCint();
  G__cpp_setup_tagtableHVsTimeCint();

  G__cpp_setup_inheritanceHVsTimeCint();

  G__cpp_setup_typetableHVsTimeCint();

  G__cpp_setup_memvarHVsTimeCint();

  G__cpp_setup_memfuncHVsTimeCint();
  G__cpp_setup_globalHVsTimeCint();
  G__cpp_setup_funcHVsTimeCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncHVsTimeCint();
  return;
}
class G__cpp_setup_initHVsTimeCint {
  public:
    G__cpp_setup_initHVsTimeCint() { G__add_setup_func("HVsTimeCint",(G__incsetup)(&G__cpp_setupHVsTimeCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initHVsTimeCint() { G__remove_setup_func("HVsTimeCint"); }
};
G__cpp_setup_initHVsTimeCint G__cpp_setup_initializerHVsTimeCint;

