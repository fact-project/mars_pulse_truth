//
// File generated by rootcint at Mon Nov 28 11:07:38 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MovieCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MovieCint.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MMovieData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMovieData(void *p = 0);
   static void *newArray_MMovieData(Long_t size, void *p);
   static void delete_MMovieData(void *p);
   static void deleteArray_MMovieData(void *p);
   static void destruct_MMovieData(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMovieData*)
   {
      ::MMovieData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMovieData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMovieData", ::MMovieData::Class_Version(), "./MMovieData.h", 20,
                  typeid(::MMovieData), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMovieData::Dictionary, isa_proxy, 4,
                  sizeof(::MMovieData) );
      instance.SetNew(&new_MMovieData);
      instance.SetNewArray(&newArray_MMovieData);
      instance.SetDelete(&delete_MMovieData);
      instance.SetDeleteArray(&deleteArray_MMovieData);
      instance.SetDestructor(&destruct_MMovieData);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMovieData*)
   {
      return GenerateInitInstanceLocal((::MMovieData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMovieData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMoviePrepare_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMoviePrepare(void *p = 0);
   static void *newArray_MMoviePrepare(Long_t size, void *p);
   static void delete_MMoviePrepare(void *p);
   static void deleteArray_MMoviePrepare(void *p);
   static void destruct_MMoviePrepare(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMoviePrepare*)
   {
      ::MMoviePrepare *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMoviePrepare >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMoviePrepare", ::MMoviePrepare::Class_Version(), "./MMoviePrepare.h", 18,
                  typeid(::MMoviePrepare), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMoviePrepare::Dictionary, isa_proxy, 4,
                  sizeof(::MMoviePrepare) );
      instance.SetNew(&new_MMoviePrepare);
      instance.SetNewArray(&newArray_MMoviePrepare);
      instance.SetDelete(&delete_MMoviePrepare);
      instance.SetDeleteArray(&deleteArray_MMoviePrepare);
      instance.SetDestructor(&destruct_MMoviePrepare);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMoviePrepare*)
   {
      return GenerateInitInstanceLocal((::MMoviePrepare*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMoviePrepare*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MMovieWrite_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MMovieWrite(void *p = 0);
   static void *newArray_MMovieWrite(Long_t size, void *p);
   static void delete_MMovieWrite(void *p);
   static void deleteArray_MMovieWrite(void *p);
   static void destruct_MMovieWrite(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MMovieWrite*)
   {
      ::MMovieWrite *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MMovieWrite >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MMovieWrite", ::MMovieWrite::Class_Version(), "./MMovieWrite.h", 21,
                  typeid(::MMovieWrite), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MMovieWrite::Dictionary, isa_proxy, 4,
                  sizeof(::MMovieWrite) );
      instance.SetNew(&new_MMovieWrite);
      instance.SetNewArray(&newArray_MMovieWrite);
      instance.SetDelete(&delete_MMovieWrite);
      instance.SetDeleteArray(&deleteArray_MMovieWrite);
      instance.SetDestructor(&destruct_MMovieWrite);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MMovieWrite*)
   {
      return GenerateInitInstanceLocal((::MMovieWrite*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MMovieWrite*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MMovieData::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMovieData::Class_Name()
{
   return "MMovieData";
}

//______________________________________________________________________________
const char *MMovieData::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMovieData::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMovieData::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMovieData::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieData*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMoviePrepare::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMoviePrepare::Class_Name()
{
   return "MMoviePrepare";
}

//______________________________________________________________________________
const char *MMoviePrepare::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMoviePrepare*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMoviePrepare::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMoviePrepare*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMoviePrepare::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMoviePrepare*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMoviePrepare::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMoviePrepare*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MMovieWrite::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MMovieWrite::Class_Name()
{
   return "MMovieWrite";
}

//______________________________________________________________________________
const char *MMovieWrite::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieWrite*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MMovieWrite::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieWrite*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MMovieWrite::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieWrite*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MMovieWrite::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MMovieWrite*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MMovieWrite::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMovieWrite.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMovieWrite::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMovieWrite::Class(),this);
   }
}

//______________________________________________________________________________
void MMovieWrite::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMovieWrite.
      TClass *R__cl = ::MMovieWrite::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHead", &fHead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSig", &fSig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBad", &fBad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMC", &fMC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIn", &fIn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPipe", &fPipe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTargetLength", &fTargetLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThreshold", &fThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEvents", &fNumEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFilename", &fFilename);
      R__insp.InspectMember(fFilename, "fFilename.");
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMovieWrite(void *p) {
      return  p ? new(p) ::MMovieWrite : new ::MMovieWrite;
   }
   static void *newArray_MMovieWrite(Long_t nElements, void *p) {
      return p ? new(p) ::MMovieWrite[nElements] : new ::MMovieWrite[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMovieWrite(void *p) {
      delete ((::MMovieWrite*)p);
   }
   static void deleteArray_MMovieWrite(void *p) {
      delete [] ((::MMovieWrite*)p);
   }
   static void destruct_MMovieWrite(void *p) {
      typedef ::MMovieWrite current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMovieWrite

//______________________________________________________________________________
void MMoviePrepare::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMoviePrepare.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMoviePrepare::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMoviePrepare::Class(),this);
   }
}

//______________________________________________________________________________
void MMoviePrepare::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMoviePrepare.
      TClass *R__cl = ::MMoviePrepare::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCal", &fCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRel", &fRel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCam", &fCam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPed", &fPed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOut", &fOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstSlice", &fFirstSlice);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastSlice", &fLastSlice);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMoviePrepare(void *p) {
      return  p ? new(p) ::MMoviePrepare : new ::MMoviePrepare;
   }
   static void *newArray_MMoviePrepare(Long_t nElements, void *p) {
      return p ? new(p) ::MMoviePrepare[nElements] : new ::MMoviePrepare[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMoviePrepare(void *p) {
      delete ((::MMoviePrepare*)p);
   }
   static void deleteArray_MMoviePrepare(void *p) {
      delete [] ((::MMoviePrepare*)p);
   }
   static void destruct_MMoviePrepare(void *p) {
      typedef ::MMoviePrepare current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMoviePrepare

//______________________________________________________________________________
void MMovieData::Streamer(TBuffer &R__b)
{
   // Stream an object of class MMovieData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MMovieData::Class(),this);
   } else {
      R__b.WriteClassBuffer(MMovieData::Class(),this);
   }
}

//______________________________________________________________________________
void MMovieData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MMovieData.
      TClass *R__cl = ::MMovieData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplines", &fSplines);
      R__insp.InspectMember(fSplines, "fSplines.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMax", &fMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMedianPedestalRms", &fMedianPedestalRms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSlices", &fNumSlices);
      MParContainer::ShowMembers(R__insp);
      MCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MMovieData(void *p) {
      return  p ? new(p) ::MMovieData : new ::MMovieData;
   }
   static void *newArray_MMovieData(Long_t nElements, void *p) {
      return p ? new(p) ::MMovieData[nElements] : new ::MMovieData[nElements];
   }
   // Wrapper around operator delete
   static void delete_MMovieData(void *p) {
      delete ((::MMovieData*)p);
   }
   static void deleteArray_MMovieData(void *p) {
      delete [] ((::MMovieData*)p);
   }
   static void destruct_MMovieData(void *p) {
      typedef ::MMovieData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MMovieData

/********************************************************
* MovieCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMovieCint();

extern "C" void G__set_cpp_environmentMovieCint() {
  G__cpp_reset_tagtableMovieCint();
}
#include <new>
extern "C" int G__cpp_dllrevMovieCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MMovieData */
static int G__MovieCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMovieData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMovieData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMovieData((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMovieData((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMovieData((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMovieData[n];
       } else {
         p = new((void*) gvp) MMovieData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMovieData;
       } else {
         p = new((void*) gvp) MMovieData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MovieCintLN_MMovieData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieData*) G__getstructoffset())->Add(*(TGraph*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieData*) G__getstructoffset())->SetMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMovieData*) G__getstructoffset())->GetMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieData*) G__getstructoffset())->SetMedianPedestalRms((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const MMovieData*) G__getstructoffset())->GetMedianPedestalRms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieData*) G__getstructoffset())->SetNumSlices((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const MMovieData*) G__getstructoffset())->GetNumSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MMovieData*) G__getstructoffset())->CheckRange((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMovieData*) G__getstructoffset())->Eval((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MMovieData*) G__getstructoffset())->CheckedEval((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMovieData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMovieData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMovieData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMovieData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_179_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMovieData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMovieData G__TMMovieData;
static int G__MovieCint_179_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMovieData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMovieData*) (soff+(sizeof(MMovieData)*i)))->~G__TMMovieData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMovieData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMovieData*) (soff))->~G__TMMovieData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMoviePrepare */
static int G__MovieCint_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMoviePrepare* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMoviePrepare((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMoviePrepare((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMoviePrepare((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMoviePrepare((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMoviePrepare[n];
       } else {
         p = new((void*) gvp) MMoviePrepare[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMoviePrepare;
       } else {
         p = new((void*) gvp) MMoviePrepare;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMoviePrepare*) G__getstructoffset())->SetRangeFromExtractor(*(MExtractor*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMoviePrepare::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMoviePrepare::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMoviePrepare::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMoviePrepare::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMoviePrepare*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMoviePrepare::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMoviePrepare::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMoviePrepare::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_185_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMoviePrepare::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMoviePrepare G__TMMoviePrepare;
static int G__MovieCint_185_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMoviePrepare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMoviePrepare*) (soff+(sizeof(MMoviePrepare)*i)))->~G__TMMoviePrepare();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMoviePrepare*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMoviePrepare*) (soff))->~G__TMMoviePrepare();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MMovieWrite */
static int G__MovieCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MMovieWrite* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMovieWrite((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MMovieWrite((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MMovieWrite((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MMovieWrite((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMovieWrite[n];
       } else {
         p = new((void*) gvp) MMovieWrite[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MMovieWrite;
       } else {
         p = new((void*) gvp) MMovieWrite;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieWrite*) G__getstructoffset())->SetFilename((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieWrite*) G__getstructoffset())->SetNumEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieWrite*) G__getstructoffset())->SetThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieWrite*) G__getstructoffset())->SetTargetLength((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MMovieWrite::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieWrite::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MMovieWrite::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MMovieWrite::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MMovieWrite*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieWrite::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMovieWrite::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MMovieWrite::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MovieCint_197_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MMovieWrite::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MMovieWrite G__TMMovieWrite;
static int G__MovieCint_197_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MMovieWrite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MMovieWrite*) (soff+(sizeof(MMovieWrite)*i)))->~G__TMMovieWrite();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MMovieWrite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MMovieWrite*) (soff))->~G__TMMovieWrite();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MMovieData */

/* MMoviePrepare */

/* MMovieWrite */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMovieCint {
 public:
  G__Sizep2memfuncMovieCint(): p(&G__Sizep2memfuncMovieCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMovieCint::*p)();
};

size_t G__get_sizep2memfuncMovieCint()
{
  G__Sizep2memfuncMovieCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMovieCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MovieCintLN_MMovieData))) {
     MMovieData *G__Lderived;
     G__Lderived=(MMovieData*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieData),G__get_linked_tagnum(&G__MovieCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieData),G__get_linked_tagnum(&G__MovieCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MCamEvent *G__Lpbase=(MCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieData),G__get_linked_tagnum(&G__MovieCintLN_MCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare))) {
     MMoviePrepare *G__Lderived;
     G__Lderived=(MMoviePrepare*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare),G__get_linked_tagnum(&G__MovieCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare),G__get_linked_tagnum(&G__MovieCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare),G__get_linked_tagnum(&G__MovieCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare),G__get_linked_tagnum(&G__MovieCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite))) {
     MMovieWrite *G__Lderived;
     G__Lderived=(MMovieWrite*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite),G__get_linked_tagnum(&G__MovieCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite),G__get_linked_tagnum(&G__MovieCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite),G__get_linked_tagnum(&G__MovieCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite),G__get_linked_tagnum(&G__MovieCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMovieCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MovieCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MovieCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MovieCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MovieCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MMovieData */
static void G__setup_memvarMMovieData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieData));
   { MMovieData *p; p=(MMovieData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MovieCintLN_TObjArray),-1,-1,4,"fSplines=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMedianPedestalRms=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumSlices=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMoviePrepare */
static void G__setup_memvarMMoviePrepare(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare));
   { MMoviePrepare *p; p=(MMoviePrepare*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MPedestalSubtractedEvt),-1,-1,4,"fEvt=",0,"! Slices with pedestal subtracted");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MCalibConstCam),-1,-1,4,"fCal=",0,"! Calibration constants signal");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MCalibrationRelTimeCam),-1,-1,4,"fRel=",0,"! Calibration constants time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MRawRunHeader),-1,-1,4,"fRun=",0,"! Run Header (sampling frequency)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MGeomCam),-1,-1,4,"fCam=",0,"! Pixel size");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MPedestalCam),-1,-1,4,"fPed=",0,"! Fundamental pedestal (slice by slice)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MMovieData),-1,-1,4,"fOut=",0,"! Prepared output container");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFirstSlice=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fLastSlice=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MMovieWrite */
static void G__setup_memvarMMovieWrite(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite));
   { MMovieWrite *p; p=(MMovieWrite*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MRawRunHeader),-1,-1,4,"fRun=",0,"! Header with run number and sampling frequency");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MRawEvtHeader),-1,-1,4,"fHead=",0,"! Header with event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MGeomCam),-1,-1,4,"fCam=",0,"! Camera geometry necessary for the histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MSignalCam),-1,-1,4,"fSig=",0,"! Input signal to display cleaned and uncleaned event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MBadPixelsCam),-1,-1,4,"fBad=",0,"! Information about bad pixels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MPedestalCam),-1,-1,4,"fPed=",0,"! Fundamental pedestal for palette and cleaning");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MMcEvt),-1,-1,4,"fMC=",0,"! Informatio about MC events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_MMovieData),-1,-1,4,"fIn=",0,"! Input data with splines for all pixels");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,4,"fPipe=",0,"! Ouput pipe to player or encoder");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTargetLength=",0,"[s] Target length for stream of one event (+1 frame)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThreshold=",0,"Threshold for cleaning");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumEvents=",0,"Maximum number of events to encode");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MovieCintLN_TString),-1,-1,4,"fFilename=",0,"name of output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MovieCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMovieCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMMovieData(void) {
   /* MMovieData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieData));
   G__memfunc_setup("operator[]",1060,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__MovieCintLN_MSpline3), -1, 1, 1, 1, 4, 8, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPixelContent",1533,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 8, 
"d - 'Double_t' 1 - val i - 'Int_t' 0 - idx "
"u 'MGeomCam' - 11 - cam i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPixelContent",1643,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MMovieData",967,G__MovieCint_179_0_4, 105, G__get_linked_tagnum(&G__MovieCintLN_MMovieData), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Add",265,G__MovieCint_179_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TGraph' - 11 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMax",594,G__MovieCint_179_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - mx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMax",582,G__MovieCint_179_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMedianPedestalRms",2014,G__MovieCint_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMedianPedestalRms",2002,G__MovieCint_179_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumSlices",1215,G__MovieCint_179_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumSlices",1203,G__MovieCint_179_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckRange",971,G__MovieCint_179_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - idx d - 'Double_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Eval",392,G__MovieCint_179_0_14, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - idx d - 'Double_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckedEval",1071,G__MovieCint_179_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - idx d - 'Double_t' 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MovieCint_179_0_16, 85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMovieData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MovieCint_179_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MovieCint_179_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMovieData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MovieCint_179_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMovieData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MovieCint_179_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MovieCint_179_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MovieCint_179_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMovieData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MovieCint_179_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MovieCint_179_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMovieData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMovieData", 1093, G__MovieCint_179_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMoviePrepare(void) {
   /* MMoviePrepare */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMedianCalibConst",1872,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMedianPedestalRms",2002,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMoviePrepare",1308,G__MovieCint_185_0_6, 105, G__get_linked_tagnum(&G__MovieCintLN_MMoviePrepare), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRangeFromExtractor",2153,G__MovieCint_185_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'MExtractor' - 11 - ext", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MovieCint_185_0_8, 85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMoviePrepare::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MovieCint_185_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMoviePrepare::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MovieCint_185_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMoviePrepare::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MovieCint_185_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMoviePrepare::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MovieCint_185_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MovieCint_185_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMoviePrepare::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MovieCint_185_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMoviePrepare::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MovieCint_185_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMoviePrepare::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MovieCint_185_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMoviePrepare::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMoviePrepare", 1434, G__MovieCint_185_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMMovieWrite(void) {
   /* MMovieWrite */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - plist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PostProcess",1157,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadEnv",677,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'TEnv' - 11 - env u 'TString' - 0 - prefix "
"g - 'Bool_t' 0 - print", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OpenPipe",800,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckPipe",876,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMedianPedestalRms",2002,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 8, 
"u 'TH1' - 1 - h d - 'Double_t' 0 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TreatBadPixels",1404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "u 'TH1' - 1 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPalette",1019,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"d - 'Double_t' 0 - rms u 'TH1' - 11 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeletePalette",1314,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 8, "i - 'Int_t' 0 - colidx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateImage",1094,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TASImage' - 1 - img u 'TVirtualPad' - 1 - pad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteImage",1006,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "u 'TASImage' - 1 - img", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteImage",1006,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TASImage' - 1 - img u 'TVirtualPad' - 1 - pad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TH1' - 1 - h u 'TVirtualPad' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MMovieWrite",1112,G__MovieCint_197_0_16, 105, G__get_linked_tagnum(&G__MovieCintLN_MMovieWrite), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilename",1101,G__MovieCint_197_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumEvents",1233,G__MovieCint_197_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetThreshold",1241,G__MovieCint_197_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTargetLength",1525,G__MovieCint_197_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MovieCint_197_0_21, 85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MMovieWrite::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MovieCint_197_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieWrite::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MovieCint_197_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MMovieWrite::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MovieCint_197_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MMovieWrite::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MovieCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MovieCint_197_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MovieCint_197_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieWrite::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MovieCint_197_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMovieWrite::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MovieCint_197_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MMovieWrite::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MovieCint_197_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MMovieWrite::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~MMovieWrite", 1238, G__MovieCint_197_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMovieCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMovieCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMovieCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MovieCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MovieCintLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MGeomCam = { "MGeomCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MExtractor = { "MExtractor" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MMovieData = { "MMovieData" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MPedestalCam = { "MPedestalCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MCalibConstCam = { "MCalibConstCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MCalibrationRelTimeCam = { "MCalibrationRelTimeCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MPedestalSubtractedEvt = { "MPedestalSubtractedEvt" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MMoviePrepare = { "MMoviePrepare" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MCamEvent = { "MCamEvent" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MSpline3 = { "MSpline3" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_TASImage = { "TASImage" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MMcEvt = { "MMcEvt" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MRawEvtHeader = { "MRawEvtHeader" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MBadPixelsCam = { "MBadPixelsCam" , 99 , -1 };
G__linked_taginfo G__MovieCintLN_MMovieWrite = { "MMovieWrite" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMovieCint() {
  G__MovieCintLN_TClass.tagnum = -1 ;
  G__MovieCintLN_TBuffer.tagnum = -1 ;
  G__MovieCintLN_TMemberInspector.tagnum = -1 ;
  G__MovieCintLN_TObject.tagnum = -1 ;
  G__MovieCintLN_TString.tagnum = -1 ;
  G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MovieCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MovieCintLN_TObjArray.tagnum = -1 ;
  G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MovieCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MovieCintLN_TVirtualPad.tagnum = -1 ;
  G__MovieCintLN_TEnv.tagnum = -1 ;
  G__MovieCintLN_MParContainer.tagnum = -1 ;
  G__MovieCintLN_MInputStreamID.tagnum = -1 ;
  G__MovieCintLN_MParList.tagnum = -1 ;
  G__MovieCintLN_MTask.tagnum = -1 ;
  G__MovieCintLN_MGeomCam.tagnum = -1 ;
  G__MovieCintLN_MExtractor.tagnum = -1 ;
  G__MovieCintLN_MMovieData.tagnum = -1 ;
  G__MovieCintLN_MPedestalCam.tagnum = -1 ;
  G__MovieCintLN_MRawRunHeader.tagnum = -1 ;
  G__MovieCintLN_MCalibConstCam.tagnum = -1 ;
  G__MovieCintLN_MCalibrationRelTimeCam.tagnum = -1 ;
  G__MovieCintLN_MPedestalSubtractedEvt.tagnum = -1 ;
  G__MovieCintLN_MMoviePrepare.tagnum = -1 ;
  G__MovieCintLN_MCamEvent.tagnum = -1 ;
  G__MovieCintLN_TGraph.tagnum = -1 ;
  G__MovieCintLN_MSpline3.tagnum = -1 ;
  G__MovieCintLN_TH1.tagnum = -1 ;
  G__MovieCintLN_TASImage.tagnum = -1 ;
  G__MovieCintLN_MMcEvt.tagnum = -1 ;
  G__MovieCintLN_MSignalCam.tagnum = -1 ;
  G__MovieCintLN_MRawEvtHeader.tagnum = -1 ;
  G__MovieCintLN_MBadPixelsCam.tagnum = -1 ;
  G__MovieCintLN_MMovieWrite.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMovieCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TString);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TVirtualPad);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TEnv);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MGeomCam);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MExtractor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MovieCintLN_MMovieData),sizeof(MMovieData),-1,324864,"Storage container for movie data",G__setup_memvarMMovieData,G__setup_memfuncMMovieData);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MPedestalCam);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MCalibConstCam);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MCalibrationRelTimeCam);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MPedestalSubtractedEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MovieCintLN_MMoviePrepare),sizeof(MMoviePrepare),-1,323840,"Task to prepare a movie",G__setup_memvarMMoviePrepare,G__setup_memfuncMMoviePrepare);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MCamEvent);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TGraph);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MSpline3);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_TASImage);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MMcEvt);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MSignalCam);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MRawEvtHeader);
   G__get_linked_tagnum_fwd(&G__MovieCintLN_MBadPixelsCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MovieCintLN_MMovieWrite),sizeof(MMovieWrite),-1,324864,"Task to encode a movie",G__setup_memvarMMovieWrite,G__setup_memfuncMMovieWrite);
}
extern "C" void G__cpp_setupMovieCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupMovieCint()");
  G__set_cpp_environmentMovieCint();
  G__cpp_setup_tagtableMovieCint();

  G__cpp_setup_inheritanceMovieCint();

  G__cpp_setup_typetableMovieCint();

  G__cpp_setup_memvarMovieCint();

  G__cpp_setup_memfuncMovieCint();
  G__cpp_setup_globalMovieCint();
  G__cpp_setup_funcMovieCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMovieCint();
  return;
}
class G__cpp_setup_initMovieCint {
  public:
    G__cpp_setup_initMovieCint() { G__add_setup_func("MovieCint",(G__incsetup)(&G__cpp_setupMovieCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMovieCint() { G__remove_setup_func("MovieCint"); }
};
G__cpp_setup_initMovieCint G__cpp_setup_initializerMovieCint;

