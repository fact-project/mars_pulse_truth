//
// File generated by rootcint at Mon Nov 28 11:05:20 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME DrsCint
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DrsCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MDrsCalibrationTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MDrsCalibrationTime(void *p = 0);
   static void *newArray_MDrsCalibrationTime(Long_t size, void *p);
   static void delete_MDrsCalibrationTime(void *p);
   static void deleteArray_MDrsCalibrationTime(void *p);
   static void destruct_MDrsCalibrationTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MDrsCalibrationTime*)
   {
      ::MDrsCalibrationTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MDrsCalibrationTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MDrsCalibrationTime", ::MDrsCalibrationTime::Class_Version(), "./MDrsCalibrationTime.h", 15,
                  typeid(::MDrsCalibrationTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MDrsCalibrationTime::Dictionary, isa_proxy, 4,
                  sizeof(::MDrsCalibrationTime) );
      instance.SetNew(&new_MDrsCalibrationTime);
      instance.SetNewArray(&newArray_MDrsCalibrationTime);
      instance.SetDelete(&delete_MDrsCalibrationTime);
      instance.SetDeleteArray(&deleteArray_MDrsCalibrationTime);
      instance.SetDestructor(&destruct_MDrsCalibrationTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MDrsCalibrationTime*)
   {
      return GenerateInitInstanceLocal((::MDrsCalibrationTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MDrsCalibrationTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MCalibrateDrsTimes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCalibrateDrsTimes(void *p = 0);
   static void *newArray_MCalibrateDrsTimes(Long_t size, void *p);
   static void delete_MCalibrateDrsTimes(void *p);
   static void deleteArray_MCalibrateDrsTimes(void *p);
   static void destruct_MCalibrateDrsTimes(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MCalibrateDrsTimes*)
   {
      ::MCalibrateDrsTimes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCalibrateDrsTimes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCalibrateDrsTimes", ::MCalibrateDrsTimes::Class_Version(), "./MCalibrateDrsTimes.h", 17,
                  typeid(::MCalibrateDrsTimes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MCalibrateDrsTimes::Dictionary, isa_proxy, 4,
                  sizeof(::MCalibrateDrsTimes) );
      instance.SetNew(&new_MCalibrateDrsTimes);
      instance.SetNewArray(&newArray_MCalibrateDrsTimes);
      instance.SetDelete(&delete_MCalibrateDrsTimes);
      instance.SetDeleteArray(&deleteArray_MCalibrateDrsTimes);
      instance.SetDestructor(&destruct_MCalibrateDrsTimes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MCalibrateDrsTimes*)
   {
      return GenerateInitInstanceLocal((::MCalibrateDrsTimes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCalibrateDrsTimes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MDrsCalibration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MDrsCalibration(void *p = 0);
   static void *newArray_MDrsCalibration(Long_t size, void *p);
   static void delete_MDrsCalibration(void *p);
   static void deleteArray_MDrsCalibration(void *p);
   static void destruct_MDrsCalibration(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MDrsCalibration*)
   {
      ::MDrsCalibration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MDrsCalibration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MDrsCalibration", ::MDrsCalibration::Class_Version(), "./MDrsCalibration.h", 24,
                  typeid(::MDrsCalibration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MDrsCalibration::Dictionary, isa_proxy, 4,
                  sizeof(::MDrsCalibration) );
      instance.SetNew(&new_MDrsCalibration);
      instance.SetNewArray(&newArray_MDrsCalibration);
      instance.SetDelete(&delete_MDrsCalibration);
      instance.SetDeleteArray(&deleteArray_MDrsCalibration);
      instance.SetDestructor(&destruct_MDrsCalibration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MDrsCalibration*)
   {
      return GenerateInitInstanceLocal((::MDrsCalibration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MDrsCalibration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MDrsCalibResult_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MDrsCalibResult(void *p = 0);
   static void *newArray_MDrsCalibResult(Long_t size, void *p);
   static void delete_MDrsCalibResult(void *p);
   static void deleteArray_MDrsCalibResult(void *p);
   static void destruct_MDrsCalibResult(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MDrsCalibResult*)
   {
      ::MDrsCalibResult *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MDrsCalibResult >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MDrsCalibResult", ::MDrsCalibResult::Class_Version(), "./MDrsCalibApply.h", 20,
                  typeid(::MDrsCalibResult), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MDrsCalibResult::Dictionary, isa_proxy, 4,
                  sizeof(::MDrsCalibResult) );
      instance.SetNew(&new_MDrsCalibResult);
      instance.SetNewArray(&newArray_MDrsCalibResult);
      instance.SetDelete(&delete_MDrsCalibResult);
      instance.SetDeleteArray(&deleteArray_MDrsCalibResult);
      instance.SetDestructor(&destruct_MDrsCalibResult);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MDrsCalibResult*)
   {
      return GenerateInitInstanceLocal((::MDrsCalibResult*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MDrsCalibResult*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MDrsCalibApply_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MDrsCalibApply(void *p = 0);
   static void *newArray_MDrsCalibApply(Long_t size, void *p);
   static void delete_MDrsCalibApply(void *p);
   static void deleteArray_MDrsCalibApply(void *p);
   static void destruct_MDrsCalibApply(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MDrsCalibApply*)
   {
      ::MDrsCalibApply *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MDrsCalibApply >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MDrsCalibApply", ::MDrsCalibApply::Class_Version(), "./MDrsCalibApply.h", 37,
                  typeid(::MDrsCalibApply), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MDrsCalibApply::Dictionary, isa_proxy, 4,
                  sizeof(::MDrsCalibApply) );
      instance.SetNew(&new_MDrsCalibApply);
      instance.SetNewArray(&newArray_MDrsCalibApply);
      instance.SetDelete(&delete_MDrsCalibApply);
      instance.SetDeleteArray(&deleteArray_MDrsCalibApply);
      instance.SetDestructor(&destruct_MDrsCalibApply);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MDrsCalibApply*)
   {
      return GenerateInitInstanceLocal((::MDrsCalibApply*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MDrsCalibApply*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHDrsCalibration_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHDrsCalibration(void *p = 0);
   static void *newArray_MHDrsCalibration(Long_t size, void *p);
   static void delete_MHDrsCalibration(void *p);
   static void deleteArray_MHDrsCalibration(void *p);
   static void destruct_MHDrsCalibration(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHDrsCalibration*)
   {
      ::MHDrsCalibration *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHDrsCalibration >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHDrsCalibration", ::MHDrsCalibration::Class_Version(), "./MHDrsCalibration.h", 17,
                  typeid(::MHDrsCalibration), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHDrsCalibration::Dictionary, isa_proxy, 4,
                  sizeof(::MHDrsCalibration) );
      instance.SetNew(&new_MHDrsCalibration);
      instance.SetNewArray(&newArray_MHDrsCalibration);
      instance.SetDelete(&delete_MHDrsCalibration);
      instance.SetDeleteArray(&deleteArray_MHDrsCalibration);
      instance.SetDestructor(&destruct_MHDrsCalibration);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHDrsCalibration*)
   {
      return GenerateInitInstanceLocal((::MHDrsCalibration*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHDrsCalibration*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHDrsCalibrationCheck_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHDrsCalibrationCheck(void *p = 0);
   static void *newArray_MHDrsCalibrationCheck(Long_t size, void *p);
   static void delete_MHDrsCalibrationCheck(void *p);
   static void deleteArray_MHDrsCalibrationCheck(void *p);
   static void destruct_MHDrsCalibrationCheck(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHDrsCalibrationCheck*)
   {
      ::MHDrsCalibrationCheck *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHDrsCalibrationCheck >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHDrsCalibrationCheck", ::MHDrsCalibrationCheck::Class_Version(), "./MHDrsCalibrationCheck.h", 11,
                  typeid(::MHDrsCalibrationCheck), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHDrsCalibrationCheck::Dictionary, isa_proxy, 4,
                  sizeof(::MHDrsCalibrationCheck) );
      instance.SetNew(&new_MHDrsCalibrationCheck);
      instance.SetNewArray(&newArray_MHDrsCalibrationCheck);
      instance.SetDelete(&delete_MHDrsCalibrationCheck);
      instance.SetDeleteArray(&deleteArray_MHDrsCalibrationCheck);
      instance.SetDestructor(&destruct_MHDrsCalibrationCheck);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHDrsCalibrationCheck*)
   {
      return GenerateInitInstanceLocal((::MHDrsCalibrationCheck*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHDrsCalibrationCheck*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void MHDrsCalibrationTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MHDrsCalibrationTime(void *p = 0);
   static void *newArray_MHDrsCalibrationTime(Long_t size, void *p);
   static void delete_MHDrsCalibrationTime(void *p);
   static void deleteArray_MHDrsCalibrationTime(void *p);
   static void destruct_MHDrsCalibrationTime(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MHDrsCalibrationTime*)
   {
      ::MHDrsCalibrationTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MHDrsCalibrationTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MHDrsCalibrationTime", ::MHDrsCalibrationTime::Class_Version(), "./MHDrsCalibrationTime.h", 17,
                  typeid(::MHDrsCalibrationTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MHDrsCalibrationTime::Dictionary, isa_proxy, 4,
                  sizeof(::MHDrsCalibrationTime) );
      instance.SetNew(&new_MHDrsCalibrationTime);
      instance.SetNewArray(&newArray_MHDrsCalibrationTime);
      instance.SetDelete(&delete_MHDrsCalibrationTime);
      instance.SetDeleteArray(&deleteArray_MHDrsCalibrationTime);
      instance.SetDestructor(&destruct_MHDrsCalibrationTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MHDrsCalibrationTime*)
   {
      return GenerateInitInstanceLocal((::MHDrsCalibrationTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MHDrsCalibrationTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr MDrsCalibrationTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MDrsCalibrationTime::Class_Name()
{
   return "MDrsCalibrationTime";
}

//______________________________________________________________________________
const char *MDrsCalibrationTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibrationTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MDrsCalibrationTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibrationTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MDrsCalibrationTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibrationTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MDrsCalibrationTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibrationTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MCalibrateDrsTimes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCalibrateDrsTimes::Class_Name()
{
   return "MCalibrateDrsTimes";
}

//______________________________________________________________________________
const char *MCalibrateDrsTimes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateDrsTimes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCalibrateDrsTimes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateDrsTimes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCalibrateDrsTimes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateDrsTimes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCalibrateDrsTimes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MCalibrateDrsTimes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MDrsCalibration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MDrsCalibration::Class_Name()
{
   return "MDrsCalibration";
}

//______________________________________________________________________________
const char *MDrsCalibration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MDrsCalibration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MDrsCalibration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MDrsCalibration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MDrsCalibResult::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MDrsCalibResult::Class_Name()
{
   return "MDrsCalibResult";
}

//______________________________________________________________________________
const char *MDrsCalibResult::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibResult*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MDrsCalibResult::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibResult*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MDrsCalibResult::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibResult*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MDrsCalibResult::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibResult*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MDrsCalibApply::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MDrsCalibApply::Class_Name()
{
   return "MDrsCalibApply";
}

//______________________________________________________________________________
const char *MDrsCalibApply::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibApply*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MDrsCalibApply::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibApply*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MDrsCalibApply::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibApply*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MDrsCalibApply::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MDrsCalibApply*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHDrsCalibration::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHDrsCalibration::Class_Name()
{
   return "MHDrsCalibration";
}

//______________________________________________________________________________
const char *MHDrsCalibration::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibration*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHDrsCalibration::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibration*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHDrsCalibration::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibration*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHDrsCalibration::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibration*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHDrsCalibrationCheck::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHDrsCalibrationCheck::Class_Name()
{
   return "MHDrsCalibrationCheck";
}

//______________________________________________________________________________
const char *MHDrsCalibrationCheck::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationCheck*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHDrsCalibrationCheck::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationCheck*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHDrsCalibrationCheck::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationCheck*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHDrsCalibrationCheck::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationCheck*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr MHDrsCalibrationTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MHDrsCalibrationTime::Class_Name()
{
   return "MHDrsCalibrationTime";
}

//______________________________________________________________________________
const char *MHDrsCalibrationTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MHDrsCalibrationTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MHDrsCalibrationTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MHDrsCalibrationTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MHDrsCalibrationTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void MDrsCalibApply::Streamer(TBuffer &R__b)
{
   // Stream an object of class MDrsCalibApply.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MDrsCalibApply::Class(),this);
   } else {
      R__b.WriteClassBuffer(MDrsCalibApply::Class(),this);
   }
}

//______________________________________________________________________________
void MDrsCalibApply::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MDrsCalibApply.
      TClass *R__cl = ::MDrsCalibApply::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawEvt", &fRawEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDrsCalib", &fDrsCalib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignal", &fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPrevStart", (void*)&fPrevStart);
      R__insp.InspectMember("list<std::vector<Short_t> >", (void*)&fPrevStart, "fPrevStart.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxNumPrevEvents", &fMaxNumPrevEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRemoveSpikes", &fRemoveSpikes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlidingAverage", &fSlidingAverage);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MDrsCalibApply(void *p) {
      return  p ? new(p) ::MDrsCalibApply : new ::MDrsCalibApply;
   }
   static void *newArray_MDrsCalibApply(Long_t nElements, void *p) {
      return p ? new(p) ::MDrsCalibApply[nElements] : new ::MDrsCalibApply[nElements];
   }
   // Wrapper around operator delete
   static void delete_MDrsCalibApply(void *p) {
      delete ((::MDrsCalibApply*)p);
   }
   static void deleteArray_MDrsCalibApply(void *p) {
      delete [] ((::MDrsCalibApply*)p);
   }
   static void destruct_MDrsCalibApply(void *p) {
      typedef ::MDrsCalibApply current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MDrsCalibApply

//______________________________________________________________________________
void MDrsCalibResult::Streamer(TBuffer &R__b)
{
   // Stream an object of class MDrsCalibResult.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MDrsCalibResult::Class(),this);
   } else {
      R__b.WriteClassBuffer(MDrsCalibResult::Class(),this);
   }
}

//______________________________________________________________________________
void MDrsCalibResult::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MDrsCalibResult.
      TClass *R__cl = ::MDrsCalibResult::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", (void*)&fData);
      R__insp.InspectMember("vector<DrsCalibrate::Step>", (void*)&fData, "fData.", false);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MDrsCalibResult(void *p) {
      return  p ? new(p) ::MDrsCalibResult : new ::MDrsCalibResult;
   }
   static void *newArray_MDrsCalibResult(Long_t nElements, void *p) {
      return p ? new(p) ::MDrsCalibResult[nElements] : new ::MDrsCalibResult[nElements];
   }
   // Wrapper around operator delete
   static void delete_MDrsCalibResult(void *p) {
      delete ((::MDrsCalibResult*)p);
   }
   static void deleteArray_MDrsCalibResult(void *p) {
      delete [] ((::MDrsCalibResult*)p);
   }
   static void destruct_MDrsCalibResult(void *p) {
      typedef ::MDrsCalibResult current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MDrsCalibResult

//______________________________________________________________________________
void MDrsCalibration::Streamer(TBuffer &R__b)
{
   // Stream an object of class MDrsCalibration.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MDrsCalibration::Class(),this);
   } else {
      R__b.WriteClassBuffer(MDrsCalibration::Class(),this);
   }
}

//______________________________________________________________________________
void MDrsCalibration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MDrsCalibration.
      TClass *R__cl = ::MDrsCalibration::IsA();
      if (R__cl || R__insp.IsA()) { }
      MParContainer::ShowMembers(R__insp);
      R__insp.GenericShowMembers("DrsCalibration", ( ::DrsCalibration *) (this ), false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MDrsCalibration(void *p) {
      return  p ? new(p) ::MDrsCalibration : new ::MDrsCalibration;
   }
   static void *newArray_MDrsCalibration(Long_t nElements, void *p) {
      return p ? new(p) ::MDrsCalibration[nElements] : new ::MDrsCalibration[nElements];
   }
   // Wrapper around operator delete
   static void delete_MDrsCalibration(void *p) {
      delete ((::MDrsCalibration*)p);
   }
   static void deleteArray_MDrsCalibration(void *p) {
      delete [] ((::MDrsCalibration*)p);
   }
   static void destruct_MDrsCalibration(void *p) {
      typedef ::MDrsCalibration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MDrsCalibration

//______________________________________________________________________________
void MDrsCalibrationTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MDrsCalibrationTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MDrsCalibrationTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MDrsCalibrationTime::Class(),this);
   }
}

//______________________________________________________________________________
void MDrsCalibrationTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MDrsCalibrationTime.
      TClass *R__cl = ::MDrsCalibrationTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumEntries", &fNumEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSamples", &fNumSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumChannels", &fNumChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffsets", (void*)&fOffsets);
      R__insp.InspectMember("vector<double>", (void*)&fOffsets, "fOffsets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDelays", (void*)&fDelays);
      R__insp.InspectMember("vector<double>", (void*)&fDelays, "fDelays.", false);
      MParContainer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MDrsCalibrationTime(void *p) {
      return  p ? new(p) ::MDrsCalibrationTime : new ::MDrsCalibrationTime;
   }
   static void *newArray_MDrsCalibrationTime(Long_t nElements, void *p) {
      return p ? new(p) ::MDrsCalibrationTime[nElements] : new ::MDrsCalibrationTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MDrsCalibrationTime(void *p) {
      delete ((::MDrsCalibrationTime*)p);
   }
   static void deleteArray_MDrsCalibrationTime(void *p) {
      delete [] ((::MDrsCalibrationTime*)p);
   }
   static void destruct_MDrsCalibrationTime(void *p) {
      typedef ::MDrsCalibrationTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MDrsCalibrationTime

//______________________________________________________________________________
void MHDrsCalibration::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHDrsCalibration.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHDrsCalibration::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHDrsCalibration::Class(),this);
   }
}

//______________________________________________________________________________
void MHDrsCalibration::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHDrsCalibration.
      TClass *R__cl = ::MHDrsCalibration::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResult", &fResult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBuffer", (void*)&fBuffer);
      R__insp.InspectMember("vector<float>", (void*)&fBuffer, "fBuffer.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", (void*)&fData);
      R__insp.InspectMember("DrsCalibrate", (void*)&fData, "fData.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStep", &fStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fScale", &fScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSamples", &fNumSamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputPath", &fOutputPath);
      R__insp.InspectMember(fOutputPath, "fOutputPath.");
      MHCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHDrsCalibration(void *p) {
      return  p ? new(p) ::MHDrsCalibration : new ::MHDrsCalibration;
   }
   static void *newArray_MHDrsCalibration(Long_t nElements, void *p) {
      return p ? new(p) ::MHDrsCalibration[nElements] : new ::MHDrsCalibration[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHDrsCalibration(void *p) {
      delete ((::MHDrsCalibration*)p);
   }
   static void deleteArray_MHDrsCalibration(void *p) {
      delete [] ((::MHDrsCalibration*)p);
   }
   static void destruct_MHDrsCalibration(void *p) {
      typedef ::MHDrsCalibration current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHDrsCalibration

//______________________________________________________________________________
void MHDrsCalibrationTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHDrsCalibrationTime.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHDrsCalibrationTime::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHDrsCalibrationTime::Class(),this);
   }
}

//______________________________________________________________________________
void MHDrsCalibrationTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHDrsCalibrationTime.
      TClass *R__cl = ::MHDrsCalibrationTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist", &fHist);
      R__insp.InspectMember(fHist, "fHist.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCal", &fCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", (void*)&fData);
      R__insp.InspectMember("DrsCalibrateTime", (void*)&fData, "fData.", false);
      MH::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHDrsCalibrationTime(void *p) {
      return  p ? new(p) ::MHDrsCalibrationTime : new ::MHDrsCalibrationTime;
   }
   static void *newArray_MHDrsCalibrationTime(Long_t nElements, void *p) {
      return p ? new(p) ::MHDrsCalibrationTime[nElements] : new ::MHDrsCalibrationTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHDrsCalibrationTime(void *p) {
      delete ((::MHDrsCalibrationTime*)p);
   }
   static void deleteArray_MHDrsCalibrationTime(void *p) {
      delete [] ((::MHDrsCalibrationTime*)p);
   }
   static void destruct_MHDrsCalibrationTime(void *p) {
      typedef ::MHDrsCalibrationTime current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHDrsCalibrationTime

//______________________________________________________________________________
void MHDrsCalibrationCheck::Streamer(TBuffer &R__b)
{
   // Stream an object of class MHDrsCalibrationCheck.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MHDrsCalibrationCheck::Class(),this);
   } else {
      R__b.WriteClassBuffer(MHDrsCalibrationCheck::Class(),this);
   }
}

//______________________________________________________________________________
void MHDrsCalibrationCheck::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MHDrsCalibrationCheck.
      TClass *R__cl = ::MHDrsCalibrationCheck::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSum1", (void*)&fSum1);
      R__insp.InspectMember("vector<double>", (void*)&fSum1, "fSum1.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSum2", (void*)&fSum2);
      R__insp.InspectMember("vector<double>", (void*)&fSum2, "fSum2.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumPixels", &fNumPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumSamples", &fNumSamples);
      MHCamEvent::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MHDrsCalibrationCheck(void *p) {
      return  p ? new(p) ::MHDrsCalibrationCheck : new ::MHDrsCalibrationCheck;
   }
   static void *newArray_MHDrsCalibrationCheck(Long_t nElements, void *p) {
      return p ? new(p) ::MHDrsCalibrationCheck[nElements] : new ::MHDrsCalibrationCheck[nElements];
   }
   // Wrapper around operator delete
   static void delete_MHDrsCalibrationCheck(void *p) {
      delete ((::MHDrsCalibrationCheck*)p);
   }
   static void deleteArray_MHDrsCalibrationCheck(void *p) {
      delete [] ((::MHDrsCalibrationCheck*)p);
   }
   static void destruct_MHDrsCalibrationCheck(void *p) {
      typedef ::MHDrsCalibrationCheck current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MHDrsCalibrationCheck

//______________________________________________________________________________
void MCalibrateDrsTimes::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCalibrateDrsTimes.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCalibrateDrsTimes::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCalibrateDrsTimes::Class(),this);
   }
}

//______________________________________________________________________________
void MCalibrateDrsTimes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCalibrateDrsTimes.
      TClass *R__cl = ::MCalibrateDrsTimes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRunHeader", &fRunHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRaw", &fRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalib", &fCalib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBadPixels", &fBadPixels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSignals", &fSignals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArrivalTime", &fArrivalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArrivalTimeU", &fArrivalTimeU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFreq", &fFreq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameArrivalTime", &fNameArrivalTime);
      R__insp.InspectMember(fNameArrivalTime, "fNameArrivalTime.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameCalibrated", &fNameCalibrated);
      R__insp.InspectMember(fNameCalibrated, "fNameCalibrated.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameUncalibrated", &fNameUncalibrated);
      R__insp.InspectMember(fNameUncalibrated, "fNameUncalibrated.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsTimeMarker", &fIsTimeMarker);
      MTask::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MCalibrateDrsTimes(void *p) {
      return  p ? new(p) ::MCalibrateDrsTimes : new ::MCalibrateDrsTimes;
   }
   static void *newArray_MCalibrateDrsTimes(Long_t nElements, void *p) {
      return p ? new(p) ::MCalibrateDrsTimes[nElements] : new ::MCalibrateDrsTimes[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCalibrateDrsTimes(void *p) {
      delete ((::MCalibrateDrsTimes*)p);
   }
   static void deleteArray_MCalibrateDrsTimes(void *p) {
      delete [] ((::MCalibrateDrsTimes*)p);
   }
   static void destruct_MCalibrateDrsTimes(void *p) {
      typedef ::MCalibrateDrsTimes current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MCalibrateDrsTimes

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "/home/sebastian/CERN_root/build_5.34.36/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

/********************************************************
* DrsCint.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDrsCint();

extern "C" void G__set_cpp_environmentDrsCint() {
  G__cpp_reset_tagtableDrsCint();
}
#include <new>
extern "C" int G__cpp_dllrevDrsCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MDrsCalibrationTime */
static int G__DrsCint_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibrationTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibrationTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MDrsCalibrationTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibrationTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MDrsCalibrationTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibrationTime[n];
       } else {
         p = new((void*) gvp) MDrsCalibrationTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibrationTime;
       } else {
         p = new((void*) gvp) MDrsCalibrationTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibrationTime*) G__getstructoffset())->InitSize((uint16_t) G__int(libp->para[0]), (uint16_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibrationTime*) G__getstructoffset())->SetCalibration(*(DrsCalibrateTime*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MDrsCalibrationTime*) G__getstructoffset())->SetDelays(*(TH1*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibrationTime*) G__getstructoffset())->SetDelays(*(TGraph*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MDrsCalibrationTime*) G__getstructoffset())->GetOffset((uint32_t) G__int(libp->para[0]), (uint32_t) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MDrsCalibrationTime*) G__getstructoffset())->GetDelay((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MDrsCalibrationTime*) G__getstructoffset())->ReadFits(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const MDrsCalibrationTime*) G__getstructoffset())->WriteFits(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MDrsCalibrationTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibrationTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MDrsCalibrationTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MDrsCalibrationTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibrationTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibrationTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibrationTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibrationTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_179_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibrationTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_179_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MDrsCalibrationTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MDrsCalibrationTime(*(MDrsCalibrationTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MDrsCalibrationTime G__TMDrsCalibrationTime;
static int G__DrsCint_179_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MDrsCalibrationTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MDrsCalibrationTime*) (soff+(sizeof(MDrsCalibrationTime)*i)))->~G__TMDrsCalibrationTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MDrsCalibrationTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MDrsCalibrationTime*) (soff))->~G__TMDrsCalibrationTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_179_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibrationTime* dest = (MDrsCalibrationTime*) G__getstructoffset();
   *dest = *(MDrsCalibrationTime*) libp->para[0].ref;
   const MDrsCalibrationTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MCalibrateDrsTimes */
static int G__DrsCint_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrateDrsTimes* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateDrsTimes((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MCalibrateDrsTimes((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCalibrateDrsTimes((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MCalibrateDrsTimes((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateDrsTimes[n];
       } else {
         p = new((void*) gvp) MCalibrateDrsTimes[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MCalibrateDrsTimes;
       } else {
         p = new((void*) gvp) MCalibrateDrsTimes;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateDrsTimes*) G__getstructoffset())->SetNameArrivalTime((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateDrsTimes*) G__getstructoffset())->SetNameCalibrated((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateDrsTimes*) G__getstructoffset())->SetNameUncalibrated((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MCalibrateDrsTimes*) G__getstructoffset())->SetTimeMarker((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MCalibrateDrsTimes*) G__getstructoffset())->SetTimeMarker();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCalibrateDrsTimes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateDrsTimes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCalibrateDrsTimes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCalibrateDrsTimes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCalibrateDrsTimes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateDrsTimes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateDrsTimes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCalibrateDrsTimes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_184_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCalibrateDrsTimes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_184_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCalibrateDrsTimes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCalibrateDrsTimes(*(MCalibrateDrsTimes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCalibrateDrsTimes G__TMCalibrateDrsTimes;
static int G__DrsCint_184_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCalibrateDrsTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCalibrateDrsTimes*) (soff+(sizeof(MCalibrateDrsTimes)*i)))->~G__TMCalibrateDrsTimes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCalibrateDrsTimes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCalibrateDrsTimes*) (soff))->~G__TMCalibrateDrsTimes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_184_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCalibrateDrsTimes* dest = (MCalibrateDrsTimes*) G__getstructoffset();
   *dest = *(MCalibrateDrsTimes*) libp->para[0].ref;
   const MCalibrateDrsTimes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MDrsCalibration */
static int G__DrsCint_352_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibration* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MDrsCalibration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibration((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MDrsCalibration((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibration[n];
       } else {
         p = new((void*) gvp) MDrsCalibration[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibration;
       } else {
         p = new((void*) gvp) MDrsCalibration;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MDrsCalibration*) G__getstructoffset())->ReadFits(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibration*) G__getstructoffset())->Plot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MDrsCalibration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MDrsCalibration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MDrsCalibration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_352_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_352_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MDrsCalibration* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MDrsCalibration(*(MDrsCalibration*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MDrsCalibration G__TMDrsCalibration;
static int G__DrsCint_352_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MDrsCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MDrsCalibration*) (soff+(sizeof(MDrsCalibration)*i)))->~G__TMDrsCalibration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MDrsCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MDrsCalibration*) (soff))->~G__TMDrsCalibration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_352_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibration* dest = (MDrsCalibration*) G__getstructoffset();
   *dest = *(MDrsCalibration*) libp->para[0].ref;
   const MDrsCalibration& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MDrsCalibResult */
static int G__DrsCint_353_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibResult* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibResult[n];
     } else {
       p = new((void*) gvp) MDrsCalibResult[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibResult;
     } else {
       p = new((void*) gvp) MDrsCalibResult;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<DrsCalibrate::Step>& obj = ((const MDrsCalibResult*) G__getstructoffset())->GetData();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MDrsCalibResult::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibResult::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MDrsCalibResult::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MDrsCalibResult::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibResult*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibResult::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibResult::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibResult::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_353_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibResult::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_353_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MDrsCalibResult* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MDrsCalibResult(*(MDrsCalibResult*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MDrsCalibResult G__TMDrsCalibResult;
static int G__DrsCint_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MDrsCalibResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MDrsCalibResult*) (soff+(sizeof(MDrsCalibResult)*i)))->~G__TMDrsCalibResult();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MDrsCalibResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MDrsCalibResult*) (soff))->~G__TMDrsCalibResult();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibResult* dest = (MDrsCalibResult*) G__getstructoffset();
   *dest = *(MDrsCalibResult*) libp->para[0].ref;
   const MDrsCalibResult& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MDrsCalibApply */
static int G__DrsCint_354_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibApply* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibApply((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MDrsCalibApply((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MDrsCalibApply((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MDrsCalibApply((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibApply[n];
       } else {
         p = new((void*) gvp) MDrsCalibApply[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MDrsCalibApply;
       } else {
         p = new((void*) gvp) MDrsCalibApply;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibApply*) G__getstructoffset())->SetMaxNumPrevEvents((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MDrsCalibApply*) G__getstructoffset())->SetRemoveSpikes((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MDrsCalibApply*) G__getstructoffset())->SetRemoveSpikes();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibApply*) G__getstructoffset())->SetSlidingAverage((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MDrsCalibApply::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibApply::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MDrsCalibApply::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MDrsCalibApply::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MDrsCalibApply*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibApply::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibApply::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MDrsCalibApply::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_354_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MDrsCalibApply::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_354_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MDrsCalibApply* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MDrsCalibApply(*(MDrsCalibApply*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MDrsCalibApply G__TMDrsCalibApply;
static int G__DrsCint_354_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MDrsCalibApply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MDrsCalibApply*) (soff+(sizeof(MDrsCalibApply)*i)))->~G__TMDrsCalibApply();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MDrsCalibApply*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MDrsCalibApply*) (soff))->~G__TMDrsCalibApply();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_354_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MDrsCalibApply* dest = (MDrsCalibApply*) G__getstructoffset();
   *dest = *(MDrsCalibApply*) libp->para[0].ref;
   const MDrsCalibApply& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHDrsCalibration */
static int G__DrsCint_419_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDrsCalibration* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHDrsCalibration((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibration((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHDrsCalibration((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibration[n];
       } else {
         p = new((void*) gvp) MHDrsCalibration[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibration;
       } else {
         p = new((void*) gvp) MHDrsCalibration;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MHDrsCalibration*) G__getstructoffset())->ResetSecondaryBaseline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDrsCalibration*) G__getstructoffset())->SetOutputPath((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const MHDrsCalibration*) G__getstructoffset())->GetNumUnderflows((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHDrsCalibration::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibration::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHDrsCalibration::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHDrsCalibration::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDrsCalibration*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibration::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibration::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibration::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_419_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibration::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_419_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHDrsCalibration* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHDrsCalibration(*(MHDrsCalibration*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHDrsCalibration G__TMHDrsCalibration;
static int G__DrsCint_419_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHDrsCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHDrsCalibration*) (soff+(sizeof(MHDrsCalibration)*i)))->~G__TMHDrsCalibration();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHDrsCalibration*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHDrsCalibration*) (soff))->~G__TMHDrsCalibration();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_419_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDrsCalibration* dest = (MHDrsCalibration*) G__getstructoffset();
   *dest = *(MHDrsCalibration*) libp->para[0].ref;
   const MHDrsCalibration& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHDrsCalibrationCheck */
static int G__DrsCint_421_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDrsCalibrationCheck* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibrationCheck((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHDrsCalibrationCheck((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibrationCheck((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHDrsCalibrationCheck((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibrationCheck[n];
       } else {
         p = new((void*) gvp) MHDrsCalibrationCheck[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibrationCheck;
       } else {
         p = new((void*) gvp) MHDrsCalibrationCheck;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHDrsCalibrationCheck::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationCheck::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHDrsCalibrationCheck::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHDrsCalibrationCheck::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDrsCalibrationCheck*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationCheck::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibrationCheck::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationCheck::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_421_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibrationCheck::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_421_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHDrsCalibrationCheck* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHDrsCalibrationCheck(*(MHDrsCalibrationCheck*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHDrsCalibrationCheck G__TMHDrsCalibrationCheck;
static int G__DrsCint_421_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHDrsCalibrationCheck*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHDrsCalibrationCheck*) (soff+(sizeof(MHDrsCalibrationCheck)*i)))->~G__TMHDrsCalibrationCheck();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHDrsCalibrationCheck*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHDrsCalibrationCheck*) (soff))->~G__TMHDrsCalibrationCheck();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DrsCint_421_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDrsCalibrationCheck* dest = (MHDrsCalibrationCheck*) G__getstructoffset();
   *dest = *(MHDrsCalibrationCheck*) libp->para[0].ref;
   const MHDrsCalibrationCheck& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MHDrsCalibrationTime */
static int G__DrsCint_422_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MHDrsCalibrationTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibrationTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MHDrsCalibrationTime((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MHDrsCalibrationTime((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MHDrsCalibrationTime((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibrationTime[n];
       } else {
         p = new((void*) gvp) MHDrsCalibrationTime[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new MHDrsCalibrationTime;
       } else {
         p = new((void*) gvp) MHDrsCalibrationTime;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDrsCalibrationTime*) G__getstructoffset())->PlotAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MHDrsCalibrationTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MHDrsCalibrationTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MHDrsCalibrationTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MHDrsCalibrationTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibrationTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MHDrsCalibrationTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DrsCint_422_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MHDrsCalibrationTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DrsCint_422_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MHDrsCalibrationTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MHDrsCalibrationTime(*(MHDrsCalibrationTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MHDrsCalibrationTime G__TMHDrsCalibrationTime;
static int G__DrsCint_422_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MHDrsCalibrationTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MHDrsCalibrationTime*) (soff+(sizeof(MHDrsCalibrationTime)*i)))->~G__TMHDrsCalibrationTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MHDrsCalibrationTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MHDrsCalibrationTime*) (soff))->~G__TMHDrsCalibrationTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MDrsCalibrationTime */

/* MCalibrateDrsTimes */

/* MDrsCalibration */

/* MDrsCalibResult */

/* MDrsCalibApply */

/* MHDrsCalibration */

/* MHDrsCalibrationCheck */

/* MHDrsCalibrationTime */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDrsCint {
 public:
  G__Sizep2memfuncDrsCint(): p(&G__Sizep2memfuncDrsCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDrsCint::*p)();
};

size_t G__get_sizep2memfuncDrsCint()
{
  G__Sizep2memfuncDrsCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDrsCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime))) {
     MDrsCalibrationTime *G__Lderived;
     G__Lderived=(MDrsCalibrationTime*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes))) {
     MCalibrateDrsTimes *G__Lderived;
     G__Lderived=(MCalibrateDrsTimes*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes),G__get_linked_tagnum(&G__DrsCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes),G__get_linked_tagnum(&G__DrsCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration))) {
     MDrsCalibration *G__Lderived;
     G__Lderived=(MDrsCalibration*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       DrsCalibration *G__Lpbase=(DrsCalibration*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_DrsCalibration),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult))) {
     MDrsCalibResult *G__Lderived;
     G__Lderived=(MDrsCalibResult*)0x1000;
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply))) {
     MDrsCalibApply *G__Lderived;
     G__Lderived=(MDrsCalibApply*)0x1000;
     {
       MTask *G__Lpbase=(MTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply),G__get_linked_tagnum(&G__DrsCintLN_MTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MInputStreamID *G__Lpbase=(MInputStreamID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply),G__get_linked_tagnum(&G__DrsCintLN_MInputStreamID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration))) {
     MHDrsCalibration *G__Lderived;
     G__Lderived=(MHDrsCalibration*)0x1000;
     {
       MHCamEvent *G__Lpbase=(MHCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_MHCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck))) {
     MHDrsCalibrationCheck *G__Lderived;
     G__Lderived=(MHDrsCalibrationCheck*)0x1000;
     {
       MHCamEvent *G__Lpbase=(MHCamEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck),G__get_linked_tagnum(&G__DrsCintLN_MHCamEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck),G__get_linked_tagnum(&G__DrsCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime))) {
     MHDrsCalibrationTime *G__Lderived;
     G__Lderived=(MHDrsCalibrationTime*)0x1000;
     {
       MH *G__Lpbase=(MH*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime),G__get_linked_tagnum(&G__DrsCintLN_MH),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       MParContainer *G__Lpbase=(MParContainer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime),G__get_linked_tagnum(&G__DrsCintLN_MParContainer),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime),G__get_linked_tagnum(&G__DrsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDrsCint() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint16_t",114,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint32_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned int>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<uint16_t>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<unsigned short>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<char>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Entry>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Entry>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,fits::Entry>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,fits::Entry,less<string> >",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Column>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Column>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,fits::Table::Column>",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,fits::Table::Column,less<string> >",117,G__get_linked_tagnum(&G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Column>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<fits::Table::Column>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<void*,Table::Column>",117,G__get_linked_tagnum(&G__DrsCintLN_pairlEvoidmUcOfitscLcLTablecLcLColumngR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Address>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<void*,fits::Table::Column> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("unordered_map<std::string,void*>",117,G__get_linked_tagnum(&G__DrsCintLN_unordered_maplEstringcOvoidmUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("unordered_map<string,void*>",117,G__get_linked_tagnum(&G__DrsCintLN_unordered_maplEstringcOvoidmUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<char> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<char,allocator<char> > >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Key>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ofits::Key>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Table::Column>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ofits::Table::Column>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,int>",117,G__get_linked_tagnum(&G__DrsCintLN_pairlEstringcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,int>",117,G__get_linked_tagnum(&G__DrsCintLN_pairlEstringcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int64_t>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlElongcOallocatorlElonggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlElongcOallocatorlElonggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<long>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Step>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<DrsCalibrate::Step>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<double>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::vector<double>,std::vector<double> >",117,G__get_linked_tagnum(&G__DrsCintLN_pairlEvectorlEdoublecOallocatorlEdoublegRsPgRcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<vector<double>,std::vector<double> >",117,G__get_linked_tagnum(&G__DrsCintLN_pairlEvectorlEdoublecOallocatorlEdoublegRsPgRcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<double,double> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int32_t>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<float>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Short_t>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DrsCintLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<short>",117,G__get_linked_tagnum(&G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<std::vector<Short_t> >",117,G__get_linked_tagnum(&G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<Short_t> >",117,G__get_linked_tagnum(&G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<short,allocator<short> > >",117,G__get_linked_tagnum(&G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__DrsCintLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__DrsCintLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__DrsCintLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__DrsCintLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MDrsCalibrationTime */
static void G__setup_memvarMDrsCalibrationTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime));
   { MDrsCalibrationTime *p; p=(MDrsCalibrationTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("int64_t"),-1,4,"fNumEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"fNumSamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"fNumChannels=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fOffsets=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fDelays=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MCalibrateDrsTimes */
static void G__setup_memvarMCalibrateDrsTimes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes));
   { MCalibrateDrsTimes *p; p=(MCalibrateDrsTimes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawEvtData),-1,-1,4,"fRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime),-1,-1,4,"fCalib=",0,"Calibration rel. time constants");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MBadPixelsCam),-1,-1,4,"fBadPixels=",0,"Bad Pixels information");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MArrivalTimeCam),-1,-1,4,"fSignals=",0,"Extracted Arrival Time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MSignalCam),-1,-1,4,"fArrivalTime=",0,"Calibrated arrival times");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MSignalCam),-1,-1,4,"fArrivalTimeU=",0,"Uncalibrated arrival times");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fFreq=",0,"! [MHz] Sampling Frequency");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_TString),-1,-1,4,"fNameArrivalTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_TString),-1,-1,4,"fNameCalibrated=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_TString),-1,-1,4,"fNameUncalibrated=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsTimeMarker=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MDrsCalibration */
static void G__setup_memvarMDrsCalibration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration));
   { MDrsCalibration *p; p=(MDrsCalibration*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MDrsCalibResult */
static void G__setup_memvarMDrsCalibResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult));
   { MDrsCalibResult *p; p=(MDrsCalibResult*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fData)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR),G__defined_typename("vector<DrsCalibrate::Step>"),-1,1,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MDrsCalibApply */
static void G__setup_memvarMDrsCalibApply(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply));
   { MDrsCalibApply *p; p=(MDrsCalibApply*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawRunHeader),-1,-1,4,"fRunHeader=",0,"! Run Header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawEvtData),-1,-1,4,"fRawEvt=",0,"! Input Raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration),-1,-1,4,"fDrsCalib=",0,"! DRS4 calibration data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MPedestalSubtractedEvt),-1,-1,4,"fSignal=",0,"! Output container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult),-1,-1,4,"fResult=",0,"! Output container");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR),G__defined_typename("list<std::vector<Short_t> >"),-1,4,"fPrevStart=",0,"! History for start cells of previous events");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fMaxNumPrevEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fRemoveSpikes=",0,(char*)NULL);
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fSlidingAverage=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHDrsCalibration */
static void G__setup_memvarMHDrsCalibration(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration));
   { MHDrsCalibration *p; p=(MHDrsCalibration*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawRunHeader),-1,-1,4,"fRun=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawEvtData),-1,-1,4,"fEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration),-1,-1,4,"fResult=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"fBuffer=",0,"! Compilation bufer for writing output files");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_DrsCalibrate),-1,-1,4,"fData=",0,"!");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fStep=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fScale=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumSamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_TString),-1,-1,4,"fOutputPath=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHDrsCalibrationCheck */
static void G__setup_memvarMHDrsCalibrationCheck(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck));
   { MHDrsCalibrationCheck *p; p=(MHDrsCalibrationCheck*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MPedestalSubtractedEvt),-1,-1,4,"fEvt=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fSum1=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fSum2=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumPixels=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumSamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MHDrsCalibrationTime */
static void G__setup_memvarMHDrsCalibrationTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime));
   { MHDrsCalibrationTime *p; p=(MHDrsCalibrationTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_TH2F),-1,-1,4,"fHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MRawEvtData),-1,-1,4,"fRaw=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MPedestalSubtractedEvt),-1,-1,4,"fEvt=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime),-1,-1,4,"fCal=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DrsCintLN_DrsCalibrateTime),-1,-1,4,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DrsCintLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDrsCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMDrsCalibrationTime(void) {
   /* MDrsCalibrationTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime));
   G__memfunc_setup("MDrsCalibrationTime",1901,G__DrsCint_179_0_1, 105, G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSize",815,G__DrsCint_179_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'uint16_t' 0 - channels r - 'uint16_t' 0 - samples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalibration",1428,G__DrsCint_179_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'DrsCalibrateTime' - 11 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDelays",910,G__DrsCint_179_0_4, 103, -1, -1, 0, 1, 1, 1, 0, "u 'TH1' - 11 - cam", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDelays",910,G__DrsCint_179_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TGraph' - 11 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__DrsCint_179_0_6, 100, -1, -1, 0, 3, 1, 1, 8, 
"h - 'uint32_t' 0 - hw h - 'uint32_t' 0 - spos "
"f - - 0 - tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDelay",783,G__DrsCint_179_0_7, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - hw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFits",786,G__DrsCint_179_0_8, 103, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteFits",929,G__DrsCint_179_0_9, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_179_0_10, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MDrsCalibrationTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_179_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibrationTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_179_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MDrsCalibrationTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_179_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MDrsCalibrationTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_179_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_179_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibrationTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_179_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibrationTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_179_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibrationTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_179_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibrationTime::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MDrsCalibrationTime", 1901, G__DrsCint_179_0_22, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime), -1, 0, 1, 1, 1, 0, "u 'MDrsCalibrationTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MDrsCalibrationTime", 2027, G__DrsCint_179_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_179_0_24, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibrationTime), -1, 1, 1, 1, 1, 0, "u 'MDrsCalibrationTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMCalibrateDrsTimes(void) {
   /* MCalibrateDrsTimes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MCalibrateDrsTimes",1791,G__DrsCint_184_0_4, 105, G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameArrivalTime",1805,G__DrsCint_184_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameCalibrated",1688,G__DrsCint_184_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameUncalibrated",1915,G__DrsCint_184_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimeMarker",1309,G__DrsCint_184_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_184_0_9, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCalibrateDrsTimes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_184_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateDrsTimes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_184_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCalibrateDrsTimes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_184_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCalibrateDrsTimes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_184_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_184_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateDrsTimes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_184_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateDrsTimes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_184_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCalibrateDrsTimes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_184_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCalibrateDrsTimes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCalibrateDrsTimes", 1791, G__DrsCint_184_0_21, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes), -1, 0, 1, 1, 1, 0, "u 'MCalibrateDrsTimes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCalibrateDrsTimes", 1917, G__DrsCint_184_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_184_0_23, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MCalibrateDrsTimes), -1, 1, 1, 1, 1, 0, "u 'MCalibrateDrsTimes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMDrsCalibration(void) {
   /* MDrsCalibration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration));
   G__memfunc_setup("MDrsCalibration",1502,G__DrsCint_352_0_1, 105, G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFits",786,G__DrsCint_352_0_2, 103, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Plot",415,G__DrsCint_352_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_352_0_4, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MDrsCalibration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_352_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_352_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MDrsCalibration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_352_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MDrsCalibration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_352_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_352_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_352_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_352_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_352_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibration::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MDrsCalibration", 1502, G__DrsCint_352_0_16, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration), -1, 0, 1, 1, 1, 0, "u 'MDrsCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MDrsCalibration", 1628, G__DrsCint_352_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_352_0_18, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibration), -1, 1, 1, 1, 1, 0, "u 'MDrsCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMDrsCalibResult(void) {
   /* MDrsCalibResult */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult));
   G__memfunc_setup("MDrsCalibResult",1488,G__DrsCint_353_0_1, 105, G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__DrsCint_353_0_2, 117, G__get_linked_tagnum(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR), G__defined_typename("vector<DrsCalibrate::Step>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_353_0_3, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MDrsCalibResult::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_353_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibResult::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_353_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MDrsCalibResult::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_353_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MDrsCalibResult::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_353_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_353_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibResult::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_353_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibResult::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_353_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibResult::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_353_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibResult::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MDrsCalibResult", 1488, G__DrsCint_353_0_15, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult), -1, 0, 1, 1, 1, 0, "u 'MDrsCalibResult' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MDrsCalibResult", 1614, G__DrsCint_353_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_353_0_17, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibResult), -1, 1, 1, 1, 1, 0, "u 'MDrsCalibResult' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMDrsCalibApply(void) {
   /* MDrsCalibApply */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply));
   G__memfunc_setup("PreProcess",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'MParList' - 0 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MDrsCalibApply",1367,G__DrsCint_354_0_4, 105, G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxNumPrevEvents",1940,G__DrsCint_354_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRemoveSpikes",1545,G__DrsCint_354_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSlidingAverage",1713,G__DrsCint_354_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_354_0_8, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MDrsCalibApply::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_354_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibApply::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_354_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MDrsCalibApply::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_354_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MDrsCalibApply::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_354_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_354_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibApply::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_354_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibApply::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_354_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MDrsCalibApply::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_354_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MDrsCalibApply::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MDrsCalibApply", 1367, G__DrsCint_354_0_20, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply), -1, 0, 1, 1, 1, 0, "u 'MDrsCalibApply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MDrsCalibApply", 1493, G__DrsCint_354_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_354_0_22, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MDrsCalibApply), -1, 1, 1, 1, 1, 0, "u 'MDrsCalibApply' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHDrsCalibration(void) {
   /* MHDrsCalibration */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration));
   G__memfunc_setup("InitHistogram",1346,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHDrsCalibration",1574,G__DrsCint_419_0_2, 105, G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetSecondaryBaseline",2254,G__DrsCint_419_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputPath",1354,G__DrsCint_419_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumUnderflows",1657,G__DrsCint_419_0_10, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "f - - 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_419_0_11, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHDrsCalibration::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_419_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibration::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_419_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHDrsCalibration::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_419_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHDrsCalibration::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_419_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_419_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibration::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_419_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibration::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_419_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibration::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_419_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibration::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHDrsCalibration", 1574, G__DrsCint_419_0_23, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration), -1, 0, 1, 1, 1, 0, "u 'MHDrsCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHDrsCalibration", 1700, G__DrsCint_419_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_419_0_25, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibration), -1, 1, 1, 1, 1, 0, "u 'MHDrsCalibration' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHDrsCalibrationCheck(void) {
   /* MHDrsCalibrationCheck */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck));
   G__memfunc_setup("InitHistogram",1346,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHDrsCalibrationCheck",2052,G__DrsCint_421_0_2, 105, G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DrsCint_421_0_8, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHDrsCalibrationCheck::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_421_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationCheck::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_421_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHDrsCalibrationCheck::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_421_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHDrsCalibrationCheck::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_421_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_421_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationCheck::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_421_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibrationCheck::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_421_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationCheck::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_421_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibrationCheck::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHDrsCalibrationCheck", 2052, G__DrsCint_421_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck), -1, 0, 1, 1, 1, 0, "u 'MHDrsCalibrationCheck' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHDrsCalibrationCheck", 2178, G__DrsCint_421_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DrsCint_421_0_22, (int) ('u'), G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationCheck), -1, 1, 1, 1, 1, 0, "u 'MHDrsCalibrationCheck' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMHDrsCalibrationTime(void) {
   /* MHDrsCalibrationTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime));
   G__memfunc_setup("InitHistogram",1346,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MHDrsCalibrationTime",1973,G__DrsCint_422_0_2, 105, G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetupFill",920,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 10 - pList", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'MParList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'MParContainer' - 10 - par d - 'Stat_t' 10 '1' w", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finalize",818,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Paint",508,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' o", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PlotAll",696,G__DrsCint_422_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DrsCint_422_0_10, 85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MHDrsCalibrationTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DrsCint_422_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DrsCint_422_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MHDrsCalibrationTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DrsCint_422_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MHDrsCalibrationTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DrsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DrsCint_422_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DrsCint_422_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DrsCint_422_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibrationTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DrsCint_422_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MHDrsCalibrationTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DrsCint_422_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MHDrsCalibrationTime::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MHDrsCalibrationTime", 1973, G__DrsCint_422_0_22, (int) ('i'), G__get_linked_tagnum(&G__DrsCintLN_MHDrsCalibrationTime), -1, 0, 1, 1, 1, 0, "u 'MHDrsCalibrationTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MHDrsCalibrationTime", 2099, G__DrsCint_422_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDrsCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDrsCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDrsCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DrsCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DrsCintLN_MParContainer = { "MParContainer" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MInputStreamID = { "MInputStreamID" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MParList = { "MParList" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MTask = { "MTask" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MBadPixelsCam = { "MBadPixelsCam" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MDrsCalibrationTime = { "MDrsCalibrationTime" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MArrivalTimeCam = { "MArrivalTimeCam" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MRawRunHeader = { "MRawRunHeader" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MRawEvtData = { "MRawEvtData" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MSignalCam = { "MSignalCam" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MCalibrateDrsTimes = { "MCalibrateDrsTimes" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned short,allocator<unsigned short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR = { "vector<char,allocator<char> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR = { "reverse_iterator<vector<char,allocator<char> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR = { "map<string,fits::Entry,less<string>,allocator<pair<const string,fits::Entry> > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR = { "map<string,fits::Table::Column,less<string>,allocator<pair<const string,fits::Table::Column> > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR = { "vector<fits::Table::Column,allocator<fits::Table::Column> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgRcLcLiteratorgR = { "reverse_iterator<vector<fits::Table::Column,allocator<fits::Table::Column> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_pairlEvoidmUcOfitscLcLTablecLcLColumngR = { "pair<void*,fits::Table::Column>" , 115 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR = { "vector<pair<void*,fits::Table::Column>,allocator<pair<void*,fits::Table::Column> > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<void*,fits::Table::Column>,allocator<pair<void*,fits::Table::Column> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_unordered_maplEstringcOvoidmUgR = { "unordered_map<string,void*>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR = { "vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<char,allocator<char> >,allocator<vector<char,allocator<char> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR = { "vector<ofits::Key,allocator<ofits::Key> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ofits::Key,allocator<ofits::Key> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR = { "vector<ofits::Table::Column,allocator<ofits::Table::Column> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ofits::Table::Column,allocator<ofits::Table::Column> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_pairlEstringcOintgR = { "pair<string,int>" , 115 , -1 };
G__linked_taginfo G__DrsCintLN_DrsCalibrate = { "DrsCalibrate" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR = { "vector<long,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlElongcOallocatorlElonggRsPgRcLcLiteratorgR = { "reverse_iterator<vector<long,allocator<long> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR = { "vector<DrsCalibrate::Step,allocator<DrsCalibrate::Step> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<DrsCalibrate::Step,allocator<DrsCalibrate::Step> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<double,allocator<double> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_pairlEvectorlEdoublecOallocatorlEdoublegRsPgRcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR = { "pair<vector<double,allocator<double> >,vector<double,allocator<double> > >" , 115 , -1 };
G__linked_taginfo G__DrsCintLN_DrsCalibrateTime = { "DrsCalibrateTime" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_DrsCalibration = { "DrsCalibration" , 115 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MPedestalSubtractedEvt = { "MPedestalSubtractedEvt" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MDrsCalibration = { "MDrsCalibration" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MDrsCalibResult = { "MDrsCalibResult" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MDrsCalibApply = { "MDrsCalibApply" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<short,allocator<short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR = { "list<vector<short,allocator<short> >,allocator<vector<short,allocator<short> > > >" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MH = { "MH" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MHCamEvent = { "MHCamEvent" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MHDrsCalibration = { "MHDrsCalibration" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MHDrsCalibrationCheck = { "MHDrsCalibrationCheck" , 99 , -1 };
G__linked_taginfo G__DrsCintLN_MHDrsCalibrationTime = { "MHDrsCalibrationTime" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDrsCint() {
  G__DrsCintLN_TClass.tagnum = -1 ;
  G__DrsCintLN_TBuffer.tagnum = -1 ;
  G__DrsCintLN_TMemberInspector.tagnum = -1 ;
  G__DrsCintLN_TObject.tagnum = -1 ;
  G__DrsCintLN_TString.tagnum = -1 ;
  G__DrsCintLN_string.tagnum = -1 ;
  G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DrsCintLN_MParContainer.tagnum = -1 ;
  G__DrsCintLN_MInputStreamID.tagnum = -1 ;
  G__DrsCintLN_MParList.tagnum = -1 ;
  G__DrsCintLN_MTask.tagnum = -1 ;
  G__DrsCintLN_MBadPixelsCam.tagnum = -1 ;
  G__DrsCintLN_MDrsCalibrationTime.tagnum = -1 ;
  G__DrsCintLN_MArrivalTimeCam.tagnum = -1 ;
  G__DrsCintLN_MRawRunHeader.tagnum = -1 ;
  G__DrsCintLN_MRawEvtData.tagnum = -1 ;
  G__DrsCintLN_MSignalCam.tagnum = -1 ;
  G__DrsCintLN_MCalibrateDrsTimes.tagnum = -1 ;
  G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_pairlEvoidmUcOfitscLcLTablecLcLColumngR.tagnum = -1 ;
  G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_unordered_maplEstringcOvoidmUgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_pairlEstringcOintgR.tagnum = -1 ;
  G__DrsCintLN_DrsCalibrate.tagnum = -1 ;
  G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlElongcOallocatorlElonggRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_pairlEvectorlEdoublecOallocatorlEdoublegRsPgRcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_DrsCalibrateTime.tagnum = -1 ;
  G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_DrsCalibration.tagnum = -1 ;
  G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_MPedestalSubtractedEvt.tagnum = -1 ;
  G__DrsCintLN_MDrsCalibration.tagnum = -1 ;
  G__DrsCintLN_MDrsCalibResult.tagnum = -1 ;
  G__DrsCintLN_MDrsCalibApply.tagnum = -1 ;
  G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__DrsCintLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DrsCintLN_TH1.tagnum = -1 ;
  G__DrsCintLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__DrsCintLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__DrsCintLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__DrsCintLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__DrsCintLN_TH2F.tagnum = -1 ;
  G__DrsCintLN_MH.tagnum = -1 ;
  G__DrsCintLN_MHCamEvent.tagnum = -1 ;
  G__DrsCintLN_MHDrsCalibration.tagnum = -1 ;
  G__DrsCintLN_TGraph.tagnum = -1 ;
  G__DrsCintLN_MHDrsCalibrationCheck.tagnum = -1 ;
  G__DrsCintLN_MHDrsCalibrationTime.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDrsCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TString);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_string);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MParContainer);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MInputStreamID);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MParList);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MTask);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MBadPixelsCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MDrsCalibrationTime),sizeof(MDrsCalibrationTime),-1,323840,"A list of histograms storing the Fadc spektrum of one pixel",G__setup_memvarMDrsCalibrationTime,G__setup_memfuncMDrsCalibrationTime);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MArrivalTimeCam);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MRawRunHeader);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MRawEvtData);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MSignalCam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MCalibrateDrsTimes),sizeof(MCalibrateDrsTimes),-1,323840,"Task to calculate calibrated relative arrival times",G__setup_memvarMCalibrateDrsTimes,G__setup_memfuncMCalibrateDrsTimes);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEcharcOallocatorlEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEcharcOallocatorlEchargRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_maplEstringcOfitscLcLEntrycOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLEntrygRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_maplEstringcOfitscLcLTablecLcLColumncOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfitscLcLTablecLcLColumngRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEfitscLcLTablecLcLColumncOallocatorlEfitscLcLTablecLcLColumngRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_pairlEvoidmUcOfitscLcLTablecLcLColumngR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRcOallocatorlEpairlEvoidmUcOfitscLcLTablecLcLColumngRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_unordered_maplEstringcOvoidmUgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEvectorlEcharcOallocatorlEchargRsPgRcOallocatorlEvectorlEcharcOallocatorlEchargRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLKeycOallocatorlEofitscLcLKeygRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEofitscLcLTablecLcLColumncOallocatorlEofitscLcLTablecLcLColumngRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_pairlEstringcOintgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_DrsCalibrate);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlElongcOallocatorlElonggRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlElongcOallocatorlElonggRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEDrsCalibratecLcLStepcOallocatorlEDrsCalibratecLcLStepgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_pairlEvectorlEdoublecOallocatorlEdoublegRsPgRcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_DrsCalibrateTime);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_DrsCalibration);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MPedestalSubtractedEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MDrsCalibration),sizeof(MDrsCalibration),-1,323840,(char*)NULL,G__setup_memvarMDrsCalibration,G__setup_memfuncMDrsCalibration);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MDrsCalibResult),sizeof(MDrsCalibResult),-1,323840,(char*)NULL,G__setup_memvarMDrsCalibResult,G__setup_memfuncMDrsCalibResult);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MDrsCalibApply),sizeof(MDrsCalibApply),-1,323840,"Class to subtract pedestal including AB-noise",G__setup_memvarMDrsCalibApply,G__setup_memfuncMDrsCalibApply);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_listlEvectorlEshortcOallocatorlEshortgRsPgRcOallocatorlEvectorlEshortcOallocatorlEshortgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TH1);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TH2F);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MH);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_MHCamEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MHDrsCalibration),sizeof(MHDrsCalibration),-1,323840,"A list of histograms storing the Fadc spektrum of one pixel",G__setup_memvarMHDrsCalibration,G__setup_memfuncMHDrsCalibration);
   G__get_linked_tagnum_fwd(&G__DrsCintLN_TGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MHDrsCalibrationCheck),sizeof(MHDrsCalibrationCheck),-1,323840,"A list of histograms storing the Fadc spektrum of one pixel",G__setup_memvarMHDrsCalibrationCheck,G__setup_memfuncMHDrsCalibrationCheck);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DrsCintLN_MHDrsCalibrationTime),sizeof(MHDrsCalibrationTime),-1,323840,"A list of histograms storing the Fadc spektrum of one pixel",G__setup_memvarMHDrsCalibrationTime,G__setup_memfuncMHDrsCalibrationTime);
}
extern "C" void G__cpp_setupDrsCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupDrsCint()");
  G__set_cpp_environmentDrsCint();
  G__cpp_setup_tagtableDrsCint();

  G__cpp_setup_inheritanceDrsCint();

  G__cpp_setup_typetableDrsCint();

  G__cpp_setup_memvarDrsCint();

  G__cpp_setup_memfuncDrsCint();
  G__cpp_setup_globalDrsCint();
  G__cpp_setup_funcDrsCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDrsCint();
  return;
}
class G__cpp_setup_initDrsCint {
  public:
    G__cpp_setup_initDrsCint() { G__add_setup_func("DrsCint",(G__incsetup)(&G__cpp_setupDrsCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDrsCint() { G__remove_setup_func("DrsCint"); }
};
G__cpp_setup_initDrsCint G__cpp_setup_initializerDrsCint;

